"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataprocMetastoreService = exports.DataprocMetastoreServiceTimeoutsOutputReference = exports.dataprocMetastoreServiceTimeoutsToTerraform = exports.DataprocMetastoreServiceTelemetryConfigOutputReference = exports.dataprocMetastoreServiceTelemetryConfigToTerraform = exports.DataprocMetastoreServiceNetworkConfigOutputReference = exports.dataprocMetastoreServiceNetworkConfigToTerraform = exports.DataprocMetastoreServiceNetworkConfigConsumersList = exports.DataprocMetastoreServiceNetworkConfigConsumersOutputReference = exports.dataprocMetastoreServiceNetworkConfigConsumersToTerraform = exports.DataprocMetastoreServiceMaintenanceWindowOutputReference = exports.dataprocMetastoreServiceMaintenanceWindowToTerraform = exports.DataprocMetastoreServiceHiveMetastoreConfigOutputReference = exports.dataprocMetastoreServiceHiveMetastoreConfigToTerraform = exports.DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigOutputReference = exports.dataprocMetastoreServiceHiveMetastoreConfigKerberosConfigToTerraform = exports.DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabOutputReference = exports.dataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabToTerraform = exports.DataprocMetastoreServiceEncryptionConfigOutputReference = exports.dataprocMetastoreServiceEncryptionConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataprocMetastoreServiceEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key: cdktf.stringToTerraform(struct.kmsKey),
    };
}
exports.dataprocMetastoreServiceEncryptionConfigToTerraform = dataprocMetastoreServiceEncryptionConfigToTerraform;
class DataprocMetastoreServiceEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKey = this._kmsKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKey = value.kmsKey;
        }
    }
    get kmsKey() {
        return this.getStringAttribute('kms_key');
    }
    set kmsKey(value) {
        this._kmsKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyInput() {
        return this._kmsKey;
    }
}
exports.DataprocMetastoreServiceEncryptionConfigOutputReference = DataprocMetastoreServiceEncryptionConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataprocMetastoreServiceEncryptionConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.dataprocMetastoreService.DataprocMetastoreServiceEncryptionConfigOutputReference", version: "5.0.1" };
function dataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_secret: cdktf.stringToTerraform(struct.cloudSecret),
    };
}
exports.dataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabToTerraform = dataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabToTerraform;
class DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudSecret = this._cloudSecret;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudSecret = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudSecret = value.cloudSecret;
        }
    }
    get cloudSecret() {
        return this.getStringAttribute('cloud_secret');
    }
    set cloudSecret(value) {
        this._cloudSecret = value;
    }
    // Temporarily expose input value. Use with caution.
    get cloudSecretInput() {
        return this._cloudSecret;
    }
}
exports.DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabOutputReference = DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabOutputReference[_b] = { fqn: "@cdktf/provider-google.dataprocMetastoreService.DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabOutputReference", version: "5.0.1" };
function dataprocMetastoreServiceHiveMetastoreConfigKerberosConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        krb5_config_gcs_uri: cdktf.stringToTerraform(struct.krb5ConfigGcsUri),
        principal: cdktf.stringToTerraform(struct.principal),
        keytab: dataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabToTerraform(struct.keytab),
    };
}
exports.dataprocMetastoreServiceHiveMetastoreConfigKerberosConfigToTerraform = dataprocMetastoreServiceHiveMetastoreConfigKerberosConfigToTerraform;
class DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // keytab - computed: false, optional: false, required: true
        this._keytab = new DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigKeytabOutputReference(this, "keytab");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._krb5ConfigGcsUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.krb5ConfigGcsUri = this._krb5ConfigGcsUri;
        }
        if (this._principal !== undefined) {
            hasAnyValues = true;
            internalValueResult.principal = this._principal;
        }
        if (this._keytab?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.keytab = this._keytab?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._krb5ConfigGcsUri = undefined;
            this._principal = undefined;
            this._keytab.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._krb5ConfigGcsUri = value.krb5ConfigGcsUri;
            this._principal = value.principal;
            this._keytab.internalValue = value.keytab;
        }
    }
    get krb5ConfigGcsUri() {
        return this.getStringAttribute('krb5_config_gcs_uri');
    }
    set krb5ConfigGcsUri(value) {
        this._krb5ConfigGcsUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get krb5ConfigGcsUriInput() {
        return this._krb5ConfigGcsUri;
    }
    get principal() {
        return this.getStringAttribute('principal');
    }
    set principal(value) {
        this._principal = value;
    }
    // Temporarily expose input value. Use with caution.
    get principalInput() {
        return this._principal;
    }
    get keytab() {
        return this._keytab;
    }
    putKeytab(value) {
        this._keytab.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get keytabInput() {
        return this._keytab.internalValue;
    }
}
exports.DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigOutputReference = DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigOutputReference[_c] = { fqn: "@cdktf/provider-google.dataprocMetastoreService.DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigOutputReference", version: "5.0.1" };
function dataprocMetastoreServiceHiveMetastoreConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        config_overrides: cdktf.hashMapper(cdktf.stringToTerraform)(struct.configOverrides),
        version: cdktf.stringToTerraform(struct.version),
        kerberos_config: dataprocMetastoreServiceHiveMetastoreConfigKerberosConfigToTerraform(struct.kerberosConfig),
    };
}
exports.dataprocMetastoreServiceHiveMetastoreConfigToTerraform = dataprocMetastoreServiceHiveMetastoreConfigToTerraform;
class DataprocMetastoreServiceHiveMetastoreConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kerberos_config - computed: false, optional: true, required: false
        this._kerberosConfig = new DataprocMetastoreServiceHiveMetastoreConfigKerberosConfigOutputReference(this, "kerberos_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._configOverrides !== undefined) {
            hasAnyValues = true;
            internalValueResult.configOverrides = this._configOverrides;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._kerberosConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kerberosConfig = this._kerberosConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._configOverrides = undefined;
            this._version = undefined;
            this._kerberosConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._configOverrides = value.configOverrides;
            this._version = value.version;
            this._kerberosConfig.internalValue = value.kerberosConfig;
        }
    }
    get configOverrides() {
        return this.getStringMapAttribute('config_overrides');
    }
    set configOverrides(value) {
        this._configOverrides = value;
    }
    resetConfigOverrides() {
        this._configOverrides = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configOverridesInput() {
        return this._configOverrides;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get kerberosConfig() {
        return this._kerberosConfig;
    }
    putKerberosConfig(value) {
        this._kerberosConfig.internalValue = value;
    }
    resetKerberosConfig() {
        this._kerberosConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kerberosConfigInput() {
        return this._kerberosConfig.internalValue;
    }
}
exports.DataprocMetastoreServiceHiveMetastoreConfigOutputReference = DataprocMetastoreServiceHiveMetastoreConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataprocMetastoreServiceHiveMetastoreConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.dataprocMetastoreService.DataprocMetastoreServiceHiveMetastoreConfigOutputReference", version: "5.0.1" };
function dataprocMetastoreServiceMaintenanceWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day_of_week: cdktf.stringToTerraform(struct.dayOfWeek),
        hour_of_day: cdktf.numberToTerraform(struct.hourOfDay),
    };
}
exports.dataprocMetastoreServiceMaintenanceWindowToTerraform = dataprocMetastoreServiceMaintenanceWindowToTerraform;
class DataprocMetastoreServiceMaintenanceWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dayOfWeek !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfWeek = this._dayOfWeek;
        }
        if (this._hourOfDay !== undefined) {
            hasAnyValues = true;
            internalValueResult.hourOfDay = this._hourOfDay;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dayOfWeek = undefined;
            this._hourOfDay = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dayOfWeek = value.dayOfWeek;
            this._hourOfDay = value.hourOfDay;
        }
    }
    get dayOfWeek() {
        return this.getStringAttribute('day_of_week');
    }
    set dayOfWeek(value) {
        this._dayOfWeek = value;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekInput() {
        return this._dayOfWeek;
    }
    get hourOfDay() {
        return this.getNumberAttribute('hour_of_day');
    }
    set hourOfDay(value) {
        this._hourOfDay = value;
    }
    // Temporarily expose input value. Use with caution.
    get hourOfDayInput() {
        return this._hourOfDay;
    }
}
exports.DataprocMetastoreServiceMaintenanceWindowOutputReference = DataprocMetastoreServiceMaintenanceWindowOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataprocMetastoreServiceMaintenanceWindowOutputReference[_e] = { fqn: "@cdktf/provider-google.dataprocMetastoreService.DataprocMetastoreServiceMaintenanceWindowOutputReference", version: "5.0.1" };
function dataprocMetastoreServiceNetworkConfigConsumersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        subnetwork: cdktf.stringToTerraform(struct.subnetwork),
    };
}
exports.dataprocMetastoreServiceNetworkConfigConsumersToTerraform = dataprocMetastoreServiceNetworkConfigConsumersToTerraform;
class DataprocMetastoreServiceNetworkConfigConsumersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._subnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetwork = this._subnetwork;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._subnetwork = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._subnetwork = value.subnetwork;
        }
    }
    // endpoint_uri - computed: true, optional: false, required: false
    get endpointUri() {
        return this.getStringAttribute('endpoint_uri');
    }
    get subnetwork() {
        return this.getStringAttribute('subnetwork');
    }
    set subnetwork(value) {
        this._subnetwork = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkInput() {
        return this._subnetwork;
    }
}
exports.DataprocMetastoreServiceNetworkConfigConsumersOutputReference = DataprocMetastoreServiceNetworkConfigConsumersOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataprocMetastoreServiceNetworkConfigConsumersOutputReference[_f] = { fqn: "@cdktf/provider-google.dataprocMetastoreService.DataprocMetastoreServiceNetworkConfigConsumersOutputReference", version: "5.0.1" };
class DataprocMetastoreServiceNetworkConfigConsumersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocMetastoreServiceNetworkConfigConsumersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocMetastoreServiceNetworkConfigConsumersList = DataprocMetastoreServiceNetworkConfigConsumersList;
_g = JSII_RTTI_SYMBOL_1;
DataprocMetastoreServiceNetworkConfigConsumersList[_g] = { fqn: "@cdktf/provider-google.dataprocMetastoreService.DataprocMetastoreServiceNetworkConfigConsumersList", version: "5.0.1" };
function dataprocMetastoreServiceNetworkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        consumers: cdktf.listMapper(dataprocMetastoreServiceNetworkConfigConsumersToTerraform, true)(struct.consumers),
    };
}
exports.dataprocMetastoreServiceNetworkConfigToTerraform = dataprocMetastoreServiceNetworkConfigToTerraform;
class DataprocMetastoreServiceNetworkConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // consumers - computed: false, optional: false, required: true
        this._consumers = new DataprocMetastoreServiceNetworkConfigConsumersList(this, "consumers", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._consumers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.consumers = this._consumers?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._consumers.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._consumers.internalValue = value.consumers;
        }
    }
    get consumers() {
        return this._consumers;
    }
    putConsumers(value) {
        this._consumers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get consumersInput() {
        return this._consumers.internalValue;
    }
}
exports.DataprocMetastoreServiceNetworkConfigOutputReference = DataprocMetastoreServiceNetworkConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DataprocMetastoreServiceNetworkConfigOutputReference[_h] = { fqn: "@cdktf/provider-google.dataprocMetastoreService.DataprocMetastoreServiceNetworkConfigOutputReference", version: "5.0.1" };
function dataprocMetastoreServiceTelemetryConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        log_format: cdktf.stringToTerraform(struct.logFormat),
    };
}
exports.dataprocMetastoreServiceTelemetryConfigToTerraform = dataprocMetastoreServiceTelemetryConfigToTerraform;
class DataprocMetastoreServiceTelemetryConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._logFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.logFormat = this._logFormat;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._logFormat = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._logFormat = value.logFormat;
        }
    }
    get logFormat() {
        return this.getStringAttribute('log_format');
    }
    set logFormat(value) {
        this._logFormat = value;
    }
    resetLogFormat() {
        this._logFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logFormatInput() {
        return this._logFormat;
    }
}
exports.DataprocMetastoreServiceTelemetryConfigOutputReference = DataprocMetastoreServiceTelemetryConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataprocMetastoreServiceTelemetryConfigOutputReference[_j] = { fqn: "@cdktf/provider-google.dataprocMetastoreService.DataprocMetastoreServiceTelemetryConfigOutputReference", version: "5.0.1" };
function dataprocMetastoreServiceTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dataprocMetastoreServiceTimeoutsToTerraform = dataprocMetastoreServiceTimeoutsToTerraform;
class DataprocMetastoreServiceTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DataprocMetastoreServiceTimeoutsOutputReference = DataprocMetastoreServiceTimeoutsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataprocMetastoreServiceTimeoutsOutputReference[_k] = { fqn: "@cdktf/provider-google.dataprocMetastoreService.DataprocMetastoreServiceTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/dataproc_metastore_service google_dataproc_metastore_service}
*/
class DataprocMetastoreService extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/dataproc_metastore_service google_dataproc_metastore_service} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataprocMetastoreServiceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_dataproc_metastore_service',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // encryption_config - computed: false, optional: true, required: false
        this._encryptionConfig = new DataprocMetastoreServiceEncryptionConfigOutputReference(this, "encryption_config");
        // hive_metastore_config - computed: false, optional: true, required: false
        this._hiveMetastoreConfig = new DataprocMetastoreServiceHiveMetastoreConfigOutputReference(this, "hive_metastore_config");
        // maintenance_window - computed: false, optional: true, required: false
        this._maintenanceWindow = new DataprocMetastoreServiceMaintenanceWindowOutputReference(this, "maintenance_window");
        // network_config - computed: false, optional: true, required: false
        this._networkConfig = new DataprocMetastoreServiceNetworkConfigOutputReference(this, "network_config");
        // telemetry_config - computed: false, optional: true, required: false
        this._telemetryConfig = new DataprocMetastoreServiceTelemetryConfigOutputReference(this, "telemetry_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DataprocMetastoreServiceTimeoutsOutputReference(this, "timeouts");
        this._databaseType = config.databaseType;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._network = config.network;
        this._port = config.port;
        this._project = config.project;
        this._releaseChannel = config.releaseChannel;
        this._serviceId = config.serviceId;
        this._tier = config.tier;
        this._encryptionConfig.internalValue = config.encryptionConfig;
        this._hiveMetastoreConfig.internalValue = config.hiveMetastoreConfig;
        this._maintenanceWindow.internalValue = config.maintenanceWindow;
        this._networkConfig.internalValue = config.networkConfig;
        this._telemetryConfig.internalValue = config.telemetryConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // artifact_gcs_uri - computed: true, optional: false, required: false
    get artifactGcsUri() {
        return this.getStringAttribute('artifact_gcs_uri');
    }
    get databaseType() {
        return this.getStringAttribute('database_type');
    }
    set databaseType(value) {
        this._databaseType = value;
    }
    resetDatabaseType() {
        this._databaseType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseTypeInput() {
        return this._databaseType;
    }
    // endpoint_uri - computed: true, optional: false, required: false
    get endpointUri() {
        return this.getStringAttribute('endpoint_uri');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get network() {
        return this.getStringAttribute('network');
    }
    set network(value) {
        this._network = value;
    }
    resetNetwork() {
        this._network = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get releaseChannel() {
        return this.getStringAttribute('release_channel');
    }
    set releaseChannel(value) {
        this._releaseChannel = value;
    }
    resetReleaseChannel() {
        this._releaseChannel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get releaseChannelInput() {
        return this._releaseChannel;
    }
    get serviceId() {
        return this.getStringAttribute('service_id');
    }
    set serviceId(value) {
        this._serviceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceIdInput() {
        return this._serviceId;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // state_message - computed: true, optional: false, required: false
    get stateMessage() {
        return this.getStringAttribute('state_message');
    }
    get tier() {
        return this.getStringAttribute('tier');
    }
    set tier(value) {
        this._tier = value;
    }
    resetTier() {
        this._tier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tierInput() {
        return this._tier;
    }
    // uid - computed: true, optional: false, required: false
    get uid() {
        return this.getStringAttribute('uid');
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    resetEncryptionConfig() {
        this._encryptionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
    get hiveMetastoreConfig() {
        return this._hiveMetastoreConfig;
    }
    putHiveMetastoreConfig(value) {
        this._hiveMetastoreConfig.internalValue = value;
    }
    resetHiveMetastoreConfig() {
        this._hiveMetastoreConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hiveMetastoreConfigInput() {
        return this._hiveMetastoreConfig.internalValue;
    }
    get maintenanceWindow() {
        return this._maintenanceWindow;
    }
    putMaintenanceWindow(value) {
        this._maintenanceWindow.internalValue = value;
    }
    resetMaintenanceWindow() {
        this._maintenanceWindow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowInput() {
        return this._maintenanceWindow.internalValue;
    }
    get networkConfig() {
        return this._networkConfig;
    }
    putNetworkConfig(value) {
        this._networkConfig.internalValue = value;
    }
    resetNetworkConfig() {
        this._networkConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkConfigInput() {
        return this._networkConfig.internalValue;
    }
    get telemetryConfig() {
        return this._telemetryConfig;
    }
    putTelemetryConfig(value) {
        this._telemetryConfig.internalValue = value;
    }
    resetTelemetryConfig() {
        this._telemetryConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get telemetryConfigInput() {
        return this._telemetryConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            database_type: cdktf.stringToTerraform(this._databaseType),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            network: cdktf.stringToTerraform(this._network),
            port: cdktf.numberToTerraform(this._port),
            project: cdktf.stringToTerraform(this._project),
            release_channel: cdktf.stringToTerraform(this._releaseChannel),
            service_id: cdktf.stringToTerraform(this._serviceId),
            tier: cdktf.stringToTerraform(this._tier),
            encryption_config: dataprocMetastoreServiceEncryptionConfigToTerraform(this._encryptionConfig.internalValue),
            hive_metastore_config: dataprocMetastoreServiceHiveMetastoreConfigToTerraform(this._hiveMetastoreConfig.internalValue),
            maintenance_window: dataprocMetastoreServiceMaintenanceWindowToTerraform(this._maintenanceWindow.internalValue),
            network_config: dataprocMetastoreServiceNetworkConfigToTerraform(this._networkConfig.internalValue),
            telemetry_config: dataprocMetastoreServiceTelemetryConfigToTerraform(this._telemetryConfig.internalValue),
            timeouts: dataprocMetastoreServiceTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.DataprocMetastoreService = DataprocMetastoreService;
_l = JSII_RTTI_SYMBOL_1;
DataprocMetastoreService[_l] = { fqn: "@cdktf/provider-google.dataprocMetastoreService.DataprocMetastoreService", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
DataprocMetastoreService.tfResourceType = "google_dataproc_metastore_service";
//# sourceMappingURL=data:application/json;base64,