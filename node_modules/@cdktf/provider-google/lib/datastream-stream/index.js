"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatastreamStream = exports.DatastreamStreamTimeoutsOutputReference = exports.datastreamStreamTimeoutsToTerraform = exports.DatastreamStreamSourceConfigOutputReference = exports.datastreamStreamSourceConfigToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = exports.DatastreamStreamDestinationConfigOutputReference = exports.datastreamStreamDestinationConfigToTerraform = exports.DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference = exports.datastreamStreamDestinationConfigGcsDestinationConfigToTerraform = exports.DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference = exports.datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToTerraform = exports.DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference = exports.datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToTerraform = exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigToTerraform = exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToTerraform = exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToTerraform = exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToTerraform = exports.DatastreamStreamBackfillNoneOutputReference = exports.datastreamStreamBackfillNoneToTerraform = exports.DatastreamStreamBackfillAllOutputReference = exports.datastreamStreamBackfillAllToTerraform = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference = exports.datastreamStreamBackfillAllMysqlExcludedObjectsToTerraform = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference = exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToTerraform = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference = exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToTerraform = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        collation: cdktf.stringToTerraform(struct.collation),
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
        nullable: cdktf.booleanToTerraform(struct.nullable),
        ordinal_position: cdktf.numberToTerraform(struct.ordinalPosition),
        primary_key: cdktf.booleanToTerraform(struct.primaryKey),
    };
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform;
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._collation !== undefined) {
            hasAnyValues = true;
            internalValueResult.collation = this._collation;
        }
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        if (this._nullable !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullable = this._nullable;
        }
        if (this._ordinalPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.ordinalPosition = this._ordinalPosition;
        }
        if (this._primaryKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKey = this._primaryKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._collation = undefined;
            this._column = undefined;
            this._dataType = undefined;
            this._nullable = undefined;
            this._ordinalPosition = undefined;
            this._primaryKey = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._collation = value.collation;
            this._column = value.column;
            this._dataType = value.dataType;
            this._nullable = value.nullable;
            this._ordinalPosition = value.ordinalPosition;
            this._primaryKey = value.primaryKey;
        }
    }
    get collation() {
        return this.getStringAttribute('collation');
    }
    set collation(value) {
        this._collation = value;
    }
    resetCollation() {
        this._collation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collationInput() {
        return this._collation;
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    set nullable(value) {
        this._nullable = value;
    }
    resetNullable() {
        this._nullable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullableInput() {
        return this._nullable;
    }
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    set ordinalPosition(value) {
        this._ordinalPosition = value;
    }
    resetOrdinalPosition() {
        this._ordinalPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ordinalPositionInput() {
        return this._ordinalPosition;
    }
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    set primaryKey(value) {
        this._primaryKey = value;
    }
    resetPrimaryKey() {
        this._primaryKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyInput() {
        return this._primaryKey;
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference[_a] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference", version: "5.0.1" };
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList;
_b = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList[_b] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList", version: "5.0.1" };
function datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        mysql_columns: cdktf.listMapper(datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform, true)(struct.mysqlColumns),
    };
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToTerraform;
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_columns - computed: false, optional: true, required: false
        this._mysqlColumns = new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList(this, "mysql_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._mysqlColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlColumns = this._mysqlColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._mysqlColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._mysqlColumns.internalValue = value.mysqlColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get mysqlColumns() {
        return this._mysqlColumns;
    }
    putMysqlColumns(value) {
        this._mysqlColumns.internalValue = value;
    }
    resetMysqlColumns() {
        this._mysqlColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlColumnsInput() {
        return this._mysqlColumns.internalValue;
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference[_c] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference", version: "5.0.1" };
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList;
_d = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList[_d] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList", version: "5.0.1" };
function datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        mysql_tables: cdktf.listMapper(datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToTerraform, true)(struct.mysqlTables),
    };
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToTerraform;
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_tables - computed: false, optional: true, required: false
        this._mysqlTables = new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList(this, "mysql_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._mysqlTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlTables = this._mysqlTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._database = undefined;
            this._mysqlTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._database = value.database;
            this._mysqlTables.internalValue = value.mysqlTables;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get mysqlTables() {
        return this._mysqlTables;
    }
    putMysqlTables(value) {
        this._mysqlTables.internalValue = value;
    }
    resetMysqlTables() {
        this._mysqlTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlTablesInput() {
        return this._mysqlTables.internalValue;
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference[_e] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference", version: "5.0.1" };
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList;
_f = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList[_f] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList", version: "5.0.1" };
function datastreamStreamBackfillAllMysqlExcludedObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mysql_databases: cdktf.listMapper(datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToTerraform, true)(struct.mysqlDatabases),
    };
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsToTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsToTerraform;
class DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mysql_databases - computed: false, optional: false, required: true
        this._mysqlDatabases = new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList(this, "mysql_databases", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mysqlDatabases?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlDatabases = this._mysqlDatabases?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mysqlDatabases.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mysqlDatabases.internalValue = value.mysqlDatabases;
        }
    }
    get mysqlDatabases() {
        return this._mysqlDatabases;
    }
    putMysqlDatabases(value) {
        this._mysqlDatabases.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlDatabasesInput() {
        return this._mysqlDatabases.internalValue;
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference = DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference[_g] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference", version: "5.0.1" };
function datastreamStreamBackfillAllToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mysql_excluded_objects: datastreamStreamBackfillAllMysqlExcludedObjectsToTerraform(struct.mysqlExcludedObjects),
    };
}
exports.datastreamStreamBackfillAllToTerraform = datastreamStreamBackfillAllToTerraform;
class DatastreamStreamBackfillAllOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mysql_excluded_objects - computed: false, optional: true, required: false
        this._mysqlExcludedObjects = new DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference(this, "mysql_excluded_objects");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mysqlExcludedObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlExcludedObjects = this._mysqlExcludedObjects?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mysqlExcludedObjects.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mysqlExcludedObjects.internalValue = value.mysqlExcludedObjects;
        }
    }
    get mysqlExcludedObjects() {
        return this._mysqlExcludedObjects;
    }
    putMysqlExcludedObjects(value) {
        this._mysqlExcludedObjects.internalValue = value;
    }
    resetMysqlExcludedObjects() {
        this._mysqlExcludedObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlExcludedObjectsInput() {
        return this._mysqlExcludedObjects.internalValue;
    }
}
exports.DatastreamStreamBackfillAllOutputReference = DatastreamStreamBackfillAllOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllOutputReference[_h] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllOutputReference", version: "5.0.1" };
function datastreamStreamBackfillNoneToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datastreamStreamBackfillNoneToTerraform = datastreamStreamBackfillNoneToTerraform;
class DatastreamStreamBackfillNoneOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatastreamStreamBackfillNoneOutputReference = DatastreamStreamBackfillNoneOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillNoneOutputReference[_j] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillNoneOutputReference", version: "5.0.1" };
function datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
    };
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToTerraform;
class DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
}
exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference = DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference[_k] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference", version: "5.0.1" };
function datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id_prefix: cdktf.stringToTerraform(struct.datasetIdPrefix),
        location: cdktf.stringToTerraform(struct.location),
    };
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToTerraform;
class DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetIdPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetIdPrefix = this._datasetIdPrefix;
        }
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetIdPrefix = undefined;
            this._location = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetIdPrefix = value.datasetIdPrefix;
            this._location = value.location;
        }
    }
    get datasetIdPrefix() {
        return this.getStringAttribute('dataset_id_prefix');
    }
    set datasetIdPrefix(value) {
        this._datasetIdPrefix = value;
    }
    resetDatasetIdPrefix() {
        this._datasetIdPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdPrefixInput() {
        return this._datasetIdPrefix;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
}
exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference = DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference[_l] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference", version: "5.0.1" };
function datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_template: datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToTerraform(struct.datasetTemplate),
    };
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToTerraform;
class DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dataset_template - computed: false, optional: false, required: true
        this._datasetTemplate = new DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference(this, "dataset_template");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetTemplate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetTemplate = this._datasetTemplate?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetTemplate.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetTemplate.internalValue = value.datasetTemplate;
        }
    }
    get datasetTemplate() {
        return this._datasetTemplate;
    }
    putDatasetTemplate(value) {
        this._datasetTemplate.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetTemplateInput() {
        return this._datasetTemplate.internalValue;
    }
}
exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference = DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference[_m] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference", version: "5.0.1" };
function datastreamStreamDestinationConfigBigqueryDestinationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_freshness: cdktf.stringToTerraform(struct.dataFreshness),
        single_target_dataset: datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToTerraform(struct.singleTargetDataset),
        source_hierarchy_datasets: datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToTerraform(struct.sourceHierarchyDatasets),
    };
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigToTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigToTerraform;
class DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // single_target_dataset - computed: false, optional: true, required: false
        this._singleTargetDataset = new DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference(this, "single_target_dataset");
        // source_hierarchy_datasets - computed: false, optional: true, required: false
        this._sourceHierarchyDatasets = new DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference(this, "source_hierarchy_datasets");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataFreshness !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataFreshness = this._dataFreshness;
        }
        if (this._singleTargetDataset?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.singleTargetDataset = this._singleTargetDataset?.internalValue;
        }
        if (this._sourceHierarchyDatasets?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceHierarchyDatasets = this._sourceHierarchyDatasets?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataFreshness = undefined;
            this._singleTargetDataset.internalValue = undefined;
            this._sourceHierarchyDatasets.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataFreshness = value.dataFreshness;
            this._singleTargetDataset.internalValue = value.singleTargetDataset;
            this._sourceHierarchyDatasets.internalValue = value.sourceHierarchyDatasets;
        }
    }
    get dataFreshness() {
        return this.getStringAttribute('data_freshness');
    }
    set dataFreshness(value) {
        this._dataFreshness = value;
    }
    resetDataFreshness() {
        this._dataFreshness = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataFreshnessInput() {
        return this._dataFreshness;
    }
    get singleTargetDataset() {
        return this._singleTargetDataset;
    }
    putSingleTargetDataset(value) {
        this._singleTargetDataset.internalValue = value;
    }
    resetSingleTargetDataset() {
        this._singleTargetDataset.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singleTargetDatasetInput() {
        return this._singleTargetDataset.internalValue;
    }
    get sourceHierarchyDatasets() {
        return this._sourceHierarchyDatasets;
    }
    putSourceHierarchyDatasets(value) {
        this._sourceHierarchyDatasets.internalValue = value;
    }
    resetSourceHierarchyDatasets() {
        this._sourceHierarchyDatasets.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceHierarchyDatasetsInput() {
        return this._sourceHierarchyDatasets.internalValue;
    }
}
exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference = DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference", version: "5.0.1" };
function datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToTerraform = datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToTerraform;
class DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference = DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference[_p] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference", version: "5.0.1" };
function datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        compression: cdktf.stringToTerraform(struct.compression),
        schema_file_format: cdktf.stringToTerraform(struct.schemaFileFormat),
    };
}
exports.datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToTerraform = datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToTerraform;
class DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._compression !== undefined) {
            hasAnyValues = true;
            internalValueResult.compression = this._compression;
        }
        if (this._schemaFileFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemaFileFormat = this._schemaFileFormat;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._compression = undefined;
            this._schemaFileFormat = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._compression = value.compression;
            this._schemaFileFormat = value.schemaFileFormat;
        }
    }
    get compression() {
        return this.getStringAttribute('compression');
    }
    set compression(value) {
        this._compression = value;
    }
    resetCompression() {
        this._compression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionInput() {
        return this._compression;
    }
    get schemaFileFormat() {
        return this.getStringAttribute('schema_file_format');
    }
    set schemaFileFormat(value) {
        this._schemaFileFormat = value;
    }
    resetSchemaFileFormat() {
        this._schemaFileFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaFileFormatInput() {
        return this._schemaFileFormat;
    }
}
exports.DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference = DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference[_q] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference", version: "5.0.1" };
function datastreamStreamDestinationConfigGcsDestinationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file_rotation_interval: cdktf.stringToTerraform(struct.fileRotationInterval),
        file_rotation_mb: cdktf.numberToTerraform(struct.fileRotationMb),
        path: cdktf.stringToTerraform(struct.path),
        avro_file_format: datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToTerraform(struct.avroFileFormat),
        json_file_format: datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToTerraform(struct.jsonFileFormat),
    };
}
exports.datastreamStreamDestinationConfigGcsDestinationConfigToTerraform = datastreamStreamDestinationConfigGcsDestinationConfigToTerraform;
class DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // avro_file_format - computed: false, optional: true, required: false
        this._avroFileFormat = new DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference(this, "avro_file_format");
        // json_file_format - computed: false, optional: true, required: false
        this._jsonFileFormat = new DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference(this, "json_file_format");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fileRotationInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileRotationInterval = this._fileRotationInterval;
        }
        if (this._fileRotationMb !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileRotationMb = this._fileRotationMb;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._avroFileFormat?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.avroFileFormat = this._avroFileFormat?.internalValue;
        }
        if (this._jsonFileFormat?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonFileFormat = this._jsonFileFormat?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fileRotationInterval = undefined;
            this._fileRotationMb = undefined;
            this._path = undefined;
            this._avroFileFormat.internalValue = undefined;
            this._jsonFileFormat.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fileRotationInterval = value.fileRotationInterval;
            this._fileRotationMb = value.fileRotationMb;
            this._path = value.path;
            this._avroFileFormat.internalValue = value.avroFileFormat;
            this._jsonFileFormat.internalValue = value.jsonFileFormat;
        }
    }
    get fileRotationInterval() {
        return this.getStringAttribute('file_rotation_interval');
    }
    set fileRotationInterval(value) {
        this._fileRotationInterval = value;
    }
    resetFileRotationInterval() {
        this._fileRotationInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileRotationIntervalInput() {
        return this._fileRotationInterval;
    }
    get fileRotationMb() {
        return this.getNumberAttribute('file_rotation_mb');
    }
    set fileRotationMb(value) {
        this._fileRotationMb = value;
    }
    resetFileRotationMb() {
        this._fileRotationMb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileRotationMbInput() {
        return this._fileRotationMb;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get avroFileFormat() {
        return this._avroFileFormat;
    }
    putAvroFileFormat(value) {
        this._avroFileFormat.internalValue = value;
    }
    resetAvroFileFormat() {
        this._avroFileFormat.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get avroFileFormatInput() {
        return this._avroFileFormat.internalValue;
    }
    get jsonFileFormat() {
        return this._jsonFileFormat;
    }
    putJsonFileFormat(value) {
        this._jsonFileFormat.internalValue = value;
    }
    resetJsonFileFormat() {
        this._jsonFileFormat.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonFileFormatInput() {
        return this._jsonFileFormat.internalValue;
    }
}
exports.DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference = DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference[_r] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference", version: "5.0.1" };
function datastreamStreamDestinationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_connection_profile: cdktf.stringToTerraform(struct.destinationConnectionProfile),
        bigquery_destination_config: datastreamStreamDestinationConfigBigqueryDestinationConfigToTerraform(struct.bigqueryDestinationConfig),
        gcs_destination_config: datastreamStreamDestinationConfigGcsDestinationConfigToTerraform(struct.gcsDestinationConfig),
    };
}
exports.datastreamStreamDestinationConfigToTerraform = datastreamStreamDestinationConfigToTerraform;
class DatastreamStreamDestinationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // bigquery_destination_config - computed: false, optional: true, required: false
        this._bigqueryDestinationConfig = new DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference(this, "bigquery_destination_config");
        // gcs_destination_config - computed: false, optional: true, required: false
        this._gcsDestinationConfig = new DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference(this, "gcs_destination_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationConnectionProfile !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationConnectionProfile = this._destinationConnectionProfile;
        }
        if (this._bigqueryDestinationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bigqueryDestinationConfig = this._bigqueryDestinationConfig?.internalValue;
        }
        if (this._gcsDestinationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcsDestinationConfig = this._gcsDestinationConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationConnectionProfile = undefined;
            this._bigqueryDestinationConfig.internalValue = undefined;
            this._gcsDestinationConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationConnectionProfile = value.destinationConnectionProfile;
            this._bigqueryDestinationConfig.internalValue = value.bigqueryDestinationConfig;
            this._gcsDestinationConfig.internalValue = value.gcsDestinationConfig;
        }
    }
    get destinationConnectionProfile() {
        return this.getStringAttribute('destination_connection_profile');
    }
    set destinationConnectionProfile(value) {
        this._destinationConnectionProfile = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationConnectionProfileInput() {
        return this._destinationConnectionProfile;
    }
    get bigqueryDestinationConfig() {
        return this._bigqueryDestinationConfig;
    }
    putBigqueryDestinationConfig(value) {
        this._bigqueryDestinationConfig.internalValue = value;
    }
    resetBigqueryDestinationConfig() {
        this._bigqueryDestinationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bigqueryDestinationConfigInput() {
        return this._bigqueryDestinationConfig.internalValue;
    }
    get gcsDestinationConfig() {
        return this._gcsDestinationConfig;
    }
    putGcsDestinationConfig(value) {
        this._gcsDestinationConfig.internalValue = value;
    }
    resetGcsDestinationConfig() {
        this._gcsDestinationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsDestinationConfigInput() {
        return this._gcsDestinationConfig.internalValue;
    }
}
exports.DatastreamStreamDestinationConfigOutputReference = DatastreamStreamDestinationConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigOutputReference[_s] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigOutputReference", version: "5.0.1" };
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        collation: cdktf.stringToTerraform(struct.collation),
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
        nullable: cdktf.booleanToTerraform(struct.nullable),
        ordinal_position: cdktf.numberToTerraform(struct.ordinalPosition),
        primary_key: cdktf.booleanToTerraform(struct.primaryKey),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._collation !== undefined) {
            hasAnyValues = true;
            internalValueResult.collation = this._collation;
        }
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        if (this._nullable !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullable = this._nullable;
        }
        if (this._ordinalPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.ordinalPosition = this._ordinalPosition;
        }
        if (this._primaryKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKey = this._primaryKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._collation = undefined;
            this._column = undefined;
            this._dataType = undefined;
            this._nullable = undefined;
            this._ordinalPosition = undefined;
            this._primaryKey = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._collation = value.collation;
            this._column = value.column;
            this._dataType = value.dataType;
            this._nullable = value.nullable;
            this._ordinalPosition = value.ordinalPosition;
            this._primaryKey = value.primaryKey;
        }
    }
    get collation() {
        return this.getStringAttribute('collation');
    }
    set collation(value) {
        this._collation = value;
    }
    resetCollation() {
        this._collation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collationInput() {
        return this._collation;
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    set nullable(value) {
        this._nullable = value;
    }
    resetNullable() {
        this._nullable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullableInput() {
        return this._nullable;
    }
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    set ordinalPosition(value) {
        this._ordinalPosition = value;
    }
    resetOrdinalPosition() {
        this._ordinalPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ordinalPositionInput() {
        return this._ordinalPosition;
    }
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    set primaryKey(value) {
        this._primaryKey = value;
    }
    resetPrimaryKey() {
        this._primaryKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyInput() {
        return this._primaryKey;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference[_t] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference", version: "5.0.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList;
_u = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList[_u] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList", version: "5.0.1" };
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        mysql_columns: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform, true)(struct.mysqlColumns),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_columns - computed: false, optional: true, required: false
        this._mysqlColumns = new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList(this, "mysql_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._mysqlColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlColumns = this._mysqlColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._mysqlColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._mysqlColumns.internalValue = value.mysqlColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get mysqlColumns() {
        return this._mysqlColumns;
    }
    putMysqlColumns(value) {
        this._mysqlColumns.internalValue = value;
    }
    resetMysqlColumns() {
        this._mysqlColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlColumnsInput() {
        return this._mysqlColumns.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference[_v] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference", version: "5.0.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList;
_w = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList[_w] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList", version: "5.0.1" };
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        mysql_tables: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToTerraform, true)(struct.mysqlTables),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_tables - computed: false, optional: true, required: false
        this._mysqlTables = new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList(this, "mysql_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._mysqlTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlTables = this._mysqlTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._database = undefined;
            this._mysqlTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._database = value.database;
            this._mysqlTables.internalValue = value.mysqlTables;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get mysqlTables() {
        return this._mysqlTables;
    }
    putMysqlTables(value) {
        this._mysqlTables.internalValue = value;
    }
    resetMysqlTables() {
        this._mysqlTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlTablesInput() {
        return this._mysqlTables.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference[_x] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference", version: "5.0.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList;
_y = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList[_y] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList", version: "5.0.1" };
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mysql_databases: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToTerraform, true)(struct.mysqlDatabases),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mysql_databases - computed: false, optional: false, required: true
        this._mysqlDatabases = new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList(this, "mysql_databases", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mysqlDatabases?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlDatabases = this._mysqlDatabases?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mysqlDatabases.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mysqlDatabases.internalValue = value.mysqlDatabases;
        }
    }
    get mysqlDatabases() {
        return this._mysqlDatabases;
    }
    putMysqlDatabases(value) {
        this._mysqlDatabases.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlDatabasesInput() {
        return this._mysqlDatabases.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference[_z] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference", version: "5.0.1" };
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        collation: cdktf.stringToTerraform(struct.collation),
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
        nullable: cdktf.booleanToTerraform(struct.nullable),
        ordinal_position: cdktf.numberToTerraform(struct.ordinalPosition),
        primary_key: cdktf.booleanToTerraform(struct.primaryKey),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._collation !== undefined) {
            hasAnyValues = true;
            internalValueResult.collation = this._collation;
        }
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        if (this._nullable !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullable = this._nullable;
        }
        if (this._ordinalPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.ordinalPosition = this._ordinalPosition;
        }
        if (this._primaryKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKey = this._primaryKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._collation = undefined;
            this._column = undefined;
            this._dataType = undefined;
            this._nullable = undefined;
            this._ordinalPosition = undefined;
            this._primaryKey = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._collation = value.collation;
            this._column = value.column;
            this._dataType = value.dataType;
            this._nullable = value.nullable;
            this._ordinalPosition = value.ordinalPosition;
            this._primaryKey = value.primaryKey;
        }
    }
    get collation() {
        return this.getStringAttribute('collation');
    }
    set collation(value) {
        this._collation = value;
    }
    resetCollation() {
        this._collation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collationInput() {
        return this._collation;
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    set nullable(value) {
        this._nullable = value;
    }
    resetNullable() {
        this._nullable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullableInput() {
        return this._nullable;
    }
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    set ordinalPosition(value) {
        this._ordinalPosition = value;
    }
    resetOrdinalPosition() {
        this._ordinalPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ordinalPositionInput() {
        return this._ordinalPosition;
    }
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    set primaryKey(value) {
        this._primaryKey = value;
    }
    resetPrimaryKey() {
        this._primaryKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyInput() {
        return this._primaryKey;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference[_0] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference", version: "5.0.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList;
_1 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList[_1] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList", version: "5.0.1" };
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        mysql_columns: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform, true)(struct.mysqlColumns),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_columns - computed: false, optional: true, required: false
        this._mysqlColumns = new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList(this, "mysql_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._mysqlColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlColumns = this._mysqlColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._mysqlColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._mysqlColumns.internalValue = value.mysqlColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get mysqlColumns() {
        return this._mysqlColumns;
    }
    putMysqlColumns(value) {
        this._mysqlColumns.internalValue = value;
    }
    resetMysqlColumns() {
        this._mysqlColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlColumnsInput() {
        return this._mysqlColumns.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference[_2] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference", version: "5.0.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList;
_3 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList[_3] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList", version: "5.0.1" };
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        mysql_tables: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToTerraform, true)(struct.mysqlTables),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_tables - computed: false, optional: true, required: false
        this._mysqlTables = new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList(this, "mysql_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._mysqlTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlTables = this._mysqlTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._database = undefined;
            this._mysqlTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._database = value.database;
            this._mysqlTables.internalValue = value.mysqlTables;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get mysqlTables() {
        return this._mysqlTables;
    }
    putMysqlTables(value) {
        this._mysqlTables.internalValue = value;
    }
    resetMysqlTables() {
        this._mysqlTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlTablesInput() {
        return this._mysqlTables.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference[_4] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference", version: "5.0.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList;
_5 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList[_5] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList", version: "5.0.1" };
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mysql_databases: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToTerraform, true)(struct.mysqlDatabases),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mysql_databases - computed: false, optional: false, required: true
        this._mysqlDatabases = new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList(this, "mysql_databases", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mysqlDatabases?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlDatabases = this._mysqlDatabases?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mysqlDatabases.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mysqlDatabases.internalValue = value.mysqlDatabases;
        }
    }
    get mysqlDatabases() {
        return this._mysqlDatabases;
    }
    putMysqlDatabases(value) {
        this._mysqlDatabases.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlDatabasesInput() {
        return this._mysqlDatabases.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference[_6] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference", version: "5.0.1" };
function datastreamStreamSourceConfigMysqlSourceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_concurrent_cdc_tasks: cdktf.numberToTerraform(struct.maxConcurrentCdcTasks),
        exclude_objects: datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToTerraform(struct.excludeObjects),
        include_objects: datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToTerraform(struct.includeObjects),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigToTerraform = datastreamStreamSourceConfigMysqlSourceConfigToTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // exclude_objects - computed: false, optional: true, required: false
        this._excludeObjects = new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference(this, "exclude_objects");
        // include_objects - computed: false, optional: true, required: false
        this._includeObjects = new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference(this, "include_objects");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConcurrentCdcTasks !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentCdcTasks = this._maxConcurrentCdcTasks;
        }
        if (this._excludeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeObjects = this._excludeObjects?.internalValue;
        }
        if (this._includeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeObjects = this._includeObjects?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConcurrentCdcTasks = undefined;
            this._excludeObjects.internalValue = undefined;
            this._includeObjects.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConcurrentCdcTasks = value.maxConcurrentCdcTasks;
            this._excludeObjects.internalValue = value.excludeObjects;
            this._includeObjects.internalValue = value.includeObjects;
        }
    }
    get maxConcurrentCdcTasks() {
        return this.getNumberAttribute('max_concurrent_cdc_tasks');
    }
    set maxConcurrentCdcTasks(value) {
        this._maxConcurrentCdcTasks = value;
    }
    resetMaxConcurrentCdcTasks() {
        this._maxConcurrentCdcTasks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentCdcTasksInput() {
        return this._maxConcurrentCdcTasks;
    }
    get excludeObjects() {
        return this._excludeObjects;
    }
    putExcludeObjects(value) {
        this._excludeObjects.internalValue = value;
    }
    resetExcludeObjects() {
        this._excludeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeObjectsInput() {
        return this._excludeObjects.internalValue;
    }
    get includeObjects() {
        return this._includeObjects;
    }
    putIncludeObjects(value) {
        this._includeObjects.internalValue = value;
    }
    resetIncludeObjects() {
        this._includeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeObjectsInput() {
        return this._includeObjects.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigOutputReference[_7] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigOutputReference", version: "5.0.1" };
function datastreamStreamSourceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        source_connection_profile: cdktf.stringToTerraform(struct.sourceConnectionProfile),
        mysql_source_config: datastreamStreamSourceConfigMysqlSourceConfigToTerraform(struct.mysqlSourceConfig),
    };
}
exports.datastreamStreamSourceConfigToTerraform = datastreamStreamSourceConfigToTerraform;
class DatastreamStreamSourceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mysql_source_config - computed: false, optional: false, required: true
        this._mysqlSourceConfig = new DatastreamStreamSourceConfigMysqlSourceConfigOutputReference(this, "mysql_source_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sourceConnectionProfile !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceConnectionProfile = this._sourceConnectionProfile;
        }
        if (this._mysqlSourceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlSourceConfig = this._mysqlSourceConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sourceConnectionProfile = undefined;
            this._mysqlSourceConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sourceConnectionProfile = value.sourceConnectionProfile;
            this._mysqlSourceConfig.internalValue = value.mysqlSourceConfig;
        }
    }
    get sourceConnectionProfile() {
        return this.getStringAttribute('source_connection_profile');
    }
    set sourceConnectionProfile(value) {
        this._sourceConnectionProfile = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceConnectionProfileInput() {
        return this._sourceConnectionProfile;
    }
    get mysqlSourceConfig() {
        return this._mysqlSourceConfig;
    }
    putMysqlSourceConfig(value) {
        this._mysqlSourceConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlSourceConfigInput() {
        return this._mysqlSourceConfig.internalValue;
    }
}
exports.DatastreamStreamSourceConfigOutputReference = DatastreamStreamSourceConfigOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOutputReference[_8] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOutputReference", version: "5.0.1" };
function datastreamStreamTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.datastreamStreamTimeoutsToTerraform = datastreamStreamTimeoutsToTerraform;
class DatastreamStreamTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DatastreamStreamTimeoutsOutputReference = DatastreamStreamTimeoutsOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
DatastreamStreamTimeoutsOutputReference[_9] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/datastream_stream google_datastream_stream}
*/
class DatastreamStream extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/datastream_stream google_datastream_stream} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DatastreamStreamConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_datastream_stream',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // backfill_all - computed: false, optional: true, required: false
        this._backfillAll = new DatastreamStreamBackfillAllOutputReference(this, "backfill_all");
        // backfill_none - computed: false, optional: true, required: false
        this._backfillNone = new DatastreamStreamBackfillNoneOutputReference(this, "backfill_none");
        // destination_config - computed: false, optional: false, required: true
        this._destinationConfig = new DatastreamStreamDestinationConfigOutputReference(this, "destination_config");
        // source_config - computed: false, optional: false, required: true
        this._sourceConfig = new DatastreamStreamSourceConfigOutputReference(this, "source_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DatastreamStreamTimeoutsOutputReference(this, "timeouts");
        this._desiredState = config.desiredState;
        this._displayName = config.displayName;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._project = config.project;
        this._streamId = config.streamId;
        this._backfillAll.internalValue = config.backfillAll;
        this._backfillNone.internalValue = config.backfillNone;
        this._destinationConfig.internalValue = config.destinationConfig;
        this._sourceConfig.internalValue = config.sourceConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get desiredState() {
        return this.getStringAttribute('desired_state');
    }
    set desiredState(value) {
        this._desiredState = value;
    }
    resetDesiredState() {
        this._desiredState = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get desiredStateInput() {
        return this._desiredState;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get streamId() {
        return this.getStringAttribute('stream_id');
    }
    set streamId(value) {
        this._streamId = value;
    }
    // Temporarily expose input value. Use with caution.
    get streamIdInput() {
        return this._streamId;
    }
    get backfillAll() {
        return this._backfillAll;
    }
    putBackfillAll(value) {
        this._backfillAll.internalValue = value;
    }
    resetBackfillAll() {
        this._backfillAll.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backfillAllInput() {
        return this._backfillAll.internalValue;
    }
    get backfillNone() {
        return this._backfillNone;
    }
    putBackfillNone(value) {
        this._backfillNone.internalValue = value;
    }
    resetBackfillNone() {
        this._backfillNone.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backfillNoneInput() {
        return this._backfillNone.internalValue;
    }
    get destinationConfig() {
        return this._destinationConfig;
    }
    putDestinationConfig(value) {
        this._destinationConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationConfigInput() {
        return this._destinationConfig.internalValue;
    }
    get sourceConfig() {
        return this._sourceConfig;
    }
    putSourceConfig(value) {
        this._sourceConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceConfigInput() {
        return this._sourceConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            desired_state: cdktf.stringToTerraform(this._desiredState),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            project: cdktf.stringToTerraform(this._project),
            stream_id: cdktf.stringToTerraform(this._streamId),
            backfill_all: datastreamStreamBackfillAllToTerraform(this._backfillAll.internalValue),
            backfill_none: datastreamStreamBackfillNoneToTerraform(this._backfillNone.internalValue),
            destination_config: datastreamStreamDestinationConfigToTerraform(this._destinationConfig.internalValue),
            source_config: datastreamStreamSourceConfigToTerraform(this._sourceConfig.internalValue),
            timeouts: datastreamStreamTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.DatastreamStream = DatastreamStream;
_10 = JSII_RTTI_SYMBOL_1;
DatastreamStream[_10] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStream", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
DatastreamStream.tfResourceType = "google_datastream_stream";
//# sourceMappingURL=data:application/json;base64,