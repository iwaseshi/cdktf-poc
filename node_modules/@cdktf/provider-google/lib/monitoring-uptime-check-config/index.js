"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringUptimeCheckConfig = exports.MonitoringUptimeCheckConfigTimeoutsOutputReference = exports.monitoringUptimeCheckConfigTimeoutsToTerraform = exports.MonitoringUptimeCheckConfigTcpCheckOutputReference = exports.monitoringUptimeCheckConfigTcpCheckToTerraform = exports.MonitoringUptimeCheckConfigResourceGroupOutputReference = exports.monitoringUptimeCheckConfigResourceGroupToTerraform = exports.MonitoringUptimeCheckConfigMonitoredResourceOutputReference = exports.monitoringUptimeCheckConfigMonitoredResourceToTerraform = exports.MonitoringUptimeCheckConfigHttpCheckOutputReference = exports.monitoringUptimeCheckConfigHttpCheckToTerraform = exports.MonitoringUptimeCheckConfigHttpCheckAuthInfoOutputReference = exports.monitoringUptimeCheckConfigHttpCheckAuthInfoToTerraform = exports.MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesList = exports.MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesOutputReference = exports.monitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesToTerraform = exports.MonitoringUptimeCheckConfigContentMatchersList = exports.MonitoringUptimeCheckConfigContentMatchersOutputReference = exports.monitoringUptimeCheckConfigContentMatchersToTerraform = exports.MonitoringUptimeCheckConfigContentMatchersJsonPathMatcherOutputReference = exports.monitoringUptimeCheckConfigContentMatchersJsonPathMatcherToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function monitoringUptimeCheckConfigContentMatchersJsonPathMatcherToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        json_matcher: cdktf.stringToTerraform(struct.jsonMatcher),
        json_path: cdktf.stringToTerraform(struct.jsonPath),
    };
}
exports.monitoringUptimeCheckConfigContentMatchersJsonPathMatcherToTerraform = monitoringUptimeCheckConfigContentMatchersJsonPathMatcherToTerraform;
class MonitoringUptimeCheckConfigContentMatchersJsonPathMatcherOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._jsonMatcher !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonMatcher = this._jsonMatcher;
        }
        if (this._jsonPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonPath = this._jsonPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._jsonMatcher = undefined;
            this._jsonPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._jsonMatcher = value.jsonMatcher;
            this._jsonPath = value.jsonPath;
        }
    }
    get jsonMatcher() {
        return this.getStringAttribute('json_matcher');
    }
    set jsonMatcher(value) {
        this._jsonMatcher = value;
    }
    resetJsonMatcher() {
        this._jsonMatcher = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonMatcherInput() {
        return this._jsonMatcher;
    }
    get jsonPath() {
        return this.getStringAttribute('json_path');
    }
    set jsonPath(value) {
        this._jsonPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get jsonPathInput() {
        return this._jsonPath;
    }
}
exports.MonitoringUptimeCheckConfigContentMatchersJsonPathMatcherOutputReference = MonitoringUptimeCheckConfigContentMatchersJsonPathMatcherOutputReference;
_a = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfigContentMatchersJsonPathMatcherOutputReference[_a] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfigContentMatchersJsonPathMatcherOutputReference", version: "4.0.3" };
function monitoringUptimeCheckConfigContentMatchersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        content: cdktf.stringToTerraform(struct.content),
        matcher: cdktf.stringToTerraform(struct.matcher),
        json_path_matcher: monitoringUptimeCheckConfigContentMatchersJsonPathMatcherToTerraform(struct.jsonPathMatcher),
    };
}
exports.monitoringUptimeCheckConfigContentMatchersToTerraform = monitoringUptimeCheckConfigContentMatchersToTerraform;
class MonitoringUptimeCheckConfigContentMatchersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // json_path_matcher - computed: false, optional: true, required: false
        this._jsonPathMatcher = new MonitoringUptimeCheckConfigContentMatchersJsonPathMatcherOutputReference(this, "json_path_matcher");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._content !== undefined) {
            hasAnyValues = true;
            internalValueResult.content = this._content;
        }
        if (this._matcher !== undefined) {
            hasAnyValues = true;
            internalValueResult.matcher = this._matcher;
        }
        if (this._jsonPathMatcher?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonPathMatcher = this._jsonPathMatcher?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._content = undefined;
            this._matcher = undefined;
            this._jsonPathMatcher.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._content = value.content;
            this._matcher = value.matcher;
            this._jsonPathMatcher.internalValue = value.jsonPathMatcher;
        }
    }
    get content() {
        return this.getStringAttribute('content');
    }
    set content(value) {
        this._content = value;
    }
    // Temporarily expose input value. Use with caution.
    get contentInput() {
        return this._content;
    }
    get matcher() {
        return this.getStringAttribute('matcher');
    }
    set matcher(value) {
        this._matcher = value;
    }
    resetMatcher() {
        this._matcher = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matcherInput() {
        return this._matcher;
    }
    get jsonPathMatcher() {
        return this._jsonPathMatcher;
    }
    putJsonPathMatcher(value) {
        this._jsonPathMatcher.internalValue = value;
    }
    resetJsonPathMatcher() {
        this._jsonPathMatcher.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonPathMatcherInput() {
        return this._jsonPathMatcher.internalValue;
    }
}
exports.MonitoringUptimeCheckConfigContentMatchersOutputReference = MonitoringUptimeCheckConfigContentMatchersOutputReference;
_b = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfigContentMatchersOutputReference[_b] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfigContentMatchersOutputReference", version: "4.0.3" };
class MonitoringUptimeCheckConfigContentMatchersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringUptimeCheckConfigContentMatchersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringUptimeCheckConfigContentMatchersList = MonitoringUptimeCheckConfigContentMatchersList;
_c = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfigContentMatchersList[_c] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfigContentMatchersList", version: "4.0.3" };
function monitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        status_class: cdktf.stringToTerraform(struct.statusClass),
        status_value: cdktf.numberToTerraform(struct.statusValue),
    };
}
exports.monitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesToTerraform = monitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesToTerraform;
class MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._statusClass !== undefined) {
            hasAnyValues = true;
            internalValueResult.statusClass = this._statusClass;
        }
        if (this._statusValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.statusValue = this._statusValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._statusClass = undefined;
            this._statusValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._statusClass = value.statusClass;
            this._statusValue = value.statusValue;
        }
    }
    get statusClass() {
        return this.getStringAttribute('status_class');
    }
    set statusClass(value) {
        this._statusClass = value;
    }
    resetStatusClass() {
        this._statusClass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusClassInput() {
        return this._statusClass;
    }
    get statusValue() {
        return this.getNumberAttribute('status_value');
    }
    set statusValue(value) {
        this._statusValue = value;
    }
    resetStatusValue() {
        this._statusValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusValueInput() {
        return this._statusValue;
    }
}
exports.MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesOutputReference = MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesOutputReference;
_d = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesOutputReference[_d] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesOutputReference", version: "4.0.3" };
class MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesList = MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesList;
_e = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesList[_e] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesList", version: "4.0.3" };
function monitoringUptimeCheckConfigHttpCheckAuthInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.monitoringUptimeCheckConfigHttpCheckAuthInfoToTerraform = monitoringUptimeCheckConfigHttpCheckAuthInfoToTerraform;
class MonitoringUptimeCheckConfigHttpCheckAuthInfoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._password = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._password = value.password;
            this._username = value.username;
        }
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.MonitoringUptimeCheckConfigHttpCheckAuthInfoOutputReference = MonitoringUptimeCheckConfigHttpCheckAuthInfoOutputReference;
_f = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfigHttpCheckAuthInfoOutputReference[_f] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfigHttpCheckAuthInfoOutputReference", version: "4.0.3" };
function monitoringUptimeCheckConfigHttpCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        body: cdktf.stringToTerraform(struct.body),
        content_type: cdktf.stringToTerraform(struct.contentType),
        headers: cdktf.hashMapper(cdktf.stringToTerraform)(struct.headers),
        mask_headers: cdktf.booleanToTerraform(struct.maskHeaders),
        path: cdktf.stringToTerraform(struct.path),
        port: cdktf.numberToTerraform(struct.port),
        request_method: cdktf.stringToTerraform(struct.requestMethod),
        use_ssl: cdktf.booleanToTerraform(struct.useSsl),
        validate_ssl: cdktf.booleanToTerraform(struct.validateSsl),
        accepted_response_status_codes: cdktf.listMapper(monitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesToTerraform, true)(struct.acceptedResponseStatusCodes),
        auth_info: monitoringUptimeCheckConfigHttpCheckAuthInfoToTerraform(struct.authInfo),
    };
}
exports.monitoringUptimeCheckConfigHttpCheckToTerraform = monitoringUptimeCheckConfigHttpCheckToTerraform;
class MonitoringUptimeCheckConfigHttpCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // accepted_response_status_codes - computed: false, optional: true, required: false
        this._acceptedResponseStatusCodes = new MonitoringUptimeCheckConfigHttpCheckAcceptedResponseStatusCodesList(this, "accepted_response_status_codes", false);
        // auth_info - computed: false, optional: true, required: false
        this._authInfo = new MonitoringUptimeCheckConfigHttpCheckAuthInfoOutputReference(this, "auth_info");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._body !== undefined) {
            hasAnyValues = true;
            internalValueResult.body = this._body;
        }
        if (this._contentType !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentType = this._contentType;
        }
        if (this._headers !== undefined) {
            hasAnyValues = true;
            internalValueResult.headers = this._headers;
        }
        if (this._maskHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.maskHeaders = this._maskHeaders;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._requestMethod !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestMethod = this._requestMethod;
        }
        if (this._useSsl !== undefined) {
            hasAnyValues = true;
            internalValueResult.useSsl = this._useSsl;
        }
        if (this._validateSsl !== undefined) {
            hasAnyValues = true;
            internalValueResult.validateSsl = this._validateSsl;
        }
        if (this._acceptedResponseStatusCodes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceptedResponseStatusCodes = this._acceptedResponseStatusCodes?.internalValue;
        }
        if (this._authInfo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authInfo = this._authInfo?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._body = undefined;
            this._contentType = undefined;
            this._headers = undefined;
            this._maskHeaders = undefined;
            this._path = undefined;
            this._port = undefined;
            this._requestMethod = undefined;
            this._useSsl = undefined;
            this._validateSsl = undefined;
            this._acceptedResponseStatusCodes.internalValue = undefined;
            this._authInfo.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._body = value.body;
            this._contentType = value.contentType;
            this._headers = value.headers;
            this._maskHeaders = value.maskHeaders;
            this._path = value.path;
            this._port = value.port;
            this._requestMethod = value.requestMethod;
            this._useSsl = value.useSsl;
            this._validateSsl = value.validateSsl;
            this._acceptedResponseStatusCodes.internalValue = value.acceptedResponseStatusCodes;
            this._authInfo.internalValue = value.authInfo;
        }
    }
    get body() {
        return this.getStringAttribute('body');
    }
    set body(value) {
        this._body = value;
    }
    resetBody() {
        this._body = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bodyInput() {
        return this._body;
    }
    get contentType() {
        return this.getStringAttribute('content_type');
    }
    set contentType(value) {
        this._contentType = value;
    }
    resetContentType() {
        this._contentType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentTypeInput() {
        return this._contentType;
    }
    get headers() {
        return this.getStringMapAttribute('headers');
    }
    set headers(value) {
        this._headers = value;
    }
    resetHeaders() {
        this._headers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headersInput() {
        return this._headers;
    }
    get maskHeaders() {
        return this.getBooleanAttribute('mask_headers');
    }
    set maskHeaders(value) {
        this._maskHeaders = value;
    }
    resetMaskHeaders() {
        this._maskHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maskHeadersInput() {
        return this._maskHeaders;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get requestMethod() {
        return this.getStringAttribute('request_method');
    }
    set requestMethod(value) {
        this._requestMethod = value;
    }
    resetRequestMethod() {
        this._requestMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestMethodInput() {
        return this._requestMethod;
    }
    get useSsl() {
        return this.getBooleanAttribute('use_ssl');
    }
    set useSsl(value) {
        this._useSsl = value;
    }
    resetUseSsl() {
        this._useSsl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useSslInput() {
        return this._useSsl;
    }
    get validateSsl() {
        return this.getBooleanAttribute('validate_ssl');
    }
    set validateSsl(value) {
        this._validateSsl = value;
    }
    resetValidateSsl() {
        this._validateSsl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validateSslInput() {
        return this._validateSsl;
    }
    get acceptedResponseStatusCodes() {
        return this._acceptedResponseStatusCodes;
    }
    putAcceptedResponseStatusCodes(value) {
        this._acceptedResponseStatusCodes.internalValue = value;
    }
    resetAcceptedResponseStatusCodes() {
        this._acceptedResponseStatusCodes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceptedResponseStatusCodesInput() {
        return this._acceptedResponseStatusCodes.internalValue;
    }
    get authInfo() {
        return this._authInfo;
    }
    putAuthInfo(value) {
        this._authInfo.internalValue = value;
    }
    resetAuthInfo() {
        this._authInfo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authInfoInput() {
        return this._authInfo.internalValue;
    }
}
exports.MonitoringUptimeCheckConfigHttpCheckOutputReference = MonitoringUptimeCheckConfigHttpCheckOutputReference;
_g = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfigHttpCheckOutputReference[_g] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfigHttpCheckOutputReference", version: "4.0.3" };
function monitoringUptimeCheckConfigMonitoredResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.monitoringUptimeCheckConfigMonitoredResourceToTerraform = monitoringUptimeCheckConfigMonitoredResourceToTerraform;
class MonitoringUptimeCheckConfigMonitoredResourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._labels = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._labels = value.labels;
            this._type = value.type;
        }
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.MonitoringUptimeCheckConfigMonitoredResourceOutputReference = MonitoringUptimeCheckConfigMonitoredResourceOutputReference;
_h = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfigMonitoredResourceOutputReference[_h] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfigMonitoredResourceOutputReference", version: "4.0.3" };
function monitoringUptimeCheckConfigResourceGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_id: cdktf.stringToTerraform(struct.groupId),
        resource_type: cdktf.stringToTerraform(struct.resourceType),
    };
}
exports.monitoringUptimeCheckConfigResourceGroupToTerraform = monitoringUptimeCheckConfigResourceGroupToTerraform;
class MonitoringUptimeCheckConfigResourceGroupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupId = this._groupId;
        }
        if (this._resourceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceType = this._resourceType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupId = undefined;
            this._resourceType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupId = value.groupId;
            this._resourceType = value.resourceType;
        }
    }
    get groupId() {
        return this.getStringAttribute('group_id');
    }
    set groupId(value) {
        this._groupId = value;
    }
    resetGroupId() {
        this._groupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIdInput() {
        return this._groupId;
    }
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
    set resourceType(value) {
        this._resourceType = value;
    }
    resetResourceType() {
        this._resourceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeInput() {
        return this._resourceType;
    }
}
exports.MonitoringUptimeCheckConfigResourceGroupOutputReference = MonitoringUptimeCheckConfigResourceGroupOutputReference;
_j = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfigResourceGroupOutputReference[_j] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfigResourceGroupOutputReference", version: "4.0.3" };
function monitoringUptimeCheckConfigTcpCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.monitoringUptimeCheckConfigTcpCheckToTerraform = monitoringUptimeCheckConfigTcpCheckToTerraform;
class MonitoringUptimeCheckConfigTcpCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._port = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._port = value.port;
        }
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.MonitoringUptimeCheckConfigTcpCheckOutputReference = MonitoringUptimeCheckConfigTcpCheckOutputReference;
_k = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfigTcpCheckOutputReference[_k] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfigTcpCheckOutputReference", version: "4.0.3" };
function monitoringUptimeCheckConfigTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.monitoringUptimeCheckConfigTimeoutsToTerraform = monitoringUptimeCheckConfigTimeoutsToTerraform;
class MonitoringUptimeCheckConfigTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.MonitoringUptimeCheckConfigTimeoutsOutputReference = MonitoringUptimeCheckConfigTimeoutsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfigTimeoutsOutputReference[_l] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfigTimeoutsOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/monitoring_uptime_check_config google_monitoring_uptime_check_config}
*/
class MonitoringUptimeCheckConfig extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/monitoring_uptime_check_config google_monitoring_uptime_check_config} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MonitoringUptimeCheckConfigConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_monitoring_uptime_check_config',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // content_matchers - computed: false, optional: true, required: false
        this._contentMatchers = new MonitoringUptimeCheckConfigContentMatchersList(this, "content_matchers", false);
        // http_check - computed: false, optional: true, required: false
        this._httpCheck = new MonitoringUptimeCheckConfigHttpCheckOutputReference(this, "http_check");
        // monitored_resource - computed: false, optional: true, required: false
        this._monitoredResource = new MonitoringUptimeCheckConfigMonitoredResourceOutputReference(this, "monitored_resource");
        // resource_group - computed: false, optional: true, required: false
        this._resourceGroup = new MonitoringUptimeCheckConfigResourceGroupOutputReference(this, "resource_group");
        // tcp_check - computed: false, optional: true, required: false
        this._tcpCheck = new MonitoringUptimeCheckConfigTcpCheckOutputReference(this, "tcp_check");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new MonitoringUptimeCheckConfigTimeoutsOutputReference(this, "timeouts");
        this._checkerType = config.checkerType;
        this._displayName = config.displayName;
        this._id = config.id;
        this._period = config.period;
        this._project = config.project;
        this._selectedRegions = config.selectedRegions;
        this._timeout = config.timeout;
        this._contentMatchers.internalValue = config.contentMatchers;
        this._httpCheck.internalValue = config.httpCheck;
        this._monitoredResource.internalValue = config.monitoredResource;
        this._resourceGroup.internalValue = config.resourceGroup;
        this._tcpCheck.internalValue = config.tcpCheck;
        this._timeouts.internalValue = config.timeouts;
    }
    get checkerType() {
        return this.getStringAttribute('checker_type');
    }
    set checkerType(value) {
        this._checkerType = value;
    }
    resetCheckerType() {
        this._checkerType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get checkerTypeInput() {
        return this._checkerType;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get period() {
        return this.getStringAttribute('period');
    }
    set period(value) {
        this._period = value;
    }
    resetPeriod() {
        this._period = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get periodInput() {
        return this._period;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get selectedRegions() {
        return this.getListAttribute('selected_regions');
    }
    set selectedRegions(value) {
        this._selectedRegions = value;
    }
    resetSelectedRegions() {
        this._selectedRegions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selectedRegionsInput() {
        return this._selectedRegions;
    }
    get timeout() {
        return this.getStringAttribute('timeout');
    }
    set timeout(value) {
        this._timeout = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout;
    }
    // uptime_check_id - computed: true, optional: false, required: false
    get uptimeCheckId() {
        return this.getStringAttribute('uptime_check_id');
    }
    get contentMatchers() {
        return this._contentMatchers;
    }
    putContentMatchers(value) {
        this._contentMatchers.internalValue = value;
    }
    resetContentMatchers() {
        this._contentMatchers.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentMatchersInput() {
        return this._contentMatchers.internalValue;
    }
    get httpCheck() {
        return this._httpCheck;
    }
    putHttpCheck(value) {
        this._httpCheck.internalValue = value;
    }
    resetHttpCheck() {
        this._httpCheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpCheckInput() {
        return this._httpCheck.internalValue;
    }
    get monitoredResource() {
        return this._monitoredResource;
    }
    putMonitoredResource(value) {
        this._monitoredResource.internalValue = value;
    }
    resetMonitoredResource() {
        this._monitoredResource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoredResourceInput() {
        return this._monitoredResource.internalValue;
    }
    get resourceGroup() {
        return this._resourceGroup;
    }
    putResourceGroup(value) {
        this._resourceGroup.internalValue = value;
    }
    resetResourceGroup() {
        this._resourceGroup.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceGroupInput() {
        return this._resourceGroup.internalValue;
    }
    get tcpCheck() {
        return this._tcpCheck;
    }
    putTcpCheck(value) {
        this._tcpCheck.internalValue = value;
    }
    resetTcpCheck() {
        this._tcpCheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tcpCheckInput() {
        return this._tcpCheck.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            checker_type: cdktf.stringToTerraform(this._checkerType),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            period: cdktf.stringToTerraform(this._period),
            project: cdktf.stringToTerraform(this._project),
            selected_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(this._selectedRegions),
            timeout: cdktf.stringToTerraform(this._timeout),
            content_matchers: cdktf.listMapper(monitoringUptimeCheckConfigContentMatchersToTerraform, true)(this._contentMatchers.internalValue),
            http_check: monitoringUptimeCheckConfigHttpCheckToTerraform(this._httpCheck.internalValue),
            monitored_resource: monitoringUptimeCheckConfigMonitoredResourceToTerraform(this._monitoredResource.internalValue),
            resource_group: monitoringUptimeCheckConfigResourceGroupToTerraform(this._resourceGroup.internalValue),
            tcp_check: monitoringUptimeCheckConfigTcpCheckToTerraform(this._tcpCheck.internalValue),
            timeouts: monitoringUptimeCheckConfigTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.MonitoringUptimeCheckConfig = MonitoringUptimeCheckConfig;
_m = JSII_RTTI_SYMBOL_1;
MonitoringUptimeCheckConfig[_m] = { fqn: "@cdktf/provider-google.monitoringUptimeCheckConfig.MonitoringUptimeCheckConfig", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
MonitoringUptimeCheckConfig.tfResourceType = "google_monitoring_uptime_check_config";
//# sourceMappingURL=data:application/json;base64,