"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeBackendService = exports.ComputeBackendServiceTimeoutsOutputReference = exports.computeBackendServiceTimeoutsToTerraform = exports.ComputeBackendServiceSecuritySettingsOutputReference = exports.computeBackendServiceSecuritySettingsToTerraform = exports.ComputeBackendServiceOutlierDetectionOutputReference = exports.computeBackendServiceOutlierDetectionToTerraform = exports.ComputeBackendServiceOutlierDetectionIntervalOutputReference = exports.computeBackendServiceOutlierDetectionIntervalToTerraform = exports.ComputeBackendServiceOutlierDetectionBaseEjectionTimeOutputReference = exports.computeBackendServiceOutlierDetectionBaseEjectionTimeToTerraform = exports.ComputeBackendServiceLogConfigOutputReference = exports.computeBackendServiceLogConfigToTerraform = exports.ComputeBackendServiceIapOutputReference = exports.computeBackendServiceIapToTerraform = exports.ComputeBackendServiceConsistentHashOutputReference = exports.computeBackendServiceConsistentHashToTerraform = exports.ComputeBackendServiceConsistentHashHttpCookieOutputReference = exports.computeBackendServiceConsistentHashHttpCookieToTerraform = exports.ComputeBackendServiceConsistentHashHttpCookieTtlOutputReference = exports.computeBackendServiceConsistentHashHttpCookieTtlToTerraform = exports.ComputeBackendServiceCircuitBreakersOutputReference = exports.computeBackendServiceCircuitBreakersToTerraform = exports.ComputeBackendServiceCdnPolicyOutputReference = exports.computeBackendServiceCdnPolicyToTerraform = exports.ComputeBackendServiceCdnPolicyNegativeCachingPolicyList = exports.ComputeBackendServiceCdnPolicyNegativeCachingPolicyOutputReference = exports.computeBackendServiceCdnPolicyNegativeCachingPolicyToTerraform = exports.ComputeBackendServiceCdnPolicyCacheKeyPolicyOutputReference = exports.computeBackendServiceCdnPolicyCacheKeyPolicyToTerraform = exports.ComputeBackendServiceBackendList = exports.ComputeBackendServiceBackendOutputReference = exports.computeBackendServiceBackendToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function computeBackendServiceBackendToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        balancing_mode: cdktf.stringToTerraform(struct.balancingMode),
        capacity_scaler: cdktf.numberToTerraform(struct.capacityScaler),
        description: cdktf.stringToTerraform(struct.description),
        group: cdktf.stringToTerraform(struct.group),
        max_connections: cdktf.numberToTerraform(struct.maxConnections),
        max_connections_per_endpoint: cdktf.numberToTerraform(struct.maxConnectionsPerEndpoint),
        max_connections_per_instance: cdktf.numberToTerraform(struct.maxConnectionsPerInstance),
        max_rate: cdktf.numberToTerraform(struct.maxRate),
        max_rate_per_endpoint: cdktf.numberToTerraform(struct.maxRatePerEndpoint),
        max_rate_per_instance: cdktf.numberToTerraform(struct.maxRatePerInstance),
        max_utilization: cdktf.numberToTerraform(struct.maxUtilization),
    };
}
exports.computeBackendServiceBackendToTerraform = computeBackendServiceBackendToTerraform;
class ComputeBackendServiceBackendOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._balancingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.balancingMode = this._balancingMode;
        }
        if (this._capacityScaler !== undefined) {
            hasAnyValues = true;
            internalValueResult.capacityScaler = this._capacityScaler;
        }
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._group !== undefined) {
            hasAnyValues = true;
            internalValueResult.group = this._group;
        }
        if (this._maxConnections !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConnections = this._maxConnections;
        }
        if (this._maxConnectionsPerEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConnectionsPerEndpoint = this._maxConnectionsPerEndpoint;
        }
        if (this._maxConnectionsPerInstance !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConnectionsPerInstance = this._maxConnectionsPerInstance;
        }
        if (this._maxRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRate = this._maxRate;
        }
        if (this._maxRatePerEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRatePerEndpoint = this._maxRatePerEndpoint;
        }
        if (this._maxRatePerInstance !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRatePerInstance = this._maxRatePerInstance;
        }
        if (this._maxUtilization !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxUtilization = this._maxUtilization;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._balancingMode = undefined;
            this._capacityScaler = undefined;
            this._description = undefined;
            this._group = undefined;
            this._maxConnections = undefined;
            this._maxConnectionsPerEndpoint = undefined;
            this._maxConnectionsPerInstance = undefined;
            this._maxRate = undefined;
            this._maxRatePerEndpoint = undefined;
            this._maxRatePerInstance = undefined;
            this._maxUtilization = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._balancingMode = value.balancingMode;
            this._capacityScaler = value.capacityScaler;
            this._description = value.description;
            this._group = value.group;
            this._maxConnections = value.maxConnections;
            this._maxConnectionsPerEndpoint = value.maxConnectionsPerEndpoint;
            this._maxConnectionsPerInstance = value.maxConnectionsPerInstance;
            this._maxRate = value.maxRate;
            this._maxRatePerEndpoint = value.maxRatePerEndpoint;
            this._maxRatePerInstance = value.maxRatePerInstance;
            this._maxUtilization = value.maxUtilization;
        }
    }
    get balancingMode() {
        return this.getStringAttribute('balancing_mode');
    }
    set balancingMode(value) {
        this._balancingMode = value;
    }
    resetBalancingMode() {
        this._balancingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get balancingModeInput() {
        return this._balancingMode;
    }
    get capacityScaler() {
        return this.getNumberAttribute('capacity_scaler');
    }
    set capacityScaler(value) {
        this._capacityScaler = value;
    }
    resetCapacityScaler() {
        this._capacityScaler = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get capacityScalerInput() {
        return this._capacityScaler;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get group() {
        return this.getStringAttribute('group');
    }
    set group(value) {
        this._group = value;
    }
    // Temporarily expose input value. Use with caution.
    get groupInput() {
        return this._group;
    }
    get maxConnections() {
        return this.getNumberAttribute('max_connections');
    }
    set maxConnections(value) {
        this._maxConnections = value;
    }
    resetMaxConnections() {
        this._maxConnections = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConnectionsInput() {
        return this._maxConnections;
    }
    get maxConnectionsPerEndpoint() {
        return this.getNumberAttribute('max_connections_per_endpoint');
    }
    set maxConnectionsPerEndpoint(value) {
        this._maxConnectionsPerEndpoint = value;
    }
    resetMaxConnectionsPerEndpoint() {
        this._maxConnectionsPerEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConnectionsPerEndpointInput() {
        return this._maxConnectionsPerEndpoint;
    }
    get maxConnectionsPerInstance() {
        return this.getNumberAttribute('max_connections_per_instance');
    }
    set maxConnectionsPerInstance(value) {
        this._maxConnectionsPerInstance = value;
    }
    resetMaxConnectionsPerInstance() {
        this._maxConnectionsPerInstance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConnectionsPerInstanceInput() {
        return this._maxConnectionsPerInstance;
    }
    get maxRate() {
        return this.getNumberAttribute('max_rate');
    }
    set maxRate(value) {
        this._maxRate = value;
    }
    resetMaxRate() {
        this._maxRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRateInput() {
        return this._maxRate;
    }
    get maxRatePerEndpoint() {
        return this.getNumberAttribute('max_rate_per_endpoint');
    }
    set maxRatePerEndpoint(value) {
        this._maxRatePerEndpoint = value;
    }
    resetMaxRatePerEndpoint() {
        this._maxRatePerEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRatePerEndpointInput() {
        return this._maxRatePerEndpoint;
    }
    get maxRatePerInstance() {
        return this.getNumberAttribute('max_rate_per_instance');
    }
    set maxRatePerInstance(value) {
        this._maxRatePerInstance = value;
    }
    resetMaxRatePerInstance() {
        this._maxRatePerInstance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRatePerInstanceInput() {
        return this._maxRatePerInstance;
    }
    get maxUtilization() {
        return this.getNumberAttribute('max_utilization');
    }
    set maxUtilization(value) {
        this._maxUtilization = value;
    }
    resetMaxUtilization() {
        this._maxUtilization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxUtilizationInput() {
        return this._maxUtilization;
    }
}
exports.ComputeBackendServiceBackendOutputReference = ComputeBackendServiceBackendOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceBackendOutputReference[_a] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceBackendOutputReference", version: "4.0.3" };
class ComputeBackendServiceBackendList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeBackendServiceBackendOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeBackendServiceBackendList = ComputeBackendServiceBackendList;
_b = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceBackendList[_b] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceBackendList", version: "4.0.3" };
function computeBackendServiceCdnPolicyCacheKeyPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        include_host: cdktf.booleanToTerraform(struct.includeHost),
        include_http_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includeHttpHeaders),
        include_named_cookies: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includeNamedCookies),
        include_protocol: cdktf.booleanToTerraform(struct.includeProtocol),
        include_query_string: cdktf.booleanToTerraform(struct.includeQueryString),
        query_string_blacklist: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queryStringBlacklist),
        query_string_whitelist: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queryStringWhitelist),
    };
}
exports.computeBackendServiceCdnPolicyCacheKeyPolicyToTerraform = computeBackendServiceCdnPolicyCacheKeyPolicyToTerraform;
class ComputeBackendServiceCdnPolicyCacheKeyPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._includeHost !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeHost = this._includeHost;
        }
        if (this._includeHttpHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeHttpHeaders = this._includeHttpHeaders;
        }
        if (this._includeNamedCookies !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeNamedCookies = this._includeNamedCookies;
        }
        if (this._includeProtocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeProtocol = this._includeProtocol;
        }
        if (this._includeQueryString !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeQueryString = this._includeQueryString;
        }
        if (this._queryStringBlacklist !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryStringBlacklist = this._queryStringBlacklist;
        }
        if (this._queryStringWhitelist !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryStringWhitelist = this._queryStringWhitelist;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._includeHost = undefined;
            this._includeHttpHeaders = undefined;
            this._includeNamedCookies = undefined;
            this._includeProtocol = undefined;
            this._includeQueryString = undefined;
            this._queryStringBlacklist = undefined;
            this._queryStringWhitelist = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._includeHost = value.includeHost;
            this._includeHttpHeaders = value.includeHttpHeaders;
            this._includeNamedCookies = value.includeNamedCookies;
            this._includeProtocol = value.includeProtocol;
            this._includeQueryString = value.includeQueryString;
            this._queryStringBlacklist = value.queryStringBlacklist;
            this._queryStringWhitelist = value.queryStringWhitelist;
        }
    }
    get includeHost() {
        return this.getBooleanAttribute('include_host');
    }
    set includeHost(value) {
        this._includeHost = value;
    }
    resetIncludeHost() {
        this._includeHost = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeHostInput() {
        return this._includeHost;
    }
    get includeHttpHeaders() {
        return this.getListAttribute('include_http_headers');
    }
    set includeHttpHeaders(value) {
        this._includeHttpHeaders = value;
    }
    resetIncludeHttpHeaders() {
        this._includeHttpHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeHttpHeadersInput() {
        return this._includeHttpHeaders;
    }
    get includeNamedCookies() {
        return this.getListAttribute('include_named_cookies');
    }
    set includeNamedCookies(value) {
        this._includeNamedCookies = value;
    }
    resetIncludeNamedCookies() {
        this._includeNamedCookies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeNamedCookiesInput() {
        return this._includeNamedCookies;
    }
    get includeProtocol() {
        return this.getBooleanAttribute('include_protocol');
    }
    set includeProtocol(value) {
        this._includeProtocol = value;
    }
    resetIncludeProtocol() {
        this._includeProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeProtocolInput() {
        return this._includeProtocol;
    }
    get includeQueryString() {
        return this.getBooleanAttribute('include_query_string');
    }
    set includeQueryString(value) {
        this._includeQueryString = value;
    }
    resetIncludeQueryString() {
        this._includeQueryString = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeQueryStringInput() {
        return this._includeQueryString;
    }
    get queryStringBlacklist() {
        return cdktf.Fn.tolist(this.getListAttribute('query_string_blacklist'));
    }
    set queryStringBlacklist(value) {
        this._queryStringBlacklist = value;
    }
    resetQueryStringBlacklist() {
        this._queryStringBlacklist = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryStringBlacklistInput() {
        return this._queryStringBlacklist;
    }
    get queryStringWhitelist() {
        return cdktf.Fn.tolist(this.getListAttribute('query_string_whitelist'));
    }
    set queryStringWhitelist(value) {
        this._queryStringWhitelist = value;
    }
    resetQueryStringWhitelist() {
        this._queryStringWhitelist = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryStringWhitelistInput() {
        return this._queryStringWhitelist;
    }
}
exports.ComputeBackendServiceCdnPolicyCacheKeyPolicyOutputReference = ComputeBackendServiceCdnPolicyCacheKeyPolicyOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceCdnPolicyCacheKeyPolicyOutputReference[_c] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceCdnPolicyCacheKeyPolicyOutputReference", version: "4.0.3" };
function computeBackendServiceCdnPolicyNegativeCachingPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        code: cdktf.numberToTerraform(struct.code),
        ttl: cdktf.numberToTerraform(struct.ttl),
    };
}
exports.computeBackendServiceCdnPolicyNegativeCachingPolicyToTerraform = computeBackendServiceCdnPolicyNegativeCachingPolicyToTerraform;
class ComputeBackendServiceCdnPolicyNegativeCachingPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._code !== undefined) {
            hasAnyValues = true;
            internalValueResult.code = this._code;
        }
        if (this._ttl !== undefined) {
            hasAnyValues = true;
            internalValueResult.ttl = this._ttl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._code = undefined;
            this._ttl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._code = value.code;
            this._ttl = value.ttl;
        }
    }
    get code() {
        return this.getNumberAttribute('code');
    }
    set code(value) {
        this._code = value;
    }
    resetCode() {
        this._code = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeInput() {
        return this._code;
    }
    get ttl() {
        return this.getNumberAttribute('ttl');
    }
    set ttl(value) {
        this._ttl = value;
    }
    resetTtl() {
        this._ttl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ttlInput() {
        return this._ttl;
    }
}
exports.ComputeBackendServiceCdnPolicyNegativeCachingPolicyOutputReference = ComputeBackendServiceCdnPolicyNegativeCachingPolicyOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceCdnPolicyNegativeCachingPolicyOutputReference[_d] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceCdnPolicyNegativeCachingPolicyOutputReference", version: "4.0.3" };
class ComputeBackendServiceCdnPolicyNegativeCachingPolicyList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeBackendServiceCdnPolicyNegativeCachingPolicyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeBackendServiceCdnPolicyNegativeCachingPolicyList = ComputeBackendServiceCdnPolicyNegativeCachingPolicyList;
_e = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceCdnPolicyNegativeCachingPolicyList[_e] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceCdnPolicyNegativeCachingPolicyList", version: "4.0.3" };
function computeBackendServiceCdnPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cache_mode: cdktf.stringToTerraform(struct.cacheMode),
        client_ttl: cdktf.numberToTerraform(struct.clientTtl),
        default_ttl: cdktf.numberToTerraform(struct.defaultTtl),
        max_ttl: cdktf.numberToTerraform(struct.maxTtl),
        negative_caching: cdktf.booleanToTerraform(struct.negativeCaching),
        serve_while_stale: cdktf.numberToTerraform(struct.serveWhileStale),
        signed_url_cache_max_age_sec: cdktf.numberToTerraform(struct.signedUrlCacheMaxAgeSec),
        cache_key_policy: computeBackendServiceCdnPolicyCacheKeyPolicyToTerraform(struct.cacheKeyPolicy),
        negative_caching_policy: cdktf.listMapper(computeBackendServiceCdnPolicyNegativeCachingPolicyToTerraform, true)(struct.negativeCachingPolicy),
    };
}
exports.computeBackendServiceCdnPolicyToTerraform = computeBackendServiceCdnPolicyToTerraform;
class ComputeBackendServiceCdnPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cache_key_policy - computed: false, optional: true, required: false
        this._cacheKeyPolicy = new ComputeBackendServiceCdnPolicyCacheKeyPolicyOutputReference(this, "cache_key_policy");
        // negative_caching_policy - computed: false, optional: true, required: false
        this._negativeCachingPolicy = new ComputeBackendServiceCdnPolicyNegativeCachingPolicyList(this, "negative_caching_policy", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cacheMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.cacheMode = this._cacheMode;
        }
        if (this._clientTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientTtl = this._clientTtl;
        }
        if (this._defaultTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultTtl = this._defaultTtl;
        }
        if (this._maxTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxTtl = this._maxTtl;
        }
        if (this._negativeCaching !== undefined) {
            hasAnyValues = true;
            internalValueResult.negativeCaching = this._negativeCaching;
        }
        if (this._serveWhileStale !== undefined) {
            hasAnyValues = true;
            internalValueResult.serveWhileStale = this._serveWhileStale;
        }
        if (this._signedUrlCacheMaxAgeSec !== undefined) {
            hasAnyValues = true;
            internalValueResult.signedUrlCacheMaxAgeSec = this._signedUrlCacheMaxAgeSec;
        }
        if (this._cacheKeyPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cacheKeyPolicy = this._cacheKeyPolicy?.internalValue;
        }
        if (this._negativeCachingPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.negativeCachingPolicy = this._negativeCachingPolicy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cacheMode = undefined;
            this._clientTtl = undefined;
            this._defaultTtl = undefined;
            this._maxTtl = undefined;
            this._negativeCaching = undefined;
            this._serveWhileStale = undefined;
            this._signedUrlCacheMaxAgeSec = undefined;
            this._cacheKeyPolicy.internalValue = undefined;
            this._negativeCachingPolicy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cacheMode = value.cacheMode;
            this._clientTtl = value.clientTtl;
            this._defaultTtl = value.defaultTtl;
            this._maxTtl = value.maxTtl;
            this._negativeCaching = value.negativeCaching;
            this._serveWhileStale = value.serveWhileStale;
            this._signedUrlCacheMaxAgeSec = value.signedUrlCacheMaxAgeSec;
            this._cacheKeyPolicy.internalValue = value.cacheKeyPolicy;
            this._negativeCachingPolicy.internalValue = value.negativeCachingPolicy;
        }
    }
    get cacheMode() {
        return this.getStringAttribute('cache_mode');
    }
    set cacheMode(value) {
        this._cacheMode = value;
    }
    resetCacheMode() {
        this._cacheMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheModeInput() {
        return this._cacheMode;
    }
    get clientTtl() {
        return this.getNumberAttribute('client_ttl');
    }
    set clientTtl(value) {
        this._clientTtl = value;
    }
    resetClientTtl() {
        this._clientTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientTtlInput() {
        return this._clientTtl;
    }
    get defaultTtl() {
        return this.getNumberAttribute('default_ttl');
    }
    set defaultTtl(value) {
        this._defaultTtl = value;
    }
    resetDefaultTtl() {
        this._defaultTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultTtlInput() {
        return this._defaultTtl;
    }
    get maxTtl() {
        return this.getNumberAttribute('max_ttl');
    }
    set maxTtl(value) {
        this._maxTtl = value;
    }
    resetMaxTtl() {
        this._maxTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxTtlInput() {
        return this._maxTtl;
    }
    get negativeCaching() {
        return this.getBooleanAttribute('negative_caching');
    }
    set negativeCaching(value) {
        this._negativeCaching = value;
    }
    resetNegativeCaching() {
        this._negativeCaching = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get negativeCachingInput() {
        return this._negativeCaching;
    }
    get serveWhileStale() {
        return this.getNumberAttribute('serve_while_stale');
    }
    set serveWhileStale(value) {
        this._serveWhileStale = value;
    }
    resetServeWhileStale() {
        this._serveWhileStale = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serveWhileStaleInput() {
        return this._serveWhileStale;
    }
    get signedUrlCacheMaxAgeSec() {
        return this.getNumberAttribute('signed_url_cache_max_age_sec');
    }
    set signedUrlCacheMaxAgeSec(value) {
        this._signedUrlCacheMaxAgeSec = value;
    }
    resetSignedUrlCacheMaxAgeSec() {
        this._signedUrlCacheMaxAgeSec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get signedUrlCacheMaxAgeSecInput() {
        return this._signedUrlCacheMaxAgeSec;
    }
    get cacheKeyPolicy() {
        return this._cacheKeyPolicy;
    }
    putCacheKeyPolicy(value) {
        this._cacheKeyPolicy.internalValue = value;
    }
    resetCacheKeyPolicy() {
        this._cacheKeyPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheKeyPolicyInput() {
        return this._cacheKeyPolicy.internalValue;
    }
    get negativeCachingPolicy() {
        return this._negativeCachingPolicy;
    }
    putNegativeCachingPolicy(value) {
        this._negativeCachingPolicy.internalValue = value;
    }
    resetNegativeCachingPolicy() {
        this._negativeCachingPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get negativeCachingPolicyInput() {
        return this._negativeCachingPolicy.internalValue;
    }
}
exports.ComputeBackendServiceCdnPolicyOutputReference = ComputeBackendServiceCdnPolicyOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceCdnPolicyOutputReference[_f] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceCdnPolicyOutputReference", version: "4.0.3" };
function computeBackendServiceCircuitBreakersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_connections: cdktf.numberToTerraform(struct.maxConnections),
        max_pending_requests: cdktf.numberToTerraform(struct.maxPendingRequests),
        max_requests: cdktf.numberToTerraform(struct.maxRequests),
        max_requests_per_connection: cdktf.numberToTerraform(struct.maxRequestsPerConnection),
        max_retries: cdktf.numberToTerraform(struct.maxRetries),
    };
}
exports.computeBackendServiceCircuitBreakersToTerraform = computeBackendServiceCircuitBreakersToTerraform;
class ComputeBackendServiceCircuitBreakersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConnections !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConnections = this._maxConnections;
        }
        if (this._maxPendingRequests !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxPendingRequests = this._maxPendingRequests;
        }
        if (this._maxRequests !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRequests = this._maxRequests;
        }
        if (this._maxRequestsPerConnection !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRequestsPerConnection = this._maxRequestsPerConnection;
        }
        if (this._maxRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRetries = this._maxRetries;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConnections = undefined;
            this._maxPendingRequests = undefined;
            this._maxRequests = undefined;
            this._maxRequestsPerConnection = undefined;
            this._maxRetries = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConnections = value.maxConnections;
            this._maxPendingRequests = value.maxPendingRequests;
            this._maxRequests = value.maxRequests;
            this._maxRequestsPerConnection = value.maxRequestsPerConnection;
            this._maxRetries = value.maxRetries;
        }
    }
    get maxConnections() {
        return this.getNumberAttribute('max_connections');
    }
    set maxConnections(value) {
        this._maxConnections = value;
    }
    resetMaxConnections() {
        this._maxConnections = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConnectionsInput() {
        return this._maxConnections;
    }
    get maxPendingRequests() {
        return this.getNumberAttribute('max_pending_requests');
    }
    set maxPendingRequests(value) {
        this._maxPendingRequests = value;
    }
    resetMaxPendingRequests() {
        this._maxPendingRequests = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxPendingRequestsInput() {
        return this._maxPendingRequests;
    }
    get maxRequests() {
        return this.getNumberAttribute('max_requests');
    }
    set maxRequests(value) {
        this._maxRequests = value;
    }
    resetMaxRequests() {
        this._maxRequests = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRequestsInput() {
        return this._maxRequests;
    }
    get maxRequestsPerConnection() {
        return this.getNumberAttribute('max_requests_per_connection');
    }
    set maxRequestsPerConnection(value) {
        this._maxRequestsPerConnection = value;
    }
    resetMaxRequestsPerConnection() {
        this._maxRequestsPerConnection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRequestsPerConnectionInput() {
        return this._maxRequestsPerConnection;
    }
    get maxRetries() {
        return this.getNumberAttribute('max_retries');
    }
    set maxRetries(value) {
        this._maxRetries = value;
    }
    resetMaxRetries() {
        this._maxRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRetriesInput() {
        return this._maxRetries;
    }
}
exports.ComputeBackendServiceCircuitBreakersOutputReference = ComputeBackendServiceCircuitBreakersOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceCircuitBreakersOutputReference[_g] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceCircuitBreakersOutputReference", version: "4.0.3" };
function computeBackendServiceConsistentHashHttpCookieTtlToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.computeBackendServiceConsistentHashHttpCookieTtlToTerraform = computeBackendServiceConsistentHashHttpCookieTtlToTerraform;
class ComputeBackendServiceConsistentHashHttpCookieTtlOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeBackendServiceConsistentHashHttpCookieTtlOutputReference = ComputeBackendServiceConsistentHashHttpCookieTtlOutputReference;
_h = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceConsistentHashHttpCookieTtlOutputReference[_h] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceConsistentHashHttpCookieTtlOutputReference", version: "4.0.3" };
function computeBackendServiceConsistentHashHttpCookieToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        path: cdktf.stringToTerraform(struct.path),
        ttl: computeBackendServiceConsistentHashHttpCookieTtlToTerraform(struct.ttl),
    };
}
exports.computeBackendServiceConsistentHashHttpCookieToTerraform = computeBackendServiceConsistentHashHttpCookieToTerraform;
class ComputeBackendServiceConsistentHashHttpCookieOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ttl - computed: false, optional: true, required: false
        this._ttl = new ComputeBackendServiceConsistentHashHttpCookieTtlOutputReference(this, "ttl");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._ttl?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ttl = this._ttl?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._path = undefined;
            this._ttl.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._path = value.path;
            this._ttl.internalValue = value.ttl;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get ttl() {
        return this._ttl;
    }
    putTtl(value) {
        this._ttl.internalValue = value;
    }
    resetTtl() {
        this._ttl.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ttlInput() {
        return this._ttl.internalValue;
    }
}
exports.ComputeBackendServiceConsistentHashHttpCookieOutputReference = ComputeBackendServiceConsistentHashHttpCookieOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceConsistentHashHttpCookieOutputReference[_j] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceConsistentHashHttpCookieOutputReference", version: "4.0.3" };
function computeBackendServiceConsistentHashToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_header_name: cdktf.stringToTerraform(struct.httpHeaderName),
        minimum_ring_size: cdktf.numberToTerraform(struct.minimumRingSize),
        http_cookie: computeBackendServiceConsistentHashHttpCookieToTerraform(struct.httpCookie),
    };
}
exports.computeBackendServiceConsistentHashToTerraform = computeBackendServiceConsistentHashToTerraform;
class ComputeBackendServiceConsistentHashOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // http_cookie - computed: false, optional: true, required: false
        this._httpCookie = new ComputeBackendServiceConsistentHashHttpCookieOutputReference(this, "http_cookie");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpHeaderName !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpHeaderName = this._httpHeaderName;
        }
        if (this._minimumRingSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimumRingSize = this._minimumRingSize;
        }
        if (this._httpCookie?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpCookie = this._httpCookie?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpHeaderName = undefined;
            this._minimumRingSize = undefined;
            this._httpCookie.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpHeaderName = value.httpHeaderName;
            this._minimumRingSize = value.minimumRingSize;
            this._httpCookie.internalValue = value.httpCookie;
        }
    }
    get httpHeaderName() {
        return this.getStringAttribute('http_header_name');
    }
    set httpHeaderName(value) {
        this._httpHeaderName = value;
    }
    resetHttpHeaderName() {
        this._httpHeaderName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpHeaderNameInput() {
        return this._httpHeaderName;
    }
    get minimumRingSize() {
        return this.getNumberAttribute('minimum_ring_size');
    }
    set minimumRingSize(value) {
        this._minimumRingSize = value;
    }
    resetMinimumRingSize() {
        this._minimumRingSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimumRingSizeInput() {
        return this._minimumRingSize;
    }
    get httpCookie() {
        return this._httpCookie;
    }
    putHttpCookie(value) {
        this._httpCookie.internalValue = value;
    }
    resetHttpCookie() {
        this._httpCookie.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpCookieInput() {
        return this._httpCookie.internalValue;
    }
}
exports.ComputeBackendServiceConsistentHashOutputReference = ComputeBackendServiceConsistentHashOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceConsistentHashOutputReference[_k] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceConsistentHashOutputReference", version: "4.0.3" };
function computeBackendServiceIapToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        oauth2_client_id: cdktf.stringToTerraform(struct.oauth2ClientId),
        oauth2_client_secret: cdktf.stringToTerraform(struct.oauth2ClientSecret),
    };
}
exports.computeBackendServiceIapToTerraform = computeBackendServiceIapToTerraform;
class ComputeBackendServiceIapOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._oauth2ClientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauth2ClientId = this._oauth2ClientId;
        }
        if (this._oauth2ClientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauth2ClientSecret = this._oauth2ClientSecret;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._oauth2ClientId = undefined;
            this._oauth2ClientSecret = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._oauth2ClientId = value.oauth2ClientId;
            this._oauth2ClientSecret = value.oauth2ClientSecret;
        }
    }
    get oauth2ClientId() {
        return this.getStringAttribute('oauth2_client_id');
    }
    set oauth2ClientId(value) {
        this._oauth2ClientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get oauth2ClientIdInput() {
        return this._oauth2ClientId;
    }
    get oauth2ClientSecret() {
        return this.getStringAttribute('oauth2_client_secret');
    }
    set oauth2ClientSecret(value) {
        this._oauth2ClientSecret = value;
    }
    // Temporarily expose input value. Use with caution.
    get oauth2ClientSecretInput() {
        return this._oauth2ClientSecret;
    }
    // oauth2_client_secret_sha256 - computed: true, optional: false, required: false
    get oauth2ClientSecretSha256() {
        return this.getStringAttribute('oauth2_client_secret_sha256');
    }
}
exports.ComputeBackendServiceIapOutputReference = ComputeBackendServiceIapOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceIapOutputReference[_l] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceIapOutputReference", version: "4.0.3" };
function computeBackendServiceLogConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable: cdktf.booleanToTerraform(struct.enable),
        sample_rate: cdktf.numberToTerraform(struct.sampleRate),
    };
}
exports.computeBackendServiceLogConfigToTerraform = computeBackendServiceLogConfigToTerraform;
class ComputeBackendServiceLogConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enable !== undefined) {
            hasAnyValues = true;
            internalValueResult.enable = this._enable;
        }
        if (this._sampleRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleRate = this._sampleRate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enable = undefined;
            this._sampleRate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enable = value.enable;
            this._sampleRate = value.sampleRate;
        }
    }
    get enable() {
        return this.getBooleanAttribute('enable');
    }
    set enable(value) {
        this._enable = value;
    }
    resetEnable() {
        this._enable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableInput() {
        return this._enable;
    }
    get sampleRate() {
        return this.getNumberAttribute('sample_rate');
    }
    set sampleRate(value) {
        this._sampleRate = value;
    }
    resetSampleRate() {
        this._sampleRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleRateInput() {
        return this._sampleRate;
    }
}
exports.ComputeBackendServiceLogConfigOutputReference = ComputeBackendServiceLogConfigOutputReference;
_m = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceLogConfigOutputReference[_m] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceLogConfigOutputReference", version: "4.0.3" };
function computeBackendServiceOutlierDetectionBaseEjectionTimeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.computeBackendServiceOutlierDetectionBaseEjectionTimeToTerraform = computeBackendServiceOutlierDetectionBaseEjectionTimeToTerraform;
class ComputeBackendServiceOutlierDetectionBaseEjectionTimeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeBackendServiceOutlierDetectionBaseEjectionTimeOutputReference = ComputeBackendServiceOutlierDetectionBaseEjectionTimeOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceOutlierDetectionBaseEjectionTimeOutputReference[_o] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceOutlierDetectionBaseEjectionTimeOutputReference", version: "4.0.3" };
function computeBackendServiceOutlierDetectionIntervalToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.computeBackendServiceOutlierDetectionIntervalToTerraform = computeBackendServiceOutlierDetectionIntervalToTerraform;
class ComputeBackendServiceOutlierDetectionIntervalOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeBackendServiceOutlierDetectionIntervalOutputReference = ComputeBackendServiceOutlierDetectionIntervalOutputReference;
_p = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceOutlierDetectionIntervalOutputReference[_p] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceOutlierDetectionIntervalOutputReference", version: "4.0.3" };
function computeBackendServiceOutlierDetectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        consecutive_errors: cdktf.numberToTerraform(struct.consecutiveErrors),
        consecutive_gateway_failure: cdktf.numberToTerraform(struct.consecutiveGatewayFailure),
        enforcing_consecutive_errors: cdktf.numberToTerraform(struct.enforcingConsecutiveErrors),
        enforcing_consecutive_gateway_failure: cdktf.numberToTerraform(struct.enforcingConsecutiveGatewayFailure),
        enforcing_success_rate: cdktf.numberToTerraform(struct.enforcingSuccessRate),
        max_ejection_percent: cdktf.numberToTerraform(struct.maxEjectionPercent),
        success_rate_minimum_hosts: cdktf.numberToTerraform(struct.successRateMinimumHosts),
        success_rate_request_volume: cdktf.numberToTerraform(struct.successRateRequestVolume),
        success_rate_stdev_factor: cdktf.numberToTerraform(struct.successRateStdevFactor),
        base_ejection_time: computeBackendServiceOutlierDetectionBaseEjectionTimeToTerraform(struct.baseEjectionTime),
        interval: computeBackendServiceOutlierDetectionIntervalToTerraform(struct.interval),
    };
}
exports.computeBackendServiceOutlierDetectionToTerraform = computeBackendServiceOutlierDetectionToTerraform;
class ComputeBackendServiceOutlierDetectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // base_ejection_time - computed: false, optional: true, required: false
        this._baseEjectionTime = new ComputeBackendServiceOutlierDetectionBaseEjectionTimeOutputReference(this, "base_ejection_time");
        // interval - computed: false, optional: true, required: false
        this._interval = new ComputeBackendServiceOutlierDetectionIntervalOutputReference(this, "interval");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._consecutiveErrors !== undefined) {
            hasAnyValues = true;
            internalValueResult.consecutiveErrors = this._consecutiveErrors;
        }
        if (this._consecutiveGatewayFailure !== undefined) {
            hasAnyValues = true;
            internalValueResult.consecutiveGatewayFailure = this._consecutiveGatewayFailure;
        }
        if (this._enforcingConsecutiveErrors !== undefined) {
            hasAnyValues = true;
            internalValueResult.enforcingConsecutiveErrors = this._enforcingConsecutiveErrors;
        }
        if (this._enforcingConsecutiveGatewayFailure !== undefined) {
            hasAnyValues = true;
            internalValueResult.enforcingConsecutiveGatewayFailure = this._enforcingConsecutiveGatewayFailure;
        }
        if (this._enforcingSuccessRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.enforcingSuccessRate = this._enforcingSuccessRate;
        }
        if (this._maxEjectionPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxEjectionPercent = this._maxEjectionPercent;
        }
        if (this._successRateMinimumHosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.successRateMinimumHosts = this._successRateMinimumHosts;
        }
        if (this._successRateRequestVolume !== undefined) {
            hasAnyValues = true;
            internalValueResult.successRateRequestVolume = this._successRateRequestVolume;
        }
        if (this._successRateStdevFactor !== undefined) {
            hasAnyValues = true;
            internalValueResult.successRateStdevFactor = this._successRateStdevFactor;
        }
        if (this._baseEjectionTime?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseEjectionTime = this._baseEjectionTime?.internalValue;
        }
        if (this._interval?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.interval = this._interval?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._consecutiveErrors = undefined;
            this._consecutiveGatewayFailure = undefined;
            this._enforcingConsecutiveErrors = undefined;
            this._enforcingConsecutiveGatewayFailure = undefined;
            this._enforcingSuccessRate = undefined;
            this._maxEjectionPercent = undefined;
            this._successRateMinimumHosts = undefined;
            this._successRateRequestVolume = undefined;
            this._successRateStdevFactor = undefined;
            this._baseEjectionTime.internalValue = undefined;
            this._interval.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._consecutiveErrors = value.consecutiveErrors;
            this._consecutiveGatewayFailure = value.consecutiveGatewayFailure;
            this._enforcingConsecutiveErrors = value.enforcingConsecutiveErrors;
            this._enforcingConsecutiveGatewayFailure = value.enforcingConsecutiveGatewayFailure;
            this._enforcingSuccessRate = value.enforcingSuccessRate;
            this._maxEjectionPercent = value.maxEjectionPercent;
            this._successRateMinimumHosts = value.successRateMinimumHosts;
            this._successRateRequestVolume = value.successRateRequestVolume;
            this._successRateStdevFactor = value.successRateStdevFactor;
            this._baseEjectionTime.internalValue = value.baseEjectionTime;
            this._interval.internalValue = value.interval;
        }
    }
    get consecutiveErrors() {
        return this.getNumberAttribute('consecutive_errors');
    }
    set consecutiveErrors(value) {
        this._consecutiveErrors = value;
    }
    resetConsecutiveErrors() {
        this._consecutiveErrors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get consecutiveErrorsInput() {
        return this._consecutiveErrors;
    }
    get consecutiveGatewayFailure() {
        return this.getNumberAttribute('consecutive_gateway_failure');
    }
    set consecutiveGatewayFailure(value) {
        this._consecutiveGatewayFailure = value;
    }
    resetConsecutiveGatewayFailure() {
        this._consecutiveGatewayFailure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get consecutiveGatewayFailureInput() {
        return this._consecutiveGatewayFailure;
    }
    get enforcingConsecutiveErrors() {
        return this.getNumberAttribute('enforcing_consecutive_errors');
    }
    set enforcingConsecutiveErrors(value) {
        this._enforcingConsecutiveErrors = value;
    }
    resetEnforcingConsecutiveErrors() {
        this._enforcingConsecutiveErrors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enforcingConsecutiveErrorsInput() {
        return this._enforcingConsecutiveErrors;
    }
    get enforcingConsecutiveGatewayFailure() {
        return this.getNumberAttribute('enforcing_consecutive_gateway_failure');
    }
    set enforcingConsecutiveGatewayFailure(value) {
        this._enforcingConsecutiveGatewayFailure = value;
    }
    resetEnforcingConsecutiveGatewayFailure() {
        this._enforcingConsecutiveGatewayFailure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enforcingConsecutiveGatewayFailureInput() {
        return this._enforcingConsecutiveGatewayFailure;
    }
    get enforcingSuccessRate() {
        return this.getNumberAttribute('enforcing_success_rate');
    }
    set enforcingSuccessRate(value) {
        this._enforcingSuccessRate = value;
    }
    resetEnforcingSuccessRate() {
        this._enforcingSuccessRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enforcingSuccessRateInput() {
        return this._enforcingSuccessRate;
    }
    get maxEjectionPercent() {
        return this.getNumberAttribute('max_ejection_percent');
    }
    set maxEjectionPercent(value) {
        this._maxEjectionPercent = value;
    }
    resetMaxEjectionPercent() {
        this._maxEjectionPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxEjectionPercentInput() {
        return this._maxEjectionPercent;
    }
    get successRateMinimumHosts() {
        return this.getNumberAttribute('success_rate_minimum_hosts');
    }
    set successRateMinimumHosts(value) {
        this._successRateMinimumHosts = value;
    }
    resetSuccessRateMinimumHosts() {
        this._successRateMinimumHosts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get successRateMinimumHostsInput() {
        return this._successRateMinimumHosts;
    }
    get successRateRequestVolume() {
        return this.getNumberAttribute('success_rate_request_volume');
    }
    set successRateRequestVolume(value) {
        this._successRateRequestVolume = value;
    }
    resetSuccessRateRequestVolume() {
        this._successRateRequestVolume = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get successRateRequestVolumeInput() {
        return this._successRateRequestVolume;
    }
    get successRateStdevFactor() {
        return this.getNumberAttribute('success_rate_stdev_factor');
    }
    set successRateStdevFactor(value) {
        this._successRateStdevFactor = value;
    }
    resetSuccessRateStdevFactor() {
        this._successRateStdevFactor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get successRateStdevFactorInput() {
        return this._successRateStdevFactor;
    }
    get baseEjectionTime() {
        return this._baseEjectionTime;
    }
    putBaseEjectionTime(value) {
        this._baseEjectionTime.internalValue = value;
    }
    resetBaseEjectionTime() {
        this._baseEjectionTime.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseEjectionTimeInput() {
        return this._baseEjectionTime.internalValue;
    }
    get interval() {
        return this._interval;
    }
    putInterval(value) {
        this._interval.internalValue = value;
    }
    resetInterval() {
        this._interval.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intervalInput() {
        return this._interval.internalValue;
    }
}
exports.ComputeBackendServiceOutlierDetectionOutputReference = ComputeBackendServiceOutlierDetectionOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceOutlierDetectionOutputReference[_q] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceOutlierDetectionOutputReference", version: "4.0.3" };
function computeBackendServiceSecuritySettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_tls_policy: cdktf.stringToTerraform(struct.clientTlsPolicy),
        subject_alt_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subjectAltNames),
    };
}
exports.computeBackendServiceSecuritySettingsToTerraform = computeBackendServiceSecuritySettingsToTerraform;
class ComputeBackendServiceSecuritySettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientTlsPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientTlsPolicy = this._clientTlsPolicy;
        }
        if (this._subjectAltNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.subjectAltNames = this._subjectAltNames;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientTlsPolicy = undefined;
            this._subjectAltNames = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientTlsPolicy = value.clientTlsPolicy;
            this._subjectAltNames = value.subjectAltNames;
        }
    }
    get clientTlsPolicy() {
        return this.getStringAttribute('client_tls_policy');
    }
    set clientTlsPolicy(value) {
        this._clientTlsPolicy = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientTlsPolicyInput() {
        return this._clientTlsPolicy;
    }
    get subjectAltNames() {
        return this.getListAttribute('subject_alt_names');
    }
    set subjectAltNames(value) {
        this._subjectAltNames = value;
    }
    // Temporarily expose input value. Use with caution.
    get subjectAltNamesInput() {
        return this._subjectAltNames;
    }
}
exports.ComputeBackendServiceSecuritySettingsOutputReference = ComputeBackendServiceSecuritySettingsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceSecuritySettingsOutputReference[_r] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceSecuritySettingsOutputReference", version: "4.0.3" };
function computeBackendServiceTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.computeBackendServiceTimeoutsToTerraform = computeBackendServiceTimeoutsToTerraform;
class ComputeBackendServiceTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ComputeBackendServiceTimeoutsOutputReference = ComputeBackendServiceTimeoutsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
ComputeBackendServiceTimeoutsOutputReference[_s] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendServiceTimeoutsOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/compute_backend_service google_compute_backend_service}
*/
class ComputeBackendService extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/compute_backend_service google_compute_backend_service} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ComputeBackendServiceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_compute_backend_service',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // backend - computed: false, optional: true, required: false
        this._backend = new ComputeBackendServiceBackendList(this, "backend", true);
        // cdn_policy - computed: false, optional: true, required: false
        this._cdnPolicy = new ComputeBackendServiceCdnPolicyOutputReference(this, "cdn_policy");
        // circuit_breakers - computed: false, optional: true, required: false
        this._circuitBreakers = new ComputeBackendServiceCircuitBreakersOutputReference(this, "circuit_breakers");
        // consistent_hash - computed: false, optional: true, required: false
        this._consistentHash = new ComputeBackendServiceConsistentHashOutputReference(this, "consistent_hash");
        // iap - computed: false, optional: true, required: false
        this._iap = new ComputeBackendServiceIapOutputReference(this, "iap");
        // log_config - computed: false, optional: true, required: false
        this._logConfig = new ComputeBackendServiceLogConfigOutputReference(this, "log_config");
        // outlier_detection - computed: false, optional: true, required: false
        this._outlierDetection = new ComputeBackendServiceOutlierDetectionOutputReference(this, "outlier_detection");
        // security_settings - computed: false, optional: true, required: false
        this._securitySettings = new ComputeBackendServiceSecuritySettingsOutputReference(this, "security_settings");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ComputeBackendServiceTimeoutsOutputReference(this, "timeouts");
        this._affinityCookieTtlSec = config.affinityCookieTtlSec;
        this._compressionMode = config.compressionMode;
        this._connectionDrainingTimeoutSec = config.connectionDrainingTimeoutSec;
        this._customRequestHeaders = config.customRequestHeaders;
        this._customResponseHeaders = config.customResponseHeaders;
        this._description = config.description;
        this._enableCdn = config.enableCdn;
        this._healthChecks = config.healthChecks;
        this._id = config.id;
        this._loadBalancingScheme = config.loadBalancingScheme;
        this._localityLbPolicy = config.localityLbPolicy;
        this._name = config.name;
        this._portName = config.portName;
        this._project = config.project;
        this._protocol = config.protocol;
        this._securityPolicy = config.securityPolicy;
        this._sessionAffinity = config.sessionAffinity;
        this._timeoutSec = config.timeoutSec;
        this._backend.internalValue = config.backend;
        this._cdnPolicy.internalValue = config.cdnPolicy;
        this._circuitBreakers.internalValue = config.circuitBreakers;
        this._consistentHash.internalValue = config.consistentHash;
        this._iap.internalValue = config.iap;
        this._logConfig.internalValue = config.logConfig;
        this._outlierDetection.internalValue = config.outlierDetection;
        this._securitySettings.internalValue = config.securitySettings;
        this._timeouts.internalValue = config.timeouts;
    }
    get affinityCookieTtlSec() {
        return this.getNumberAttribute('affinity_cookie_ttl_sec');
    }
    set affinityCookieTtlSec(value) {
        this._affinityCookieTtlSec = value;
    }
    resetAffinityCookieTtlSec() {
        this._affinityCookieTtlSec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get affinityCookieTtlSecInput() {
        return this._affinityCookieTtlSec;
    }
    get compressionMode() {
        return this.getStringAttribute('compression_mode');
    }
    set compressionMode(value) {
        this._compressionMode = value;
    }
    resetCompressionMode() {
        this._compressionMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionModeInput() {
        return this._compressionMode;
    }
    get connectionDrainingTimeoutSec() {
        return this.getNumberAttribute('connection_draining_timeout_sec');
    }
    set connectionDrainingTimeoutSec(value) {
        this._connectionDrainingTimeoutSec = value;
    }
    resetConnectionDrainingTimeoutSec() {
        this._connectionDrainingTimeoutSec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionDrainingTimeoutSecInput() {
        return this._connectionDrainingTimeoutSec;
    }
    // creation_timestamp - computed: true, optional: false, required: false
    get creationTimestamp() {
        return this.getStringAttribute('creation_timestamp');
    }
    get customRequestHeaders() {
        return cdktf.Fn.tolist(this.getListAttribute('custom_request_headers'));
    }
    set customRequestHeaders(value) {
        this._customRequestHeaders = value;
    }
    resetCustomRequestHeaders() {
        this._customRequestHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customRequestHeadersInput() {
        return this._customRequestHeaders;
    }
    get customResponseHeaders() {
        return cdktf.Fn.tolist(this.getListAttribute('custom_response_headers'));
    }
    set customResponseHeaders(value) {
        this._customResponseHeaders = value;
    }
    resetCustomResponseHeaders() {
        this._customResponseHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customResponseHeadersInput() {
        return this._customResponseHeaders;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get enableCdn() {
        return this.getBooleanAttribute('enable_cdn');
    }
    set enableCdn(value) {
        this._enableCdn = value;
    }
    resetEnableCdn() {
        this._enableCdn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableCdnInput() {
        return this._enableCdn;
    }
    // fingerprint - computed: true, optional: false, required: false
    get fingerprint() {
        return this.getStringAttribute('fingerprint');
    }
    get healthChecks() {
        return cdktf.Fn.tolist(this.getListAttribute('health_checks'));
    }
    set healthChecks(value) {
        this._healthChecks = value;
    }
    resetHealthChecks() {
        this._healthChecks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthChecksInput() {
        return this._healthChecks;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get loadBalancingScheme() {
        return this.getStringAttribute('load_balancing_scheme');
    }
    set loadBalancingScheme(value) {
        this._loadBalancingScheme = value;
    }
    resetLoadBalancingScheme() {
        this._loadBalancingScheme = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancingSchemeInput() {
        return this._loadBalancingScheme;
    }
    get localityLbPolicy() {
        return this.getStringAttribute('locality_lb_policy');
    }
    set localityLbPolicy(value) {
        this._localityLbPolicy = value;
    }
    resetLocalityLbPolicy() {
        this._localityLbPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localityLbPolicyInput() {
        return this._localityLbPolicy;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get portName() {
        return this.getStringAttribute('port_name');
    }
    set portName(value) {
        this._portName = value;
    }
    resetPortName() {
        this._portName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portNameInput() {
        return this._portName;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    resetProtocol() {
        this._protocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
    get securityPolicy() {
        return this.getStringAttribute('security_policy');
    }
    set securityPolicy(value) {
        this._securityPolicy = value;
    }
    resetSecurityPolicy() {
        this._securityPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityPolicyInput() {
        return this._securityPolicy;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    get sessionAffinity() {
        return this.getStringAttribute('session_affinity');
    }
    set sessionAffinity(value) {
        this._sessionAffinity = value;
    }
    resetSessionAffinity() {
        this._sessionAffinity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sessionAffinityInput() {
        return this._sessionAffinity;
    }
    get timeoutSec() {
        return this.getNumberAttribute('timeout_sec');
    }
    set timeoutSec(value) {
        this._timeoutSec = value;
    }
    resetTimeoutSec() {
        this._timeoutSec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutSecInput() {
        return this._timeoutSec;
    }
    get backend() {
        return this._backend;
    }
    putBackend(value) {
        this._backend.internalValue = value;
    }
    resetBackend() {
        this._backend.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendInput() {
        return this._backend.internalValue;
    }
    get cdnPolicy() {
        return this._cdnPolicy;
    }
    putCdnPolicy(value) {
        this._cdnPolicy.internalValue = value;
    }
    resetCdnPolicy() {
        this._cdnPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cdnPolicyInput() {
        return this._cdnPolicy.internalValue;
    }
    get circuitBreakers() {
        return this._circuitBreakers;
    }
    putCircuitBreakers(value) {
        this._circuitBreakers.internalValue = value;
    }
    resetCircuitBreakers() {
        this._circuitBreakers.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get circuitBreakersInput() {
        return this._circuitBreakers.internalValue;
    }
    get consistentHash() {
        return this._consistentHash;
    }
    putConsistentHash(value) {
        this._consistentHash.internalValue = value;
    }
    resetConsistentHash() {
        this._consistentHash.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get consistentHashInput() {
        return this._consistentHash.internalValue;
    }
    get iap() {
        return this._iap;
    }
    putIap(value) {
        this._iap.internalValue = value;
    }
    resetIap() {
        this._iap.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iapInput() {
        return this._iap.internalValue;
    }
    get logConfig() {
        return this._logConfig;
    }
    putLogConfig(value) {
        this._logConfig.internalValue = value;
    }
    resetLogConfig() {
        this._logConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logConfigInput() {
        return this._logConfig.internalValue;
    }
    get outlierDetection() {
        return this._outlierDetection;
    }
    putOutlierDetection(value) {
        this._outlierDetection.internalValue = value;
    }
    resetOutlierDetection() {
        this._outlierDetection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outlierDetectionInput() {
        return this._outlierDetection.internalValue;
    }
    get securitySettings() {
        return this._securitySettings;
    }
    putSecuritySettings(value) {
        this._securitySettings.internalValue = value;
    }
    resetSecuritySettings() {
        this._securitySettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securitySettingsInput() {
        return this._securitySettings.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            affinity_cookie_ttl_sec: cdktf.numberToTerraform(this._affinityCookieTtlSec),
            compression_mode: cdktf.stringToTerraform(this._compressionMode),
            connection_draining_timeout_sec: cdktf.numberToTerraform(this._connectionDrainingTimeoutSec),
            custom_request_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(this._customRequestHeaders),
            custom_response_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(this._customResponseHeaders),
            description: cdktf.stringToTerraform(this._description),
            enable_cdn: cdktf.booleanToTerraform(this._enableCdn),
            health_checks: cdktf.listMapper(cdktf.stringToTerraform, false)(this._healthChecks),
            id: cdktf.stringToTerraform(this._id),
            load_balancing_scheme: cdktf.stringToTerraform(this._loadBalancingScheme),
            locality_lb_policy: cdktf.stringToTerraform(this._localityLbPolicy),
            name: cdktf.stringToTerraform(this._name),
            port_name: cdktf.stringToTerraform(this._portName),
            project: cdktf.stringToTerraform(this._project),
            protocol: cdktf.stringToTerraform(this._protocol),
            security_policy: cdktf.stringToTerraform(this._securityPolicy),
            session_affinity: cdktf.stringToTerraform(this._sessionAffinity),
            timeout_sec: cdktf.numberToTerraform(this._timeoutSec),
            backend: cdktf.listMapper(computeBackendServiceBackendToTerraform, true)(this._backend.internalValue),
            cdn_policy: computeBackendServiceCdnPolicyToTerraform(this._cdnPolicy.internalValue),
            circuit_breakers: computeBackendServiceCircuitBreakersToTerraform(this._circuitBreakers.internalValue),
            consistent_hash: computeBackendServiceConsistentHashToTerraform(this._consistentHash.internalValue),
            iap: computeBackendServiceIapToTerraform(this._iap.internalValue),
            log_config: computeBackendServiceLogConfigToTerraform(this._logConfig.internalValue),
            outlier_detection: computeBackendServiceOutlierDetectionToTerraform(this._outlierDetection.internalValue),
            security_settings: computeBackendServiceSecuritySettingsToTerraform(this._securitySettings.internalValue),
            timeouts: computeBackendServiceTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.ComputeBackendService = ComputeBackendService;
_t = JSII_RTTI_SYMBOL_1;
ComputeBackendService[_t] = { fqn: "@cdktf/provider-google.computeBackendService.ComputeBackendService", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
ComputeBackendService.tfResourceType = "google_compute_backend_service";
//# sourceMappingURL=data:application/json;base64,