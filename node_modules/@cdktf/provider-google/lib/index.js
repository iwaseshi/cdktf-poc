"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// generated by cdktf get
exports.accessContextManagerAccessLevel = require("./access-context-manager-access-level");
exports.accessContextManagerAccessLevelCondition = require("./access-context-manager-access-level-condition");
exports.accessContextManagerAccessLevels = require("./access-context-manager-access-levels");
exports.accessContextManagerAccessPolicy = require("./access-context-manager-access-policy");
exports.accessContextManagerAccessPolicyIamBinding = require("./access-context-manager-access-policy-iam-binding");
exports.accessContextManagerAccessPolicyIamMember = require("./access-context-manager-access-policy-iam-member");
exports.accessContextManagerAccessPolicyIamPolicy = require("./access-context-manager-access-policy-iam-policy");
exports.accessContextManagerGcpUserAccessBinding = require("./access-context-manager-gcp-user-access-binding");
exports.accessContextManagerServicePerimeter = require("./access-context-manager-service-perimeter");
exports.accessContextManagerServicePerimeterResource = require("./access-context-manager-service-perimeter-resource");
exports.accessContextManagerServicePerimeters = require("./access-context-manager-service-perimeters");
exports.activeDirectoryDomain = require("./active-directory-domain");
exports.activeDirectoryDomainTrust = require("./active-directory-domain-trust");
exports.apigeeEndpointAttachment = require("./apigee-endpoint-attachment");
exports.apigeeEnvgroup = require("./apigee-envgroup");
exports.apigeeEnvgroupAttachment = require("./apigee-envgroup-attachment");
exports.apigeeEnvironment = require("./apigee-environment");
exports.apigeeEnvironmentIamBinding = require("./apigee-environment-iam-binding");
exports.apigeeEnvironmentIamMember = require("./apigee-environment-iam-member");
exports.apigeeEnvironmentIamPolicy = require("./apigee-environment-iam-policy");
exports.apigeeInstance = require("./apigee-instance");
exports.apigeeInstanceAttachment = require("./apigee-instance-attachment");
exports.apigeeNatAddress = require("./apigee-nat-address");
exports.apigeeOrganization = require("./apigee-organization");
exports.apikeysKey = require("./apikeys-key");
exports.appEngineApplication = require("./app-engine-application");
exports.appEngineApplicationUrlDispatchRules = require("./app-engine-application-url-dispatch-rules");
exports.appEngineDomainMapping = require("./app-engine-domain-mapping");
exports.appEngineFirewallRule = require("./app-engine-firewall-rule");
exports.appEngineFlexibleAppVersion = require("./app-engine-flexible-app-version");
exports.appEngineServiceNetworkSettings = require("./app-engine-service-network-settings");
exports.appEngineServiceSplitTraffic = require("./app-engine-service-split-traffic");
exports.appEngineStandardAppVersion = require("./app-engine-standard-app-version");
exports.artifactRegistryRepository = require("./artifact-registry-repository");
exports.artifactRegistryRepositoryIamBinding = require("./artifact-registry-repository-iam-binding");
exports.artifactRegistryRepositoryIamMember = require("./artifact-registry-repository-iam-member");
exports.artifactRegistryRepositoryIamPolicy = require("./artifact-registry-repository-iam-policy");
exports.assuredWorkloadsWorkload = require("./assured-workloads-workload");
exports.beyondcorpAppConnector = require("./beyondcorp-app-connector");
exports.beyondcorpAppGateway = require("./beyondcorp-app-gateway");
exports.bigqueryAnalyticsHubDataExchange = require("./bigquery-analytics-hub-data-exchange");
exports.bigqueryAnalyticsHubDataExchangeIamBinding = require("./bigquery-analytics-hub-data-exchange-iam-binding");
exports.bigqueryAnalyticsHubDataExchangeIamMember = require("./bigquery-analytics-hub-data-exchange-iam-member");
exports.bigqueryAnalyticsHubDataExchangeIamPolicy = require("./bigquery-analytics-hub-data-exchange-iam-policy");
exports.bigqueryAnalyticsHubListing = require("./bigquery-analytics-hub-listing");
exports.bigqueryAnalyticsHubListingIamBinding = require("./bigquery-analytics-hub-listing-iam-binding");
exports.bigqueryAnalyticsHubListingIamMember = require("./bigquery-analytics-hub-listing-iam-member");
exports.bigqueryAnalyticsHubListingIamPolicy = require("./bigquery-analytics-hub-listing-iam-policy");
exports.bigqueryConnection = require("./bigquery-connection");
exports.bigqueryConnectionIamBinding = require("./bigquery-connection-iam-binding");
exports.bigqueryConnectionIamMember = require("./bigquery-connection-iam-member");
exports.bigqueryConnectionIamPolicy = require("./bigquery-connection-iam-policy");
exports.bigqueryDataTransferConfig = require("./bigquery-data-transfer-config");
exports.bigqueryDataset = require("./bigquery-dataset");
exports.bigqueryDatasetAccess = require("./bigquery-dataset-access");
exports.bigqueryDatasetIamBinding = require("./bigquery-dataset-iam-binding");
exports.bigqueryDatasetIamMember = require("./bigquery-dataset-iam-member");
exports.bigqueryDatasetIamPolicy = require("./bigquery-dataset-iam-policy");
exports.bigqueryJob = require("./bigquery-job");
exports.bigqueryReservation = require("./bigquery-reservation");
exports.bigqueryReservationAssignment = require("./bigquery-reservation-assignment");
exports.bigqueryRoutine = require("./bigquery-routine");
exports.bigqueryTable = require("./bigquery-table");
exports.bigqueryTableIamBinding = require("./bigquery-table-iam-binding");
exports.bigqueryTableIamMember = require("./bigquery-table-iam-member");
exports.bigqueryTableIamPolicy = require("./bigquery-table-iam-policy");
exports.bigtableAppProfile = require("./bigtable-app-profile");
exports.bigtableGcPolicy = require("./bigtable-gc-policy");
exports.bigtableInstance = require("./bigtable-instance");
exports.bigtableInstanceIamBinding = require("./bigtable-instance-iam-binding");
exports.bigtableInstanceIamMember = require("./bigtable-instance-iam-member");
exports.bigtableInstanceIamPolicy = require("./bigtable-instance-iam-policy");
exports.bigtableTable = require("./bigtable-table");
exports.bigtableTableIamBinding = require("./bigtable-table-iam-binding");
exports.bigtableTableIamMember = require("./bigtable-table-iam-member");
exports.bigtableTableIamPolicy = require("./bigtable-table-iam-policy");
exports.billingAccountIamBinding = require("./billing-account-iam-binding");
exports.billingAccountIamMember = require("./billing-account-iam-member");
exports.billingAccountIamPolicy = require("./billing-account-iam-policy");
exports.billingBudget = require("./billing-budget");
exports.billingSubaccount = require("./billing-subaccount");
exports.binaryAuthorizationAttestor = require("./binary-authorization-attestor");
exports.binaryAuthorizationAttestorIamBinding = require("./binary-authorization-attestor-iam-binding");
exports.binaryAuthorizationAttestorIamMember = require("./binary-authorization-attestor-iam-member");
exports.binaryAuthorizationAttestorIamPolicy = require("./binary-authorization-attestor-iam-policy");
exports.binaryAuthorizationPolicy = require("./binary-authorization-policy");
exports.certificateManagerCertificate = require("./certificate-manager-certificate");
exports.certificateManagerCertificateMap = require("./certificate-manager-certificate-map");
exports.certificateManagerCertificateMapEntry = require("./certificate-manager-certificate-map-entry");
exports.certificateManagerDnsAuthorization = require("./certificate-manager-dns-authorization");
exports.cloudAssetFolderFeed = require("./cloud-asset-folder-feed");
exports.cloudAssetOrganizationFeed = require("./cloud-asset-organization-feed");
exports.cloudAssetProjectFeed = require("./cloud-asset-project-feed");
exports.cloudIdentityGroup = require("./cloud-identity-group");
exports.cloudIdentityGroupMembership = require("./cloud-identity-group-membership");
exports.cloudIdsEndpoint = require("./cloud-ids-endpoint");
exports.cloudRunDomainMapping = require("./cloud-run-domain-mapping");
exports.cloudRunService = require("./cloud-run-service");
exports.cloudRunServiceIamBinding = require("./cloud-run-service-iam-binding");
exports.cloudRunServiceIamMember = require("./cloud-run-service-iam-member");
exports.cloudRunServiceIamPolicy = require("./cloud-run-service-iam-policy");
exports.cloudRunV2Job = require("./cloud-run-v2-job");
exports.cloudRunV2Service = require("./cloud-run-v2-service");
exports.cloudSchedulerJob = require("./cloud-scheduler-job");
exports.cloudTasksQueue = require("./cloud-tasks-queue");
exports.cloudTasksQueueIamBinding = require("./cloud-tasks-queue-iam-binding");
exports.cloudTasksQueueIamMember = require("./cloud-tasks-queue-iam-member");
exports.cloudTasksQueueIamPolicy = require("./cloud-tasks-queue-iam-policy");
exports.cloudbuildTrigger = require("./cloudbuild-trigger");
exports.cloudbuildWorkerPool = require("./cloudbuild-worker-pool");
exports.clouddeployDeliveryPipeline = require("./clouddeploy-delivery-pipeline");
exports.clouddeployTarget = require("./clouddeploy-target");
exports.cloudfunctions2Function = require("./cloudfunctions2-function");
exports.cloudfunctions2FunctionIamBinding = require("./cloudfunctions2-function-iam-binding");
exports.cloudfunctions2FunctionIamMember = require("./cloudfunctions2-function-iam-member");
exports.cloudfunctions2FunctionIamPolicy = require("./cloudfunctions2-function-iam-policy");
exports.cloudfunctionsFunction = require("./cloudfunctions-function");
exports.cloudfunctionsFunctionIamBinding = require("./cloudfunctions-function-iam-binding");
exports.cloudfunctionsFunctionIamMember = require("./cloudfunctions-function-iam-member");
exports.cloudfunctionsFunctionIamPolicy = require("./cloudfunctions-function-iam-policy");
exports.cloudiotDevice = require("./cloudiot-device");
exports.cloudiotRegistry = require("./cloudiot-registry");
exports.cloudiotRegistryIamBinding = require("./cloudiot-registry-iam-binding");
exports.cloudiotRegistryIamMember = require("./cloudiot-registry-iam-member");
exports.cloudiotRegistryIamPolicy = require("./cloudiot-registry-iam-policy");
exports.composerEnvironment = require("./composer-environment");
exports.computeAddress = require("./compute-address");
exports.computeAttachedDisk = require("./compute-attached-disk");
exports.computeAutoscaler = require("./compute-autoscaler");
exports.computeBackendBucket = require("./compute-backend-bucket");
exports.computeBackendBucketSignedUrlKey = require("./compute-backend-bucket-signed-url-key");
exports.computeBackendService = require("./compute-backend-service");
exports.computeBackendServiceSignedUrlKey = require("./compute-backend-service-signed-url-key");
exports.computeDisk = require("./compute-disk");
exports.computeDiskIamBinding = require("./compute-disk-iam-binding");
exports.computeDiskIamMember = require("./compute-disk-iam-member");
exports.computeDiskIamPolicy = require("./compute-disk-iam-policy");
exports.computeDiskResourcePolicyAttachment = require("./compute-disk-resource-policy-attachment");
exports.computeExternalVpnGateway = require("./compute-external-vpn-gateway");
exports.computeFirewall = require("./compute-firewall");
exports.computeFirewallPolicy = require("./compute-firewall-policy");
exports.computeFirewallPolicyAssociation = require("./compute-firewall-policy-association");
exports.computeFirewallPolicyRule = require("./compute-firewall-policy-rule");
exports.computeForwardingRule = require("./compute-forwarding-rule");
exports.computeGlobalAddress = require("./compute-global-address");
exports.computeGlobalForwardingRule = require("./compute-global-forwarding-rule");
exports.computeGlobalNetworkEndpoint = require("./compute-global-network-endpoint");
exports.computeGlobalNetworkEndpointGroup = require("./compute-global-network-endpoint-group");
exports.computeHaVpnGateway = require("./compute-ha-vpn-gateway");
exports.computeHealthCheck = require("./compute-health-check");
exports.computeHttpHealthCheck = require("./compute-http-health-check");
exports.computeHttpsHealthCheck = require("./compute-https-health-check");
exports.computeImage = require("./compute-image");
exports.computeImageIamBinding = require("./compute-image-iam-binding");
exports.computeImageIamMember = require("./compute-image-iam-member");
exports.computeImageIamPolicy = require("./compute-image-iam-policy");
exports.computeInstance = require("./compute-instance");
exports.computeInstanceFromTemplate = require("./compute-instance-from-template");
exports.computeInstanceGroup = require("./compute-instance-group");
exports.computeInstanceGroupManager = require("./compute-instance-group-manager");
exports.computeInstanceGroupNamedPort = require("./compute-instance-group-named-port");
exports.computeInstanceIamBinding = require("./compute-instance-iam-binding");
exports.computeInstanceIamMember = require("./compute-instance-iam-member");
exports.computeInstanceIamPolicy = require("./compute-instance-iam-policy");
exports.computeInstanceTemplate = require("./compute-instance-template");
exports.computeInterconnectAttachment = require("./compute-interconnect-attachment");
exports.computeManagedSslCertificate = require("./compute-managed-ssl-certificate");
exports.computeNetwork = require("./compute-network");
exports.computeNetworkEndpoint = require("./compute-network-endpoint");
exports.computeNetworkEndpointGroup = require("./compute-network-endpoint-group");
exports.computeNetworkFirewallPolicy = require("./compute-network-firewall-policy");
exports.computeNetworkFirewallPolicyAssociation = require("./compute-network-firewall-policy-association");
exports.computeNetworkFirewallPolicyRule = require("./compute-network-firewall-policy-rule");
exports.computeNetworkPeering = require("./compute-network-peering");
exports.computeNetworkPeeringRoutesConfig = require("./compute-network-peering-routes-config");
exports.computeNodeGroup = require("./compute-node-group");
exports.computeNodeTemplate = require("./compute-node-template");
exports.computePacketMirroring = require("./compute-packet-mirroring");
exports.computePerInstanceConfig = require("./compute-per-instance-config");
exports.computeProjectDefaultNetworkTier = require("./compute-project-default-network-tier");
exports.computeProjectMetadata = require("./compute-project-metadata");
exports.computeProjectMetadataItem = require("./compute-project-metadata-item");
exports.computeRegionAutoscaler = require("./compute-region-autoscaler");
exports.computeRegionBackendService = require("./compute-region-backend-service");
exports.computeRegionDisk = require("./compute-region-disk");
exports.computeRegionDiskIamBinding = require("./compute-region-disk-iam-binding");
exports.computeRegionDiskIamMember = require("./compute-region-disk-iam-member");
exports.computeRegionDiskIamPolicy = require("./compute-region-disk-iam-policy");
exports.computeRegionDiskResourcePolicyAttachment = require("./compute-region-disk-resource-policy-attachment");
exports.computeRegionHealthCheck = require("./compute-region-health-check");
exports.computeRegionInstanceGroupManager = require("./compute-region-instance-group-manager");
exports.computeRegionNetworkEndpointGroup = require("./compute-region-network-endpoint-group");
exports.computeRegionNetworkFirewallPolicy = require("./compute-region-network-firewall-policy");
exports.computeRegionNetworkFirewallPolicyAssociation = require("./compute-region-network-firewall-policy-association");
exports.computeRegionNetworkFirewallPolicyRule = require("./compute-region-network-firewall-policy-rule");
exports.computeRegionPerInstanceConfig = require("./compute-region-per-instance-config");
exports.computeRegionSslCertificate = require("./compute-region-ssl-certificate");
exports.computeRegionTargetHttpProxy = require("./compute-region-target-http-proxy");
exports.computeRegionTargetHttpsProxy = require("./compute-region-target-https-proxy");
exports.computeRegionUrlMap = require("./compute-region-url-map");
exports.computeReservation = require("./compute-reservation");
exports.computeResourcePolicy = require("./compute-resource-policy");
exports.computeRoute = require("./compute-route");
exports.computeRouter = require("./compute-router");
exports.computeRouterInterface = require("./compute-router-interface");
exports.computeRouterNat = require("./compute-router-nat");
exports.computeRouterPeer = require("./compute-router-peer");
exports.computeSecurityPolicy = require("./compute-security-policy");
exports.computeServiceAttachment = require("./compute-service-attachment");
exports.computeSharedVpcHostProject = require("./compute-shared-vpc-host-project");
exports.computeSharedVpcServiceProject = require("./compute-shared-vpc-service-project");
exports.computeSnapshot = require("./compute-snapshot");
exports.computeSnapshotIamBinding = require("./compute-snapshot-iam-binding");
exports.computeSnapshotIamMember = require("./compute-snapshot-iam-member");
exports.computeSnapshotIamPolicy = require("./compute-snapshot-iam-policy");
exports.computeSslCertificate = require("./compute-ssl-certificate");
exports.computeSslPolicy = require("./compute-ssl-policy");
exports.computeSubnetwork = require("./compute-subnetwork");
exports.computeSubnetworkIamBinding = require("./compute-subnetwork-iam-binding");
exports.computeSubnetworkIamMember = require("./compute-subnetwork-iam-member");
exports.computeSubnetworkIamPolicy = require("./compute-subnetwork-iam-policy");
exports.computeTargetGrpcProxy = require("./compute-target-grpc-proxy");
exports.computeTargetHttpProxy = require("./compute-target-http-proxy");
exports.computeTargetHttpsProxy = require("./compute-target-https-proxy");
exports.computeTargetInstance = require("./compute-target-instance");
exports.computeTargetPool = require("./compute-target-pool");
exports.computeTargetSslProxy = require("./compute-target-ssl-proxy");
exports.computeTargetTcpProxy = require("./compute-target-tcp-proxy");
exports.computeUrlMap = require("./compute-url-map");
exports.computeVpnGateway = require("./compute-vpn-gateway");
exports.computeVpnTunnel = require("./compute-vpn-tunnel");
exports.containerAnalysisNote = require("./container-analysis-note");
exports.containerAnalysisOccurrence = require("./container-analysis-occurrence");
exports.containerAwsCluster = require("./container-aws-cluster");
exports.containerAwsNodePool = require("./container-aws-node-pool");
exports.containerAzureClient = require("./container-azure-client");
exports.containerAzureCluster = require("./container-azure-cluster");
exports.containerAzureNodePool = require("./container-azure-node-pool");
exports.containerCluster = require("./container-cluster");
exports.containerNodePool = require("./container-node-pool");
exports.containerRegistry = require("./container-registry");
exports.dataCatalogEntry = require("./data-catalog-entry");
exports.dataCatalogEntryGroup = require("./data-catalog-entry-group");
exports.dataCatalogEntryGroupIamBinding = require("./data-catalog-entry-group-iam-binding");
exports.dataCatalogEntryGroupIamMember = require("./data-catalog-entry-group-iam-member");
exports.dataCatalogEntryGroupIamPolicy = require("./data-catalog-entry-group-iam-policy");
exports.dataCatalogTag = require("./data-catalog-tag");
exports.dataCatalogTagTemplate = require("./data-catalog-tag-template");
exports.dataCatalogTagTemplateIamBinding = require("./data-catalog-tag-template-iam-binding");
exports.dataCatalogTagTemplateIamMember = require("./data-catalog-tag-template-iam-member");
exports.dataCatalogTagTemplateIamPolicy = require("./data-catalog-tag-template-iam-policy");
exports.dataFusionInstance = require("./data-fusion-instance");
exports.dataFusionInstanceIamBinding = require("./data-fusion-instance-iam-binding");
exports.dataFusionInstanceIamMember = require("./data-fusion-instance-iam-member");
exports.dataFusionInstanceIamPolicy = require("./data-fusion-instance-iam-policy");
exports.dataLossPreventionDeidentifyTemplate = require("./data-loss-prevention-deidentify-template");
exports.dataLossPreventionInspectTemplate = require("./data-loss-prevention-inspect-template");
exports.dataLossPreventionJobTrigger = require("./data-loss-prevention-job-trigger");
exports.dataLossPreventionStoredInfoType = require("./data-loss-prevention-stored-info-type");
exports.dataflowJob = require("./dataflow-job");
exports.dataplexAsset = require("./dataplex-asset");
exports.dataplexLake = require("./dataplex-lake");
exports.dataplexZone = require("./dataplex-zone");
exports.dataprocAutoscalingPolicy = require("./dataproc-autoscaling-policy");
exports.dataprocAutoscalingPolicyIamBinding = require("./dataproc-autoscaling-policy-iam-binding");
exports.dataprocAutoscalingPolicyIamMember = require("./dataproc-autoscaling-policy-iam-member");
exports.dataprocAutoscalingPolicyIamPolicy = require("./dataproc-autoscaling-policy-iam-policy");
exports.dataprocCluster = require("./dataproc-cluster");
exports.dataprocClusterIamBinding = require("./dataproc-cluster-iam-binding");
exports.dataprocClusterIamMember = require("./dataproc-cluster-iam-member");
exports.dataprocClusterIamPolicy = require("./dataproc-cluster-iam-policy");
exports.dataprocJob = require("./dataproc-job");
exports.dataprocJobIamBinding = require("./dataproc-job-iam-binding");
exports.dataprocJobIamMember = require("./dataproc-job-iam-member");
exports.dataprocJobIamPolicy = require("./dataproc-job-iam-policy");
exports.dataprocMetastoreService = require("./dataproc-metastore-service");
exports.dataprocMetastoreServiceIamBinding = require("./dataproc-metastore-service-iam-binding");
exports.dataprocMetastoreServiceIamMember = require("./dataproc-metastore-service-iam-member");
exports.dataprocMetastoreServiceIamPolicy = require("./dataproc-metastore-service-iam-policy");
exports.dataprocWorkflowTemplate = require("./dataproc-workflow-template");
exports.datastoreIndex = require("./datastore-index");
exports.datastreamConnectionProfile = require("./datastream-connection-profile");
exports.datastreamPrivateConnection = require("./datastream-private-connection");
exports.deploymentManagerDeployment = require("./deployment-manager-deployment");
exports.dialogflowAgent = require("./dialogflow-agent");
exports.dialogflowCxAgent = require("./dialogflow-cx-agent");
exports.dialogflowCxEntityType = require("./dialogflow-cx-entity-type");
exports.dialogflowCxEnvironment = require("./dialogflow-cx-environment");
exports.dialogflowCxFlow = require("./dialogflow-cx-flow");
exports.dialogflowCxIntent = require("./dialogflow-cx-intent");
exports.dialogflowCxPage = require("./dialogflow-cx-page");
exports.dialogflowCxVersion = require("./dialogflow-cx-version");
exports.dialogflowCxWebhook = require("./dialogflow-cx-webhook");
exports.dialogflowEntityType = require("./dialogflow-entity-type");
exports.dialogflowFulfillment = require("./dialogflow-fulfillment");
exports.dialogflowIntent = require("./dialogflow-intent");
exports.dnsManagedZone = require("./dns-managed-zone");
exports.dnsPolicy = require("./dns-policy");
exports.dnsRecordSet = require("./dns-record-set");
exports.documentAiProcessor = require("./document-ai-processor");
exports.documentAiProcessorDefaultVersion = require("./document-ai-processor-default-version");
exports.endpointsService = require("./endpoints-service");
exports.endpointsServiceConsumersIamBinding = require("./endpoints-service-consumers-iam-binding");
exports.endpointsServiceConsumersIamMember = require("./endpoints-service-consumers-iam-member");
exports.endpointsServiceConsumersIamPolicy = require("./endpoints-service-consumers-iam-policy");
exports.endpointsServiceIamBinding = require("./endpoints-service-iam-binding");
exports.endpointsServiceIamMember = require("./endpoints-service-iam-member");
exports.endpointsServiceIamPolicy = require("./endpoints-service-iam-policy");
exports.essentialContactsContact = require("./essential-contacts-contact");
exports.eventarcChannel = require("./eventarc-channel");
exports.eventarcGoogleChannelConfig = require("./eventarc-google-channel-config");
exports.eventarcTrigger = require("./eventarc-trigger");
exports.filestoreInstance = require("./filestore-instance");
exports.filestoreSnapshot = require("./filestore-snapshot");
exports.firebaserulesRelease = require("./firebaserules-release");
exports.firebaserulesRuleset = require("./firebaserules-ruleset");
exports.firestoreDocument = require("./firestore-document");
exports.firestoreIndex = require("./firestore-index");
exports.folder = require("./folder");
exports.folderAccessApprovalSettings = require("./folder-access-approval-settings");
exports.folderIamAuditConfig = require("./folder-iam-audit-config");
exports.folderIamBinding = require("./folder-iam-binding");
exports.folderIamMember = require("./folder-iam-member");
exports.folderIamPolicy = require("./folder-iam-policy");
exports.folderOrganizationPolicy = require("./folder-organization-policy");
exports.gameServicesGameServerCluster = require("./game-services-game-server-cluster");
exports.gameServicesGameServerConfig = require("./game-services-game-server-config");
exports.gameServicesGameServerDeployment = require("./game-services-game-server-deployment");
exports.gameServicesGameServerDeploymentRollout = require("./game-services-game-server-deployment-rollout");
exports.gameServicesRealm = require("./game-services-realm");
exports.gkeHubMembership = require("./gke-hub-membership");
exports.gkeHubMembershipIamBinding = require("./gke-hub-membership-iam-binding");
exports.gkeHubMembershipIamMember = require("./gke-hub-membership-iam-member");
exports.gkeHubMembershipIamPolicy = require("./gke-hub-membership-iam-policy");
exports.healthcareConsentStore = require("./healthcare-consent-store");
exports.healthcareConsentStoreIamBinding = require("./healthcare-consent-store-iam-binding");
exports.healthcareConsentStoreIamMember = require("./healthcare-consent-store-iam-member");
exports.healthcareConsentStoreIamPolicy = require("./healthcare-consent-store-iam-policy");
exports.healthcareDataset = require("./healthcare-dataset");
exports.healthcareDatasetIamBinding = require("./healthcare-dataset-iam-binding");
exports.healthcareDatasetIamMember = require("./healthcare-dataset-iam-member");
exports.healthcareDatasetIamPolicy = require("./healthcare-dataset-iam-policy");
exports.healthcareDicomStore = require("./healthcare-dicom-store");
exports.healthcareDicomStoreIamBinding = require("./healthcare-dicom-store-iam-binding");
exports.healthcareDicomStoreIamMember = require("./healthcare-dicom-store-iam-member");
exports.healthcareDicomStoreIamPolicy = require("./healthcare-dicom-store-iam-policy");
exports.healthcareFhirStore = require("./healthcare-fhir-store");
exports.healthcareFhirStoreIamBinding = require("./healthcare-fhir-store-iam-binding");
exports.healthcareFhirStoreIamMember = require("./healthcare-fhir-store-iam-member");
exports.healthcareFhirStoreIamPolicy = require("./healthcare-fhir-store-iam-policy");
exports.healthcareHl7V2Store = require("./healthcare-hl7-v2-store");
exports.healthcareHl7V2StoreIamBinding = require("./healthcare-hl7-v2-store-iam-binding");
exports.healthcareHl7V2StoreIamMember = require("./healthcare-hl7-v2-store-iam-member");
exports.healthcareHl7V2StoreIamPolicy = require("./healthcare-hl7-v2-store-iam-policy");
exports.iamWorkloadIdentityPool = require("./iam-workload-identity-pool");
exports.iamWorkloadIdentityPoolProvider = require("./iam-workload-identity-pool-provider");
exports.iapAppEngineServiceIamBinding = require("./iap-app-engine-service-iam-binding");
exports.iapAppEngineServiceIamMember = require("./iap-app-engine-service-iam-member");
exports.iapAppEngineServiceIamPolicy = require("./iap-app-engine-service-iam-policy");
exports.iapAppEngineVersionIamBinding = require("./iap-app-engine-version-iam-binding");
exports.iapAppEngineVersionIamMember = require("./iap-app-engine-version-iam-member");
exports.iapAppEngineVersionIamPolicy = require("./iap-app-engine-version-iam-policy");
exports.iapBrand = require("./iap-brand");
exports.iapClient = require("./iap-client");
exports.iapTunnelIamBinding = require("./iap-tunnel-iam-binding");
exports.iapTunnelIamMember = require("./iap-tunnel-iam-member");
exports.iapTunnelIamPolicy = require("./iap-tunnel-iam-policy");
exports.iapTunnelInstanceIamBinding = require("./iap-tunnel-instance-iam-binding");
exports.iapTunnelInstanceIamMember = require("./iap-tunnel-instance-iam-member");
exports.iapTunnelInstanceIamPolicy = require("./iap-tunnel-instance-iam-policy");
exports.iapWebBackendServiceIamBinding = require("./iap-web-backend-service-iam-binding");
exports.iapWebBackendServiceIamMember = require("./iap-web-backend-service-iam-member");
exports.iapWebBackendServiceIamPolicy = require("./iap-web-backend-service-iam-policy");
exports.iapWebIamBinding = require("./iap-web-iam-binding");
exports.iapWebIamMember = require("./iap-web-iam-member");
exports.iapWebIamPolicy = require("./iap-web-iam-policy");
exports.iapWebTypeAppEngineIamBinding = require("./iap-web-type-app-engine-iam-binding");
exports.iapWebTypeAppEngineIamMember = require("./iap-web-type-app-engine-iam-member");
exports.iapWebTypeAppEngineIamPolicy = require("./iap-web-type-app-engine-iam-policy");
exports.iapWebTypeComputeIamBinding = require("./iap-web-type-compute-iam-binding");
exports.iapWebTypeComputeIamMember = require("./iap-web-type-compute-iam-member");
exports.iapWebTypeComputeIamPolicy = require("./iap-web-type-compute-iam-policy");
exports.identityPlatformConfig = require("./identity-platform-config");
exports.identityPlatformDefaultSupportedIdpConfig = require("./identity-platform-default-supported-idp-config");
exports.identityPlatformInboundSamlConfig = require("./identity-platform-inbound-saml-config");
exports.identityPlatformOauthIdpConfig = require("./identity-platform-oauth-idp-config");
exports.identityPlatformProjectDefaultConfig = require("./identity-platform-project-default-config");
exports.identityPlatformTenant = require("./identity-platform-tenant");
exports.identityPlatformTenantDefaultSupportedIdpConfig = require("./identity-platform-tenant-default-supported-idp-config");
exports.identityPlatformTenantInboundSamlConfig = require("./identity-platform-tenant-inbound-saml-config");
exports.identityPlatformTenantOauthIdpConfig = require("./identity-platform-tenant-oauth-idp-config");
exports.kmsCryptoKey = require("./kms-crypto-key");
exports.kmsCryptoKeyIamBinding = require("./kms-crypto-key-iam-binding");
exports.kmsCryptoKeyIamMember = require("./kms-crypto-key-iam-member");
exports.kmsCryptoKeyIamPolicy = require("./kms-crypto-key-iam-policy");
exports.kmsCryptoKeyVersion = require("./kms-crypto-key-version");
exports.kmsKeyRing = require("./kms-key-ring");
exports.kmsKeyRingIamBinding = require("./kms-key-ring-iam-binding");
exports.kmsKeyRingIamMember = require("./kms-key-ring-iam-member");
exports.kmsKeyRingIamPolicy = require("./kms-key-ring-iam-policy");
exports.kmsKeyRingImportJob = require("./kms-key-ring-import-job");
exports.kmsSecretCiphertext = require("./kms-secret-ciphertext");
exports.loggingBillingAccountBucketConfig = require("./logging-billing-account-bucket-config");
exports.loggingBillingAccountExclusion = require("./logging-billing-account-exclusion");
exports.loggingBillingAccountSink = require("./logging-billing-account-sink");
exports.loggingFolderBucketConfig = require("./logging-folder-bucket-config");
exports.loggingFolderExclusion = require("./logging-folder-exclusion");
exports.loggingFolderSink = require("./logging-folder-sink");
exports.loggingLogView = require("./logging-log-view");
exports.loggingMetric = require("./logging-metric");
exports.loggingOrganizationBucketConfig = require("./logging-organization-bucket-config");
exports.loggingOrganizationExclusion = require("./logging-organization-exclusion");
exports.loggingOrganizationSink = require("./logging-organization-sink");
exports.loggingProjectBucketConfig = require("./logging-project-bucket-config");
exports.loggingProjectExclusion = require("./logging-project-exclusion");
exports.loggingProjectSink = require("./logging-project-sink");
exports.memcacheInstance = require("./memcache-instance");
exports.mlEngineModel = require("./ml-engine-model");
exports.monitoringAlertPolicy = require("./monitoring-alert-policy");
exports.monitoringCustomService = require("./monitoring-custom-service");
exports.monitoringDashboard = require("./monitoring-dashboard");
exports.monitoringGroup = require("./monitoring-group");
exports.monitoringMetricDescriptor = require("./monitoring-metric-descriptor");
exports.monitoringMonitoredProject = require("./monitoring-monitored-project");
exports.monitoringNotificationChannel = require("./monitoring-notification-channel");
exports.monitoringService = require("./monitoring-service");
exports.monitoringSlo = require("./monitoring-slo");
exports.monitoringUptimeCheckConfig = require("./monitoring-uptime-check-config");
exports.networkConnectivityHub = require("./network-connectivity-hub");
exports.networkConnectivitySpoke = require("./network-connectivity-spoke");
exports.networkManagementConnectivityTest = require("./network-management-connectivity-test");
exports.networkServicesEdgeCacheKeyset = require("./network-services-edge-cache-keyset");
exports.networkServicesEdgeCacheOrigin = require("./network-services-edge-cache-origin");
exports.networkServicesEdgeCacheService = require("./network-services-edge-cache-service");
exports.notebooksEnvironment = require("./notebooks-environment");
exports.notebooksInstance = require("./notebooks-instance");
exports.notebooksInstanceIamBinding = require("./notebooks-instance-iam-binding");
exports.notebooksInstanceIamMember = require("./notebooks-instance-iam-member");
exports.notebooksInstanceIamPolicy = require("./notebooks-instance-iam-policy");
exports.notebooksLocation = require("./notebooks-location");
exports.notebooksRuntime = require("./notebooks-runtime");
exports.notebooksRuntimeIamBinding = require("./notebooks-runtime-iam-binding");
exports.notebooksRuntimeIamMember = require("./notebooks-runtime-iam-member");
exports.notebooksRuntimeIamPolicy = require("./notebooks-runtime-iam-policy");
exports.orgPolicyPolicy = require("./org-policy-policy");
exports.organizationAccessApprovalSettings = require("./organization-access-approval-settings");
exports.organizationIamAuditConfig = require("./organization-iam-audit-config");
exports.organizationIamBinding = require("./organization-iam-binding");
exports.organizationIamCustomRole = require("./organization-iam-custom-role");
exports.organizationIamMember = require("./organization-iam-member");
exports.organizationIamPolicy = require("./organization-iam-policy");
exports.organizationPolicy = require("./organization-policy");
exports.osConfigOsPolicyAssignment = require("./os-config-os-policy-assignment");
exports.osConfigPatchDeployment = require("./os-config-patch-deployment");
exports.osLoginSshPublicKey = require("./os-login-ssh-public-key");
exports.privatecaCaPool = require("./privateca-ca-pool");
exports.privatecaCaPoolIamBinding = require("./privateca-ca-pool-iam-binding");
exports.privatecaCaPoolIamMember = require("./privateca-ca-pool-iam-member");
exports.privatecaCaPoolIamPolicy = require("./privateca-ca-pool-iam-policy");
exports.privatecaCertificate = require("./privateca-certificate");
exports.privatecaCertificateAuthority = require("./privateca-certificate-authority");
exports.privatecaCertificateTemplate = require("./privateca-certificate-template");
exports.privatecaCertificateTemplateIamBinding = require("./privateca-certificate-template-iam-binding");
exports.privatecaCertificateTemplateIamMember = require("./privateca-certificate-template-iam-member");
exports.privatecaCertificateTemplateIamPolicy = require("./privateca-certificate-template-iam-policy");
exports.project = require("./project");
exports.projectAccessApprovalSettings = require("./project-access-approval-settings");
exports.projectDefaultServiceAccounts = require("./project-default-service-accounts");
exports.projectIamAuditConfig = require("./project-iam-audit-config");
exports.projectIamBinding = require("./project-iam-binding");
exports.projectIamCustomRole = require("./project-iam-custom-role");
exports.projectIamMember = require("./project-iam-member");
exports.projectIamPolicy = require("./project-iam-policy");
exports.projectOrganizationPolicy = require("./project-organization-policy");
exports.projectService = require("./project-service");
exports.projectUsageExportBucket = require("./project-usage-export-bucket");
exports.pubsubLiteReservation = require("./pubsub-lite-reservation");
exports.pubsubLiteSubscription = require("./pubsub-lite-subscription");
exports.pubsubLiteTopic = require("./pubsub-lite-topic");
exports.pubsubSchema = require("./pubsub-schema");
exports.pubsubSubscription = require("./pubsub-subscription");
exports.pubsubSubscriptionIamBinding = require("./pubsub-subscription-iam-binding");
exports.pubsubSubscriptionIamMember = require("./pubsub-subscription-iam-member");
exports.pubsubSubscriptionIamPolicy = require("./pubsub-subscription-iam-policy");
exports.pubsubTopic = require("./pubsub-topic");
exports.pubsubTopicIamBinding = require("./pubsub-topic-iam-binding");
exports.pubsubTopicIamMember = require("./pubsub-topic-iam-member");
exports.pubsubTopicIamPolicy = require("./pubsub-topic-iam-policy");
exports.recaptchaEnterpriseKey = require("./recaptcha-enterprise-key");
exports.redisInstance = require("./redis-instance");
exports.resourceManagerLien = require("./resource-manager-lien");
exports.sccNotificationConfig = require("./scc-notification-config");
exports.sccSource = require("./scc-source");
exports.sccSourceIamBinding = require("./scc-source-iam-binding");
exports.sccSourceIamMember = require("./scc-source-iam-member");
exports.sccSourceIamPolicy = require("./scc-source-iam-policy");
exports.secretManagerSecret = require("./secret-manager-secret");
exports.secretManagerSecretIamBinding = require("./secret-manager-secret-iam-binding");
exports.secretManagerSecretIamMember = require("./secret-manager-secret-iam-member");
exports.secretManagerSecretIamPolicy = require("./secret-manager-secret-iam-policy");
exports.secretManagerSecretVersion = require("./secret-manager-secret-version");
exports.serviceAccount = require("./service-account");
exports.serviceAccountIamBinding = require("./service-account-iam-binding");
exports.serviceAccountIamMember = require("./service-account-iam-member");
exports.serviceAccountIamPolicy = require("./service-account-iam-policy");
exports.serviceAccountKey = require("./service-account-key");
exports.serviceNetworkingConnection = require("./service-networking-connection");
exports.serviceNetworkingPeeredDnsDomain = require("./service-networking-peered-dns-domain");
exports.sourcerepoRepository = require("./sourcerepo-repository");
exports.sourcerepoRepositoryIamBinding = require("./sourcerepo-repository-iam-binding");
exports.sourcerepoRepositoryIamMember = require("./sourcerepo-repository-iam-member");
exports.sourcerepoRepositoryIamPolicy = require("./sourcerepo-repository-iam-policy");
exports.spannerDatabase = require("./spanner-database");
exports.spannerDatabaseIamBinding = require("./spanner-database-iam-binding");
exports.spannerDatabaseIamMember = require("./spanner-database-iam-member");
exports.spannerDatabaseIamPolicy = require("./spanner-database-iam-policy");
exports.spannerInstance = require("./spanner-instance");
exports.spannerInstanceIamBinding = require("./spanner-instance-iam-binding");
exports.spannerInstanceIamMember = require("./spanner-instance-iam-member");
exports.spannerInstanceIamPolicy = require("./spanner-instance-iam-policy");
exports.sqlDatabase = require("./sql-database");
exports.sqlDatabaseInstance = require("./sql-database-instance");
exports.sqlSourceRepresentationInstance = require("./sql-source-representation-instance");
exports.sqlSslCert = require("./sql-ssl-cert");
exports.sqlUser = require("./sql-user");
exports.storageBucket = require("./storage-bucket");
exports.storageBucketAccessControl = require("./storage-bucket-access-control");
exports.storageBucketAcl = require("./storage-bucket-acl");
exports.storageBucketIamBinding = require("./storage-bucket-iam-binding");
exports.storageBucketIamMember = require("./storage-bucket-iam-member");
exports.storageBucketIamPolicy = require("./storage-bucket-iam-policy");
exports.storageBucketObject = require("./storage-bucket-object");
exports.storageDefaultObjectAccessControl = require("./storage-default-object-access-control");
exports.storageDefaultObjectAcl = require("./storage-default-object-acl");
exports.storageHmacKey = require("./storage-hmac-key");
exports.storageNotification = require("./storage-notification");
exports.storageObjectAccessControl = require("./storage-object-access-control");
exports.storageObjectAcl = require("./storage-object-acl");
exports.storageTransferAgentPool = require("./storage-transfer-agent-pool");
exports.storageTransferJob = require("./storage-transfer-job");
exports.tagsTagBinding = require("./tags-tag-binding");
exports.tagsTagKey = require("./tags-tag-key");
exports.tagsTagKeyIamBinding = require("./tags-tag-key-iam-binding");
exports.tagsTagKeyIamMember = require("./tags-tag-key-iam-member");
exports.tagsTagKeyIamPolicy = require("./tags-tag-key-iam-policy");
exports.tagsTagValue = require("./tags-tag-value");
exports.tagsTagValueIamBinding = require("./tags-tag-value-iam-binding");
exports.tagsTagValueIamMember = require("./tags-tag-value-iam-member");
exports.tagsTagValueIamPolicy = require("./tags-tag-value-iam-policy");
exports.tpuNode = require("./tpu-node");
exports.vertexAiDataset = require("./vertex-ai-dataset");
exports.vertexAiEndpoint = require("./vertex-ai-endpoint");
exports.vertexAiFeaturestore = require("./vertex-ai-featurestore");
exports.vertexAiFeaturestoreEntitytype = require("./vertex-ai-featurestore-entitytype");
exports.vertexAiFeaturestoreEntitytypeFeature = require("./vertex-ai-featurestore-entitytype-feature");
exports.vertexAiIndex = require("./vertex-ai-index");
exports.vertexAiTensorboard = require("./vertex-ai-tensorboard");
exports.vpcAccessConnector = require("./vpc-access-connector");
exports.workflowsWorkflow = require("./workflows-workflow");
exports.dataGoogleAccessApprovalFolderServiceAccount = require("./data-google-access-approval-folder-service-account");
exports.dataGoogleAccessApprovalOrganizationServiceAccount = require("./data-google-access-approval-organization-service-account");
exports.dataGoogleAccessApprovalProjectServiceAccount = require("./data-google-access-approval-project-service-account");
exports.dataGoogleActiveFolder = require("./data-google-active-folder");
exports.dataGoogleAppEngineDefaultServiceAccount = require("./data-google-app-engine-default-service-account");
exports.dataGoogleArtifactRegistryRepository = require("./data-google-artifact-registry-repository");
exports.dataGoogleBigqueryDefaultServiceAccount = require("./data-google-bigquery-default-service-account");
exports.dataGoogleBillingAccount = require("./data-google-billing-account");
exports.dataGoogleClientConfig = require("./data-google-client-config");
exports.dataGoogleClientOpenidUserinfo = require("./data-google-client-openid-userinfo");
exports.dataGoogleCloudIdentityGroupMemberships = require("./data-google-cloud-identity-group-memberships");
exports.dataGoogleCloudIdentityGroups = require("./data-google-cloud-identity-groups");
exports.dataGoogleCloudRunLocations = require("./data-google-cloud-run-locations");
exports.dataGoogleCloudRunService = require("./data-google-cloud-run-service");
exports.dataGoogleCloudfunctions2Function = require("./data-google-cloudfunctions2-function");
exports.dataGoogleCloudfunctionsFunction = require("./data-google-cloudfunctions-function");
exports.dataGoogleComposerEnvironment = require("./data-google-composer-environment");
exports.dataGoogleComposerImageVersions = require("./data-google-composer-image-versions");
exports.dataGoogleComputeAddress = require("./data-google-compute-address");
exports.dataGoogleComputeAddresses = require("./data-google-compute-addresses");
exports.dataGoogleComputeBackendBucket = require("./data-google-compute-backend-bucket");
exports.dataGoogleComputeBackendService = require("./data-google-compute-backend-service");
exports.dataGoogleComputeDefaultServiceAccount = require("./data-google-compute-default-service-account");
exports.dataGoogleComputeDisk = require("./data-google-compute-disk");
exports.dataGoogleComputeForwardingRule = require("./data-google-compute-forwarding-rule");
exports.dataGoogleComputeGlobalAddress = require("./data-google-compute-global-address");
exports.dataGoogleComputeGlobalForwardingRule = require("./data-google-compute-global-forwarding-rule");
exports.dataGoogleComputeHaVpnGateway = require("./data-google-compute-ha-vpn-gateway");
exports.dataGoogleComputeHealthCheck = require("./data-google-compute-health-check");
exports.dataGoogleComputeImage = require("./data-google-compute-image");
exports.dataGoogleComputeInstance = require("./data-google-compute-instance");
exports.dataGoogleComputeInstanceGroup = require("./data-google-compute-instance-group");
exports.dataGoogleComputeInstanceSerialPort = require("./data-google-compute-instance-serial-port");
exports.dataGoogleComputeInstanceTemplate = require("./data-google-compute-instance-template");
exports.dataGoogleComputeLbIpRanges = require("./data-google-compute-lb-ip-ranges");
exports.dataGoogleComputeNetwork = require("./data-google-compute-network");
exports.dataGoogleComputeNetworkEndpointGroup = require("./data-google-compute-network-endpoint-group");
exports.dataGoogleComputeNodeTypes = require("./data-google-compute-node-types");
exports.dataGoogleComputeRegionInstanceGroup = require("./data-google-compute-region-instance-group");
exports.dataGoogleComputeRegionNetworkEndpointGroup = require("./data-google-compute-region-network-endpoint-group");
exports.dataGoogleComputeRegionSslCertificate = require("./data-google-compute-region-ssl-certificate");
exports.dataGoogleComputeRegions = require("./data-google-compute-regions");
exports.dataGoogleComputeResourcePolicy = require("./data-google-compute-resource-policy");
exports.dataGoogleComputeRouter = require("./data-google-compute-router");
exports.dataGoogleComputeRouterStatus = require("./data-google-compute-router-status");
exports.dataGoogleComputeSnapshot = require("./data-google-compute-snapshot");
exports.dataGoogleComputeSslCertificate = require("./data-google-compute-ssl-certificate");
exports.dataGoogleComputeSslPolicy = require("./data-google-compute-ssl-policy");
exports.dataGoogleComputeSubnetwork = require("./data-google-compute-subnetwork");
exports.dataGoogleComputeVpnGateway = require("./data-google-compute-vpn-gateway");
exports.dataGoogleComputeZones = require("./data-google-compute-zones");
exports.dataGoogleContainerAwsVersions = require("./data-google-container-aws-versions");
exports.dataGoogleContainerAzureVersions = require("./data-google-container-azure-versions");
exports.dataGoogleContainerCluster = require("./data-google-container-cluster");
exports.dataGoogleContainerEngineVersions = require("./data-google-container-engine-versions");
exports.dataGoogleContainerRegistryImage = require("./data-google-container-registry-image");
exports.dataGoogleContainerRegistryRepository = require("./data-google-container-registry-repository");
exports.dataGoogleDataprocMetastoreService = require("./data-google-dataproc-metastore-service");
exports.dataGoogleDnsKeys = require("./data-google-dns-keys");
exports.dataGoogleDnsManagedZone = require("./data-google-dns-managed-zone");
exports.dataGoogleDnsRecordSet = require("./data-google-dns-record-set");
exports.dataGoogleFolder = require("./data-google-folder");
exports.dataGoogleFolderOrganizationPolicy = require("./data-google-folder-organization-policy");
exports.dataGoogleFolders = require("./data-google-folders");
exports.dataGoogleGameServicesGameServerDeploymentRollout = require("./data-google-game-services-game-server-deployment-rollout");
exports.dataGoogleIamPolicy = require("./data-google-iam-policy");
exports.dataGoogleIamRole = require("./data-google-iam-role");
exports.dataGoogleIamTestablePermissions = require("./data-google-iam-testable-permissions");
exports.dataGoogleIapClient = require("./data-google-iap-client");
exports.dataGoogleKmsCryptoKey = require("./data-google-kms-crypto-key");
exports.dataGoogleKmsCryptoKeyVersion = require("./data-google-kms-crypto-key-version");
exports.dataGoogleKmsKeyRing = require("./data-google-kms-key-ring");
exports.dataGoogleKmsSecret = require("./data-google-kms-secret");
exports.dataGoogleKmsSecretCiphertext = require("./data-google-kms-secret-ciphertext");
exports.dataGoogleLoggingProjectCmekSettings = require("./data-google-logging-project-cmek-settings");
exports.dataGoogleMonitoringAppEngineService = require("./data-google-monitoring-app-engine-service");
exports.dataGoogleMonitoringClusterIstioService = require("./data-google-monitoring-cluster-istio-service");
exports.dataGoogleMonitoringIstioCanonicalService = require("./data-google-monitoring-istio-canonical-service");
exports.dataGoogleMonitoringMeshIstioService = require("./data-google-monitoring-mesh-istio-service");
exports.dataGoogleMonitoringNotificationChannel = require("./data-google-monitoring-notification-channel");
exports.dataGoogleMonitoringUptimeCheckIps = require("./data-google-monitoring-uptime-check-ips");
exports.dataGoogleNetblockIpRanges = require("./data-google-netblock-ip-ranges");
exports.dataGoogleOrganization = require("./data-google-organization");
exports.dataGooglePrivatecaCertificateAuthority = require("./data-google-privateca-certificate-authority");
exports.dataGoogleProject = require("./data-google-project");
exports.dataGoogleProjectOrganizationPolicy = require("./data-google-project-organization-policy");
exports.dataGoogleProjects = require("./data-google-projects");
exports.dataGooglePubsubTopic = require("./data-google-pubsub-topic");
exports.dataGoogleRedisInstance = require("./data-google-redis-instance");
exports.dataGoogleSecretManagerSecret = require("./data-google-secret-manager-secret");
exports.dataGoogleSecretManagerSecretVersion = require("./data-google-secret-manager-secret-version");
exports.dataGoogleServiceAccount = require("./data-google-service-account");
exports.dataGoogleServiceAccountAccessToken = require("./data-google-service-account-access-token");
exports.dataGoogleServiceAccountIdToken = require("./data-google-service-account-id-token");
exports.dataGoogleServiceAccountJwt = require("./data-google-service-account-jwt");
exports.dataGoogleServiceAccountKey = require("./data-google-service-account-key");
exports.dataGoogleServiceNetworkingPeeredDnsDomain = require("./data-google-service-networking-peered-dns-domain");
exports.dataGoogleSourcerepoRepository = require("./data-google-sourcerepo-repository");
exports.dataGoogleSpannerInstance = require("./data-google-spanner-instance");
exports.dataGoogleSqlBackupRun = require("./data-google-sql-backup-run");
exports.dataGoogleSqlCaCerts = require("./data-google-sql-ca-certs");
exports.dataGoogleSqlDatabaseInstance = require("./data-google-sql-database-instance");
exports.dataGoogleStorageBucket = require("./data-google-storage-bucket");
exports.dataGoogleStorageBucketObject = require("./data-google-storage-bucket-object");
exports.dataGoogleStorageBucketObjectContent = require("./data-google-storage-bucket-object-content");
exports.dataGoogleStorageObjectSignedUrl = require("./data-google-storage-object-signed-url");
exports.dataGoogleStorageProjectServiceAccount = require("./data-google-storage-project-service-account");
exports.dataGoogleStorageTransferProjectServiceAccount = require("./data-google-storage-transfer-project-service-account");
exports.dataGoogleTagsTagKey = require("./data-google-tags-tag-key");
exports.dataGoogleTagsTagValue = require("./data-google-tags-tag-value");
exports.dataGoogleTpuTensorflowVersions = require("./data-google-tpu-tensorflow-versions");
exports.dataGoogleVpcAccessConnector = require("./data-google-vpc-access-connector");
exports.provider = require("./provider");
//# sourceMappingURL=data:application/json;base64,