"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessContextManagerServicePerimeters = exports.AccessContextManagerServicePerimetersTimeoutsOutputReference = exports.accessContextManagerServicePerimetersTimeoutsToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersList = exports.AccessContextManagerServicePerimetersServicePerimetersOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesList = exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsList = exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsList = exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesList = exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesList = exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsList = exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsList = exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesList = exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsList = exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsList = exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesList = exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesList = exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsList = exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsList = exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsToTerraform = exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromOutputReference = exports.accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identities: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.identities),
        identity_type: cdktf.stringToTerraform(struct.identityType),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._identities !== undefined) {
            hasAnyValues = true;
            internalValueResult.identities = this._identities;
        }
        if (this._identityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityType = this._identityType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._identities = undefined;
            this._identityType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._identities = value.identities;
            this._identityType = value.identityType;
        }
    }
    get identities() {
        return this.getListAttribute('identities');
    }
    set identities(value) {
        this._identities = value;
    }
    resetIdentities() {
        this._identities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identitiesInput() {
        return this._identities;
    }
    get identityType() {
        return this.getStringAttribute('identity_type');
    }
    set identityType(value) {
        this._identityType = value;
    }
    resetIdentityType() {
        this._identityType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityTypeInput() {
        return this._identityType;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromOutputReference[_a] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        method: cdktf.stringToTerraform(struct.method),
        permission: cdktf.stringToTerraform(struct.permission),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._method !== undefined) {
            hasAnyValues = true;
            internalValueResult.method = this._method;
        }
        if (this._permission !== undefined) {
            hasAnyValues = true;
            internalValueResult.permission = this._permission;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._method = undefined;
            this._permission = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._method = value.method;
            this._permission = value.permission;
        }
    }
    get method() {
        return this.getStringAttribute('method');
    }
    set method(value) {
        this._method = value;
    }
    resetMethod() {
        this._method = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodInput() {
        return this._method;
    }
    get permission() {
        return this.getStringAttribute('permission');
    }
    set permission(value) {
        this._permission = value;
    }
    resetPermission() {
        this._permission = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference[_b] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsList = AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsList;
_c = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsList[_c] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
        method_selectors: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsToTerraform, true)(struct.methodSelectors),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // method_selectors - computed: false, optional: true, required: false
        this._methodSelectors = new AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsMethodSelectorsList(this, "method_selectors", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._methodSelectors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.methodSelectors = this._methodSelectors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._serviceName = undefined;
            this._methodSelectors.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._serviceName = value.serviceName;
            this._methodSelectors.internalValue = value.methodSelectors;
        }
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get methodSelectors() {
        return this._methodSelectors;
    }
    putMethodSelectors(value) {
        this._methodSelectors.internalValue = value;
    }
    resetMethodSelectors() {
        this._methodSelectors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodSelectorsInput() {
        return this._methodSelectors.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsOutputReference[_d] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsList = AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsList;
_e = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsList[_e] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        external_resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.externalResources),
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        operations: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsToTerraform, true)(struct.operations),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // operations - computed: false, optional: true, required: false
        this._operations = new AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOperationsList(this, "operations", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._externalResources !== undefined) {
            hasAnyValues = true;
            internalValueResult.externalResources = this._externalResources;
        }
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._operations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.operations = this._operations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._externalResources = undefined;
            this._resources = undefined;
            this._operations.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._externalResources = value.externalResources;
            this._resources = value.resources;
            this._operations.internalValue = value.operations;
        }
    }
    get externalResources() {
        return this.getListAttribute('external_resources');
    }
    set externalResources(value) {
        this._externalResources = value;
    }
    resetExternalResources() {
        this._externalResources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get externalResourcesInput() {
        return this._externalResources;
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get operations() {
        return this._operations;
    }
    putOperations(value) {
        this._operations.internalValue = value;
    }
    resetOperations() {
        this._operations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operationsInput() {
        return this._operations.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOutputReference;
_f = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOutputReference[_f] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        egress_from: accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromToTerraform(struct.egressFrom),
        egress_to: accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToToTerraform(struct.egressTo),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // egress_from - computed: false, optional: true, required: false
        this._egressFrom = new AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressFromOutputReference(this, "egress_from");
        // egress_to - computed: false, optional: true, required: false
        this._egressTo = new AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesEgressToOutputReference(this, "egress_to");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._egressFrom?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressFrom = this._egressFrom?.internalValue;
        }
        if (this._egressTo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressTo = this._egressTo?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._egressFrom.internalValue = undefined;
            this._egressTo.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._egressFrom.internalValue = value.egressFrom;
            this._egressTo.internalValue = value.egressTo;
        }
    }
    get egressFrom() {
        return this._egressFrom;
    }
    putEgressFrom(value) {
        this._egressFrom.internalValue = value;
    }
    resetEgressFrom() {
        this._egressFrom.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressFromInput() {
        return this._egressFrom.internalValue;
    }
    get egressTo() {
        return this._egressTo;
    }
    putEgressTo(value) {
        this._egressTo.internalValue = value;
    }
    resetEgressTo() {
        this._egressTo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressToInput() {
        return this._egressTo.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesOutputReference[_g] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesList = AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesList;
_h = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesList[_h] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_level: cdktf.stringToTerraform(struct.accessLevel),
        resource: cdktf.stringToTerraform(struct.resource),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessLevel = this._accessLevel;
        }
        if (this._resource !== undefined) {
            hasAnyValues = true;
            internalValueResult.resource = this._resource;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._accessLevel = undefined;
            this._resource = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._accessLevel = value.accessLevel;
            this._resource = value.resource;
        }
    }
    get accessLevel() {
        return this.getStringAttribute('access_level');
    }
    set accessLevel(value) {
        this._accessLevel = value;
    }
    resetAccessLevel() {
        this._accessLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessLevelInput() {
        return this._accessLevel;
    }
    get resource() {
        return this.getStringAttribute('resource');
    }
    set resource(value) {
        this._resource = value;
    }
    resetResource() {
        this._resource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceInput() {
        return this._resource;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesOutputReference[_j] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesList = AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesList;
_k = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesList[_k] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identities: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.identities),
        identity_type: cdktf.stringToTerraform(struct.identityType),
        sources: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesToTerraform, true)(struct.sources),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sources - computed: false, optional: true, required: false
        this._sources = new AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromSourcesList(this, "sources", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._identities !== undefined) {
            hasAnyValues = true;
            internalValueResult.identities = this._identities;
        }
        if (this._identityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityType = this._identityType;
        }
        if (this._sources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sources = this._sources?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._identities = undefined;
            this._identityType = undefined;
            this._sources.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._identities = value.identities;
            this._identityType = value.identityType;
            this._sources.internalValue = value.sources;
        }
    }
    get identities() {
        return this.getListAttribute('identities');
    }
    set identities(value) {
        this._identities = value;
    }
    resetIdentities() {
        this._identities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identitiesInput() {
        return this._identities;
    }
    get identityType() {
        return this.getStringAttribute('identity_type');
    }
    set identityType(value) {
        this._identityType = value;
    }
    resetIdentityType() {
        this._identityType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityTypeInput() {
        return this._identityType;
    }
    get sources() {
        return this._sources;
    }
    putSources(value) {
        this._sources.internalValue = value;
    }
    resetSources() {
        this._sources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourcesInput() {
        return this._sources.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromOutputReference;
_l = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromOutputReference[_l] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        method: cdktf.stringToTerraform(struct.method),
        permission: cdktf.stringToTerraform(struct.permission),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._method !== undefined) {
            hasAnyValues = true;
            internalValueResult.method = this._method;
        }
        if (this._permission !== undefined) {
            hasAnyValues = true;
            internalValueResult.permission = this._permission;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._method = undefined;
            this._permission = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._method = value.method;
            this._permission = value.permission;
        }
    }
    get method() {
        return this.getStringAttribute('method');
    }
    set method(value) {
        this._method = value;
    }
    resetMethod() {
        this._method = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodInput() {
        return this._method;
    }
    get permission() {
        return this.getStringAttribute('permission');
    }
    set permission(value) {
        this._permission = value;
    }
    resetPermission() {
        this._permission = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference[_m] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsList = AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsList;
_o = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsList[_o] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
        method_selectors: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsToTerraform, true)(struct.methodSelectors),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // method_selectors - computed: false, optional: true, required: false
        this._methodSelectors = new AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsMethodSelectorsList(this, "method_selectors", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._methodSelectors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.methodSelectors = this._methodSelectors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._serviceName = undefined;
            this._methodSelectors.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._serviceName = value.serviceName;
            this._methodSelectors.internalValue = value.methodSelectors;
        }
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get methodSelectors() {
        return this._methodSelectors;
    }
    putMethodSelectors(value) {
        this._methodSelectors.internalValue = value;
    }
    resetMethodSelectors() {
        this._methodSelectors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodSelectorsInput() {
        return this._methodSelectors.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsOutputReference[_p] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsList = AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsList;
_q = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsList[_q] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        operations: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsToTerraform, true)(struct.operations),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // operations - computed: false, optional: true, required: false
        this._operations = new AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOperationsList(this, "operations", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._operations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.operations = this._operations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resources = undefined;
            this._operations.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resources = value.resources;
            this._operations.internalValue = value.operations;
        }
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get operations() {
        return this._operations;
    }
    putOperations(value) {
        this._operations.internalValue = value;
    }
    resetOperations() {
        this._operations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operationsInput() {
        return this._operations.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOutputReference;
_r = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOutputReference[_r] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ingress_from: accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromToTerraform(struct.ingressFrom),
        ingress_to: accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToToTerraform(struct.ingressTo),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // ingress_from - computed: false, optional: true, required: false
        this._ingressFrom = new AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressFromOutputReference(this, "ingress_from");
        // ingress_to - computed: false, optional: true, required: false
        this._ingressTo = new AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesIngressToOutputReference(this, "ingress_to");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ingressFrom?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressFrom = this._ingressFrom?.internalValue;
        }
        if (this._ingressTo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressTo = this._ingressTo?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ingressFrom.internalValue = undefined;
            this._ingressTo.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ingressFrom.internalValue = value.ingressFrom;
            this._ingressTo.internalValue = value.ingressTo;
        }
    }
    get ingressFrom() {
        return this._ingressFrom;
    }
    putIngressFrom(value) {
        this._ingressFrom.internalValue = value;
    }
    resetIngressFrom() {
        this._ingressFrom.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressFromInput() {
        return this._ingressFrom.internalValue;
    }
    get ingressTo() {
        return this._ingressTo;
    }
    putIngressTo(value) {
        this._ingressTo.internalValue = value;
    }
    resetIngressTo() {
        this._ingressTo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressToInput() {
        return this._ingressTo.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesOutputReference;
_s = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesOutputReference[_s] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesList = AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesList;
_t = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesList[_t] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_services: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedServices),
        enable_restriction: cdktf.booleanToTerraform(struct.enableRestriction),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedServices !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedServices = this._allowedServices;
        }
        if (this._enableRestriction !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableRestriction = this._enableRestriction;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedServices = undefined;
            this._enableRestriction = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedServices = value.allowedServices;
            this._enableRestriction = value.enableRestriction;
        }
    }
    get allowedServices() {
        return this.getListAttribute('allowed_services');
    }
    set allowedServices(value) {
        this._allowedServices = value;
    }
    resetAllowedServices() {
        this._allowedServices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedServicesInput() {
        return this._allowedServices;
    }
    get enableRestriction() {
        return this.getBooleanAttribute('enable_restriction');
    }
    set enableRestriction(value) {
        this._enableRestriction = value;
    }
    resetEnableRestriction() {
        this._enableRestriction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableRestrictionInput() {
        return this._enableRestriction;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesOutputReference;
_u = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesOutputReference[_u] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_levels: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.accessLevels),
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        restricted_services: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.restrictedServices),
        egress_policies: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesToTerraform, true)(struct.egressPolicies),
        ingress_policies: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesToTerraform, true)(struct.ingressPolicies),
        vpc_accessible_services: accessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesToTerraform(struct.vpcAccessibleServices),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersSpecToTerraform = accessContextManagerServicePerimetersServicePerimetersSpecToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // egress_policies - computed: false, optional: true, required: false
        this._egressPolicies = new AccessContextManagerServicePerimetersServicePerimetersSpecEgressPoliciesList(this, "egress_policies", false);
        // ingress_policies - computed: false, optional: true, required: false
        this._ingressPolicies = new AccessContextManagerServicePerimetersServicePerimetersSpecIngressPoliciesList(this, "ingress_policies", false);
        // vpc_accessible_services - computed: false, optional: true, required: false
        this._vpcAccessibleServices = new AccessContextManagerServicePerimetersServicePerimetersSpecVpcAccessibleServicesOutputReference(this, "vpc_accessible_services");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessLevels = this._accessLevels;
        }
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._restrictedServices !== undefined) {
            hasAnyValues = true;
            internalValueResult.restrictedServices = this._restrictedServices;
        }
        if (this._egressPolicies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressPolicies = this._egressPolicies?.internalValue;
        }
        if (this._ingressPolicies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressPolicies = this._ingressPolicies?.internalValue;
        }
        if (this._vpcAccessibleServices?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcAccessibleServices = this._vpcAccessibleServices?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessLevels = undefined;
            this._resources = undefined;
            this._restrictedServices = undefined;
            this._egressPolicies.internalValue = undefined;
            this._ingressPolicies.internalValue = undefined;
            this._vpcAccessibleServices.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessLevels = value.accessLevels;
            this._resources = value.resources;
            this._restrictedServices = value.restrictedServices;
            this._egressPolicies.internalValue = value.egressPolicies;
            this._ingressPolicies.internalValue = value.ingressPolicies;
            this._vpcAccessibleServices.internalValue = value.vpcAccessibleServices;
        }
    }
    get accessLevels() {
        return this.getListAttribute('access_levels');
    }
    set accessLevels(value) {
        this._accessLevels = value;
    }
    resetAccessLevels() {
        this._accessLevels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessLevelsInput() {
        return this._accessLevels;
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get restrictedServices() {
        return this.getListAttribute('restricted_services');
    }
    set restrictedServices(value) {
        this._restrictedServices = value;
    }
    resetRestrictedServices() {
        this._restrictedServices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restrictedServicesInput() {
        return this._restrictedServices;
    }
    get egressPolicies() {
        return this._egressPolicies;
    }
    putEgressPolicies(value) {
        this._egressPolicies.internalValue = value;
    }
    resetEgressPolicies() {
        this._egressPolicies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressPoliciesInput() {
        return this._egressPolicies.internalValue;
    }
    get ingressPolicies() {
        return this._ingressPolicies;
    }
    putIngressPolicies(value) {
        this._ingressPolicies.internalValue = value;
    }
    resetIngressPolicies() {
        this._ingressPolicies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressPoliciesInput() {
        return this._ingressPolicies.internalValue;
    }
    get vpcAccessibleServices() {
        return this._vpcAccessibleServices;
    }
    putVpcAccessibleServices(value) {
        this._vpcAccessibleServices.internalValue = value;
    }
    resetVpcAccessibleServices() {
        this._vpcAccessibleServices.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcAccessibleServicesInput() {
        return this._vpcAccessibleServices.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersSpecOutputReference = AccessContextManagerServicePerimetersServicePerimetersSpecOutputReference;
_v = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersSpecOutputReference[_v] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersSpecOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identities: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.identities),
        identity_type: cdktf.stringToTerraform(struct.identityType),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._identities !== undefined) {
            hasAnyValues = true;
            internalValueResult.identities = this._identities;
        }
        if (this._identityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityType = this._identityType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._identities = undefined;
            this._identityType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._identities = value.identities;
            this._identityType = value.identityType;
        }
    }
    get identities() {
        return this.getListAttribute('identities');
    }
    set identities(value) {
        this._identities = value;
    }
    resetIdentities() {
        this._identities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identitiesInput() {
        return this._identities;
    }
    get identityType() {
        return this.getStringAttribute('identity_type');
    }
    set identityType(value) {
        this._identityType = value;
    }
    resetIdentityType() {
        this._identityType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityTypeInput() {
        return this._identityType;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromOutputReference;
_w = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromOutputReference[_w] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        method: cdktf.stringToTerraform(struct.method),
        permission: cdktf.stringToTerraform(struct.permission),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._method !== undefined) {
            hasAnyValues = true;
            internalValueResult.method = this._method;
        }
        if (this._permission !== undefined) {
            hasAnyValues = true;
            internalValueResult.permission = this._permission;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._method = undefined;
            this._permission = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._method = value.method;
            this._permission = value.permission;
        }
    }
    get method() {
        return this.getStringAttribute('method');
    }
    set method(value) {
        this._method = value;
    }
    resetMethod() {
        this._method = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodInput() {
        return this._method;
    }
    get permission() {
        return this.getStringAttribute('permission');
    }
    set permission(value) {
        this._permission = value;
    }
    resetPermission() {
        this._permission = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference[_x] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsList = AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsList;
_y = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsList[_y] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
        method_selectors: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsToTerraform, true)(struct.methodSelectors),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // method_selectors - computed: false, optional: true, required: false
        this._methodSelectors = new AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsMethodSelectorsList(this, "method_selectors", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._methodSelectors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.methodSelectors = this._methodSelectors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._serviceName = undefined;
            this._methodSelectors.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._serviceName = value.serviceName;
            this._methodSelectors.internalValue = value.methodSelectors;
        }
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get methodSelectors() {
        return this._methodSelectors;
    }
    putMethodSelectors(value) {
        this._methodSelectors.internalValue = value;
    }
    resetMethodSelectors() {
        this._methodSelectors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodSelectorsInput() {
        return this._methodSelectors.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsOutputReference;
_z = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsOutputReference[_z] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsList = AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsList;
_0 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsList[_0] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        external_resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.externalResources),
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        operations: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsToTerraform, true)(struct.operations),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // operations - computed: false, optional: true, required: false
        this._operations = new AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOperationsList(this, "operations", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._externalResources !== undefined) {
            hasAnyValues = true;
            internalValueResult.externalResources = this._externalResources;
        }
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._operations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.operations = this._operations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._externalResources = undefined;
            this._resources = undefined;
            this._operations.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._externalResources = value.externalResources;
            this._resources = value.resources;
            this._operations.internalValue = value.operations;
        }
    }
    get externalResources() {
        return this.getListAttribute('external_resources');
    }
    set externalResources(value) {
        this._externalResources = value;
    }
    resetExternalResources() {
        this._externalResources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get externalResourcesInput() {
        return this._externalResources;
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get operations() {
        return this._operations;
    }
    putOperations(value) {
        this._operations.internalValue = value;
    }
    resetOperations() {
        this._operations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operationsInput() {
        return this._operations.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOutputReference[_1] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        egress_from: accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromToTerraform(struct.egressFrom),
        egress_to: accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToToTerraform(struct.egressTo),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // egress_from - computed: false, optional: true, required: false
        this._egressFrom = new AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressFromOutputReference(this, "egress_from");
        // egress_to - computed: false, optional: true, required: false
        this._egressTo = new AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesEgressToOutputReference(this, "egress_to");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._egressFrom?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressFrom = this._egressFrom?.internalValue;
        }
        if (this._egressTo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressTo = this._egressTo?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._egressFrom.internalValue = undefined;
            this._egressTo.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._egressFrom.internalValue = value.egressFrom;
            this._egressTo.internalValue = value.egressTo;
        }
    }
    get egressFrom() {
        return this._egressFrom;
    }
    putEgressFrom(value) {
        this._egressFrom.internalValue = value;
    }
    resetEgressFrom() {
        this._egressFrom.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressFromInput() {
        return this._egressFrom.internalValue;
    }
    get egressTo() {
        return this._egressTo;
    }
    putEgressTo(value) {
        this._egressTo.internalValue = value;
    }
    resetEgressTo() {
        this._egressTo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressToInput() {
        return this._egressTo.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesOutputReference[_2] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesList = AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesList;
_3 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesList[_3] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_level: cdktf.stringToTerraform(struct.accessLevel),
        resource: cdktf.stringToTerraform(struct.resource),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessLevel = this._accessLevel;
        }
        if (this._resource !== undefined) {
            hasAnyValues = true;
            internalValueResult.resource = this._resource;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._accessLevel = undefined;
            this._resource = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._accessLevel = value.accessLevel;
            this._resource = value.resource;
        }
    }
    get accessLevel() {
        return this.getStringAttribute('access_level');
    }
    set accessLevel(value) {
        this._accessLevel = value;
    }
    resetAccessLevel() {
        this._accessLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessLevelInput() {
        return this._accessLevel;
    }
    get resource() {
        return this.getStringAttribute('resource');
    }
    set resource(value) {
        this._resource = value;
    }
    resetResource() {
        this._resource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceInput() {
        return this._resource;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesOutputReference[_4] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesList = AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesList;
_5 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesList[_5] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identities: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.identities),
        identity_type: cdktf.stringToTerraform(struct.identityType),
        sources: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesToTerraform, true)(struct.sources),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sources - computed: false, optional: true, required: false
        this._sources = new AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromSourcesList(this, "sources", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._identities !== undefined) {
            hasAnyValues = true;
            internalValueResult.identities = this._identities;
        }
        if (this._identityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityType = this._identityType;
        }
        if (this._sources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sources = this._sources?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._identities = undefined;
            this._identityType = undefined;
            this._sources.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._identities = value.identities;
            this._identityType = value.identityType;
            this._sources.internalValue = value.sources;
        }
    }
    get identities() {
        return this.getListAttribute('identities');
    }
    set identities(value) {
        this._identities = value;
    }
    resetIdentities() {
        this._identities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identitiesInput() {
        return this._identities;
    }
    get identityType() {
        return this.getStringAttribute('identity_type');
    }
    set identityType(value) {
        this._identityType = value;
    }
    resetIdentityType() {
        this._identityType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityTypeInput() {
        return this._identityType;
    }
    get sources() {
        return this._sources;
    }
    putSources(value) {
        this._sources.internalValue = value;
    }
    resetSources() {
        this._sources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourcesInput() {
        return this._sources.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromOutputReference[_6] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        method: cdktf.stringToTerraform(struct.method),
        permission: cdktf.stringToTerraform(struct.permission),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._method !== undefined) {
            hasAnyValues = true;
            internalValueResult.method = this._method;
        }
        if (this._permission !== undefined) {
            hasAnyValues = true;
            internalValueResult.permission = this._permission;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._method = undefined;
            this._permission = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._method = value.method;
            this._permission = value.permission;
        }
    }
    get method() {
        return this.getStringAttribute('method');
    }
    set method(value) {
        this._method = value;
    }
    resetMethod() {
        this._method = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodInput() {
        return this._method;
    }
    get permission() {
        return this.getStringAttribute('permission');
    }
    set permission(value) {
        this._permission = value;
    }
    resetPermission() {
        this._permission = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference[_7] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsList = AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsList;
_8 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsList[_8] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
        method_selectors: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsToTerraform, true)(struct.methodSelectors),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // method_selectors - computed: false, optional: true, required: false
        this._methodSelectors = new AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsMethodSelectorsList(this, "method_selectors", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._methodSelectors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.methodSelectors = this._methodSelectors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._serviceName = undefined;
            this._methodSelectors.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._serviceName = value.serviceName;
            this._methodSelectors.internalValue = value.methodSelectors;
        }
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get methodSelectors() {
        return this._methodSelectors;
    }
    putMethodSelectors(value) {
        this._methodSelectors.internalValue = value;
    }
    resetMethodSelectors() {
        this._methodSelectors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodSelectorsInput() {
        return this._methodSelectors.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsOutputReference[_9] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsList = AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsList;
_10 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsList[_10] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        operations: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsToTerraform, true)(struct.operations),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // operations - computed: false, optional: true, required: false
        this._operations = new AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOperationsList(this, "operations", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._operations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.operations = this._operations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resources = undefined;
            this._operations.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resources = value.resources;
            this._operations.internalValue = value.operations;
        }
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get operations() {
        return this._operations;
    }
    putOperations(value) {
        this._operations.internalValue = value;
    }
    resetOperations() {
        this._operations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operationsInput() {
        return this._operations.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOutputReference[_11] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ingress_from: accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromToTerraform(struct.ingressFrom),
        ingress_to: accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToToTerraform(struct.ingressTo),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // ingress_from - computed: false, optional: true, required: false
        this._ingressFrom = new AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressFromOutputReference(this, "ingress_from");
        // ingress_to - computed: false, optional: true, required: false
        this._ingressTo = new AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesIngressToOutputReference(this, "ingress_to");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ingressFrom?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressFrom = this._ingressFrom?.internalValue;
        }
        if (this._ingressTo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressTo = this._ingressTo?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ingressFrom.internalValue = undefined;
            this._ingressTo.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ingressFrom.internalValue = value.ingressFrom;
            this._ingressTo.internalValue = value.ingressTo;
        }
    }
    get ingressFrom() {
        return this._ingressFrom;
    }
    putIngressFrom(value) {
        this._ingressFrom.internalValue = value;
    }
    resetIngressFrom() {
        this._ingressFrom.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressFromInput() {
        return this._ingressFrom.internalValue;
    }
    get ingressTo() {
        return this._ingressTo;
    }
    putIngressTo(value) {
        this._ingressTo.internalValue = value;
    }
    resetIngressTo() {
        this._ingressTo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressToInput() {
        return this._ingressTo.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesOutputReference[_12] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesList = AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesList;
_13 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesList[_13] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesList", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_services: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedServices),
        enable_restriction: cdktf.booleanToTerraform(struct.enableRestriction),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedServices !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedServices = this._allowedServices;
        }
        if (this._enableRestriction !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableRestriction = this._enableRestriction;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedServices = undefined;
            this._enableRestriction = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedServices = value.allowedServices;
            this._enableRestriction = value.enableRestriction;
        }
    }
    get allowedServices() {
        return cdktf.Fn.tolist(this.getListAttribute('allowed_services'));
    }
    set allowedServices(value) {
        this._allowedServices = value;
    }
    resetAllowedServices() {
        this._allowedServices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedServicesInput() {
        return this._allowedServices;
    }
    get enableRestriction() {
        return this.getBooleanAttribute('enable_restriction');
    }
    set enableRestriction(value) {
        this._enableRestriction = value;
    }
    resetEnableRestriction() {
        this._enableRestriction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableRestrictionInput() {
        return this._enableRestriction;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesOutputReference[_14] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_levels: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.accessLevels),
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        restricted_services: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.restrictedServices),
        egress_policies: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesToTerraform, true)(struct.egressPolicies),
        ingress_policies: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesToTerraform, true)(struct.ingressPolicies),
        vpc_accessible_services: accessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesToTerraform(struct.vpcAccessibleServices),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersStatusToTerraform = accessContextManagerServicePerimetersServicePerimetersStatusToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersStatusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // egress_policies - computed: false, optional: true, required: false
        this._egressPolicies = new AccessContextManagerServicePerimetersServicePerimetersStatusEgressPoliciesList(this, "egress_policies", false);
        // ingress_policies - computed: false, optional: true, required: false
        this._ingressPolicies = new AccessContextManagerServicePerimetersServicePerimetersStatusIngressPoliciesList(this, "ingress_policies", false);
        // vpc_accessible_services - computed: false, optional: true, required: false
        this._vpcAccessibleServices = new AccessContextManagerServicePerimetersServicePerimetersStatusVpcAccessibleServicesOutputReference(this, "vpc_accessible_services");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessLevels = this._accessLevels;
        }
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._restrictedServices !== undefined) {
            hasAnyValues = true;
            internalValueResult.restrictedServices = this._restrictedServices;
        }
        if (this._egressPolicies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressPolicies = this._egressPolicies?.internalValue;
        }
        if (this._ingressPolicies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressPolicies = this._ingressPolicies?.internalValue;
        }
        if (this._vpcAccessibleServices?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcAccessibleServices = this._vpcAccessibleServices?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessLevels = undefined;
            this._resources = undefined;
            this._restrictedServices = undefined;
            this._egressPolicies.internalValue = undefined;
            this._ingressPolicies.internalValue = undefined;
            this._vpcAccessibleServices.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessLevels = value.accessLevels;
            this._resources = value.resources;
            this._restrictedServices = value.restrictedServices;
            this._egressPolicies.internalValue = value.egressPolicies;
            this._ingressPolicies.internalValue = value.ingressPolicies;
            this._vpcAccessibleServices.internalValue = value.vpcAccessibleServices;
        }
    }
    get accessLevels() {
        return this.getListAttribute('access_levels');
    }
    set accessLevels(value) {
        this._accessLevels = value;
    }
    resetAccessLevels() {
        this._accessLevels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessLevelsInput() {
        return this._accessLevels;
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get restrictedServices() {
        return cdktf.Fn.tolist(this.getListAttribute('restricted_services'));
    }
    set restrictedServices(value) {
        this._restrictedServices = value;
    }
    resetRestrictedServices() {
        this._restrictedServices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restrictedServicesInput() {
        return this._restrictedServices;
    }
    get egressPolicies() {
        return this._egressPolicies;
    }
    putEgressPolicies(value) {
        this._egressPolicies.internalValue = value;
    }
    resetEgressPolicies() {
        this._egressPolicies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressPoliciesInput() {
        return this._egressPolicies.internalValue;
    }
    get ingressPolicies() {
        return this._ingressPolicies;
    }
    putIngressPolicies(value) {
        this._ingressPolicies.internalValue = value;
    }
    resetIngressPolicies() {
        this._ingressPolicies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressPoliciesInput() {
        return this._ingressPolicies.internalValue;
    }
    get vpcAccessibleServices() {
        return this._vpcAccessibleServices;
    }
    putVpcAccessibleServices(value) {
        this._vpcAccessibleServices.internalValue = value;
    }
    resetVpcAccessibleServices() {
        this._vpcAccessibleServices.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcAccessibleServicesInput() {
        return this._vpcAccessibleServices.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersStatusOutputReference = AccessContextManagerServicePerimetersServicePerimetersStatusOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersStatusOutputReference[_15] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersStatusOutputReference", version: "4.0.3" };
function accessContextManagerServicePerimetersServicePerimetersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        name: cdktf.stringToTerraform(struct.name),
        perimeter_type: cdktf.stringToTerraform(struct.perimeterType),
        title: cdktf.stringToTerraform(struct.title),
        use_explicit_dry_run_spec: cdktf.booleanToTerraform(struct.useExplicitDryRunSpec),
        spec: accessContextManagerServicePerimetersServicePerimetersSpecToTerraform(struct.spec),
        status: accessContextManagerServicePerimetersServicePerimetersStatusToTerraform(struct.status),
    };
}
exports.accessContextManagerServicePerimetersServicePerimetersToTerraform = accessContextManagerServicePerimetersServicePerimetersToTerraform;
class AccessContextManagerServicePerimetersServicePerimetersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // spec - computed: false, optional: true, required: false
        this._spec = new AccessContextManagerServicePerimetersServicePerimetersSpecOutputReference(this, "spec");
        // status - computed: false, optional: true, required: false
        this._status = new AccessContextManagerServicePerimetersServicePerimetersStatusOutputReference(this, "status");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._perimeterType !== undefined) {
            hasAnyValues = true;
            internalValueResult.perimeterType = this._perimeterType;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        if (this._useExplicitDryRunSpec !== undefined) {
            hasAnyValues = true;
            internalValueResult.useExplicitDryRunSpec = this._useExplicitDryRunSpec;
        }
        if (this._spec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.spec = this._spec?.internalValue;
        }
        if (this._status?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.status = this._status?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._name = undefined;
            this._perimeterType = undefined;
            this._title = undefined;
            this._useExplicitDryRunSpec = undefined;
            this._spec.internalValue = undefined;
            this._status.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._name = value.name;
            this._perimeterType = value.perimeterType;
            this._title = value.title;
            this._useExplicitDryRunSpec = value.useExplicitDryRunSpec;
            this._spec.internalValue = value.spec;
            this._status.internalValue = value.status;
        }
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get perimeterType() {
        return this.getStringAttribute('perimeter_type');
    }
    set perimeterType(value) {
        this._perimeterType = value;
    }
    resetPerimeterType() {
        this._perimeterType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perimeterTypeInput() {
        return this._perimeterType;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get useExplicitDryRunSpec() {
        return this.getBooleanAttribute('use_explicit_dry_run_spec');
    }
    set useExplicitDryRunSpec(value) {
        this._useExplicitDryRunSpec = value;
    }
    resetUseExplicitDryRunSpec() {
        this._useExplicitDryRunSpec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useExplicitDryRunSpecInput() {
        return this._useExplicitDryRunSpec;
    }
    get spec() {
        return this._spec;
    }
    putSpec(value) {
        this._spec.internalValue = value;
    }
    resetSpec() {
        this._spec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get specInput() {
        return this._spec.internalValue;
    }
    get status() {
        return this._status;
    }
    putStatus(value) {
        this._status.internalValue = value;
    }
    resetStatus() {
        this._status.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status.internalValue;
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersOutputReference = AccessContextManagerServicePerimetersServicePerimetersOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersOutputReference[_16] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersOutputReference", version: "4.0.3" };
class AccessContextManagerServicePerimetersServicePerimetersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimetersServicePerimetersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimetersServicePerimetersList = AccessContextManagerServicePerimetersServicePerimetersList;
_17 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersServicePerimetersList[_17] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersServicePerimetersList", version: "4.0.3" };
function accessContextManagerServicePerimetersTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.accessContextManagerServicePerimetersTimeoutsToTerraform = accessContextManagerServicePerimetersTimeoutsToTerraform;
class AccessContextManagerServicePerimetersTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.AccessContextManagerServicePerimetersTimeoutsOutputReference = AccessContextManagerServicePerimetersTimeoutsOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimetersTimeoutsOutputReference[_18] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimetersTimeoutsOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/access_context_manager_service_perimeters google_access_context_manager_service_perimeters}
*/
class AccessContextManagerServicePerimeters extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/access_context_manager_service_perimeters google_access_context_manager_service_perimeters} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AccessContextManagerServicePerimetersConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_access_context_manager_service_perimeters',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // service_perimeters - computed: false, optional: true, required: false
        this._servicePerimeters = new AccessContextManagerServicePerimetersServicePerimetersList(this, "service_perimeters", true);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new AccessContextManagerServicePerimetersTimeoutsOutputReference(this, "timeouts");
        this._id = config.id;
        this._parent = config.parent;
        this._servicePerimeters.internalValue = config.servicePerimeters;
        this._timeouts.internalValue = config.timeouts;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get parent() {
        return this.getStringAttribute('parent');
    }
    set parent(value) {
        this._parent = value;
    }
    // Temporarily expose input value. Use with caution.
    get parentInput() {
        return this._parent;
    }
    get servicePerimeters() {
        return this._servicePerimeters;
    }
    putServicePerimeters(value) {
        this._servicePerimeters.internalValue = value;
    }
    resetServicePerimeters() {
        this._servicePerimeters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get servicePerimetersInput() {
        return this._servicePerimeters.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            parent: cdktf.stringToTerraform(this._parent),
            service_perimeters: cdktf.listMapper(accessContextManagerServicePerimetersServicePerimetersToTerraform, true)(this._servicePerimeters.internalValue),
            timeouts: accessContextManagerServicePerimetersTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.AccessContextManagerServicePerimeters = AccessContextManagerServicePerimeters;
_19 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeters[_19] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeters.AccessContextManagerServicePerimeters", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
AccessContextManagerServicePerimeters.tfResourceType = "google_access_context_manager_service_perimeters";
//# sourceMappingURL=data:application/json;base64,