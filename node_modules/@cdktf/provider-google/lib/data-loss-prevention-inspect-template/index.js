"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLossPreventionInspectTemplate = exports.DataLossPreventionInspectTemplateTimeoutsOutputReference = exports.dataLossPreventionInspectTemplateTimeoutsToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetList = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigLimitsToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList = exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigInfoTypesList = exports.DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigInfoTypesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._path = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._path = value.path;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference[_a] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        words: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.words),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListToTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._words !== undefined) {
            hasAnyValues = true;
            internalValueResult.words = this._words;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._words = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._words = value.words;
        }
    }
    get words() {
        return this.getListAttribute('words');
    }
    set words(value) {
        this._words = value;
    }
    // Temporarily expose input value. Use with caution.
    get wordsInput() {
        return this._words;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListOutputReference[_b] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_storage_path: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform(struct.cloudStoragePath),
        word_list: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListToTerraform(struct.wordList),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_storage_path - computed: false, optional: true, required: false
        this._cloudStoragePath = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference(this, "cloud_storage_path");
        // word_list - computed: false, optional: true, required: false
        this._wordList = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListOutputReference(this, "word_list");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudStoragePath?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStoragePath = this._cloudStoragePath?.internalValue;
        }
        if (this._wordList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.wordList = this._wordList?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudStoragePath.internalValue = undefined;
            this._wordList.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudStoragePath.internalValue = value.cloudStoragePath;
            this._wordList.internalValue = value.wordList;
        }
    }
    get cloudStoragePath() {
        return this._cloudStoragePath;
    }
    putCloudStoragePath(value) {
        this._cloudStoragePath.internalValue = value;
    }
    resetCloudStoragePath() {
        this._cloudStoragePath.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStoragePathInput() {
        return this._cloudStoragePath.internalValue;
    }
    get wordList() {
        return this._wordList;
    }
    putWordList(value) {
        this._wordList.internalValue = value;
    }
    resetWordList() {
        this._wordList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get wordListInput() {
        return this._wordList.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference[_c] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference[_d] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_indexes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.groupIndexes),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupIndexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupIndexes = this._groupIndexes;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupIndexes = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupIndexes = value.groupIndexes;
            this._pattern = value.pattern;
        }
    }
    get groupIndexes() {
        return this.getNumberListAttribute('group_indexes');
    }
    set groupIndexes(value) {
        this._groupIndexes = value;
    }
    resetGroupIndexes() {
        this._groupIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIndexesInput() {
        return this._groupIndexes;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference[_e] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference[_f] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclusion_type: cdktf.stringToTerraform(struct.exclusionType),
        likelihood: cdktf.stringToTerraform(struct.likelihood),
        dictionary: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToTerraform(struct.dictionary),
        info_type: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToTerraform(struct.infoType),
        regex: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToTerraform(struct.regex),
        stored_type: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToTerraform(struct.storedType),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // dictionary - computed: false, optional: true, required: false
        this._dictionary = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference(this, "dictionary");
        // info_type - computed: false, optional: false, required: true
        this._infoType = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference(this, "info_type");
        // regex - computed: false, optional: true, required: false
        this._regex = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference(this, "regex");
        // stored_type - computed: false, optional: true, required: false
        this._storedType = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference(this, "stored_type");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exclusionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusionType = this._exclusionType;
        }
        if (this._likelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.likelihood = this._likelihood;
        }
        if (this._dictionary?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dictionary = this._dictionary?.internalValue;
        }
        if (this._infoType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoType = this._infoType?.internalValue;
        }
        if (this._regex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.regex = this._regex?.internalValue;
        }
        if (this._storedType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.storedType = this._storedType?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exclusionType = undefined;
            this._likelihood = undefined;
            this._dictionary.internalValue = undefined;
            this._infoType.internalValue = undefined;
            this._regex.internalValue = undefined;
            this._storedType.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exclusionType = value.exclusionType;
            this._likelihood = value.likelihood;
            this._dictionary.internalValue = value.dictionary;
            this._infoType.internalValue = value.infoType;
            this._regex.internalValue = value.regex;
            this._storedType.internalValue = value.storedType;
        }
    }
    get exclusionType() {
        return this.getStringAttribute('exclusion_type');
    }
    set exclusionType(value) {
        this._exclusionType = value;
    }
    resetExclusionType() {
        this._exclusionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionTypeInput() {
        return this._exclusionType;
    }
    get likelihood() {
        return this.getStringAttribute('likelihood');
    }
    set likelihood(value) {
        this._likelihood = value;
    }
    resetLikelihood() {
        this._likelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get likelihoodInput() {
        return this._likelihood;
    }
    get dictionary() {
        return this._dictionary;
    }
    putDictionary(value) {
        this._dictionary.internalValue = value;
    }
    resetDictionary() {
        this._dictionary.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dictionaryInput() {
        return this._dictionary.internalValue;
    }
    get infoType() {
        return this._infoType;
    }
    putInfoType(value) {
        this._infoType.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypeInput() {
        return this._infoType.internalValue;
    }
    get regex() {
        return this._regex;
    }
    putRegex(value) {
        this._regex.internalValue = value;
    }
    resetRegex() {
        this._regex.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexInput() {
        return this._regex.internalValue;
    }
    get storedType() {
        return this._storedType;
    }
    putStoredType(value) {
        this._storedType.internalValue = value;
    }
    resetStoredType() {
        this._storedType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storedTypeInput() {
        return this._storedType.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference[_g] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference", version: "4.0.3" };
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList;
_h = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList[_h] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigInfoTypesToTerraform = dataLossPreventionInspectTemplateInspectConfigInfoTypesToTerraform;
class DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference = DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference[_j] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference", version: "4.0.3" };
class DataLossPreventionInspectTemplateInspectConfigInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigInfoTypesList = DataLossPreventionInspectTemplateInspectConfigInfoTypesList;
_k = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigInfoTypesList[_k] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigInfoTypesList", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform = dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform;
class DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference = DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference[_l] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_findings: cdktf.numberToTerraform(struct.maxFindings),
        info_type: dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform(struct.infoType),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform = dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform;
class DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // info_type - computed: false, optional: false, required: true
        this._infoType = new DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference(this, "info_type");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxFindings !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindings = this._maxFindings;
        }
        if (this._infoType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoType = this._infoType?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._maxFindings = undefined;
            this._infoType.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._maxFindings = value.maxFindings;
            this._infoType.internalValue = value.infoType;
        }
    }
    get maxFindings() {
        return this.getNumberAttribute('max_findings');
    }
    set maxFindings(value) {
        this._maxFindings = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsInput() {
        return this._maxFindings;
    }
    get infoType() {
        return this._infoType;
    }
    putInfoType(value) {
        this._infoType.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypeInput() {
        return this._infoType.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference = DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference[_m] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference", version: "4.0.3" };
class DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList = DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList;
_o = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList[_o] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigLimitsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_findings_per_item: cdktf.numberToTerraform(struct.maxFindingsPerItem),
        max_findings_per_request: cdktf.numberToTerraform(struct.maxFindingsPerRequest),
        max_findings_per_info_type: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform, true)(struct.maxFindingsPerInfoType),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigLimitsToTerraform = dataLossPreventionInspectTemplateInspectConfigLimitsToTerraform;
class DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // max_findings_per_info_type - computed: false, optional: true, required: false
        this._maxFindingsPerInfoType = new DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList(this, "max_findings_per_info_type", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxFindingsPerItem !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindingsPerItem = this._maxFindingsPerItem;
        }
        if (this._maxFindingsPerRequest !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindingsPerRequest = this._maxFindingsPerRequest;
        }
        if (this._maxFindingsPerInfoType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindingsPerInfoType = this._maxFindingsPerInfoType?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxFindingsPerItem = undefined;
            this._maxFindingsPerRequest = undefined;
            this._maxFindingsPerInfoType.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxFindingsPerItem = value.maxFindingsPerItem;
            this._maxFindingsPerRequest = value.maxFindingsPerRequest;
            this._maxFindingsPerInfoType.internalValue = value.maxFindingsPerInfoType;
        }
    }
    get maxFindingsPerItem() {
        return this.getNumberAttribute('max_findings_per_item');
    }
    set maxFindingsPerItem(value) {
        this._maxFindingsPerItem = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsPerItemInput() {
        return this._maxFindingsPerItem;
    }
    get maxFindingsPerRequest() {
        return this.getNumberAttribute('max_findings_per_request');
    }
    set maxFindingsPerRequest(value) {
        this._maxFindingsPerRequest = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsPerRequestInput() {
        return this._maxFindingsPerRequest;
    }
    get maxFindingsPerInfoType() {
        return this._maxFindingsPerInfoType;
    }
    putMaxFindingsPerInfoType(value) {
        this._maxFindingsPerInfoType.internalValue = value;
    }
    resetMaxFindingsPerInfoType() {
        this._maxFindingsPerInfoType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsPerInfoTypeInput() {
        return this._maxFindingsPerInfoType.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference = DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference[_p] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference[_q] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference", version: "4.0.3" };
class DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList = DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList;
_r = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList[_r] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._path = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._path = value.path;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference[_s] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        words: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.words),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._words !== undefined) {
            hasAnyValues = true;
            internalValueResult.words = this._words;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._words = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._words = value.words;
        }
    }
    get words() {
        return this.getListAttribute('words');
    }
    set words(value) {
        this._words = value;
    }
    // Temporarily expose input value. Use with caution.
    get wordsInput() {
        return this._words;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListOutputReference[_t] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_storage_path: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform(struct.cloudStoragePath),
        word_list: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListToTerraform(struct.wordList),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_storage_path - computed: false, optional: true, required: false
        this._cloudStoragePath = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference(this, "cloud_storage_path");
        // word_list - computed: false, optional: true, required: false
        this._wordList = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListOutputReference(this, "word_list");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudStoragePath?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStoragePath = this._cloudStoragePath?.internalValue;
        }
        if (this._wordList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.wordList = this._wordList?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudStoragePath.internalValue = undefined;
            this._wordList.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudStoragePath.internalValue = value.cloudStoragePath;
            this._wordList.internalValue = value.wordList;
        }
    }
    get cloudStoragePath() {
        return this._cloudStoragePath;
    }
    putCloudStoragePath(value) {
        this._cloudStoragePath.internalValue = value;
    }
    resetCloudStoragePath() {
        this._cloudStoragePath.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStoragePathInput() {
        return this._cloudStoragePath.internalValue;
    }
    get wordList() {
        return this._wordList;
    }
    putWordList(value) {
        this._wordList.internalValue = value;
    }
    resetWordList() {
        this._wordList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get wordListInput() {
        return this._wordList.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference[_u] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference[_v] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference", version: "4.0.3" };
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList;
_w = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList[_w] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        info_types: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform, true)(struct.infoTypes),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // info_types - computed: false, optional: false, required: true
        this._infoTypes = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList(this, "info_types", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._infoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoTypes = this._infoTypes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._infoTypes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._infoTypes.internalValue = value.infoTypes;
        }
    }
    get infoTypes() {
        return this._infoTypes;
    }
    putInfoTypes(value) {
        this._infoTypes.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypesInput() {
        return this._infoTypes.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference[_x] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_indexes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.groupIndexes),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupIndexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupIndexes = this._groupIndexes;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupIndexes = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupIndexes = value.groupIndexes;
            this._pattern = value.pattern;
        }
    }
    get groupIndexes() {
        return this.getNumberListAttribute('group_indexes');
    }
    set groupIndexes(value) {
        this._groupIndexes = value;
    }
    resetGroupIndexes() {
        this._groupIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIndexesInput() {
        return this._groupIndexes;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference[_y] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        matching_type: cdktf.stringToTerraform(struct.matchingType),
        dictionary: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform(struct.dictionary),
        exclude_info_types: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform(struct.excludeInfoTypes),
        regex: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToTerraform(struct.regex),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dictionary - computed: false, optional: true, required: false
        this._dictionary = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference(this, "dictionary");
        // exclude_info_types - computed: false, optional: true, required: false
        this._excludeInfoTypes = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference(this, "exclude_info_types");
        // regex - computed: false, optional: true, required: false
        this._regex = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference(this, "regex");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._matchingType !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchingType = this._matchingType;
        }
        if (this._dictionary?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dictionary = this._dictionary?.internalValue;
        }
        if (this._excludeInfoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeInfoTypes = this._excludeInfoTypes?.internalValue;
        }
        if (this._regex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.regex = this._regex?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._matchingType = undefined;
            this._dictionary.internalValue = undefined;
            this._excludeInfoTypes.internalValue = undefined;
            this._regex.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._matchingType = value.matchingType;
            this._dictionary.internalValue = value.dictionary;
            this._excludeInfoTypes.internalValue = value.excludeInfoTypes;
            this._regex.internalValue = value.regex;
        }
    }
    get matchingType() {
        return this.getStringAttribute('matching_type');
    }
    set matchingType(value) {
        this._matchingType = value;
    }
    // Temporarily expose input value. Use with caution.
    get matchingTypeInput() {
        return this._matchingType;
    }
    get dictionary() {
        return this._dictionary;
    }
    putDictionary(value) {
        this._dictionary.internalValue = value;
    }
    resetDictionary() {
        this._dictionary.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dictionaryInput() {
        return this._dictionary.internalValue;
    }
    get excludeInfoTypes() {
        return this._excludeInfoTypes;
    }
    putExcludeInfoTypes(value) {
        this._excludeInfoTypes.internalValue = value;
    }
    resetExcludeInfoTypes() {
        this._excludeInfoTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeInfoTypesInput() {
        return this._excludeInfoTypes.internalValue;
    }
    get regex() {
        return this._regex;
    }
    putRegex(value) {
        this._regex.internalValue = value;
    }
    resetRegex() {
        this._regex.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexInput() {
        return this._regex.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference[_z] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_indexes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.groupIndexes),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupIndexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupIndexes = this._groupIndexes;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupIndexes = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupIndexes = value.groupIndexes;
            this._pattern = value.pattern;
        }
    }
    get groupIndexes() {
        return this.getNumberListAttribute('group_indexes');
    }
    set groupIndexes(value) {
        this._groupIndexes = value;
    }
    resetGroupIndexes() {
        this._groupIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIndexesInput() {
        return this._groupIndexes;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference[_0] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        fixed_likelihood: cdktf.stringToTerraform(struct.fixedLikelihood),
        relative_likelihood: cdktf.numberToTerraform(struct.relativeLikelihood),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fixedLikelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedLikelihood = this._fixedLikelihood;
        }
        if (this._relativeLikelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.relativeLikelihood = this._relativeLikelihood;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fixedLikelihood = undefined;
            this._relativeLikelihood = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fixedLikelihood = value.fixedLikelihood;
            this._relativeLikelihood = value.relativeLikelihood;
        }
    }
    get fixedLikelihood() {
        return this.getStringAttribute('fixed_likelihood');
    }
    set fixedLikelihood(value) {
        this._fixedLikelihood = value;
    }
    resetFixedLikelihood() {
        this._fixedLikelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedLikelihoodInput() {
        return this._fixedLikelihood;
    }
    get relativeLikelihood() {
        return this.getNumberAttribute('relative_likelihood');
    }
    set relativeLikelihood(value) {
        this._relativeLikelihood = value;
    }
    resetRelativeLikelihood() {
        this._relativeLikelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get relativeLikelihoodInput() {
        return this._relativeLikelihood;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference[_1] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        window_after: cdktf.numberToTerraform(struct.windowAfter),
        window_before: cdktf.numberToTerraform(struct.windowBefore),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._windowAfter !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowAfter = this._windowAfter;
        }
        if (this._windowBefore !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowBefore = this._windowBefore;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._windowAfter = undefined;
            this._windowBefore = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._windowAfter = value.windowAfter;
            this._windowBefore = value.windowBefore;
        }
    }
    get windowAfter() {
        return this.getNumberAttribute('window_after');
    }
    set windowAfter(value) {
        this._windowAfter = value;
    }
    resetWindowAfter() {
        this._windowAfter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowAfterInput() {
        return this._windowAfter;
    }
    get windowBefore() {
        return this.getNumberAttribute('window_before');
    }
    set windowBefore(value) {
        this._windowBefore = value;
    }
    resetWindowBefore() {
        this._windowBefore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowBeforeInput() {
        return this._windowBefore;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference[_2] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hotword_regex: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform(struct.hotwordRegex),
        likelihood_adjustment: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform(struct.likelihoodAdjustment),
        proximity: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToTerraform(struct.proximity),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // hotword_regex - computed: false, optional: false, required: true
        this._hotwordRegex = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference(this, "hotword_regex");
        // likelihood_adjustment - computed: false, optional: false, required: true
        this._likelihoodAdjustment = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference(this, "likelihood_adjustment");
        // proximity - computed: false, optional: false, required: true
        this._proximity = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference(this, "proximity");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hotwordRegex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hotwordRegex = this._hotwordRegex?.internalValue;
        }
        if (this._likelihoodAdjustment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.likelihoodAdjustment = this._likelihoodAdjustment?.internalValue;
        }
        if (this._proximity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.proximity = this._proximity?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hotwordRegex.internalValue = undefined;
            this._likelihoodAdjustment.internalValue = undefined;
            this._proximity.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hotwordRegex.internalValue = value.hotwordRegex;
            this._likelihoodAdjustment.internalValue = value.likelihoodAdjustment;
            this._proximity.internalValue = value.proximity;
        }
    }
    get hotwordRegex() {
        return this._hotwordRegex;
    }
    putHotwordRegex(value) {
        this._hotwordRegex.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get hotwordRegexInput() {
        return this._hotwordRegex.internalValue;
    }
    get likelihoodAdjustment() {
        return this._likelihoodAdjustment;
    }
    putLikelihoodAdjustment(value) {
        this._likelihoodAdjustment.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get likelihoodAdjustmentInput() {
        return this._likelihoodAdjustment.internalValue;
    }
    get proximity() {
        return this._proximity;
    }
    putProximity(value) {
        this._proximity.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get proximityInput() {
        return this._proximity.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference[_3] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclusion_rule: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToTerraform(struct.exclusionRule),
        hotword_rule: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToTerraform(struct.hotwordRule),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // exclusion_rule - computed: false, optional: true, required: false
        this._exclusionRule = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference(this, "exclusion_rule");
        // hotword_rule - computed: false, optional: true, required: false
        this._hotwordRule = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference(this, "hotword_rule");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exclusionRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusionRule = this._exclusionRule?.internalValue;
        }
        if (this._hotwordRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hotwordRule = this._hotwordRule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exclusionRule.internalValue = undefined;
            this._hotwordRule.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exclusionRule.internalValue = value.exclusionRule;
            this._hotwordRule.internalValue = value.hotwordRule;
        }
    }
    get exclusionRule() {
        return this._exclusionRule;
    }
    putExclusionRule(value) {
        this._exclusionRule.internalValue = value;
    }
    resetExclusionRule() {
        this._exclusionRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionRuleInput() {
        return this._exclusionRule.internalValue;
    }
    get hotwordRule() {
        return this._hotwordRule;
    }
    putHotwordRule(value) {
        this._hotwordRule.internalValue = value;
    }
    resetHotwordRule() {
        this._hotwordRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hotwordRuleInput() {
        return this._hotwordRule.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference[_4] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference", version: "4.0.3" };
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList;
_5 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList[_5] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        info_types: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToTerraform, true)(struct.infoTypes),
        rules: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToTerraform, true)(struct.rules),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetToTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // info_types - computed: false, optional: false, required: true
        this._infoTypes = new DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList(this, "info_types", false);
        // rules - computed: false, optional: false, required: true
        this._rules = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList(this, "rules", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._infoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoTypes = this._infoTypes?.internalValue;
        }
        if (this._rules?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rules = this._rules?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._infoTypes.internalValue = undefined;
            this._rules.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._infoTypes.internalValue = value.infoTypes;
            this._rules.internalValue = value.rules;
        }
    }
    get infoTypes() {
        return this._infoTypes;
    }
    putInfoTypes(value) {
        this._infoTypes.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypesInput() {
        return this._infoTypes.internalValue;
    }
    get rules() {
        return this._rules;
    }
    putRules(value) {
        this._rules.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get rulesInput() {
        return this._rules.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference[_6] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference", version: "4.0.3" };
class DataLossPreventionInspectTemplateInspectConfigRuleSetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetList = DataLossPreventionInspectTemplateInspectConfigRuleSetList;
_7 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetList[_7] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetList", version: "4.0.3" };
function dataLossPreventionInspectTemplateInspectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        content_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.contentOptions),
        exclude_info_types: cdktf.booleanToTerraform(struct.excludeInfoTypes),
        include_quote: cdktf.booleanToTerraform(struct.includeQuote),
        min_likelihood: cdktf.stringToTerraform(struct.minLikelihood),
        custom_info_types: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToTerraform, true)(struct.customInfoTypes),
        info_types: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigInfoTypesToTerraform, true)(struct.infoTypes),
        limits: dataLossPreventionInspectTemplateInspectConfigLimitsToTerraform(struct.limits),
        rule_set: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigRuleSetToTerraform, true)(struct.ruleSet),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigToTerraform = dataLossPreventionInspectTemplateInspectConfigToTerraform;
class DataLossPreventionInspectTemplateInspectConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_info_types - computed: false, optional: true, required: false
        this._customInfoTypes = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList(this, "custom_info_types", false);
        // info_types - computed: false, optional: true, required: false
        this._infoTypes = new DataLossPreventionInspectTemplateInspectConfigInfoTypesList(this, "info_types", false);
        // limits - computed: false, optional: true, required: false
        this._limits = new DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference(this, "limits");
        // rule_set - computed: false, optional: true, required: false
        this._ruleSet = new DataLossPreventionInspectTemplateInspectConfigRuleSetList(this, "rule_set", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._contentOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentOptions = this._contentOptions;
        }
        if (this._excludeInfoTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeInfoTypes = this._excludeInfoTypes;
        }
        if (this._includeQuote !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeQuote = this._includeQuote;
        }
        if (this._minLikelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.minLikelihood = this._minLikelihood;
        }
        if (this._customInfoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customInfoTypes = this._customInfoTypes?.internalValue;
        }
        if (this._infoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoTypes = this._infoTypes?.internalValue;
        }
        if (this._limits?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.limits = this._limits?.internalValue;
        }
        if (this._ruleSet?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ruleSet = this._ruleSet?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._contentOptions = undefined;
            this._excludeInfoTypes = undefined;
            this._includeQuote = undefined;
            this._minLikelihood = undefined;
            this._customInfoTypes.internalValue = undefined;
            this._infoTypes.internalValue = undefined;
            this._limits.internalValue = undefined;
            this._ruleSet.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._contentOptions = value.contentOptions;
            this._excludeInfoTypes = value.excludeInfoTypes;
            this._includeQuote = value.includeQuote;
            this._minLikelihood = value.minLikelihood;
            this._customInfoTypes.internalValue = value.customInfoTypes;
            this._infoTypes.internalValue = value.infoTypes;
            this._limits.internalValue = value.limits;
            this._ruleSet.internalValue = value.ruleSet;
        }
    }
    get contentOptions() {
        return this.getListAttribute('content_options');
    }
    set contentOptions(value) {
        this._contentOptions = value;
    }
    resetContentOptions() {
        this._contentOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentOptionsInput() {
        return this._contentOptions;
    }
    get excludeInfoTypes() {
        return this.getBooleanAttribute('exclude_info_types');
    }
    set excludeInfoTypes(value) {
        this._excludeInfoTypes = value;
    }
    resetExcludeInfoTypes() {
        this._excludeInfoTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeInfoTypesInput() {
        return this._excludeInfoTypes;
    }
    get includeQuote() {
        return this.getBooleanAttribute('include_quote');
    }
    set includeQuote(value) {
        this._includeQuote = value;
    }
    resetIncludeQuote() {
        this._includeQuote = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeQuoteInput() {
        return this._includeQuote;
    }
    get minLikelihood() {
        return this.getStringAttribute('min_likelihood');
    }
    set minLikelihood(value) {
        this._minLikelihood = value;
    }
    resetMinLikelihood() {
        this._minLikelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minLikelihoodInput() {
        return this._minLikelihood;
    }
    get customInfoTypes() {
        return this._customInfoTypes;
    }
    putCustomInfoTypes(value) {
        this._customInfoTypes.internalValue = value;
    }
    resetCustomInfoTypes() {
        this._customInfoTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customInfoTypesInput() {
        return this._customInfoTypes.internalValue;
    }
    get infoTypes() {
        return this._infoTypes;
    }
    putInfoTypes(value) {
        this._infoTypes.internalValue = value;
    }
    resetInfoTypes() {
        this._infoTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypesInput() {
        return this._infoTypes.internalValue;
    }
    get limits() {
        return this._limits;
    }
    putLimits(value) {
        this._limits.internalValue = value;
    }
    resetLimits() {
        this._limits.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get limitsInput() {
        return this._limits.internalValue;
    }
    get ruleSet() {
        return this._ruleSet;
    }
    putRuleSet(value) {
        this._ruleSet.internalValue = value;
    }
    resetRuleSet() {
        this._ruleSet.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ruleSetInput() {
        return this._ruleSet.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigOutputReference = DataLossPreventionInspectTemplateInspectConfigOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigOutputReference[_8] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigOutputReference", version: "4.0.3" };
function dataLossPreventionInspectTemplateTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dataLossPreventionInspectTemplateTimeoutsToTerraform = dataLossPreventionInspectTemplateTimeoutsToTerraform;
class DataLossPreventionInspectTemplateTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DataLossPreventionInspectTemplateTimeoutsOutputReference = DataLossPreventionInspectTemplateTimeoutsOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateTimeoutsOutputReference[_9] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateTimeoutsOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/data_loss_prevention_inspect_template google_data_loss_prevention_inspect_template}
*/
class DataLossPreventionInspectTemplate extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/data_loss_prevention_inspect_template google_data_loss_prevention_inspect_template} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataLossPreventionInspectTemplateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_data_loss_prevention_inspect_template',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // inspect_config - computed: false, optional: true, required: false
        this._inspectConfig = new DataLossPreventionInspectTemplateInspectConfigOutputReference(this, "inspect_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DataLossPreventionInspectTemplateTimeoutsOutputReference(this, "timeouts");
        this._description = config.description;
        this._displayName = config.displayName;
        this._id = config.id;
        this._parent = config.parent;
        this._inspectConfig.internalValue = config.inspectConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get parent() {
        return this.getStringAttribute('parent');
    }
    set parent(value) {
        this._parent = value;
    }
    // Temporarily expose input value. Use with caution.
    get parentInput() {
        return this._parent;
    }
    get inspectConfig() {
        return this._inspectConfig;
    }
    putInspectConfig(value) {
        this._inspectConfig.internalValue = value;
    }
    resetInspectConfig() {
        this._inspectConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inspectConfigInput() {
        return this._inspectConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            parent: cdktf.stringToTerraform(this._parent),
            inspect_config: dataLossPreventionInspectTemplateInspectConfigToTerraform(this._inspectConfig.internalValue),
            timeouts: dataLossPreventionInspectTemplateTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.DataLossPreventionInspectTemplate = DataLossPreventionInspectTemplate;
_10 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplate[_10] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplate", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
DataLossPreventionInspectTemplate.tfResourceType = "google_data_loss_prevention_inspect_template";
//# sourceMappingURL=data:application/json;base64,