"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeHealthCheck = exports.ComputeHealthCheckTimeoutsOutputReference = exports.computeHealthCheckTimeoutsToTerraform = exports.ComputeHealthCheckTcpHealthCheckOutputReference = exports.computeHealthCheckTcpHealthCheckToTerraform = exports.ComputeHealthCheckSslHealthCheckOutputReference = exports.computeHealthCheckSslHealthCheckToTerraform = exports.ComputeHealthCheckLogConfigOutputReference = exports.computeHealthCheckLogConfigToTerraform = exports.ComputeHealthCheckHttpsHealthCheckOutputReference = exports.computeHealthCheckHttpsHealthCheckToTerraform = exports.ComputeHealthCheckHttpHealthCheckOutputReference = exports.computeHealthCheckHttpHealthCheckToTerraform = exports.ComputeHealthCheckHttp2HealthCheckOutputReference = exports.computeHealthCheckHttp2HealthCheckToTerraform = exports.ComputeHealthCheckGrpcHealthCheckOutputReference = exports.computeHealthCheckGrpcHealthCheckToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function computeHealthCheckGrpcHealthCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        grpc_service_name: cdktf.stringToTerraform(struct.grpcServiceName),
        port: cdktf.numberToTerraform(struct.port),
        port_name: cdktf.stringToTerraform(struct.portName),
        port_specification: cdktf.stringToTerraform(struct.portSpecification),
    };
}
exports.computeHealthCheckGrpcHealthCheckToTerraform = computeHealthCheckGrpcHealthCheckToTerraform;
class ComputeHealthCheckGrpcHealthCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._grpcServiceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpcServiceName = this._grpcServiceName;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._portName !== undefined) {
            hasAnyValues = true;
            internalValueResult.portName = this._portName;
        }
        if (this._portSpecification !== undefined) {
            hasAnyValues = true;
            internalValueResult.portSpecification = this._portSpecification;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._grpcServiceName = undefined;
            this._port = undefined;
            this._portName = undefined;
            this._portSpecification = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._grpcServiceName = value.grpcServiceName;
            this._port = value.port;
            this._portName = value.portName;
            this._portSpecification = value.portSpecification;
        }
    }
    get grpcServiceName() {
        return this.getStringAttribute('grpc_service_name');
    }
    set grpcServiceName(value) {
        this._grpcServiceName = value;
    }
    resetGrpcServiceName() {
        this._grpcServiceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcServiceNameInput() {
        return this._grpcServiceName;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get portName() {
        return this.getStringAttribute('port_name');
    }
    set portName(value) {
        this._portName = value;
    }
    resetPortName() {
        this._portName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portNameInput() {
        return this._portName;
    }
    get portSpecification() {
        return this.getStringAttribute('port_specification');
    }
    set portSpecification(value) {
        this._portSpecification = value;
    }
    resetPortSpecification() {
        this._portSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portSpecificationInput() {
        return this._portSpecification;
    }
}
exports.ComputeHealthCheckGrpcHealthCheckOutputReference = ComputeHealthCheckGrpcHealthCheckOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ComputeHealthCheckGrpcHealthCheckOutputReference[_a] = { fqn: "@cdktf/provider-google.computeHealthCheck.ComputeHealthCheckGrpcHealthCheckOutputReference", version: "4.0.3" };
function computeHealthCheckHttp2HealthCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
        port_name: cdktf.stringToTerraform(struct.portName),
        port_specification: cdktf.stringToTerraform(struct.portSpecification),
        proxy_header: cdktf.stringToTerraform(struct.proxyHeader),
        request_path: cdktf.stringToTerraform(struct.requestPath),
        response: cdktf.stringToTerraform(struct.response),
    };
}
exports.computeHealthCheckHttp2HealthCheckToTerraform = computeHealthCheckHttp2HealthCheckToTerraform;
class ComputeHealthCheckHttp2HealthCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._portName !== undefined) {
            hasAnyValues = true;
            internalValueResult.portName = this._portName;
        }
        if (this._portSpecification !== undefined) {
            hasAnyValues = true;
            internalValueResult.portSpecification = this._portSpecification;
        }
        if (this._proxyHeader !== undefined) {
            hasAnyValues = true;
            internalValueResult.proxyHeader = this._proxyHeader;
        }
        if (this._requestPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestPath = this._requestPath;
        }
        if (this._response !== undefined) {
            hasAnyValues = true;
            internalValueResult.response = this._response;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._host = undefined;
            this._port = undefined;
            this._portName = undefined;
            this._portSpecification = undefined;
            this._proxyHeader = undefined;
            this._requestPath = undefined;
            this._response = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._host = value.host;
            this._port = value.port;
            this._portName = value.portName;
            this._portSpecification = value.portSpecification;
            this._proxyHeader = value.proxyHeader;
            this._requestPath = value.requestPath;
            this._response = value.response;
        }
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get portName() {
        return this.getStringAttribute('port_name');
    }
    set portName(value) {
        this._portName = value;
    }
    resetPortName() {
        this._portName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portNameInput() {
        return this._portName;
    }
    get portSpecification() {
        return this.getStringAttribute('port_specification');
    }
    set portSpecification(value) {
        this._portSpecification = value;
    }
    resetPortSpecification() {
        this._portSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portSpecificationInput() {
        return this._portSpecification;
    }
    get proxyHeader() {
        return this.getStringAttribute('proxy_header');
    }
    set proxyHeader(value) {
        this._proxyHeader = value;
    }
    resetProxyHeader() {
        this._proxyHeader = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proxyHeaderInput() {
        return this._proxyHeader;
    }
    get requestPath() {
        return this.getStringAttribute('request_path');
    }
    set requestPath(value) {
        this._requestPath = value;
    }
    resetRequestPath() {
        this._requestPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestPathInput() {
        return this._requestPath;
    }
    get response() {
        return this.getStringAttribute('response');
    }
    set response(value) {
        this._response = value;
    }
    resetResponse() {
        this._response = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseInput() {
        return this._response;
    }
}
exports.ComputeHealthCheckHttp2HealthCheckOutputReference = ComputeHealthCheckHttp2HealthCheckOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ComputeHealthCheckHttp2HealthCheckOutputReference[_b] = { fqn: "@cdktf/provider-google.computeHealthCheck.ComputeHealthCheckHttp2HealthCheckOutputReference", version: "4.0.3" };
function computeHealthCheckHttpHealthCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
        port_name: cdktf.stringToTerraform(struct.portName),
        port_specification: cdktf.stringToTerraform(struct.portSpecification),
        proxy_header: cdktf.stringToTerraform(struct.proxyHeader),
        request_path: cdktf.stringToTerraform(struct.requestPath),
        response: cdktf.stringToTerraform(struct.response),
    };
}
exports.computeHealthCheckHttpHealthCheckToTerraform = computeHealthCheckHttpHealthCheckToTerraform;
class ComputeHealthCheckHttpHealthCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._portName !== undefined) {
            hasAnyValues = true;
            internalValueResult.portName = this._portName;
        }
        if (this._portSpecification !== undefined) {
            hasAnyValues = true;
            internalValueResult.portSpecification = this._portSpecification;
        }
        if (this._proxyHeader !== undefined) {
            hasAnyValues = true;
            internalValueResult.proxyHeader = this._proxyHeader;
        }
        if (this._requestPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestPath = this._requestPath;
        }
        if (this._response !== undefined) {
            hasAnyValues = true;
            internalValueResult.response = this._response;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._host = undefined;
            this._port = undefined;
            this._portName = undefined;
            this._portSpecification = undefined;
            this._proxyHeader = undefined;
            this._requestPath = undefined;
            this._response = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._host = value.host;
            this._port = value.port;
            this._portName = value.portName;
            this._portSpecification = value.portSpecification;
            this._proxyHeader = value.proxyHeader;
            this._requestPath = value.requestPath;
            this._response = value.response;
        }
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get portName() {
        return this.getStringAttribute('port_name');
    }
    set portName(value) {
        this._portName = value;
    }
    resetPortName() {
        this._portName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portNameInput() {
        return this._portName;
    }
    get portSpecification() {
        return this.getStringAttribute('port_specification');
    }
    set portSpecification(value) {
        this._portSpecification = value;
    }
    resetPortSpecification() {
        this._portSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portSpecificationInput() {
        return this._portSpecification;
    }
    get proxyHeader() {
        return this.getStringAttribute('proxy_header');
    }
    set proxyHeader(value) {
        this._proxyHeader = value;
    }
    resetProxyHeader() {
        this._proxyHeader = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proxyHeaderInput() {
        return this._proxyHeader;
    }
    get requestPath() {
        return this.getStringAttribute('request_path');
    }
    set requestPath(value) {
        this._requestPath = value;
    }
    resetRequestPath() {
        this._requestPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestPathInput() {
        return this._requestPath;
    }
    get response() {
        return this.getStringAttribute('response');
    }
    set response(value) {
        this._response = value;
    }
    resetResponse() {
        this._response = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseInput() {
        return this._response;
    }
}
exports.ComputeHealthCheckHttpHealthCheckOutputReference = ComputeHealthCheckHttpHealthCheckOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ComputeHealthCheckHttpHealthCheckOutputReference[_c] = { fqn: "@cdktf/provider-google.computeHealthCheck.ComputeHealthCheckHttpHealthCheckOutputReference", version: "4.0.3" };
function computeHealthCheckHttpsHealthCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
        port_name: cdktf.stringToTerraform(struct.portName),
        port_specification: cdktf.stringToTerraform(struct.portSpecification),
        proxy_header: cdktf.stringToTerraform(struct.proxyHeader),
        request_path: cdktf.stringToTerraform(struct.requestPath),
        response: cdktf.stringToTerraform(struct.response),
    };
}
exports.computeHealthCheckHttpsHealthCheckToTerraform = computeHealthCheckHttpsHealthCheckToTerraform;
class ComputeHealthCheckHttpsHealthCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._portName !== undefined) {
            hasAnyValues = true;
            internalValueResult.portName = this._portName;
        }
        if (this._portSpecification !== undefined) {
            hasAnyValues = true;
            internalValueResult.portSpecification = this._portSpecification;
        }
        if (this._proxyHeader !== undefined) {
            hasAnyValues = true;
            internalValueResult.proxyHeader = this._proxyHeader;
        }
        if (this._requestPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestPath = this._requestPath;
        }
        if (this._response !== undefined) {
            hasAnyValues = true;
            internalValueResult.response = this._response;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._host = undefined;
            this._port = undefined;
            this._portName = undefined;
            this._portSpecification = undefined;
            this._proxyHeader = undefined;
            this._requestPath = undefined;
            this._response = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._host = value.host;
            this._port = value.port;
            this._portName = value.portName;
            this._portSpecification = value.portSpecification;
            this._proxyHeader = value.proxyHeader;
            this._requestPath = value.requestPath;
            this._response = value.response;
        }
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get portName() {
        return this.getStringAttribute('port_name');
    }
    set portName(value) {
        this._portName = value;
    }
    resetPortName() {
        this._portName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portNameInput() {
        return this._portName;
    }
    get portSpecification() {
        return this.getStringAttribute('port_specification');
    }
    set portSpecification(value) {
        this._portSpecification = value;
    }
    resetPortSpecification() {
        this._portSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portSpecificationInput() {
        return this._portSpecification;
    }
    get proxyHeader() {
        return this.getStringAttribute('proxy_header');
    }
    set proxyHeader(value) {
        this._proxyHeader = value;
    }
    resetProxyHeader() {
        this._proxyHeader = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proxyHeaderInput() {
        return this._proxyHeader;
    }
    get requestPath() {
        return this.getStringAttribute('request_path');
    }
    set requestPath(value) {
        this._requestPath = value;
    }
    resetRequestPath() {
        this._requestPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestPathInput() {
        return this._requestPath;
    }
    get response() {
        return this.getStringAttribute('response');
    }
    set response(value) {
        this._response = value;
    }
    resetResponse() {
        this._response = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseInput() {
        return this._response;
    }
}
exports.ComputeHealthCheckHttpsHealthCheckOutputReference = ComputeHealthCheckHttpsHealthCheckOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ComputeHealthCheckHttpsHealthCheckOutputReference[_d] = { fqn: "@cdktf/provider-google.computeHealthCheck.ComputeHealthCheckHttpsHealthCheckOutputReference", version: "4.0.3" };
function computeHealthCheckLogConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable: cdktf.booleanToTerraform(struct.enable),
    };
}
exports.computeHealthCheckLogConfigToTerraform = computeHealthCheckLogConfigToTerraform;
class ComputeHealthCheckLogConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enable !== undefined) {
            hasAnyValues = true;
            internalValueResult.enable = this._enable;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enable = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enable = value.enable;
        }
    }
    get enable() {
        return this.getBooleanAttribute('enable');
    }
    set enable(value) {
        this._enable = value;
    }
    resetEnable() {
        this._enable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableInput() {
        return this._enable;
    }
}
exports.ComputeHealthCheckLogConfigOutputReference = ComputeHealthCheckLogConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ComputeHealthCheckLogConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.computeHealthCheck.ComputeHealthCheckLogConfigOutputReference", version: "4.0.3" };
function computeHealthCheckSslHealthCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        port: cdktf.numberToTerraform(struct.port),
        port_name: cdktf.stringToTerraform(struct.portName),
        port_specification: cdktf.stringToTerraform(struct.portSpecification),
        proxy_header: cdktf.stringToTerraform(struct.proxyHeader),
        request: cdktf.stringToTerraform(struct.request),
        response: cdktf.stringToTerraform(struct.response),
    };
}
exports.computeHealthCheckSslHealthCheckToTerraform = computeHealthCheckSslHealthCheckToTerraform;
class ComputeHealthCheckSslHealthCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._portName !== undefined) {
            hasAnyValues = true;
            internalValueResult.portName = this._portName;
        }
        if (this._portSpecification !== undefined) {
            hasAnyValues = true;
            internalValueResult.portSpecification = this._portSpecification;
        }
        if (this._proxyHeader !== undefined) {
            hasAnyValues = true;
            internalValueResult.proxyHeader = this._proxyHeader;
        }
        if (this._request !== undefined) {
            hasAnyValues = true;
            internalValueResult.request = this._request;
        }
        if (this._response !== undefined) {
            hasAnyValues = true;
            internalValueResult.response = this._response;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._port = undefined;
            this._portName = undefined;
            this._portSpecification = undefined;
            this._proxyHeader = undefined;
            this._request = undefined;
            this._response = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._port = value.port;
            this._portName = value.portName;
            this._portSpecification = value.portSpecification;
            this._proxyHeader = value.proxyHeader;
            this._request = value.request;
            this._response = value.response;
        }
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get portName() {
        return this.getStringAttribute('port_name');
    }
    set portName(value) {
        this._portName = value;
    }
    resetPortName() {
        this._portName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portNameInput() {
        return this._portName;
    }
    get portSpecification() {
        return this.getStringAttribute('port_specification');
    }
    set portSpecification(value) {
        this._portSpecification = value;
    }
    resetPortSpecification() {
        this._portSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portSpecificationInput() {
        return this._portSpecification;
    }
    get proxyHeader() {
        return this.getStringAttribute('proxy_header');
    }
    set proxyHeader(value) {
        this._proxyHeader = value;
    }
    resetProxyHeader() {
        this._proxyHeader = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proxyHeaderInput() {
        return this._proxyHeader;
    }
    get request() {
        return this.getStringAttribute('request');
    }
    set request(value) {
        this._request = value;
    }
    resetRequest() {
        this._request = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestInput() {
        return this._request;
    }
    get response() {
        return this.getStringAttribute('response');
    }
    set response(value) {
        this._response = value;
    }
    resetResponse() {
        this._response = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseInput() {
        return this._response;
    }
}
exports.ComputeHealthCheckSslHealthCheckOutputReference = ComputeHealthCheckSslHealthCheckOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ComputeHealthCheckSslHealthCheckOutputReference[_f] = { fqn: "@cdktf/provider-google.computeHealthCheck.ComputeHealthCheckSslHealthCheckOutputReference", version: "4.0.3" };
function computeHealthCheckTcpHealthCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        port: cdktf.numberToTerraform(struct.port),
        port_name: cdktf.stringToTerraform(struct.portName),
        port_specification: cdktf.stringToTerraform(struct.portSpecification),
        proxy_header: cdktf.stringToTerraform(struct.proxyHeader),
        request: cdktf.stringToTerraform(struct.request),
        response: cdktf.stringToTerraform(struct.response),
    };
}
exports.computeHealthCheckTcpHealthCheckToTerraform = computeHealthCheckTcpHealthCheckToTerraform;
class ComputeHealthCheckTcpHealthCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._portName !== undefined) {
            hasAnyValues = true;
            internalValueResult.portName = this._portName;
        }
        if (this._portSpecification !== undefined) {
            hasAnyValues = true;
            internalValueResult.portSpecification = this._portSpecification;
        }
        if (this._proxyHeader !== undefined) {
            hasAnyValues = true;
            internalValueResult.proxyHeader = this._proxyHeader;
        }
        if (this._request !== undefined) {
            hasAnyValues = true;
            internalValueResult.request = this._request;
        }
        if (this._response !== undefined) {
            hasAnyValues = true;
            internalValueResult.response = this._response;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._port = undefined;
            this._portName = undefined;
            this._portSpecification = undefined;
            this._proxyHeader = undefined;
            this._request = undefined;
            this._response = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._port = value.port;
            this._portName = value.portName;
            this._portSpecification = value.portSpecification;
            this._proxyHeader = value.proxyHeader;
            this._request = value.request;
            this._response = value.response;
        }
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get portName() {
        return this.getStringAttribute('port_name');
    }
    set portName(value) {
        this._portName = value;
    }
    resetPortName() {
        this._portName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portNameInput() {
        return this._portName;
    }
    get portSpecification() {
        return this.getStringAttribute('port_specification');
    }
    set portSpecification(value) {
        this._portSpecification = value;
    }
    resetPortSpecification() {
        this._portSpecification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portSpecificationInput() {
        return this._portSpecification;
    }
    get proxyHeader() {
        return this.getStringAttribute('proxy_header');
    }
    set proxyHeader(value) {
        this._proxyHeader = value;
    }
    resetProxyHeader() {
        this._proxyHeader = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proxyHeaderInput() {
        return this._proxyHeader;
    }
    get request() {
        return this.getStringAttribute('request');
    }
    set request(value) {
        this._request = value;
    }
    resetRequest() {
        this._request = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestInput() {
        return this._request;
    }
    get response() {
        return this.getStringAttribute('response');
    }
    set response(value) {
        this._response = value;
    }
    resetResponse() {
        this._response = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseInput() {
        return this._response;
    }
}
exports.ComputeHealthCheckTcpHealthCheckOutputReference = ComputeHealthCheckTcpHealthCheckOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ComputeHealthCheckTcpHealthCheckOutputReference[_g] = { fqn: "@cdktf/provider-google.computeHealthCheck.ComputeHealthCheckTcpHealthCheckOutputReference", version: "4.0.3" };
function computeHealthCheckTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.computeHealthCheckTimeoutsToTerraform = computeHealthCheckTimeoutsToTerraform;
class ComputeHealthCheckTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ComputeHealthCheckTimeoutsOutputReference = ComputeHealthCheckTimeoutsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
ComputeHealthCheckTimeoutsOutputReference[_h] = { fqn: "@cdktf/provider-google.computeHealthCheck.ComputeHealthCheckTimeoutsOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/compute_health_check google_compute_health_check}
*/
class ComputeHealthCheck extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/compute_health_check google_compute_health_check} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ComputeHealthCheckConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_compute_health_check',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // grpc_health_check - computed: false, optional: true, required: false
        this._grpcHealthCheck = new ComputeHealthCheckGrpcHealthCheckOutputReference(this, "grpc_health_check");
        // http2_health_check - computed: false, optional: true, required: false
        this._http2HealthCheck = new ComputeHealthCheckHttp2HealthCheckOutputReference(this, "http2_health_check");
        // http_health_check - computed: false, optional: true, required: false
        this._httpHealthCheck = new ComputeHealthCheckHttpHealthCheckOutputReference(this, "http_health_check");
        // https_health_check - computed: false, optional: true, required: false
        this._httpsHealthCheck = new ComputeHealthCheckHttpsHealthCheckOutputReference(this, "https_health_check");
        // log_config - computed: false, optional: true, required: false
        this._logConfig = new ComputeHealthCheckLogConfigOutputReference(this, "log_config");
        // ssl_health_check - computed: false, optional: true, required: false
        this._sslHealthCheck = new ComputeHealthCheckSslHealthCheckOutputReference(this, "ssl_health_check");
        // tcp_health_check - computed: false, optional: true, required: false
        this._tcpHealthCheck = new ComputeHealthCheckTcpHealthCheckOutputReference(this, "tcp_health_check");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ComputeHealthCheckTimeoutsOutputReference(this, "timeouts");
        this._checkIntervalSec = config.checkIntervalSec;
        this._description = config.description;
        this._healthyThreshold = config.healthyThreshold;
        this._id = config.id;
        this._name = config.name;
        this._project = config.project;
        this._timeoutSec = config.timeoutSec;
        this._unhealthyThreshold = config.unhealthyThreshold;
        this._grpcHealthCheck.internalValue = config.grpcHealthCheck;
        this._http2HealthCheck.internalValue = config.http2HealthCheck;
        this._httpHealthCheck.internalValue = config.httpHealthCheck;
        this._httpsHealthCheck.internalValue = config.httpsHealthCheck;
        this._logConfig.internalValue = config.logConfig;
        this._sslHealthCheck.internalValue = config.sslHealthCheck;
        this._tcpHealthCheck.internalValue = config.tcpHealthCheck;
        this._timeouts.internalValue = config.timeouts;
    }
    get checkIntervalSec() {
        return this.getNumberAttribute('check_interval_sec');
    }
    set checkIntervalSec(value) {
        this._checkIntervalSec = value;
    }
    resetCheckIntervalSec() {
        this._checkIntervalSec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get checkIntervalSecInput() {
        return this._checkIntervalSec;
    }
    // creation_timestamp - computed: true, optional: false, required: false
    get creationTimestamp() {
        return this.getStringAttribute('creation_timestamp');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get healthyThreshold() {
        return this.getNumberAttribute('healthy_threshold');
    }
    set healthyThreshold(value) {
        this._healthyThreshold = value;
    }
    resetHealthyThreshold() {
        this._healthyThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthyThresholdInput() {
        return this._healthyThreshold;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    get timeoutSec() {
        return this.getNumberAttribute('timeout_sec');
    }
    set timeoutSec(value) {
        this._timeoutSec = value;
    }
    resetTimeoutSec() {
        this._timeoutSec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutSecInput() {
        return this._timeoutSec;
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
    get unhealthyThreshold() {
        return this.getNumberAttribute('unhealthy_threshold');
    }
    set unhealthyThreshold(value) {
        this._unhealthyThreshold = value;
    }
    resetUnhealthyThreshold() {
        this._unhealthyThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unhealthyThresholdInput() {
        return this._unhealthyThreshold;
    }
    get grpcHealthCheck() {
        return this._grpcHealthCheck;
    }
    putGrpcHealthCheck(value) {
        this._grpcHealthCheck.internalValue = value;
    }
    resetGrpcHealthCheck() {
        this._grpcHealthCheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcHealthCheckInput() {
        return this._grpcHealthCheck.internalValue;
    }
    get http2HealthCheck() {
        return this._http2HealthCheck;
    }
    putHttp2HealthCheck(value) {
        this._http2HealthCheck.internalValue = value;
    }
    resetHttp2HealthCheck() {
        this._http2HealthCheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get http2HealthCheckInput() {
        return this._http2HealthCheck.internalValue;
    }
    get httpHealthCheck() {
        return this._httpHealthCheck;
    }
    putHttpHealthCheck(value) {
        this._httpHealthCheck.internalValue = value;
    }
    resetHttpHealthCheck() {
        this._httpHealthCheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpHealthCheckInput() {
        return this._httpHealthCheck.internalValue;
    }
    get httpsHealthCheck() {
        return this._httpsHealthCheck;
    }
    putHttpsHealthCheck(value) {
        this._httpsHealthCheck.internalValue = value;
    }
    resetHttpsHealthCheck() {
        this._httpsHealthCheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsHealthCheckInput() {
        return this._httpsHealthCheck.internalValue;
    }
    get logConfig() {
        return this._logConfig;
    }
    putLogConfig(value) {
        this._logConfig.internalValue = value;
    }
    resetLogConfig() {
        this._logConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logConfigInput() {
        return this._logConfig.internalValue;
    }
    get sslHealthCheck() {
        return this._sslHealthCheck;
    }
    putSslHealthCheck(value) {
        this._sslHealthCheck.internalValue = value;
    }
    resetSslHealthCheck() {
        this._sslHealthCheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslHealthCheckInput() {
        return this._sslHealthCheck.internalValue;
    }
    get tcpHealthCheck() {
        return this._tcpHealthCheck;
    }
    putTcpHealthCheck(value) {
        this._tcpHealthCheck.internalValue = value;
    }
    resetTcpHealthCheck() {
        this._tcpHealthCheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tcpHealthCheckInput() {
        return this._tcpHealthCheck.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            check_interval_sec: cdktf.numberToTerraform(this._checkIntervalSec),
            description: cdktf.stringToTerraform(this._description),
            healthy_threshold: cdktf.numberToTerraform(this._healthyThreshold),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            timeout_sec: cdktf.numberToTerraform(this._timeoutSec),
            unhealthy_threshold: cdktf.numberToTerraform(this._unhealthyThreshold),
            grpc_health_check: computeHealthCheckGrpcHealthCheckToTerraform(this._grpcHealthCheck.internalValue),
            http2_health_check: computeHealthCheckHttp2HealthCheckToTerraform(this._http2HealthCheck.internalValue),
            http_health_check: computeHealthCheckHttpHealthCheckToTerraform(this._httpHealthCheck.internalValue),
            https_health_check: computeHealthCheckHttpsHealthCheckToTerraform(this._httpsHealthCheck.internalValue),
            log_config: computeHealthCheckLogConfigToTerraform(this._logConfig.internalValue),
            ssl_health_check: computeHealthCheckSslHealthCheckToTerraform(this._sslHealthCheck.internalValue),
            tcp_health_check: computeHealthCheckTcpHealthCheckToTerraform(this._tcpHealthCheck.internalValue),
            timeouts: computeHealthCheckTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.ComputeHealthCheck = ComputeHealthCheck;
_j = JSII_RTTI_SYMBOL_1;
ComputeHealthCheck[_j] = { fqn: "@cdktf/provider-google.computeHealthCheck.ComputeHealthCheck", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
ComputeHealthCheck.tfResourceType = "google_compute_health_check";
//# sourceMappingURL=data:application/json;base64,