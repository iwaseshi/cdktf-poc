"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLossPreventionJobTrigger = exports.DataLossPreventionJobTriggerTriggersList = exports.DataLossPreventionJobTriggerTriggersOutputReference = exports.dataLossPreventionJobTriggerTriggersToTerraform = exports.DataLossPreventionJobTriggerTriggersScheduleOutputReference = exports.dataLossPreventionJobTriggerTriggersScheduleToTerraform = exports.DataLossPreventionJobTriggerTimeoutsOutputReference = exports.dataLossPreventionJobTriggerTimeoutsToTerraform = exports.DataLossPreventionJobTriggerInspectJobOutputReference = exports.dataLossPreventionJobTriggerInspectJobToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsList = exports.DataLossPreventionJobTriggerInspectJobActionsOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsPubSubToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataLossPreventionJobTriggerInspectJobActionsPubSubToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        topic: cdktf.stringToTerraform(struct.topic),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsPubSubToTerraform = dataLossPreventionJobTriggerInspectJobActionsPubSubToTerraform;
class DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._topic !== undefined) {
            hasAnyValues = true;
            internalValueResult.topic = this._topic;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._topic = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._topic = value.topic;
        }
    }
    get topic() {
        return this.getStringAttribute('topic');
    }
    set topic(value) {
        this._topic = value;
    }
    // Temporarily expose input value. Use with caution.
    get topicInput() {
        return this._topic;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference = DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference[_a] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToTerraform = dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToTerraform;
class DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    resetTableId() {
        this._tableId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference = DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference[_b] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        output_schema: cdktf.stringToTerraform(struct.outputSchema),
        table: dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToTerraform(struct.table),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToTerraform = dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToTerraform;
class DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // table - computed: false, optional: false, required: true
        this._table = new DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference(this, "table");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._outputSchema !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputSchema = this._outputSchema;
        }
        if (this._table?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._outputSchema = undefined;
            this._table.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._outputSchema = value.outputSchema;
            this._table.internalValue = value.table;
        }
    }
    get outputSchema() {
        return this.getStringAttribute('output_schema');
    }
    set outputSchema(value) {
        this._outputSchema = value;
    }
    resetOutputSchema() {
        this._outputSchema = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputSchemaInput() {
        return this._outputSchema;
    }
    get table() {
        return this._table;
    }
    putTable(value) {
        this._table.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference = DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference[_c] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        output_config: dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToTerraform(struct.outputConfig),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToTerraform = dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToTerraform;
class DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // output_config - computed: false, optional: false, required: true
        this._outputConfig = new DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference(this, "output_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._outputConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputConfig = this._outputConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._outputConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._outputConfig.internalValue = value.outputConfig;
        }
    }
    get outputConfig() {
        return this._outputConfig;
    }
    putOutputConfig(value) {
        this._outputConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputConfigInput() {
        return this._outputConfig.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference = DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference[_d] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        pub_sub: dataLossPreventionJobTriggerInspectJobActionsPubSubToTerraform(struct.pubSub),
        save_findings: dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToTerraform(struct.saveFindings),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsToTerraform = dataLossPreventionJobTriggerInspectJobActionsToTerraform;
class DataLossPreventionJobTriggerInspectJobActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // pub_sub - computed: false, optional: true, required: false
        this._pubSub = new DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference(this, "pub_sub");
        // save_findings - computed: false, optional: true, required: false
        this._saveFindings = new DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference(this, "save_findings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pubSub?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pubSub = this._pubSub?.internalValue;
        }
        if (this._saveFindings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.saveFindings = this._saveFindings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._pubSub.internalValue = undefined;
            this._saveFindings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._pubSub.internalValue = value.pubSub;
            this._saveFindings.internalValue = value.saveFindings;
        }
    }
    get pubSub() {
        return this._pubSub;
    }
    putPubSub(value) {
        this._pubSub.internalValue = value;
    }
    resetPubSub() {
        this._pubSub.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pubSubInput() {
        return this._pubSub.internalValue;
    }
    get saveFindings() {
        return this._saveFindings;
    }
    putSaveFindings(value) {
        this._saveFindings.internalValue = value;
    }
    resetSaveFindings() {
        this._saveFindings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saveFindingsInput() {
        return this._saveFindings.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsOutputReference = DataLossPreventionJobTriggerInspectJobActionsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsOutputReference[_e] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsOutputReference", version: "4.0.3" };
class DataLossPreventionJobTriggerInspectJobActionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobActionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsList = DataLossPreventionJobTriggerInspectJobActionsList;
_f = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsList[_f] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsList", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference[_g] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rows_limit: cdktf.numberToTerraform(struct.rowsLimit),
        rows_limit_percent: cdktf.numberToTerraform(struct.rowsLimitPercent),
        sample_method: cdktf.stringToTerraform(struct.sampleMethod),
        table_reference: dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToTerraform(struct.tableReference),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // table_reference - computed: false, optional: false, required: true
        this._tableReference = new DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference(this, "table_reference");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._rowsLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.rowsLimit = this._rowsLimit;
        }
        if (this._rowsLimitPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.rowsLimitPercent = this._rowsLimitPercent;
        }
        if (this._sampleMethod !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleMethod = this._sampleMethod;
        }
        if (this._tableReference?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableReference = this._tableReference?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._rowsLimit = undefined;
            this._rowsLimitPercent = undefined;
            this._sampleMethod = undefined;
            this._tableReference.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._rowsLimit = value.rowsLimit;
            this._rowsLimitPercent = value.rowsLimitPercent;
            this._sampleMethod = value.sampleMethod;
            this._tableReference.internalValue = value.tableReference;
        }
    }
    get rowsLimit() {
        return this.getNumberAttribute('rows_limit');
    }
    set rowsLimit(value) {
        this._rowsLimit = value;
    }
    resetRowsLimit() {
        this._rowsLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rowsLimitInput() {
        return this._rowsLimit;
    }
    get rowsLimitPercent() {
        return this.getNumberAttribute('rows_limit_percent');
    }
    set rowsLimitPercent(value) {
        this._rowsLimitPercent = value;
    }
    resetRowsLimitPercent() {
        this._rowsLimitPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rowsLimitPercentInput() {
        return this._rowsLimitPercent;
    }
    get sampleMethod() {
        return this.getStringAttribute('sample_method');
    }
    set sampleMethod(value) {
        this._sampleMethod = value;
    }
    resetSampleMethod() {
        this._sampleMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleMethodInput() {
        return this._sampleMethod;
    }
    get tableReference() {
        return this._tableReference;
    }
    putTableReference(value) {
        this._tableReference.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableReferenceInput() {
        return this._tableReference.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference[_h] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        exclude_regex: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludeRegex),
        include_regex: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includeRegex),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._excludeRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeRegex = this._excludeRegex;
        }
        if (this._includeRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeRegex = this._includeRegex;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._excludeRegex = undefined;
            this._includeRegex = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._excludeRegex = value.excludeRegex;
            this._includeRegex = value.includeRegex;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get excludeRegex() {
        return this.getListAttribute('exclude_regex');
    }
    set excludeRegex(value) {
        this._excludeRegex = value;
    }
    resetExcludeRegex() {
        this._excludeRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeRegexInput() {
        return this._excludeRegex;
    }
    get includeRegex() {
        return this.getListAttribute('include_regex');
    }
    set includeRegex(value) {
        this._includeRegex = value;
    }
    resetIncludeRegex() {
        this._includeRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeRegexInput() {
        return this._includeRegex;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference[_j] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        url: cdktf.stringToTerraform(struct.url),
        regex_file_set: dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToTerraform(struct.regexFileSet),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // regex_file_set - computed: false, optional: true, required: false
        this._regexFileSet = new DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference(this, "regex_file_set");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._url !== undefined) {
            hasAnyValues = true;
            internalValueResult.url = this._url;
        }
        if (this._regexFileSet?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.regexFileSet = this._regexFileSet?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._url = undefined;
            this._regexFileSet.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._url = value.url;
            this._regexFileSet.internalValue = value.regexFileSet;
        }
    }
    get url() {
        return this.getStringAttribute('url');
    }
    set url(value) {
        this._url = value;
    }
    resetUrl() {
        this._url = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlInput() {
        return this._url;
    }
    get regexFileSet() {
        return this._regexFileSet;
    }
    putRegexFileSet(value) {
        this._regexFileSet.internalValue = value;
    }
    resetRegexFileSet() {
        this._regexFileSet.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexFileSetInput() {
        return this._regexFileSet.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference[_k] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bytes_limit_per_file: cdktf.numberToTerraform(struct.bytesLimitPerFile),
        bytes_limit_per_file_percent: cdktf.numberToTerraform(struct.bytesLimitPerFilePercent),
        file_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileTypes),
        files_limit_percent: cdktf.numberToTerraform(struct.filesLimitPercent),
        sample_method: cdktf.stringToTerraform(struct.sampleMethod),
        file_set: dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToTerraform(struct.fileSet),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // file_set - computed: false, optional: false, required: true
        this._fileSet = new DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference(this, "file_set");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bytesLimitPerFile !== undefined) {
            hasAnyValues = true;
            internalValueResult.bytesLimitPerFile = this._bytesLimitPerFile;
        }
        if (this._bytesLimitPerFilePercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.bytesLimitPerFilePercent = this._bytesLimitPerFilePercent;
        }
        if (this._fileTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileTypes = this._fileTypes;
        }
        if (this._filesLimitPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.filesLimitPercent = this._filesLimitPercent;
        }
        if (this._sampleMethod !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleMethod = this._sampleMethod;
        }
        if (this._fileSet?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSet = this._fileSet?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bytesLimitPerFile = undefined;
            this._bytesLimitPerFilePercent = undefined;
            this._fileTypes = undefined;
            this._filesLimitPercent = undefined;
            this._sampleMethod = undefined;
            this._fileSet.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bytesLimitPerFile = value.bytesLimitPerFile;
            this._bytesLimitPerFilePercent = value.bytesLimitPerFilePercent;
            this._fileTypes = value.fileTypes;
            this._filesLimitPercent = value.filesLimitPercent;
            this._sampleMethod = value.sampleMethod;
            this._fileSet.internalValue = value.fileSet;
        }
    }
    get bytesLimitPerFile() {
        return this.getNumberAttribute('bytes_limit_per_file');
    }
    set bytesLimitPerFile(value) {
        this._bytesLimitPerFile = value;
    }
    resetBytesLimitPerFile() {
        this._bytesLimitPerFile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bytesLimitPerFileInput() {
        return this._bytesLimitPerFile;
    }
    get bytesLimitPerFilePercent() {
        return this.getNumberAttribute('bytes_limit_per_file_percent');
    }
    set bytesLimitPerFilePercent(value) {
        this._bytesLimitPerFilePercent = value;
    }
    resetBytesLimitPerFilePercent() {
        this._bytesLimitPerFilePercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bytesLimitPerFilePercentInput() {
        return this._bytesLimitPerFilePercent;
    }
    get fileTypes() {
        return this.getListAttribute('file_types');
    }
    set fileTypes(value) {
        this._fileTypes = value;
    }
    resetFileTypes() {
        this._fileTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileTypesInput() {
        return this._fileTypes;
    }
    get filesLimitPercent() {
        return this.getNumberAttribute('files_limit_percent');
    }
    set filesLimitPercent(value) {
        this._filesLimitPercent = value;
    }
    resetFilesLimitPercent() {
        this._filesLimitPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filesLimitPercentInput() {
        return this._filesLimitPercent;
    }
    get sampleMethod() {
        return this.getStringAttribute('sample_method');
    }
    set sampleMethod(value) {
        this._sampleMethod = value;
    }
    resetSampleMethod() {
        this._sampleMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleMethodInput() {
        return this._sampleMethod;
    }
    get fileSet() {
        return this._fileSet;
    }
    putFileSet(value) {
        this._fileSet.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileSetInput() {
        return this._fileSet.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference[_l] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference[_m] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        namespace_id: cdktf.stringToTerraform(struct.namespaceId),
        project_id: cdktf.stringToTerraform(struct.projectId),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._namespaceId !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespaceId = this._namespaceId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._namespaceId = undefined;
            this._projectId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._namespaceId = value.namespaceId;
            this._projectId = value.projectId;
        }
    }
    get namespaceId() {
        return this.getStringAttribute('namespace_id');
    }
    set namespaceId(value) {
        this._namespaceId = value;
    }
    resetNamespaceId() {
        this._namespaceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namespaceIdInput() {
        return this._namespaceId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference[_o] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kind: dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToTerraform(struct.kind),
        partition_id: dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToTerraform(struct.partitionId),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kind - computed: false, optional: false, required: true
        this._kind = new DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference(this, "kind");
        // partition_id - computed: false, optional: false, required: true
        this._partitionId = new DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference(this, "partition_id");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kind?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kind = this._kind?.internalValue;
        }
        if (this._partitionId?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.partitionId = this._partitionId?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kind.internalValue = undefined;
            this._partitionId.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kind.internalValue = value.kind;
            this._partitionId.internalValue = value.partitionId;
        }
    }
    get kind() {
        return this._kind;
    }
    putKind(value) {
        this._kind.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get kindInput() {
        return this._kind.internalValue;
    }
    get partitionId() {
        return this._partitionId;
    }
    putPartitionId(value) {
        this._partitionId.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get partitionIdInput() {
        return this._partitionId.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference[_p] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference[_q] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_auto_population_of_timespan_config: cdktf.booleanToTerraform(struct.enableAutoPopulationOfTimespanConfig),
        end_time: cdktf.stringToTerraform(struct.endTime),
        start_time: cdktf.stringToTerraform(struct.startTime),
        timestamp_field: dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToTerraform(struct.timestampField),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // timestamp_field - computed: false, optional: false, required: true
        this._timestampField = new DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference(this, "timestamp_field");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableAutoPopulationOfTimespanConfig !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableAutoPopulationOfTimespanConfig = this._enableAutoPopulationOfTimespanConfig;
        }
        if (this._endTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.endTime = this._endTime;
        }
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        if (this._timestampField?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampField = this._timestampField?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableAutoPopulationOfTimespanConfig = undefined;
            this._endTime = undefined;
            this._startTime = undefined;
            this._timestampField.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableAutoPopulationOfTimespanConfig = value.enableAutoPopulationOfTimespanConfig;
            this._endTime = value.endTime;
            this._startTime = value.startTime;
            this._timestampField.internalValue = value.timestampField;
        }
    }
    get enableAutoPopulationOfTimespanConfig() {
        return this.getBooleanAttribute('enable_auto_population_of_timespan_config');
    }
    set enableAutoPopulationOfTimespanConfig(value) {
        this._enableAutoPopulationOfTimespanConfig = value;
    }
    resetEnableAutoPopulationOfTimespanConfig() {
        this._enableAutoPopulationOfTimespanConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableAutoPopulationOfTimespanConfigInput() {
        return this._enableAutoPopulationOfTimespanConfig;
    }
    get endTime() {
        return this.getStringAttribute('end_time');
    }
    set endTime(value) {
        this._endTime = value;
    }
    resetEndTime() {
        this._endTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endTimeInput() {
        return this._endTime;
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    resetStartTime() {
        this._startTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
    get timestampField() {
        return this._timestampField;
    }
    putTimestampField(value) {
        this._timestampField.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get timestampFieldInput() {
        return this._timestampField.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference[_r] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobStorageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        big_query_options: dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToTerraform(struct.bigQueryOptions),
        cloud_storage_options: dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToTerraform(struct.cloudStorageOptions),
        datastore_options: dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToTerraform(struct.datastoreOptions),
        timespan_config: dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToTerraform(struct.timespanConfig),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigToTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // big_query_options - computed: false, optional: true, required: false
        this._bigQueryOptions = new DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference(this, "big_query_options");
        // cloud_storage_options - computed: false, optional: true, required: false
        this._cloudStorageOptions = new DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference(this, "cloud_storage_options");
        // datastore_options - computed: false, optional: true, required: false
        this._datastoreOptions = new DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference(this, "datastore_options");
        // timespan_config - computed: false, optional: true, required: false
        this._timespanConfig = new DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference(this, "timespan_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bigQueryOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bigQueryOptions = this._bigQueryOptions?.internalValue;
        }
        if (this._cloudStorageOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStorageOptions = this._cloudStorageOptions?.internalValue;
        }
        if (this._datastoreOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.datastoreOptions = this._datastoreOptions?.internalValue;
        }
        if (this._timespanConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timespanConfig = this._timespanConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bigQueryOptions.internalValue = undefined;
            this._cloudStorageOptions.internalValue = undefined;
            this._datastoreOptions.internalValue = undefined;
            this._timespanConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bigQueryOptions.internalValue = value.bigQueryOptions;
            this._cloudStorageOptions.internalValue = value.cloudStorageOptions;
            this._datastoreOptions.internalValue = value.datastoreOptions;
            this._timespanConfig.internalValue = value.timespanConfig;
        }
    }
    get bigQueryOptions() {
        return this._bigQueryOptions;
    }
    putBigQueryOptions(value) {
        this._bigQueryOptions.internalValue = value;
    }
    resetBigQueryOptions() {
        this._bigQueryOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bigQueryOptionsInput() {
        return this._bigQueryOptions.internalValue;
    }
    get cloudStorageOptions() {
        return this._cloudStorageOptions;
    }
    putCloudStorageOptions(value) {
        this._cloudStorageOptions.internalValue = value;
    }
    resetCloudStorageOptions() {
        this._cloudStorageOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStorageOptionsInput() {
        return this._cloudStorageOptions.internalValue;
    }
    get datastoreOptions() {
        return this._datastoreOptions;
    }
    putDatastoreOptions(value) {
        this._datastoreOptions.internalValue = value;
    }
    resetDatastoreOptions() {
        this._datastoreOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datastoreOptionsInput() {
        return this._datastoreOptions.internalValue;
    }
    get timespanConfig() {
        return this._timespanConfig;
    }
    putTimespanConfig(value) {
        this._timespanConfig.internalValue = value;
    }
    resetTimespanConfig() {
        this._timespanConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timespanConfigInput() {
        return this._timespanConfig.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference[_s] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerInspectJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        inspect_template_name: cdktf.stringToTerraform(struct.inspectTemplateName),
        actions: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobActionsToTerraform, true)(struct.actions),
        storage_config: dataLossPreventionJobTriggerInspectJobStorageConfigToTerraform(struct.storageConfig),
    };
}
exports.dataLossPreventionJobTriggerInspectJobToTerraform = dataLossPreventionJobTriggerInspectJobToTerraform;
class DataLossPreventionJobTriggerInspectJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // actions - computed: false, optional: false, required: true
        this._actions = new DataLossPreventionJobTriggerInspectJobActionsList(this, "actions", false);
        // storage_config - computed: false, optional: false, required: true
        this._storageConfig = new DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference(this, "storage_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._inspectTemplateName !== undefined) {
            hasAnyValues = true;
            internalValueResult.inspectTemplateName = this._inspectTemplateName;
        }
        if (this._actions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions?.internalValue;
        }
        if (this._storageConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageConfig = this._storageConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._inspectTemplateName = undefined;
            this._actions.internalValue = undefined;
            this._storageConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._inspectTemplateName = value.inspectTemplateName;
            this._actions.internalValue = value.actions;
            this._storageConfig.internalValue = value.storageConfig;
        }
    }
    get inspectTemplateName() {
        return this.getStringAttribute('inspect_template_name');
    }
    set inspectTemplateName(value) {
        this._inspectTemplateName = value;
    }
    // Temporarily expose input value. Use with caution.
    get inspectTemplateNameInput() {
        return this._inspectTemplateName;
    }
    get actions() {
        return this._actions;
    }
    putActions(value) {
        this._actions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions.internalValue;
    }
    get storageConfig() {
        return this._storageConfig;
    }
    putStorageConfig(value) {
        this._storageConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageConfigInput() {
        return this._storageConfig.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobOutputReference = DataLossPreventionJobTriggerInspectJobOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobOutputReference[_t] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dataLossPreventionJobTriggerTimeoutsToTerraform = dataLossPreventionJobTriggerTimeoutsToTerraform;
class DataLossPreventionJobTriggerTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DataLossPreventionJobTriggerTimeoutsOutputReference = DataLossPreventionJobTriggerTimeoutsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerTimeoutsOutputReference[_u] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerTimeoutsOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerTriggersScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        recurrence_period_duration: cdktf.stringToTerraform(struct.recurrencePeriodDuration),
    };
}
exports.dataLossPreventionJobTriggerTriggersScheduleToTerraform = dataLossPreventionJobTriggerTriggersScheduleToTerraform;
class DataLossPreventionJobTriggerTriggersScheduleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recurrencePeriodDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.recurrencePeriodDuration = this._recurrencePeriodDuration;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recurrencePeriodDuration = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recurrencePeriodDuration = value.recurrencePeriodDuration;
        }
    }
    get recurrencePeriodDuration() {
        return this.getStringAttribute('recurrence_period_duration');
    }
    set recurrencePeriodDuration(value) {
        this._recurrencePeriodDuration = value;
    }
    resetRecurrencePeriodDuration() {
        this._recurrencePeriodDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recurrencePeriodDurationInput() {
        return this._recurrencePeriodDuration;
    }
}
exports.DataLossPreventionJobTriggerTriggersScheduleOutputReference = DataLossPreventionJobTriggerTriggersScheduleOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerTriggersScheduleOutputReference[_v] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerTriggersScheduleOutputReference", version: "4.0.3" };
function dataLossPreventionJobTriggerTriggersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schedule: dataLossPreventionJobTriggerTriggersScheduleToTerraform(struct.schedule),
    };
}
exports.dataLossPreventionJobTriggerTriggersToTerraform = dataLossPreventionJobTriggerTriggersToTerraform;
class DataLossPreventionJobTriggerTriggersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // schedule - computed: false, optional: true, required: false
        this._schedule = new DataLossPreventionJobTriggerTriggersScheduleOutputReference(this, "schedule");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schedule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schedule = this._schedule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._schedule.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._schedule.internalValue = value.schedule;
        }
    }
    get schedule() {
        return this._schedule;
    }
    putSchedule(value) {
        this._schedule.internalValue = value;
    }
    resetSchedule() {
        this._schedule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleInput() {
        return this._schedule.internalValue;
    }
}
exports.DataLossPreventionJobTriggerTriggersOutputReference = DataLossPreventionJobTriggerTriggersOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerTriggersOutputReference[_w] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerTriggersOutputReference", version: "4.0.3" };
class DataLossPreventionJobTriggerTriggersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerTriggersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerTriggersList = DataLossPreventionJobTriggerTriggersList;
_x = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerTriggersList[_x] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerTriggersList", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/data_loss_prevention_job_trigger google_data_loss_prevention_job_trigger}
*/
class DataLossPreventionJobTrigger extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/data_loss_prevention_job_trigger google_data_loss_prevention_job_trigger} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataLossPreventionJobTriggerConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_data_loss_prevention_job_trigger',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // inspect_job - computed: false, optional: true, required: false
        this._inspectJob = new DataLossPreventionJobTriggerInspectJobOutputReference(this, "inspect_job");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DataLossPreventionJobTriggerTimeoutsOutputReference(this, "timeouts");
        // triggers - computed: false, optional: false, required: true
        this._triggers = new DataLossPreventionJobTriggerTriggersList(this, "triggers", false);
        this._description = config.description;
        this._displayName = config.displayName;
        this._id = config.id;
        this._parent = config.parent;
        this._status = config.status;
        this._inspectJob.internalValue = config.inspectJob;
        this._timeouts.internalValue = config.timeouts;
        this._triggers.internalValue = config.triggers;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // last_run_time - computed: true, optional: false, required: false
    get lastRunTime() {
        return this.getStringAttribute('last_run_time');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get parent() {
        return this.getStringAttribute('parent');
    }
    set parent(value) {
        this._parent = value;
    }
    // Temporarily expose input value. Use with caution.
    get parentInput() {
        return this._parent;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    get inspectJob() {
        return this._inspectJob;
    }
    putInspectJob(value) {
        this._inspectJob.internalValue = value;
    }
    resetInspectJob() {
        this._inspectJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inspectJobInput() {
        return this._inspectJob.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get triggers() {
        return this._triggers;
    }
    putTriggers(value) {
        this._triggers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get triggersInput() {
        return this._triggers.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            parent: cdktf.stringToTerraform(this._parent),
            status: cdktf.stringToTerraform(this._status),
            inspect_job: dataLossPreventionJobTriggerInspectJobToTerraform(this._inspectJob.internalValue),
            timeouts: dataLossPreventionJobTriggerTimeoutsToTerraform(this._timeouts.internalValue),
            triggers: cdktf.listMapper(dataLossPreventionJobTriggerTriggersToTerraform, true)(this._triggers.internalValue),
        };
    }
}
exports.DataLossPreventionJobTrigger = DataLossPreventionJobTrigger;
_y = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTrigger[_y] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTrigger", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
DataLossPreventionJobTrigger.tfResourceType = "google_data_loss_prevention_job_trigger";
//# sourceMappingURL=data:application/json;base64,