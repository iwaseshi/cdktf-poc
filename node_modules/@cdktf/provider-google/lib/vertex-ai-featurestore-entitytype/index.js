"use strict";
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VertexAiFeaturestoreEntitytype = exports.VertexAiFeaturestoreEntitytypeTimeoutsOutputReference = exports.vertexAiFeaturestoreEntitytypeTimeoutsToTerraform = exports.VertexAiFeaturestoreEntitytypeMonitoringConfigOutputReference = exports.vertexAiFeaturestoreEntitytypeMonitoringConfigToTerraform = exports.VertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisOutputReference = exports.vertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisToTerraform = exports.VertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigOutputReference = exports.vertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigToTerraform = exports.VertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisOutputReference = exports.vertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisToTerraform = exports.VertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigOutputReference = exports.vertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function vertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.vertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigToTerraform = vertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigToTerraform;
class VertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._value = value.value;
        }
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.VertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigOutputReference = VertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
VertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.vertexAiFeaturestoreEntitytype.VertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigOutputReference", version: "4.0.3" };
function vertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        anomaly_detection_baseline: cdktf.stringToTerraform(struct.anomalyDetectionBaseline),
        state: cdktf.stringToTerraform(struct.state),
    };
}
exports.vertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisToTerraform = vertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisToTerraform;
class VertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._anomalyDetectionBaseline !== undefined) {
            hasAnyValues = true;
            internalValueResult.anomalyDetectionBaseline = this._anomalyDetectionBaseline;
        }
        if (this._state !== undefined) {
            hasAnyValues = true;
            internalValueResult.state = this._state;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._anomalyDetectionBaseline = undefined;
            this._state = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._anomalyDetectionBaseline = value.anomalyDetectionBaseline;
            this._state = value.state;
        }
    }
    get anomalyDetectionBaseline() {
        return this.getStringAttribute('anomaly_detection_baseline');
    }
    set anomalyDetectionBaseline(value) {
        this._anomalyDetectionBaseline = value;
    }
    resetAnomalyDetectionBaseline() {
        this._anomalyDetectionBaseline = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get anomalyDetectionBaselineInput() {
        return this._anomalyDetectionBaseline;
    }
    get state() {
        return this.getStringAttribute('state');
    }
    set state(value) {
        this._state = value;
    }
    resetState() {
        this._state = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stateInput() {
        return this._state;
    }
}
exports.VertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisOutputReference = VertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisOutputReference;
_b = JSII_RTTI_SYMBOL_1;
VertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisOutputReference[_b] = { fqn: "@cdktf/provider-google.vertexAiFeaturestoreEntitytype.VertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisOutputReference", version: "4.0.3" };
function vertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.vertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigToTerraform = vertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigToTerraform;
class VertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._value = value.value;
        }
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.VertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigOutputReference = VertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
VertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigOutputReference[_c] = { fqn: "@cdktf/provider-google.vertexAiFeaturestoreEntitytype.VertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigOutputReference", version: "4.0.3" };
function vertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: cdktf.booleanToTerraform(struct.disabled),
        monitoring_interval_days: cdktf.numberToTerraform(struct.monitoringIntervalDays),
        staleness_days: cdktf.numberToTerraform(struct.stalenessDays),
    };
}
exports.vertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisToTerraform = vertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisToTerraform;
class VertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        if (this._monitoringIntervalDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.monitoringIntervalDays = this._monitoringIntervalDays;
        }
        if (this._stalenessDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.stalenessDays = this._stalenessDays;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled = undefined;
            this._monitoringIntervalDays = undefined;
            this._stalenessDays = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled = value.disabled;
            this._monitoringIntervalDays = value.monitoringIntervalDays;
            this._stalenessDays = value.stalenessDays;
        }
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    resetDisabled() {
        this._disabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get monitoringIntervalDays() {
        return this.getNumberAttribute('monitoring_interval_days');
    }
    set monitoringIntervalDays(value) {
        this._monitoringIntervalDays = value;
    }
    resetMonitoringIntervalDays() {
        this._monitoringIntervalDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringIntervalDaysInput() {
        return this._monitoringIntervalDays;
    }
    get stalenessDays() {
        return this.getNumberAttribute('staleness_days');
    }
    set stalenessDays(value) {
        this._stalenessDays = value;
    }
    resetStalenessDays() {
        this._stalenessDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stalenessDaysInput() {
        return this._stalenessDays;
    }
}
exports.VertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisOutputReference = VertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisOutputReference;
_d = JSII_RTTI_SYMBOL_1;
VertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisOutputReference[_d] = { fqn: "@cdktf/provider-google.vertexAiFeaturestoreEntitytype.VertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisOutputReference", version: "4.0.3" };
function vertexAiFeaturestoreEntitytypeMonitoringConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        categorical_threshold_config: vertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigToTerraform(struct.categoricalThresholdConfig),
        import_features_analysis: vertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisToTerraform(struct.importFeaturesAnalysis),
        numerical_threshold_config: vertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigToTerraform(struct.numericalThresholdConfig),
        snapshot_analysis: vertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisToTerraform(struct.snapshotAnalysis),
    };
}
exports.vertexAiFeaturestoreEntitytypeMonitoringConfigToTerraform = vertexAiFeaturestoreEntitytypeMonitoringConfigToTerraform;
class VertexAiFeaturestoreEntitytypeMonitoringConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // categorical_threshold_config - computed: false, optional: true, required: false
        this._categoricalThresholdConfig = new VertexAiFeaturestoreEntitytypeMonitoringConfigCategoricalThresholdConfigOutputReference(this, "categorical_threshold_config");
        // import_features_analysis - computed: false, optional: true, required: false
        this._importFeaturesAnalysis = new VertexAiFeaturestoreEntitytypeMonitoringConfigImportFeaturesAnalysisOutputReference(this, "import_features_analysis");
        // numerical_threshold_config - computed: false, optional: true, required: false
        this._numericalThresholdConfig = new VertexAiFeaturestoreEntitytypeMonitoringConfigNumericalThresholdConfigOutputReference(this, "numerical_threshold_config");
        // snapshot_analysis - computed: false, optional: true, required: false
        this._snapshotAnalysis = new VertexAiFeaturestoreEntitytypeMonitoringConfigSnapshotAnalysisOutputReference(this, "snapshot_analysis");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._categoricalThresholdConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.categoricalThresholdConfig = this._categoricalThresholdConfig?.internalValue;
        }
        if (this._importFeaturesAnalysis?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.importFeaturesAnalysis = this._importFeaturesAnalysis?.internalValue;
        }
        if (this._numericalThresholdConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.numericalThresholdConfig = this._numericalThresholdConfig?.internalValue;
        }
        if (this._snapshotAnalysis?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.snapshotAnalysis = this._snapshotAnalysis?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._categoricalThresholdConfig.internalValue = undefined;
            this._importFeaturesAnalysis.internalValue = undefined;
            this._numericalThresholdConfig.internalValue = undefined;
            this._snapshotAnalysis.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._categoricalThresholdConfig.internalValue = value.categoricalThresholdConfig;
            this._importFeaturesAnalysis.internalValue = value.importFeaturesAnalysis;
            this._numericalThresholdConfig.internalValue = value.numericalThresholdConfig;
            this._snapshotAnalysis.internalValue = value.snapshotAnalysis;
        }
    }
    get categoricalThresholdConfig() {
        return this._categoricalThresholdConfig;
    }
    putCategoricalThresholdConfig(value) {
        this._categoricalThresholdConfig.internalValue = value;
    }
    resetCategoricalThresholdConfig() {
        this._categoricalThresholdConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get categoricalThresholdConfigInput() {
        return this._categoricalThresholdConfig.internalValue;
    }
    get importFeaturesAnalysis() {
        return this._importFeaturesAnalysis;
    }
    putImportFeaturesAnalysis(value) {
        this._importFeaturesAnalysis.internalValue = value;
    }
    resetImportFeaturesAnalysis() {
        this._importFeaturesAnalysis.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get importFeaturesAnalysisInput() {
        return this._importFeaturesAnalysis.internalValue;
    }
    get numericalThresholdConfig() {
        return this._numericalThresholdConfig;
    }
    putNumericalThresholdConfig(value) {
        this._numericalThresholdConfig.internalValue = value;
    }
    resetNumericalThresholdConfig() {
        this._numericalThresholdConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numericalThresholdConfigInput() {
        return this._numericalThresholdConfig.internalValue;
    }
    get snapshotAnalysis() {
        return this._snapshotAnalysis;
    }
    putSnapshotAnalysis(value) {
        this._snapshotAnalysis.internalValue = value;
    }
    resetSnapshotAnalysis() {
        this._snapshotAnalysis.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotAnalysisInput() {
        return this._snapshotAnalysis.internalValue;
    }
}
exports.VertexAiFeaturestoreEntitytypeMonitoringConfigOutputReference = VertexAiFeaturestoreEntitytypeMonitoringConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
VertexAiFeaturestoreEntitytypeMonitoringConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.vertexAiFeaturestoreEntitytype.VertexAiFeaturestoreEntitytypeMonitoringConfigOutputReference", version: "4.0.3" };
function vertexAiFeaturestoreEntitytypeTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.vertexAiFeaturestoreEntitytypeTimeoutsToTerraform = vertexAiFeaturestoreEntitytypeTimeoutsToTerraform;
class VertexAiFeaturestoreEntitytypeTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.VertexAiFeaturestoreEntitytypeTimeoutsOutputReference = VertexAiFeaturestoreEntitytypeTimeoutsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
VertexAiFeaturestoreEntitytypeTimeoutsOutputReference[_f] = { fqn: "@cdktf/provider-google.vertexAiFeaturestoreEntitytype.VertexAiFeaturestoreEntitytypeTimeoutsOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/vertex_ai_featurestore_entitytype google_vertex_ai_featurestore_entitytype}
*/
class VertexAiFeaturestoreEntitytype extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/vertex_ai_featurestore_entitytype google_vertex_ai_featurestore_entitytype} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options VertexAiFeaturestoreEntitytypeConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_vertex_ai_featurestore_entitytype',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // monitoring_config - computed: false, optional: true, required: false
        this._monitoringConfig = new VertexAiFeaturestoreEntitytypeMonitoringConfigOutputReference(this, "monitoring_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new VertexAiFeaturestoreEntitytypeTimeoutsOutputReference(this, "timeouts");
        this._featurestore = config.featurestore;
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._monitoringConfig.internalValue = config.monitoringConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get featurestore() {
        return this.getStringAttribute('featurestore');
    }
    set featurestore(value) {
        this._featurestore = value;
    }
    // Temporarily expose input value. Use with caution.
    get featurestoreInput() {
        return this._featurestore;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // region - computed: true, optional: false, required: false
    get region() {
        return this.getStringAttribute('region');
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get monitoringConfig() {
        return this._monitoringConfig;
    }
    putMonitoringConfig(value) {
        this._monitoringConfig.internalValue = value;
    }
    resetMonitoringConfig() {
        this._monitoringConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringConfigInput() {
        return this._monitoringConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            featurestore: cdktf.stringToTerraform(this._featurestore),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            monitoring_config: vertexAiFeaturestoreEntitytypeMonitoringConfigToTerraform(this._monitoringConfig.internalValue),
            timeouts: vertexAiFeaturestoreEntitytypeTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.VertexAiFeaturestoreEntitytype = VertexAiFeaturestoreEntitytype;
_g = JSII_RTTI_SYMBOL_1;
VertexAiFeaturestoreEntitytype[_g] = { fqn: "@cdktf/provider-google.vertexAiFeaturestoreEntitytype.VertexAiFeaturestoreEntitytype", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
VertexAiFeaturestoreEntitytype.tfResourceType = "google_vertex_ai_featurestore_entitytype";
//# sourceMappingURL=data:application/json;base64,