"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppEngineStandardAppVersion = exports.AppEngineStandardAppVersionVpcAccessConnectorOutputReference = exports.appEngineStandardAppVersionVpcAccessConnectorToTerraform = exports.AppEngineStandardAppVersionTimeoutsOutputReference = exports.appEngineStandardAppVersionTimeoutsToTerraform = exports.AppEngineStandardAppVersionManualScalingOutputReference = exports.appEngineStandardAppVersionManualScalingToTerraform = exports.AppEngineStandardAppVersionLibrariesList = exports.AppEngineStandardAppVersionLibrariesOutputReference = exports.appEngineStandardAppVersionLibrariesToTerraform = exports.AppEngineStandardAppVersionHandlersList = exports.AppEngineStandardAppVersionHandlersOutputReference = exports.appEngineStandardAppVersionHandlersToTerraform = exports.AppEngineStandardAppVersionHandlersStaticFilesOutputReference = exports.appEngineStandardAppVersionHandlersStaticFilesToTerraform = exports.AppEngineStandardAppVersionHandlersScriptOutputReference = exports.appEngineStandardAppVersionHandlersScriptToTerraform = exports.AppEngineStandardAppVersionEntrypointOutputReference = exports.appEngineStandardAppVersionEntrypointToTerraform = exports.AppEngineStandardAppVersionDeploymentOutputReference = exports.appEngineStandardAppVersionDeploymentToTerraform = exports.AppEngineStandardAppVersionDeploymentZipOutputReference = exports.appEngineStandardAppVersionDeploymentZipToTerraform = exports.AppEngineStandardAppVersionDeploymentFilesList = exports.AppEngineStandardAppVersionDeploymentFilesOutputReference = exports.appEngineStandardAppVersionDeploymentFilesToTerraform = exports.AppEngineStandardAppVersionBasicScalingOutputReference = exports.appEngineStandardAppVersionBasicScalingToTerraform = exports.AppEngineStandardAppVersionAutomaticScalingOutputReference = exports.appEngineStandardAppVersionAutomaticScalingToTerraform = exports.AppEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsOutputReference = exports.appEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function appEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_instances: cdktf.numberToTerraform(struct.maxInstances),
        min_instances: cdktf.numberToTerraform(struct.minInstances),
        target_cpu_utilization: cdktf.numberToTerraform(struct.targetCpuUtilization),
        target_throughput_utilization: cdktf.numberToTerraform(struct.targetThroughputUtilization),
    };
}
exports.appEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsToTerraform = appEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsToTerraform;
class AppEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxInstances = this._maxInstances;
        }
        if (this._minInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.minInstances = this._minInstances;
        }
        if (this._targetCpuUtilization !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetCpuUtilization = this._targetCpuUtilization;
        }
        if (this._targetThroughputUtilization !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetThroughputUtilization = this._targetThroughputUtilization;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxInstances = undefined;
            this._minInstances = undefined;
            this._targetCpuUtilization = undefined;
            this._targetThroughputUtilization = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxInstances = value.maxInstances;
            this._minInstances = value.minInstances;
            this._targetCpuUtilization = value.targetCpuUtilization;
            this._targetThroughputUtilization = value.targetThroughputUtilization;
        }
    }
    get maxInstances() {
        return this.getNumberAttribute('max_instances');
    }
    set maxInstances(value) {
        this._maxInstances = value;
    }
    resetMaxInstances() {
        this._maxInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInstancesInput() {
        return this._maxInstances;
    }
    get minInstances() {
        return this.getNumberAttribute('min_instances');
    }
    set minInstances(value) {
        this._minInstances = value;
    }
    resetMinInstances() {
        this._minInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInstancesInput() {
        return this._minInstances;
    }
    get targetCpuUtilization() {
        return this.getNumberAttribute('target_cpu_utilization');
    }
    set targetCpuUtilization(value) {
        this._targetCpuUtilization = value;
    }
    resetTargetCpuUtilization() {
        this._targetCpuUtilization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetCpuUtilizationInput() {
        return this._targetCpuUtilization;
    }
    get targetThroughputUtilization() {
        return this.getNumberAttribute('target_throughput_utilization');
    }
    set targetThroughputUtilization(value) {
        this._targetThroughputUtilization = value;
    }
    resetTargetThroughputUtilization() {
        this._targetThroughputUtilization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetThroughputUtilizationInput() {
        return this._targetThroughputUtilization;
    }
}
exports.AppEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsOutputReference = AppEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsOutputReference[_a] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsOutputReference", version: "5.0.1" };
function appEngineStandardAppVersionAutomaticScalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_concurrent_requests: cdktf.numberToTerraform(struct.maxConcurrentRequests),
        max_idle_instances: cdktf.numberToTerraform(struct.maxIdleInstances),
        max_pending_latency: cdktf.stringToTerraform(struct.maxPendingLatency),
        min_idle_instances: cdktf.numberToTerraform(struct.minIdleInstances),
        min_pending_latency: cdktf.stringToTerraform(struct.minPendingLatency),
        standard_scheduler_settings: appEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsToTerraform(struct.standardSchedulerSettings),
    };
}
exports.appEngineStandardAppVersionAutomaticScalingToTerraform = appEngineStandardAppVersionAutomaticScalingToTerraform;
class AppEngineStandardAppVersionAutomaticScalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // standard_scheduler_settings - computed: false, optional: true, required: false
        this._standardSchedulerSettings = new AppEngineStandardAppVersionAutomaticScalingStandardSchedulerSettingsOutputReference(this, "standard_scheduler_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConcurrentRequests !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentRequests = this._maxConcurrentRequests;
        }
        if (this._maxIdleInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxIdleInstances = this._maxIdleInstances;
        }
        if (this._maxPendingLatency !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxPendingLatency = this._maxPendingLatency;
        }
        if (this._minIdleInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.minIdleInstances = this._minIdleInstances;
        }
        if (this._minPendingLatency !== undefined) {
            hasAnyValues = true;
            internalValueResult.minPendingLatency = this._minPendingLatency;
        }
        if (this._standardSchedulerSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.standardSchedulerSettings = this._standardSchedulerSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConcurrentRequests = undefined;
            this._maxIdleInstances = undefined;
            this._maxPendingLatency = undefined;
            this._minIdleInstances = undefined;
            this._minPendingLatency = undefined;
            this._standardSchedulerSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConcurrentRequests = value.maxConcurrentRequests;
            this._maxIdleInstances = value.maxIdleInstances;
            this._maxPendingLatency = value.maxPendingLatency;
            this._minIdleInstances = value.minIdleInstances;
            this._minPendingLatency = value.minPendingLatency;
            this._standardSchedulerSettings.internalValue = value.standardSchedulerSettings;
        }
    }
    get maxConcurrentRequests() {
        return this.getNumberAttribute('max_concurrent_requests');
    }
    set maxConcurrentRequests(value) {
        this._maxConcurrentRequests = value;
    }
    resetMaxConcurrentRequests() {
        this._maxConcurrentRequests = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentRequestsInput() {
        return this._maxConcurrentRequests;
    }
    get maxIdleInstances() {
        return this.getNumberAttribute('max_idle_instances');
    }
    set maxIdleInstances(value) {
        this._maxIdleInstances = value;
    }
    resetMaxIdleInstances() {
        this._maxIdleInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxIdleInstancesInput() {
        return this._maxIdleInstances;
    }
    get maxPendingLatency() {
        return this.getStringAttribute('max_pending_latency');
    }
    set maxPendingLatency(value) {
        this._maxPendingLatency = value;
    }
    resetMaxPendingLatency() {
        this._maxPendingLatency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxPendingLatencyInput() {
        return this._maxPendingLatency;
    }
    get minIdleInstances() {
        return this.getNumberAttribute('min_idle_instances');
    }
    set minIdleInstances(value) {
        this._minIdleInstances = value;
    }
    resetMinIdleInstances() {
        this._minIdleInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minIdleInstancesInput() {
        return this._minIdleInstances;
    }
    get minPendingLatency() {
        return this.getStringAttribute('min_pending_latency');
    }
    set minPendingLatency(value) {
        this._minPendingLatency = value;
    }
    resetMinPendingLatency() {
        this._minPendingLatency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minPendingLatencyInput() {
        return this._minPendingLatency;
    }
    get standardSchedulerSettings() {
        return this._standardSchedulerSettings;
    }
    putStandardSchedulerSettings(value) {
        this._standardSchedulerSettings.internalValue = value;
    }
    resetStandardSchedulerSettings() {
        this._standardSchedulerSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get standardSchedulerSettingsInput() {
        return this._standardSchedulerSettings.internalValue;
    }
}
exports.AppEngineStandardAppVersionAutomaticScalingOutputReference = AppEngineStandardAppVersionAutomaticScalingOutputReference;
_b = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionAutomaticScalingOutputReference[_b] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionAutomaticScalingOutputReference", version: "5.0.1" };
function appEngineStandardAppVersionBasicScalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        idle_timeout: cdktf.stringToTerraform(struct.idleTimeout),
        max_instances: cdktf.numberToTerraform(struct.maxInstances),
    };
}
exports.appEngineStandardAppVersionBasicScalingToTerraform = appEngineStandardAppVersionBasicScalingToTerraform;
class AppEngineStandardAppVersionBasicScalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._idleTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.idleTimeout = this._idleTimeout;
        }
        if (this._maxInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxInstances = this._maxInstances;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._idleTimeout = undefined;
            this._maxInstances = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._idleTimeout = value.idleTimeout;
            this._maxInstances = value.maxInstances;
        }
    }
    get idleTimeout() {
        return this.getStringAttribute('idle_timeout');
    }
    set idleTimeout(value) {
        this._idleTimeout = value;
    }
    resetIdleTimeout() {
        this._idleTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleTimeoutInput() {
        return this._idleTimeout;
    }
    get maxInstances() {
        return this.getNumberAttribute('max_instances');
    }
    set maxInstances(value) {
        this._maxInstances = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxInstancesInput() {
        return this._maxInstances;
    }
}
exports.AppEngineStandardAppVersionBasicScalingOutputReference = AppEngineStandardAppVersionBasicScalingOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionBasicScalingOutputReference[_c] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionBasicScalingOutputReference", version: "5.0.1" };
function appEngineStandardAppVersionDeploymentFilesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        sha1_sum: cdktf.stringToTerraform(struct.sha1Sum),
        source_url: cdktf.stringToTerraform(struct.sourceUrl),
    };
}
exports.appEngineStandardAppVersionDeploymentFilesToTerraform = appEngineStandardAppVersionDeploymentFilesToTerraform;
class AppEngineStandardAppVersionDeploymentFilesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._sha1Sum !== undefined) {
            hasAnyValues = true;
            internalValueResult.sha1Sum = this._sha1Sum;
        }
        if (this._sourceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceUrl = this._sourceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._sha1Sum = undefined;
            this._sourceUrl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._sha1Sum = value.sha1Sum;
            this._sourceUrl = value.sourceUrl;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get sha1Sum() {
        return this.getStringAttribute('sha1_sum');
    }
    set sha1Sum(value) {
        this._sha1Sum = value;
    }
    resetSha1Sum() {
        this._sha1Sum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sha1SumInput() {
        return this._sha1Sum;
    }
    get sourceUrl() {
        return this.getStringAttribute('source_url');
    }
    set sourceUrl(value) {
        this._sourceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceUrlInput() {
        return this._sourceUrl;
    }
}
exports.AppEngineStandardAppVersionDeploymentFilesOutputReference = AppEngineStandardAppVersionDeploymentFilesOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionDeploymentFilesOutputReference[_d] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionDeploymentFilesOutputReference", version: "5.0.1" };
class AppEngineStandardAppVersionDeploymentFilesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppEngineStandardAppVersionDeploymentFilesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppEngineStandardAppVersionDeploymentFilesList = AppEngineStandardAppVersionDeploymentFilesList;
_e = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionDeploymentFilesList[_e] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionDeploymentFilesList", version: "5.0.1" };
function appEngineStandardAppVersionDeploymentZipToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        files_count: cdktf.numberToTerraform(struct.filesCount),
        source_url: cdktf.stringToTerraform(struct.sourceUrl),
    };
}
exports.appEngineStandardAppVersionDeploymentZipToTerraform = appEngineStandardAppVersionDeploymentZipToTerraform;
class AppEngineStandardAppVersionDeploymentZipOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._filesCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.filesCount = this._filesCount;
        }
        if (this._sourceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceUrl = this._sourceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._filesCount = undefined;
            this._sourceUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._filesCount = value.filesCount;
            this._sourceUrl = value.sourceUrl;
        }
    }
    get filesCount() {
        return this.getNumberAttribute('files_count');
    }
    set filesCount(value) {
        this._filesCount = value;
    }
    resetFilesCount() {
        this._filesCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filesCountInput() {
        return this._filesCount;
    }
    get sourceUrl() {
        return this.getStringAttribute('source_url');
    }
    set sourceUrl(value) {
        this._sourceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceUrlInput() {
        return this._sourceUrl;
    }
}
exports.AppEngineStandardAppVersionDeploymentZipOutputReference = AppEngineStandardAppVersionDeploymentZipOutputReference;
_f = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionDeploymentZipOutputReference[_f] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionDeploymentZipOutputReference", version: "5.0.1" };
function appEngineStandardAppVersionDeploymentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        files: cdktf.listMapper(appEngineStandardAppVersionDeploymentFilesToTerraform, true)(struct.files),
        zip: appEngineStandardAppVersionDeploymentZipToTerraform(struct.zip),
    };
}
exports.appEngineStandardAppVersionDeploymentToTerraform = appEngineStandardAppVersionDeploymentToTerraform;
class AppEngineStandardAppVersionDeploymentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // files - computed: false, optional: true, required: false
        this._files = new AppEngineStandardAppVersionDeploymentFilesList(this, "files", true);
        // zip - computed: false, optional: true, required: false
        this._zip = new AppEngineStandardAppVersionDeploymentZipOutputReference(this, "zip");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._files?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.files = this._files?.internalValue;
        }
        if (this._zip?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.zip = this._zip?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._files.internalValue = undefined;
            this._zip.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._files.internalValue = value.files;
            this._zip.internalValue = value.zip;
        }
    }
    get files() {
        return this._files;
    }
    putFiles(value) {
        this._files.internalValue = value;
    }
    resetFiles() {
        this._files.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filesInput() {
        return this._files.internalValue;
    }
    get zip() {
        return this._zip;
    }
    putZip(value) {
        this._zip.internalValue = value;
    }
    resetZip() {
        this._zip.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zipInput() {
        return this._zip.internalValue;
    }
}
exports.AppEngineStandardAppVersionDeploymentOutputReference = AppEngineStandardAppVersionDeploymentOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionDeploymentOutputReference[_g] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionDeploymentOutputReference", version: "5.0.1" };
function appEngineStandardAppVersionEntrypointToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        shell: cdktf.stringToTerraform(struct.shell),
    };
}
exports.appEngineStandardAppVersionEntrypointToTerraform = appEngineStandardAppVersionEntrypointToTerraform;
class AppEngineStandardAppVersionEntrypointOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._shell !== undefined) {
            hasAnyValues = true;
            internalValueResult.shell = this._shell;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._shell = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._shell = value.shell;
        }
    }
    get shell() {
        return this.getStringAttribute('shell');
    }
    set shell(value) {
        this._shell = value;
    }
    // Temporarily expose input value. Use with caution.
    get shellInput() {
        return this._shell;
    }
}
exports.AppEngineStandardAppVersionEntrypointOutputReference = AppEngineStandardAppVersionEntrypointOutputReference;
_h = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionEntrypointOutputReference[_h] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionEntrypointOutputReference", version: "5.0.1" };
function appEngineStandardAppVersionHandlersScriptToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        script_path: cdktf.stringToTerraform(struct.scriptPath),
    };
}
exports.appEngineStandardAppVersionHandlersScriptToTerraform = appEngineStandardAppVersionHandlersScriptToTerraform;
class AppEngineStandardAppVersionHandlersScriptOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._scriptPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.scriptPath = this._scriptPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._scriptPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._scriptPath = value.scriptPath;
        }
    }
    get scriptPath() {
        return this.getStringAttribute('script_path');
    }
    set scriptPath(value) {
        this._scriptPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get scriptPathInput() {
        return this._scriptPath;
    }
}
exports.AppEngineStandardAppVersionHandlersScriptOutputReference = AppEngineStandardAppVersionHandlersScriptOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionHandlersScriptOutputReference[_j] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionHandlersScriptOutputReference", version: "5.0.1" };
function appEngineStandardAppVersionHandlersStaticFilesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        application_readable: cdktf.booleanToTerraform(struct.applicationReadable),
        expiration: cdktf.stringToTerraform(struct.expiration),
        http_headers: cdktf.hashMapper(cdktf.stringToTerraform)(struct.httpHeaders),
        mime_type: cdktf.stringToTerraform(struct.mimeType),
        path: cdktf.stringToTerraform(struct.path),
        require_matching_file: cdktf.booleanToTerraform(struct.requireMatchingFile),
        upload_path_regex: cdktf.stringToTerraform(struct.uploadPathRegex),
    };
}
exports.appEngineStandardAppVersionHandlersStaticFilesToTerraform = appEngineStandardAppVersionHandlersStaticFilesToTerraform;
class AppEngineStandardAppVersionHandlersStaticFilesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._applicationReadable !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationReadable = this._applicationReadable;
        }
        if (this._expiration !== undefined) {
            hasAnyValues = true;
            internalValueResult.expiration = this._expiration;
        }
        if (this._httpHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpHeaders = this._httpHeaders;
        }
        if (this._mimeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.mimeType = this._mimeType;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._requireMatchingFile !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireMatchingFile = this._requireMatchingFile;
        }
        if (this._uploadPathRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.uploadPathRegex = this._uploadPathRegex;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._applicationReadable = undefined;
            this._expiration = undefined;
            this._httpHeaders = undefined;
            this._mimeType = undefined;
            this._path = undefined;
            this._requireMatchingFile = undefined;
            this._uploadPathRegex = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._applicationReadable = value.applicationReadable;
            this._expiration = value.expiration;
            this._httpHeaders = value.httpHeaders;
            this._mimeType = value.mimeType;
            this._path = value.path;
            this._requireMatchingFile = value.requireMatchingFile;
            this._uploadPathRegex = value.uploadPathRegex;
        }
    }
    get applicationReadable() {
        return this.getBooleanAttribute('application_readable');
    }
    set applicationReadable(value) {
        this._applicationReadable = value;
    }
    resetApplicationReadable() {
        this._applicationReadable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applicationReadableInput() {
        return this._applicationReadable;
    }
    get expiration() {
        return this.getStringAttribute('expiration');
    }
    set expiration(value) {
        this._expiration = value;
    }
    resetExpiration() {
        this._expiration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expirationInput() {
        return this._expiration;
    }
    get httpHeaders() {
        return this.getStringMapAttribute('http_headers');
    }
    set httpHeaders(value) {
        this._httpHeaders = value;
    }
    resetHttpHeaders() {
        this._httpHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpHeadersInput() {
        return this._httpHeaders;
    }
    get mimeType() {
        return this.getStringAttribute('mime_type');
    }
    set mimeType(value) {
        this._mimeType = value;
    }
    resetMimeType() {
        this._mimeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mimeTypeInput() {
        return this._mimeType;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get requireMatchingFile() {
        return this.getBooleanAttribute('require_matching_file');
    }
    set requireMatchingFile(value) {
        this._requireMatchingFile = value;
    }
    resetRequireMatchingFile() {
        this._requireMatchingFile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireMatchingFileInput() {
        return this._requireMatchingFile;
    }
    get uploadPathRegex() {
        return this.getStringAttribute('upload_path_regex');
    }
    set uploadPathRegex(value) {
        this._uploadPathRegex = value;
    }
    resetUploadPathRegex() {
        this._uploadPathRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uploadPathRegexInput() {
        return this._uploadPathRegex;
    }
}
exports.AppEngineStandardAppVersionHandlersStaticFilesOutputReference = AppEngineStandardAppVersionHandlersStaticFilesOutputReference;
_k = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionHandlersStaticFilesOutputReference[_k] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionHandlersStaticFilesOutputReference", version: "5.0.1" };
function appEngineStandardAppVersionHandlersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_fail_action: cdktf.stringToTerraform(struct.authFailAction),
        login: cdktf.stringToTerraform(struct.login),
        redirect_http_response_code: cdktf.stringToTerraform(struct.redirectHttpResponseCode),
        security_level: cdktf.stringToTerraform(struct.securityLevel),
        url_regex: cdktf.stringToTerraform(struct.urlRegex),
        script: appEngineStandardAppVersionHandlersScriptToTerraform(struct.script),
        static_files: appEngineStandardAppVersionHandlersStaticFilesToTerraform(struct.staticFiles),
    };
}
exports.appEngineStandardAppVersionHandlersToTerraform = appEngineStandardAppVersionHandlersToTerraform;
class AppEngineStandardAppVersionHandlersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // script - computed: false, optional: true, required: false
        this._script = new AppEngineStandardAppVersionHandlersScriptOutputReference(this, "script");
        // static_files - computed: false, optional: true, required: false
        this._staticFiles = new AppEngineStandardAppVersionHandlersStaticFilesOutputReference(this, "static_files");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authFailAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.authFailAction = this._authFailAction;
        }
        if (this._login !== undefined) {
            hasAnyValues = true;
            internalValueResult.login = this._login;
        }
        if (this._redirectHttpResponseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectHttpResponseCode = this._redirectHttpResponseCode;
        }
        if (this._securityLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityLevel = this._securityLevel;
        }
        if (this._urlRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRegex = this._urlRegex;
        }
        if (this._script?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.script = this._script?.internalValue;
        }
        if (this._staticFiles?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.staticFiles = this._staticFiles?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._authFailAction = undefined;
            this._login = undefined;
            this._redirectHttpResponseCode = undefined;
            this._securityLevel = undefined;
            this._urlRegex = undefined;
            this._script.internalValue = undefined;
            this._staticFiles.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._authFailAction = value.authFailAction;
            this._login = value.login;
            this._redirectHttpResponseCode = value.redirectHttpResponseCode;
            this._securityLevel = value.securityLevel;
            this._urlRegex = value.urlRegex;
            this._script.internalValue = value.script;
            this._staticFiles.internalValue = value.staticFiles;
        }
    }
    get authFailAction() {
        return this.getStringAttribute('auth_fail_action');
    }
    set authFailAction(value) {
        this._authFailAction = value;
    }
    resetAuthFailAction() {
        this._authFailAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authFailActionInput() {
        return this._authFailAction;
    }
    get login() {
        return this.getStringAttribute('login');
    }
    set login(value) {
        this._login = value;
    }
    resetLogin() {
        this._login = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loginInput() {
        return this._login;
    }
    get redirectHttpResponseCode() {
        return this.getStringAttribute('redirect_http_response_code');
    }
    set redirectHttpResponseCode(value) {
        this._redirectHttpResponseCode = value;
    }
    resetRedirectHttpResponseCode() {
        this._redirectHttpResponseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectHttpResponseCodeInput() {
        return this._redirectHttpResponseCode;
    }
    get securityLevel() {
        return this.getStringAttribute('security_level');
    }
    set securityLevel(value) {
        this._securityLevel = value;
    }
    resetSecurityLevel() {
        this._securityLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityLevelInput() {
        return this._securityLevel;
    }
    get urlRegex() {
        return this.getStringAttribute('url_regex');
    }
    set urlRegex(value) {
        this._urlRegex = value;
    }
    resetUrlRegex() {
        this._urlRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRegexInput() {
        return this._urlRegex;
    }
    get script() {
        return this._script;
    }
    putScript(value) {
        this._script.internalValue = value;
    }
    resetScript() {
        this._script.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptInput() {
        return this._script.internalValue;
    }
    get staticFiles() {
        return this._staticFiles;
    }
    putStaticFiles(value) {
        this._staticFiles.internalValue = value;
    }
    resetStaticFiles() {
        this._staticFiles.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get staticFilesInput() {
        return this._staticFiles.internalValue;
    }
}
exports.AppEngineStandardAppVersionHandlersOutputReference = AppEngineStandardAppVersionHandlersOutputReference;
_l = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionHandlersOutputReference[_l] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionHandlersOutputReference", version: "5.0.1" };
class AppEngineStandardAppVersionHandlersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppEngineStandardAppVersionHandlersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppEngineStandardAppVersionHandlersList = AppEngineStandardAppVersionHandlersList;
_m = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionHandlersList[_m] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionHandlersList", version: "5.0.1" };
function appEngineStandardAppVersionLibrariesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.appEngineStandardAppVersionLibrariesToTerraform = appEngineStandardAppVersionLibrariesToTerraform;
class AppEngineStandardAppVersionLibrariesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._version = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._version = value.version;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
}
exports.AppEngineStandardAppVersionLibrariesOutputReference = AppEngineStandardAppVersionLibrariesOutputReference;
_o = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionLibrariesOutputReference[_o] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionLibrariesOutputReference", version: "5.0.1" };
class AppEngineStandardAppVersionLibrariesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppEngineStandardAppVersionLibrariesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppEngineStandardAppVersionLibrariesList = AppEngineStandardAppVersionLibrariesList;
_p = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionLibrariesList[_p] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionLibrariesList", version: "5.0.1" };
function appEngineStandardAppVersionManualScalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instances: cdktf.numberToTerraform(struct.instances),
    };
}
exports.appEngineStandardAppVersionManualScalingToTerraform = appEngineStandardAppVersionManualScalingToTerraform;
class AppEngineStandardAppVersionManualScalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instances !== undefined) {
            hasAnyValues = true;
            internalValueResult.instances = this._instances;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instances = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instances = value.instances;
        }
    }
    get instances() {
        return this.getNumberAttribute('instances');
    }
    set instances(value) {
        this._instances = value;
    }
    // Temporarily expose input value. Use with caution.
    get instancesInput() {
        return this._instances;
    }
}
exports.AppEngineStandardAppVersionManualScalingOutputReference = AppEngineStandardAppVersionManualScalingOutputReference;
_q = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionManualScalingOutputReference[_q] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionManualScalingOutputReference", version: "5.0.1" };
function appEngineStandardAppVersionTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.appEngineStandardAppVersionTimeoutsToTerraform = appEngineStandardAppVersionTimeoutsToTerraform;
class AppEngineStandardAppVersionTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.AppEngineStandardAppVersionTimeoutsOutputReference = AppEngineStandardAppVersionTimeoutsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionTimeoutsOutputReference[_r] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionTimeoutsOutputReference", version: "5.0.1" };
function appEngineStandardAppVersionVpcAccessConnectorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        egress_setting: cdktf.stringToTerraform(struct.egressSetting),
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.appEngineStandardAppVersionVpcAccessConnectorToTerraform = appEngineStandardAppVersionVpcAccessConnectorToTerraform;
class AppEngineStandardAppVersionVpcAccessConnectorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._egressSetting !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressSetting = this._egressSetting;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._egressSetting = undefined;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._egressSetting = value.egressSetting;
            this._name = value.name;
        }
    }
    get egressSetting() {
        return this.getStringAttribute('egress_setting');
    }
    set egressSetting(value) {
        this._egressSetting = value;
    }
    resetEgressSetting() {
        this._egressSetting = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressSettingInput() {
        return this._egressSetting;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.AppEngineStandardAppVersionVpcAccessConnectorOutputReference = AppEngineStandardAppVersionVpcAccessConnectorOutputReference;
_s = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersionVpcAccessConnectorOutputReference[_s] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersionVpcAccessConnectorOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/app_engine_standard_app_version google_app_engine_standard_app_version}
*/
class AppEngineStandardAppVersion extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/app_engine_standard_app_version google_app_engine_standard_app_version} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppEngineStandardAppVersionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_app_engine_standard_app_version',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // automatic_scaling - computed: false, optional: true, required: false
        this._automaticScaling = new AppEngineStandardAppVersionAutomaticScalingOutputReference(this, "automatic_scaling");
        // basic_scaling - computed: false, optional: true, required: false
        this._basicScaling = new AppEngineStandardAppVersionBasicScalingOutputReference(this, "basic_scaling");
        // deployment - computed: false, optional: false, required: true
        this._deployment = new AppEngineStandardAppVersionDeploymentOutputReference(this, "deployment");
        // entrypoint - computed: false, optional: false, required: true
        this._entrypoint = new AppEngineStandardAppVersionEntrypointOutputReference(this, "entrypoint");
        // handlers - computed: false, optional: true, required: false
        this._handlers = new AppEngineStandardAppVersionHandlersList(this, "handlers", false);
        // libraries - computed: false, optional: true, required: false
        this._libraries = new AppEngineStandardAppVersionLibrariesList(this, "libraries", false);
        // manual_scaling - computed: false, optional: true, required: false
        this._manualScaling = new AppEngineStandardAppVersionManualScalingOutputReference(this, "manual_scaling");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new AppEngineStandardAppVersionTimeoutsOutputReference(this, "timeouts");
        // vpc_access_connector - computed: false, optional: true, required: false
        this._vpcAccessConnector = new AppEngineStandardAppVersionVpcAccessConnectorOutputReference(this, "vpc_access_connector");
        this._appEngineApis = config.appEngineApis;
        this._deleteServiceOnDestroy = config.deleteServiceOnDestroy;
        this._envVariables = config.envVariables;
        this._id = config.id;
        this._inboundServices = config.inboundServices;
        this._instanceClass = config.instanceClass;
        this._noopOnDestroy = config.noopOnDestroy;
        this._project = config.project;
        this._runtime = config.runtime;
        this._runtimeApiVersion = config.runtimeApiVersion;
        this._service = config.service;
        this._serviceAccount = config.serviceAccount;
        this._threadsafe = config.threadsafe;
        this._versionId = config.versionId;
        this._automaticScaling.internalValue = config.automaticScaling;
        this._basicScaling.internalValue = config.basicScaling;
        this._deployment.internalValue = config.deployment;
        this._entrypoint.internalValue = config.entrypoint;
        this._handlers.internalValue = config.handlers;
        this._libraries.internalValue = config.libraries;
        this._manualScaling.internalValue = config.manualScaling;
        this._timeouts.internalValue = config.timeouts;
        this._vpcAccessConnector.internalValue = config.vpcAccessConnector;
    }
    get appEngineApis() {
        return this.getBooleanAttribute('app_engine_apis');
    }
    set appEngineApis(value) {
        this._appEngineApis = value;
    }
    resetAppEngineApis() {
        this._appEngineApis = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appEngineApisInput() {
        return this._appEngineApis;
    }
    get deleteServiceOnDestroy() {
        return this.getBooleanAttribute('delete_service_on_destroy');
    }
    set deleteServiceOnDestroy(value) {
        this._deleteServiceOnDestroy = value;
    }
    resetDeleteServiceOnDestroy() {
        this._deleteServiceOnDestroy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteServiceOnDestroyInput() {
        return this._deleteServiceOnDestroy;
    }
    get envVariables() {
        return this.getStringMapAttribute('env_variables');
    }
    set envVariables(value) {
        this._envVariables = value;
    }
    resetEnvVariables() {
        this._envVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get envVariablesInput() {
        return this._envVariables;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get inboundServices() {
        return cdktf.Fn.tolist(this.getListAttribute('inbound_services'));
    }
    set inboundServices(value) {
        this._inboundServices = value;
    }
    resetInboundServices() {
        this._inboundServices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inboundServicesInput() {
        return this._inboundServices;
    }
    get instanceClass() {
        return this.getStringAttribute('instance_class');
    }
    set instanceClass(value) {
        this._instanceClass = value;
    }
    resetInstanceClass() {
        this._instanceClass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceClassInput() {
        return this._instanceClass;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get noopOnDestroy() {
        return this.getBooleanAttribute('noop_on_destroy');
    }
    set noopOnDestroy(value) {
        this._noopOnDestroy = value;
    }
    resetNoopOnDestroy() {
        this._noopOnDestroy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get noopOnDestroyInput() {
        return this._noopOnDestroy;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get runtime() {
        return this.getStringAttribute('runtime');
    }
    set runtime(value) {
        this._runtime = value;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeInput() {
        return this._runtime;
    }
    get runtimeApiVersion() {
        return this.getStringAttribute('runtime_api_version');
    }
    set runtimeApiVersion(value) {
        this._runtimeApiVersion = value;
    }
    resetRuntimeApiVersion() {
        this._runtimeApiVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeApiVersionInput() {
        return this._runtimeApiVersion;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get threadsafe() {
        return this.getBooleanAttribute('threadsafe');
    }
    set threadsafe(value) {
        this._threadsafe = value;
    }
    resetThreadsafe() {
        this._threadsafe = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get threadsafeInput() {
        return this._threadsafe;
    }
    get versionId() {
        return this.getStringAttribute('version_id');
    }
    set versionId(value) {
        this._versionId = value;
    }
    resetVersionId() {
        this._versionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionIdInput() {
        return this._versionId;
    }
    get automaticScaling() {
        return this._automaticScaling;
    }
    putAutomaticScaling(value) {
        this._automaticScaling.internalValue = value;
    }
    resetAutomaticScaling() {
        this._automaticScaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automaticScalingInput() {
        return this._automaticScaling.internalValue;
    }
    get basicScaling() {
        return this._basicScaling;
    }
    putBasicScaling(value) {
        this._basicScaling.internalValue = value;
    }
    resetBasicScaling() {
        this._basicScaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get basicScalingInput() {
        return this._basicScaling.internalValue;
    }
    get deployment() {
        return this._deployment;
    }
    putDeployment(value) {
        this._deployment.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentInput() {
        return this._deployment.internalValue;
    }
    get entrypoint() {
        return this._entrypoint;
    }
    putEntrypoint(value) {
        this._entrypoint.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get entrypointInput() {
        return this._entrypoint.internalValue;
    }
    get handlers() {
        return this._handlers;
    }
    putHandlers(value) {
        this._handlers.internalValue = value;
    }
    resetHandlers() {
        this._handlers.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get handlersInput() {
        return this._handlers.internalValue;
    }
    get libraries() {
        return this._libraries;
    }
    putLibraries(value) {
        this._libraries.internalValue = value;
    }
    resetLibraries() {
        this._libraries.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get librariesInput() {
        return this._libraries.internalValue;
    }
    get manualScaling() {
        return this._manualScaling;
    }
    putManualScaling(value) {
        this._manualScaling.internalValue = value;
    }
    resetManualScaling() {
        this._manualScaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get manualScalingInput() {
        return this._manualScaling.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get vpcAccessConnector() {
        return this._vpcAccessConnector;
    }
    putVpcAccessConnector(value) {
        this._vpcAccessConnector.internalValue = value;
    }
    resetVpcAccessConnector() {
        this._vpcAccessConnector.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcAccessConnectorInput() {
        return this._vpcAccessConnector.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            app_engine_apis: cdktf.booleanToTerraform(this._appEngineApis),
            delete_service_on_destroy: cdktf.booleanToTerraform(this._deleteServiceOnDestroy),
            env_variables: cdktf.hashMapper(cdktf.stringToTerraform)(this._envVariables),
            id: cdktf.stringToTerraform(this._id),
            inbound_services: cdktf.listMapper(cdktf.stringToTerraform, false)(this._inboundServices),
            instance_class: cdktf.stringToTerraform(this._instanceClass),
            noop_on_destroy: cdktf.booleanToTerraform(this._noopOnDestroy),
            project: cdktf.stringToTerraform(this._project),
            runtime: cdktf.stringToTerraform(this._runtime),
            runtime_api_version: cdktf.stringToTerraform(this._runtimeApiVersion),
            service: cdktf.stringToTerraform(this._service),
            service_account: cdktf.stringToTerraform(this._serviceAccount),
            threadsafe: cdktf.booleanToTerraform(this._threadsafe),
            version_id: cdktf.stringToTerraform(this._versionId),
            automatic_scaling: appEngineStandardAppVersionAutomaticScalingToTerraform(this._automaticScaling.internalValue),
            basic_scaling: appEngineStandardAppVersionBasicScalingToTerraform(this._basicScaling.internalValue),
            deployment: appEngineStandardAppVersionDeploymentToTerraform(this._deployment.internalValue),
            entrypoint: appEngineStandardAppVersionEntrypointToTerraform(this._entrypoint.internalValue),
            handlers: cdktf.listMapper(appEngineStandardAppVersionHandlersToTerraform, true)(this._handlers.internalValue),
            libraries: cdktf.listMapper(appEngineStandardAppVersionLibrariesToTerraform, true)(this._libraries.internalValue),
            manual_scaling: appEngineStandardAppVersionManualScalingToTerraform(this._manualScaling.internalValue),
            timeouts: appEngineStandardAppVersionTimeoutsToTerraform(this._timeouts.internalValue),
            vpc_access_connector: appEngineStandardAppVersionVpcAccessConnectorToTerraform(this._vpcAccessConnector.internalValue),
        };
    }
}
exports.AppEngineStandardAppVersion = AppEngineStandardAppVersion;
_t = JSII_RTTI_SYMBOL_1;
AppEngineStandardAppVersion[_t] = { fqn: "@cdktf/provider-google.appEngineStandardAppVersion.AppEngineStandardAppVersion", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
AppEngineStandardAppVersion.tfResourceType = "google_app_engine_standard_app_version";
//# sourceMappingURL=data:application/json;base64,