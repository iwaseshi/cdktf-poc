"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cloudfunctions2Function = exports.Cloudfunctions2FunctionTimeoutsOutputReference = exports.cloudfunctions2FunctionTimeoutsToTerraform = exports.Cloudfunctions2FunctionServiceConfigOutputReference = exports.cloudfunctions2FunctionServiceConfigToTerraform = exports.Cloudfunctions2FunctionServiceConfigSecretVolumesList = exports.Cloudfunctions2FunctionServiceConfigSecretVolumesOutputReference = exports.cloudfunctions2FunctionServiceConfigSecretVolumesToTerraform = exports.Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsList = exports.Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsOutputReference = exports.cloudfunctions2FunctionServiceConfigSecretVolumesVersionsToTerraform = exports.Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesList = exports.Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesOutputReference = exports.cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesToTerraform = exports.Cloudfunctions2FunctionEventTriggerOutputReference = exports.cloudfunctions2FunctionEventTriggerToTerraform = exports.Cloudfunctions2FunctionEventTriggerEventFiltersList = exports.Cloudfunctions2FunctionEventTriggerEventFiltersOutputReference = exports.cloudfunctions2FunctionEventTriggerEventFiltersToTerraform = exports.Cloudfunctions2FunctionBuildConfigOutputReference = exports.cloudfunctions2FunctionBuildConfigToTerraform = exports.Cloudfunctions2FunctionBuildConfigSourceOutputReference = exports.cloudfunctions2FunctionBuildConfigSourceToTerraform = exports.Cloudfunctions2FunctionBuildConfigSourceStorageSourceOutputReference = exports.cloudfunctions2FunctionBuildConfigSourceStorageSourceToTerraform = exports.Cloudfunctions2FunctionBuildConfigSourceRepoSourceOutputReference = exports.cloudfunctions2FunctionBuildConfigSourceRepoSourceToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cloudfunctions2FunctionBuildConfigSourceRepoSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        branch_name: cdktf.stringToTerraform(struct.branchName),
        commit_sha: cdktf.stringToTerraform(struct.commitSha),
        dir: cdktf.stringToTerraform(struct.dir),
        invert_regex: cdktf.booleanToTerraform(struct.invertRegex),
        project_id: cdktf.stringToTerraform(struct.projectId),
        repo_name: cdktf.stringToTerraform(struct.repoName),
        tag_name: cdktf.stringToTerraform(struct.tagName),
    };
}
exports.cloudfunctions2FunctionBuildConfigSourceRepoSourceToTerraform = cloudfunctions2FunctionBuildConfigSourceRepoSourceToTerraform;
class Cloudfunctions2FunctionBuildConfigSourceRepoSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._branchName !== undefined) {
            hasAnyValues = true;
            internalValueResult.branchName = this._branchName;
        }
        if (this._commitSha !== undefined) {
            hasAnyValues = true;
            internalValueResult.commitSha = this._commitSha;
        }
        if (this._dir !== undefined) {
            hasAnyValues = true;
            internalValueResult.dir = this._dir;
        }
        if (this._invertRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertRegex = this._invertRegex;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._repoName !== undefined) {
            hasAnyValues = true;
            internalValueResult.repoName = this._repoName;
        }
        if (this._tagName !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagName = this._tagName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._branchName = undefined;
            this._commitSha = undefined;
            this._dir = undefined;
            this._invertRegex = undefined;
            this._projectId = undefined;
            this._repoName = undefined;
            this._tagName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._branchName = value.branchName;
            this._commitSha = value.commitSha;
            this._dir = value.dir;
            this._invertRegex = value.invertRegex;
            this._projectId = value.projectId;
            this._repoName = value.repoName;
            this._tagName = value.tagName;
        }
    }
    get branchName() {
        return this.getStringAttribute('branch_name');
    }
    set branchName(value) {
        this._branchName = value;
    }
    resetBranchName() {
        this._branchName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get branchNameInput() {
        return this._branchName;
    }
    get commitSha() {
        return this.getStringAttribute('commit_sha');
    }
    set commitSha(value) {
        this._commitSha = value;
    }
    resetCommitSha() {
        this._commitSha = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commitShaInput() {
        return this._commitSha;
    }
    get dir() {
        return this.getStringAttribute('dir');
    }
    set dir(value) {
        this._dir = value;
    }
    resetDir() {
        this._dir = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dirInput() {
        return this._dir;
    }
    get invertRegex() {
        return this.getBooleanAttribute('invert_regex');
    }
    set invertRegex(value) {
        this._invertRegex = value;
    }
    resetInvertRegex() {
        this._invertRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertRegexInput() {
        return this._invertRegex;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get repoName() {
        return this.getStringAttribute('repo_name');
    }
    set repoName(value) {
        this._repoName = value;
    }
    resetRepoName() {
        this._repoName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repoNameInput() {
        return this._repoName;
    }
    get tagName() {
        return this.getStringAttribute('tag_name');
    }
    set tagName(value) {
        this._tagName = value;
    }
    resetTagName() {
        this._tagName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagNameInput() {
        return this._tagName;
    }
}
exports.Cloudfunctions2FunctionBuildConfigSourceRepoSourceOutputReference = Cloudfunctions2FunctionBuildConfigSourceRepoSourceOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionBuildConfigSourceRepoSourceOutputReference[_a] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionBuildConfigSourceRepoSourceOutputReference", version: "5.0.1" };
function cloudfunctions2FunctionBuildConfigSourceStorageSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation: cdktf.numberToTerraform(struct.generation),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.cloudfunctions2FunctionBuildConfigSourceStorageSourceToTerraform = cloudfunctions2FunctionBuildConfigSourceStorageSourceToTerraform;
class Cloudfunctions2FunctionBuildConfigSourceStorageSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generation !== undefined) {
            hasAnyValues = true;
            internalValueResult.generation = this._generation;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generation = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generation = value.generation;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    resetBucket() {
        this._bucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generation() {
        return this.getNumberAttribute('generation');
    }
    set generation(value) {
        this._generation = value;
    }
    resetGeneration() {
        this._generation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get generationInput() {
        return this._generation;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    resetObject() {
        this._object = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.Cloudfunctions2FunctionBuildConfigSourceStorageSourceOutputReference = Cloudfunctions2FunctionBuildConfigSourceStorageSourceOutputReference;
_b = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionBuildConfigSourceStorageSourceOutputReference[_b] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionBuildConfigSourceStorageSourceOutputReference", version: "5.0.1" };
function cloudfunctions2FunctionBuildConfigSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repo_source: cloudfunctions2FunctionBuildConfigSourceRepoSourceToTerraform(struct.repoSource),
        storage_source: cloudfunctions2FunctionBuildConfigSourceStorageSourceToTerraform(struct.storageSource),
    };
}
exports.cloudfunctions2FunctionBuildConfigSourceToTerraform = cloudfunctions2FunctionBuildConfigSourceToTerraform;
class Cloudfunctions2FunctionBuildConfigSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // repo_source - computed: false, optional: true, required: false
        this._repoSource = new Cloudfunctions2FunctionBuildConfigSourceRepoSourceOutputReference(this, "repo_source");
        // storage_source - computed: false, optional: true, required: false
        this._storageSource = new Cloudfunctions2FunctionBuildConfigSourceStorageSourceOutputReference(this, "storage_source");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repoSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.repoSource = this._repoSource?.internalValue;
        }
        if (this._storageSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageSource = this._storageSource?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repoSource.internalValue = undefined;
            this._storageSource.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repoSource.internalValue = value.repoSource;
            this._storageSource.internalValue = value.storageSource;
        }
    }
    get repoSource() {
        return this._repoSource;
    }
    putRepoSource(value) {
        this._repoSource.internalValue = value;
    }
    resetRepoSource() {
        this._repoSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repoSourceInput() {
        return this._repoSource.internalValue;
    }
    get storageSource() {
        return this._storageSource;
    }
    putStorageSource(value) {
        this._storageSource.internalValue = value;
    }
    resetStorageSource() {
        this._storageSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageSourceInput() {
        return this._storageSource.internalValue;
    }
}
exports.Cloudfunctions2FunctionBuildConfigSourceOutputReference = Cloudfunctions2FunctionBuildConfigSourceOutputReference;
_c = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionBuildConfigSourceOutputReference[_c] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionBuildConfigSourceOutputReference", version: "5.0.1" };
function cloudfunctions2FunctionBuildConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        docker_repository: cdktf.stringToTerraform(struct.dockerRepository),
        entry_point: cdktf.stringToTerraform(struct.entryPoint),
        environment_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.environmentVariables),
        runtime: cdktf.stringToTerraform(struct.runtime),
        worker_pool: cdktf.stringToTerraform(struct.workerPool),
        source: cloudfunctions2FunctionBuildConfigSourceToTerraform(struct.source),
    };
}
exports.cloudfunctions2FunctionBuildConfigToTerraform = cloudfunctions2FunctionBuildConfigToTerraform;
class Cloudfunctions2FunctionBuildConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // source - computed: false, optional: true, required: false
        this._source = new Cloudfunctions2FunctionBuildConfigSourceOutputReference(this, "source");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dockerRepository !== undefined) {
            hasAnyValues = true;
            internalValueResult.dockerRepository = this._dockerRepository;
        }
        if (this._entryPoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.entryPoint = this._entryPoint;
        }
        if (this._environmentVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.environmentVariables = this._environmentVariables;
        }
        if (this._runtime !== undefined) {
            hasAnyValues = true;
            internalValueResult.runtime = this._runtime;
        }
        if (this._workerPool !== undefined) {
            hasAnyValues = true;
            internalValueResult.workerPool = this._workerPool;
        }
        if (this._source?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.source = this._source?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dockerRepository = undefined;
            this._entryPoint = undefined;
            this._environmentVariables = undefined;
            this._runtime = undefined;
            this._workerPool = undefined;
            this._source.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dockerRepository = value.dockerRepository;
            this._entryPoint = value.entryPoint;
            this._environmentVariables = value.environmentVariables;
            this._runtime = value.runtime;
            this._workerPool = value.workerPool;
            this._source.internalValue = value.source;
        }
    }
    // build - computed: true, optional: false, required: false
    get buildAttribute() {
        return this.getStringAttribute('build');
    }
    get dockerRepository() {
        return this.getStringAttribute('docker_repository');
    }
    set dockerRepository(value) {
        this._dockerRepository = value;
    }
    resetDockerRepository() {
        this._dockerRepository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dockerRepositoryInput() {
        return this._dockerRepository;
    }
    get entryPoint() {
        return this.getStringAttribute('entry_point');
    }
    set entryPoint(value) {
        this._entryPoint = value;
    }
    resetEntryPoint() {
        this._entryPoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entryPointInput() {
        return this._entryPoint;
    }
    get environmentVariables() {
        return this.getStringMapAttribute('environment_variables');
    }
    set environmentVariables(value) {
        this._environmentVariables = value;
    }
    resetEnvironmentVariables() {
        this._environmentVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get environmentVariablesInput() {
        return this._environmentVariables;
    }
    get runtime() {
        return this.getStringAttribute('runtime');
    }
    set runtime(value) {
        this._runtime = value;
    }
    resetRuntime() {
        this._runtime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeInput() {
        return this._runtime;
    }
    get workerPool() {
        return this.getStringAttribute('worker_pool');
    }
    set workerPool(value) {
        this._workerPool = value;
    }
    resetWorkerPool() {
        this._workerPool = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workerPoolInput() {
        return this._workerPool;
    }
    get source() {
        return this._source;
    }
    putSource(value) {
        this._source.internalValue = value;
    }
    resetSource() {
        this._source.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source.internalValue;
    }
}
exports.Cloudfunctions2FunctionBuildConfigOutputReference = Cloudfunctions2FunctionBuildConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionBuildConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionBuildConfigOutputReference", version: "5.0.1" };
function cloudfunctions2FunctionEventTriggerEventFiltersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        attribute: cdktf.stringToTerraform(struct.attribute),
        operator: cdktf.stringToTerraform(struct.operator),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.cloudfunctions2FunctionEventTriggerEventFiltersToTerraform = cloudfunctions2FunctionEventTriggerEventFiltersToTerraform;
class Cloudfunctions2FunctionEventTriggerEventFiltersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._attribute !== undefined) {
            hasAnyValues = true;
            internalValueResult.attribute = this._attribute;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._attribute = undefined;
            this._operator = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._attribute = value.attribute;
            this._operator = value.operator;
            this._value = value.value;
        }
    }
    get attribute() {
        return this.getStringAttribute('attribute');
    }
    set attribute(value) {
        this._attribute = value;
    }
    // Temporarily expose input value. Use with caution.
    get attributeInput() {
        return this._attribute;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    resetOperator() {
        this._operator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.Cloudfunctions2FunctionEventTriggerEventFiltersOutputReference = Cloudfunctions2FunctionEventTriggerEventFiltersOutputReference;
_e = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionEventTriggerEventFiltersOutputReference[_e] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionEventTriggerEventFiltersOutputReference", version: "5.0.1" };
class Cloudfunctions2FunctionEventTriggerEventFiltersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Cloudfunctions2FunctionEventTriggerEventFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Cloudfunctions2FunctionEventTriggerEventFiltersList = Cloudfunctions2FunctionEventTriggerEventFiltersList;
_f = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionEventTriggerEventFiltersList[_f] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionEventTriggerEventFiltersList", version: "5.0.1" };
function cloudfunctions2FunctionEventTriggerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_type: cdktf.stringToTerraform(struct.eventType),
        pubsub_topic: cdktf.stringToTerraform(struct.pubsubTopic),
        retry_policy: cdktf.stringToTerraform(struct.retryPolicy),
        service_account_email: cdktf.stringToTerraform(struct.serviceAccountEmail),
        trigger_region: cdktf.stringToTerraform(struct.triggerRegion),
        event_filters: cdktf.listMapper(cloudfunctions2FunctionEventTriggerEventFiltersToTerraform, true)(struct.eventFilters),
    };
}
exports.cloudfunctions2FunctionEventTriggerToTerraform = cloudfunctions2FunctionEventTriggerToTerraform;
class Cloudfunctions2FunctionEventTriggerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // event_filters - computed: false, optional: true, required: false
        this._eventFilters = new Cloudfunctions2FunctionEventTriggerEventFiltersList(this, "event_filters", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventType !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventType = this._eventType;
        }
        if (this._pubsubTopic !== undefined) {
            hasAnyValues = true;
            internalValueResult.pubsubTopic = this._pubsubTopic;
        }
        if (this._retryPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryPolicy = this._retryPolicy;
        }
        if (this._serviceAccountEmail !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccountEmail = this._serviceAccountEmail;
        }
        if (this._triggerRegion !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggerRegion = this._triggerRegion;
        }
        if (this._eventFilters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventFilters = this._eventFilters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._eventType = undefined;
            this._pubsubTopic = undefined;
            this._retryPolicy = undefined;
            this._serviceAccountEmail = undefined;
            this._triggerRegion = undefined;
            this._eventFilters.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._eventType = value.eventType;
            this._pubsubTopic = value.pubsubTopic;
            this._retryPolicy = value.retryPolicy;
            this._serviceAccountEmail = value.serviceAccountEmail;
            this._triggerRegion = value.triggerRegion;
            this._eventFilters.internalValue = value.eventFilters;
        }
    }
    get eventType() {
        return this.getStringAttribute('event_type');
    }
    set eventType(value) {
        this._eventType = value;
    }
    resetEventType() {
        this._eventType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventTypeInput() {
        return this._eventType;
    }
    get pubsubTopic() {
        return this.getStringAttribute('pubsub_topic');
    }
    set pubsubTopic(value) {
        this._pubsubTopic = value;
    }
    resetPubsubTopic() {
        this._pubsubTopic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pubsubTopicInput() {
        return this._pubsubTopic;
    }
    get retryPolicy() {
        return this.getStringAttribute('retry_policy');
    }
    set retryPolicy(value) {
        this._retryPolicy = value;
    }
    resetRetryPolicy() {
        this._retryPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryPolicyInput() {
        return this._retryPolicy;
    }
    get serviceAccountEmail() {
        return this.getStringAttribute('service_account_email');
    }
    set serviceAccountEmail(value) {
        this._serviceAccountEmail = value;
    }
    resetServiceAccountEmail() {
        this._serviceAccountEmail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountEmailInput() {
        return this._serviceAccountEmail;
    }
    // trigger - computed: true, optional: false, required: false
    get trigger() {
        return this.getStringAttribute('trigger');
    }
    get triggerRegion() {
        return this.getStringAttribute('trigger_region');
    }
    set triggerRegion(value) {
        this._triggerRegion = value;
    }
    resetTriggerRegion() {
        this._triggerRegion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerRegionInput() {
        return this._triggerRegion;
    }
    get eventFilters() {
        return this._eventFilters;
    }
    putEventFilters(value) {
        this._eventFilters.internalValue = value;
    }
    resetEventFilters() {
        this._eventFilters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventFiltersInput() {
        return this._eventFilters.internalValue;
    }
}
exports.Cloudfunctions2FunctionEventTriggerOutputReference = Cloudfunctions2FunctionEventTriggerOutputReference;
_g = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionEventTriggerOutputReference[_g] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionEventTriggerOutputReference", version: "5.0.1" };
function cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        project_id: cdktf.stringToTerraform(struct.projectId),
        secret: cdktf.stringToTerraform(struct.secret),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesToTerraform = cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesToTerraform;
class Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._secret !== undefined) {
            hasAnyValues = true;
            internalValueResult.secret = this._secret;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._projectId = undefined;
            this._secret = undefined;
            this._version = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._projectId = value.projectId;
            this._secret = value.secret;
            this._version = value.version;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get secret() {
        return this.getStringAttribute('secret');
    }
    set secret(value) {
        this._secret = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretInput() {
        return this._secret;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
}
exports.Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesOutputReference = Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesOutputReference;
_h = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesOutputReference[_h] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesOutputReference", version: "5.0.1" };
class Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesList = Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesList;
_j = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesList[_j] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesList", version: "5.0.1" };
function cloudfunctions2FunctionServiceConfigSecretVolumesVersionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.cloudfunctions2FunctionServiceConfigSecretVolumesVersionsToTerraform = cloudfunctions2FunctionServiceConfigSecretVolumesVersionsToTerraform;
class Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._path = undefined;
            this._version = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._path = value.path;
            this._version = value.version;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
}
exports.Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsOutputReference = Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsOutputReference[_k] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsOutputReference", version: "5.0.1" };
class Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsList = Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsList;
_l = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsList[_l] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsList", version: "5.0.1" };
function cloudfunctions2FunctionServiceConfigSecretVolumesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mount_path: cdktf.stringToTerraform(struct.mountPath),
        project_id: cdktf.stringToTerraform(struct.projectId),
        secret: cdktf.stringToTerraform(struct.secret),
        versions: cdktf.listMapper(cloudfunctions2FunctionServiceConfigSecretVolumesVersionsToTerraform, true)(struct.versions),
    };
}
exports.cloudfunctions2FunctionServiceConfigSecretVolumesToTerraform = cloudfunctions2FunctionServiceConfigSecretVolumesToTerraform;
class Cloudfunctions2FunctionServiceConfigSecretVolumesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // versions - computed: false, optional: true, required: false
        this._versions = new Cloudfunctions2FunctionServiceConfigSecretVolumesVersionsList(this, "versions", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mountPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.mountPath = this._mountPath;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._secret !== undefined) {
            hasAnyValues = true;
            internalValueResult.secret = this._secret;
        }
        if (this._versions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.versions = this._versions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._mountPath = undefined;
            this._projectId = undefined;
            this._secret = undefined;
            this._versions.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._mountPath = value.mountPath;
            this._projectId = value.projectId;
            this._secret = value.secret;
            this._versions.internalValue = value.versions;
        }
    }
    get mountPath() {
        return this.getStringAttribute('mount_path');
    }
    set mountPath(value) {
        this._mountPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get mountPathInput() {
        return this._mountPath;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get secret() {
        return this.getStringAttribute('secret');
    }
    set secret(value) {
        this._secret = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretInput() {
        return this._secret;
    }
    get versions() {
        return this._versions;
    }
    putVersions(value) {
        this._versions.internalValue = value;
    }
    resetVersions() {
        this._versions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionsInput() {
        return this._versions.internalValue;
    }
}
exports.Cloudfunctions2FunctionServiceConfigSecretVolumesOutputReference = Cloudfunctions2FunctionServiceConfigSecretVolumesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionServiceConfigSecretVolumesOutputReference[_m] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionServiceConfigSecretVolumesOutputReference", version: "5.0.1" };
class Cloudfunctions2FunctionServiceConfigSecretVolumesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Cloudfunctions2FunctionServiceConfigSecretVolumesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Cloudfunctions2FunctionServiceConfigSecretVolumesList = Cloudfunctions2FunctionServiceConfigSecretVolumesList;
_o = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionServiceConfigSecretVolumesList[_o] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionServiceConfigSecretVolumesList", version: "5.0.1" };
function cloudfunctions2FunctionServiceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        all_traffic_on_latest_revision: cdktf.booleanToTerraform(struct.allTrafficOnLatestRevision),
        available_cpu: cdktf.stringToTerraform(struct.availableCpu),
        available_memory: cdktf.stringToTerraform(struct.availableMemory),
        environment_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.environmentVariables),
        ingress_settings: cdktf.stringToTerraform(struct.ingressSettings),
        max_instance_count: cdktf.numberToTerraform(struct.maxInstanceCount),
        max_instance_request_concurrency: cdktf.numberToTerraform(struct.maxInstanceRequestConcurrency),
        min_instance_count: cdktf.numberToTerraform(struct.minInstanceCount),
        service: cdktf.stringToTerraform(struct.service),
        service_account_email: cdktf.stringToTerraform(struct.serviceAccountEmail),
        timeout_seconds: cdktf.numberToTerraform(struct.timeoutSeconds),
        vpc_connector: cdktf.stringToTerraform(struct.vpcConnector),
        vpc_connector_egress_settings: cdktf.stringToTerraform(struct.vpcConnectorEgressSettings),
        secret_environment_variables: cdktf.listMapper(cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesToTerraform, true)(struct.secretEnvironmentVariables),
        secret_volumes: cdktf.listMapper(cloudfunctions2FunctionServiceConfigSecretVolumesToTerraform, true)(struct.secretVolumes),
    };
}
exports.cloudfunctions2FunctionServiceConfigToTerraform = cloudfunctions2FunctionServiceConfigToTerraform;
class Cloudfunctions2FunctionServiceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // secret_environment_variables - computed: false, optional: true, required: false
        this._secretEnvironmentVariables = new Cloudfunctions2FunctionServiceConfigSecretEnvironmentVariablesList(this, "secret_environment_variables", false);
        // secret_volumes - computed: false, optional: true, required: false
        this._secretVolumes = new Cloudfunctions2FunctionServiceConfigSecretVolumesList(this, "secret_volumes", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allTrafficOnLatestRevision !== undefined) {
            hasAnyValues = true;
            internalValueResult.allTrafficOnLatestRevision = this._allTrafficOnLatestRevision;
        }
        if (this._availableCpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.availableCpu = this._availableCpu;
        }
        if (this._availableMemory !== undefined) {
            hasAnyValues = true;
            internalValueResult.availableMemory = this._availableMemory;
        }
        if (this._environmentVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.environmentVariables = this._environmentVariables;
        }
        if (this._ingressSettings !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressSettings = this._ingressSettings;
        }
        if (this._maxInstanceCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxInstanceCount = this._maxInstanceCount;
        }
        if (this._maxInstanceRequestConcurrency !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxInstanceRequestConcurrency = this._maxInstanceRequestConcurrency;
        }
        if (this._minInstanceCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.minInstanceCount = this._minInstanceCount;
        }
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        if (this._serviceAccountEmail !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccountEmail = this._serviceAccountEmail;
        }
        if (this._timeoutSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeoutSeconds = this._timeoutSeconds;
        }
        if (this._vpcConnector !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcConnector = this._vpcConnector;
        }
        if (this._vpcConnectorEgressSettings !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcConnectorEgressSettings = this._vpcConnectorEgressSettings;
        }
        if (this._secretEnvironmentVariables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretEnvironmentVariables = this._secretEnvironmentVariables?.internalValue;
        }
        if (this._secretVolumes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVolumes = this._secretVolumes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allTrafficOnLatestRevision = undefined;
            this._availableCpu = undefined;
            this._availableMemory = undefined;
            this._environmentVariables = undefined;
            this._ingressSettings = undefined;
            this._maxInstanceCount = undefined;
            this._maxInstanceRequestConcurrency = undefined;
            this._minInstanceCount = undefined;
            this._service = undefined;
            this._serviceAccountEmail = undefined;
            this._timeoutSeconds = undefined;
            this._vpcConnector = undefined;
            this._vpcConnectorEgressSettings = undefined;
            this._secretEnvironmentVariables.internalValue = undefined;
            this._secretVolumes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allTrafficOnLatestRevision = value.allTrafficOnLatestRevision;
            this._availableCpu = value.availableCpu;
            this._availableMemory = value.availableMemory;
            this._environmentVariables = value.environmentVariables;
            this._ingressSettings = value.ingressSettings;
            this._maxInstanceCount = value.maxInstanceCount;
            this._maxInstanceRequestConcurrency = value.maxInstanceRequestConcurrency;
            this._minInstanceCount = value.minInstanceCount;
            this._service = value.service;
            this._serviceAccountEmail = value.serviceAccountEmail;
            this._timeoutSeconds = value.timeoutSeconds;
            this._vpcConnector = value.vpcConnector;
            this._vpcConnectorEgressSettings = value.vpcConnectorEgressSettings;
            this._secretEnvironmentVariables.internalValue = value.secretEnvironmentVariables;
            this._secretVolumes.internalValue = value.secretVolumes;
        }
    }
    get allTrafficOnLatestRevision() {
        return this.getBooleanAttribute('all_traffic_on_latest_revision');
    }
    set allTrafficOnLatestRevision(value) {
        this._allTrafficOnLatestRevision = value;
    }
    resetAllTrafficOnLatestRevision() {
        this._allTrafficOnLatestRevision = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allTrafficOnLatestRevisionInput() {
        return this._allTrafficOnLatestRevision;
    }
    get availableCpu() {
        return this.getStringAttribute('available_cpu');
    }
    set availableCpu(value) {
        this._availableCpu = value;
    }
    resetAvailableCpu() {
        this._availableCpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availableCpuInput() {
        return this._availableCpu;
    }
    get availableMemory() {
        return this.getStringAttribute('available_memory');
    }
    set availableMemory(value) {
        this._availableMemory = value;
    }
    resetAvailableMemory() {
        this._availableMemory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availableMemoryInput() {
        return this._availableMemory;
    }
    get environmentVariables() {
        return this.getStringMapAttribute('environment_variables');
    }
    set environmentVariables(value) {
        this._environmentVariables = value;
    }
    resetEnvironmentVariables() {
        this._environmentVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get environmentVariablesInput() {
        return this._environmentVariables;
    }
    // gcf_uri - computed: true, optional: false, required: false
    get gcfUri() {
        return this.getStringAttribute('gcf_uri');
    }
    get ingressSettings() {
        return this.getStringAttribute('ingress_settings');
    }
    set ingressSettings(value) {
        this._ingressSettings = value;
    }
    resetIngressSettings() {
        this._ingressSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressSettingsInput() {
        return this._ingressSettings;
    }
    get maxInstanceCount() {
        return this.getNumberAttribute('max_instance_count');
    }
    set maxInstanceCount(value) {
        this._maxInstanceCount = value;
    }
    resetMaxInstanceCount() {
        this._maxInstanceCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInstanceCountInput() {
        return this._maxInstanceCount;
    }
    get maxInstanceRequestConcurrency() {
        return this.getNumberAttribute('max_instance_request_concurrency');
    }
    set maxInstanceRequestConcurrency(value) {
        this._maxInstanceRequestConcurrency = value;
    }
    resetMaxInstanceRequestConcurrency() {
        this._maxInstanceRequestConcurrency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInstanceRequestConcurrencyInput() {
        return this._maxInstanceRequestConcurrency;
    }
    get minInstanceCount() {
        return this.getNumberAttribute('min_instance_count');
    }
    set minInstanceCount(value) {
        this._minInstanceCount = value;
    }
    resetMinInstanceCount() {
        this._minInstanceCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInstanceCountInput() {
        return this._minInstanceCount;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    resetService() {
        this._service = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
    get serviceAccountEmail() {
        return this.getStringAttribute('service_account_email');
    }
    set serviceAccountEmail(value) {
        this._serviceAccountEmail = value;
    }
    resetServiceAccountEmail() {
        this._serviceAccountEmail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountEmailInput() {
        return this._serviceAccountEmail;
    }
    get timeoutSeconds() {
        return this.getNumberAttribute('timeout_seconds');
    }
    set timeoutSeconds(value) {
        this._timeoutSeconds = value;
    }
    resetTimeoutSeconds() {
        this._timeoutSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutSecondsInput() {
        return this._timeoutSeconds;
    }
    // uri - computed: true, optional: false, required: false
    get uri() {
        return this.getStringAttribute('uri');
    }
    get vpcConnector() {
        return this.getStringAttribute('vpc_connector');
    }
    set vpcConnector(value) {
        this._vpcConnector = value;
    }
    resetVpcConnector() {
        this._vpcConnector = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcConnectorInput() {
        return this._vpcConnector;
    }
    get vpcConnectorEgressSettings() {
        return this.getStringAttribute('vpc_connector_egress_settings');
    }
    set vpcConnectorEgressSettings(value) {
        this._vpcConnectorEgressSettings = value;
    }
    resetVpcConnectorEgressSettings() {
        this._vpcConnectorEgressSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcConnectorEgressSettingsInput() {
        return this._vpcConnectorEgressSettings;
    }
    get secretEnvironmentVariables() {
        return this._secretEnvironmentVariables;
    }
    putSecretEnvironmentVariables(value) {
        this._secretEnvironmentVariables.internalValue = value;
    }
    resetSecretEnvironmentVariables() {
        this._secretEnvironmentVariables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretEnvironmentVariablesInput() {
        return this._secretEnvironmentVariables.internalValue;
    }
    get secretVolumes() {
        return this._secretVolumes;
    }
    putSecretVolumes(value) {
        this._secretVolumes.internalValue = value;
    }
    resetSecretVolumes() {
        this._secretVolumes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretVolumesInput() {
        return this._secretVolumes.internalValue;
    }
}
exports.Cloudfunctions2FunctionServiceConfigOutputReference = Cloudfunctions2FunctionServiceConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionServiceConfigOutputReference[_p] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionServiceConfigOutputReference", version: "5.0.1" };
function cloudfunctions2FunctionTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.cloudfunctions2FunctionTimeoutsToTerraform = cloudfunctions2FunctionTimeoutsToTerraform;
class Cloudfunctions2FunctionTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.Cloudfunctions2FunctionTimeoutsOutputReference = Cloudfunctions2FunctionTimeoutsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
Cloudfunctions2FunctionTimeoutsOutputReference[_q] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2FunctionTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/cloudfunctions2_function google_cloudfunctions2_function}
*/
class Cloudfunctions2Function extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/cloudfunctions2_function google_cloudfunctions2_function} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Cloudfunctions2FunctionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_cloudfunctions2_function',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // build_config - computed: false, optional: true, required: false
        this._buildConfig = new Cloudfunctions2FunctionBuildConfigOutputReference(this, "build_config");
        // event_trigger - computed: false, optional: true, required: false
        this._eventTrigger = new Cloudfunctions2FunctionEventTriggerOutputReference(this, "event_trigger");
        // service_config - computed: false, optional: true, required: false
        this._serviceConfig = new Cloudfunctions2FunctionServiceConfigOutputReference(this, "service_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new Cloudfunctions2FunctionTimeoutsOutputReference(this, "timeouts");
        this._description = config.description;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._buildConfig.internalValue = config.buildConfig;
        this._eventTrigger.internalValue = config.eventTrigger;
        this._serviceConfig.internalValue = config.serviceConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // environment - computed: true, optional: false, required: false
    get environment() {
        return this.getStringAttribute('environment');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get buildConfig() {
        return this._buildConfig;
    }
    putBuildConfig(value) {
        this._buildConfig.internalValue = value;
    }
    resetBuildConfig() {
        this._buildConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buildConfigInput() {
        return this._buildConfig.internalValue;
    }
    get eventTrigger() {
        return this._eventTrigger;
    }
    putEventTrigger(value) {
        this._eventTrigger.internalValue = value;
    }
    resetEventTrigger() {
        this._eventTrigger.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventTriggerInput() {
        return this._eventTrigger.internalValue;
    }
    get serviceConfig() {
        return this._serviceConfig;
    }
    putServiceConfig(value) {
        this._serviceConfig.internalValue = value;
    }
    resetServiceConfig() {
        this._serviceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceConfigInput() {
        return this._serviceConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            build_config: cloudfunctions2FunctionBuildConfigToTerraform(this._buildConfig.internalValue),
            event_trigger: cloudfunctions2FunctionEventTriggerToTerraform(this._eventTrigger.internalValue),
            service_config: cloudfunctions2FunctionServiceConfigToTerraform(this._serviceConfig.internalValue),
            timeouts: cloudfunctions2FunctionTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.Cloudfunctions2Function = Cloudfunctions2Function;
_r = JSII_RTTI_SYMBOL_1;
Cloudfunctions2Function[_r] = { fqn: "@cdktf/provider-google.cloudfunctions2Function.Cloudfunctions2Function", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
Cloudfunctions2Function.tfResourceType = "google_cloudfunctions2_function";
//# sourceMappingURL=data:application/json;base64,