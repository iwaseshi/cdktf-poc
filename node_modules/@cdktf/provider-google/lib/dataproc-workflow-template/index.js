"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataprocWorkflowTemplate = exports.DataprocWorkflowTemplateTimeoutsOutputReference = exports.dataprocWorkflowTemplateTimeoutsToTerraform = exports.DataprocWorkflowTemplatePlacementOutputReference = exports.dataprocWorkflowTemplatePlacementToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsList = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigList = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsList = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigList = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsList = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigList = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsList = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigToTerraform = exports.DataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigOutputReference = exports.dataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigToTerraform = exports.DataprocWorkflowTemplatePlacementClusterSelectorOutputReference = exports.dataprocWorkflowTemplatePlacementClusterSelectorToTerraform = exports.DataprocWorkflowTemplateParametersList = exports.DataprocWorkflowTemplateParametersOutputReference = exports.dataprocWorkflowTemplateParametersToTerraform = exports.DataprocWorkflowTemplateParametersValidationOutputReference = exports.dataprocWorkflowTemplateParametersValidationToTerraform = exports.DataprocWorkflowTemplateParametersValidationValuesOutputReference = exports.dataprocWorkflowTemplateParametersValidationValuesToTerraform = exports.DataprocWorkflowTemplateParametersValidationRegexOutputReference = exports.dataprocWorkflowTemplateParametersValidationRegexToTerraform = exports.DataprocWorkflowTemplateJobsList = exports.DataprocWorkflowTemplateJobsOutputReference = exports.dataprocWorkflowTemplateJobsToTerraform = exports.DataprocWorkflowTemplateJobsSparkSqlJobOutputReference = exports.dataprocWorkflowTemplateJobsSparkSqlJobToTerraform = exports.DataprocWorkflowTemplateJobsSparkSqlJobQueryListOutputReference = exports.dataprocWorkflowTemplateJobsSparkSqlJobQueryListToTerraform = exports.DataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigOutputReference = exports.dataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigToTerraform = exports.DataprocWorkflowTemplateJobsSparkRJobOutputReference = exports.dataprocWorkflowTemplateJobsSparkRJobToTerraform = exports.DataprocWorkflowTemplateJobsSparkRJobLoggingConfigOutputReference = exports.dataprocWorkflowTemplateJobsSparkRJobLoggingConfigToTerraform = exports.DataprocWorkflowTemplateJobsSparkJobOutputReference = exports.dataprocWorkflowTemplateJobsSparkJobToTerraform = exports.DataprocWorkflowTemplateJobsSparkJobLoggingConfigOutputReference = exports.dataprocWorkflowTemplateJobsSparkJobLoggingConfigToTerraform = exports.DataprocWorkflowTemplateJobsSchedulingOutputReference = exports.dataprocWorkflowTemplateJobsSchedulingToTerraform = exports.DataprocWorkflowTemplateJobsPysparkJobOutputReference = exports.dataprocWorkflowTemplateJobsPysparkJobToTerraform = exports.DataprocWorkflowTemplateJobsPysparkJobLoggingConfigOutputReference = exports.dataprocWorkflowTemplateJobsPysparkJobLoggingConfigToTerraform = exports.DataprocWorkflowTemplateJobsPrestoJobOutputReference = exports.dataprocWorkflowTemplateJobsPrestoJobToTerraform = exports.DataprocWorkflowTemplateJobsPrestoJobQueryListOutputReference = exports.dataprocWorkflowTemplateJobsPrestoJobQueryListToTerraform = exports.DataprocWorkflowTemplateJobsPrestoJobLoggingConfigOutputReference = exports.dataprocWorkflowTemplateJobsPrestoJobLoggingConfigToTerraform = exports.DataprocWorkflowTemplateJobsPigJobOutputReference = exports.dataprocWorkflowTemplateJobsPigJobToTerraform = exports.DataprocWorkflowTemplateJobsPigJobQueryListOutputReference = exports.dataprocWorkflowTemplateJobsPigJobQueryListToTerraform = exports.DataprocWorkflowTemplateJobsPigJobLoggingConfigOutputReference = exports.dataprocWorkflowTemplateJobsPigJobLoggingConfigToTerraform = exports.DataprocWorkflowTemplateJobsHiveJobOutputReference = exports.dataprocWorkflowTemplateJobsHiveJobToTerraform = exports.DataprocWorkflowTemplateJobsHiveJobQueryListOutputReference = exports.dataprocWorkflowTemplateJobsHiveJobQueryListToTerraform = exports.DataprocWorkflowTemplateJobsHadoopJobOutputReference = exports.dataprocWorkflowTemplateJobsHadoopJobToTerraform = exports.DataprocWorkflowTemplateJobsHadoopJobLoggingConfigOutputReference = exports.dataprocWorkflowTemplateJobsHadoopJobLoggingConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataprocWorkflowTemplateJobsHadoopJobLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocWorkflowTemplateJobsHadoopJobLoggingConfigToTerraform = dataprocWorkflowTemplateJobsHadoopJobLoggingConfigToTerraform;
class DataprocWorkflowTemplateJobsHadoopJobLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    resetDriverLogLevels() {
        this._driverLogLevels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocWorkflowTemplateJobsHadoopJobLoggingConfigOutputReference = DataprocWorkflowTemplateJobsHadoopJobLoggingConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsHadoopJobLoggingConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsHadoopJobLoggingConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsHadoopJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.archiveUris),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileUris),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        main_class: cdktf.stringToTerraform(struct.mainClass),
        main_jar_file_uri: cdktf.stringToTerraform(struct.mainJarFileUri),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        logging_config: dataprocWorkflowTemplateJobsHadoopJobLoggingConfigToTerraform(struct.loggingConfig),
    };
}
exports.dataprocWorkflowTemplateJobsHadoopJobToTerraform = dataprocWorkflowTemplateJobsHadoopJobToTerraform;
class DataprocWorkflowTemplateJobsHadoopJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocWorkflowTemplateJobsHadoopJobLoggingConfigOutputReference(this, "logging_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveUris = this._archiveUris;
        }
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._fileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileUris = this._fileUris;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._mainClass !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainClass = this._mainClass;
        }
        if (this._mainJarFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainJarFileUri = this._mainJarFileUri;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveUris = undefined;
            this._args = undefined;
            this._fileUris = undefined;
            this._jarFileUris = undefined;
            this._mainClass = undefined;
            this._mainJarFileUri = undefined;
            this._properties = undefined;
            this._loggingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveUris = value.archiveUris;
            this._args = value.args;
            this._fileUris = value.fileUris;
            this._jarFileUris = value.jarFileUris;
            this._mainClass = value.mainClass;
            this._mainJarFileUri = value.mainJarFileUri;
            this._properties = value.properties;
            this._loggingConfig.internalValue = value.loggingConfig;
        }
    }
    get archiveUris() {
        return this.getListAttribute('archive_uris');
    }
    set archiveUris(value) {
        this._archiveUris = value;
    }
    resetArchiveUris() {
        this._archiveUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveUrisInput() {
        return this._archiveUris;
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get fileUris() {
        return this.getListAttribute('file_uris');
    }
    set fileUris(value) {
        this._fileUris = value;
    }
    resetFileUris() {
        this._fileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileUrisInput() {
        return this._fileUris;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get mainClass() {
        return this.getStringAttribute('main_class');
    }
    set mainClass(value) {
        this._mainClass = value;
    }
    resetMainClass() {
        this._mainClass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainClassInput() {
        return this._mainClass;
    }
    get mainJarFileUri() {
        return this.getStringAttribute('main_jar_file_uri');
    }
    set mainJarFileUri(value) {
        this._mainJarFileUri = value;
    }
    resetMainJarFileUri() {
        this._mainJarFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainJarFileUriInput() {
        return this._mainJarFileUri;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
}
exports.DataprocWorkflowTemplateJobsHadoopJobOutputReference = DataprocWorkflowTemplateJobsHadoopJobOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsHadoopJobOutputReference[_b] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsHadoopJobOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsHiveJobQueryListToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        queries: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queries),
    };
}
exports.dataprocWorkflowTemplateJobsHiveJobQueryListToTerraform = dataprocWorkflowTemplateJobsHiveJobQueryListToTerraform;
class DataprocWorkflowTemplateJobsHiveJobQueryListOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._queries !== undefined) {
            hasAnyValues = true;
            internalValueResult.queries = this._queries;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._queries = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._queries = value.queries;
        }
    }
    get queries() {
        return this.getListAttribute('queries');
    }
    set queries(value) {
        this._queries = value;
    }
    // Temporarily expose input value. Use with caution.
    get queriesInput() {
        return this._queries;
    }
}
exports.DataprocWorkflowTemplateJobsHiveJobQueryListOutputReference = DataprocWorkflowTemplateJobsHiveJobQueryListOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsHiveJobQueryListOutputReference[_c] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsHiveJobQueryListOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsHiveJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        continue_on_failure: cdktf.booleanToTerraform(struct.continueOnFailure),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        query_file_uri: cdktf.stringToTerraform(struct.queryFileUri),
        script_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.scriptVariables),
        query_list: dataprocWorkflowTemplateJobsHiveJobQueryListToTerraform(struct.queryList),
    };
}
exports.dataprocWorkflowTemplateJobsHiveJobToTerraform = dataprocWorkflowTemplateJobsHiveJobToTerraform;
class DataprocWorkflowTemplateJobsHiveJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // query_list - computed: false, optional: true, required: false
        this._queryList = new DataprocWorkflowTemplateJobsHiveJobQueryListOutputReference(this, "query_list");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._continueOnFailure !== undefined) {
            hasAnyValues = true;
            internalValueResult.continueOnFailure = this._continueOnFailure;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._queryFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryFileUri = this._queryFileUri;
        }
        if (this._scriptVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.scriptVariables = this._scriptVariables;
        }
        if (this._queryList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryList = this._queryList?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._continueOnFailure = undefined;
            this._jarFileUris = undefined;
            this._properties = undefined;
            this._queryFileUri = undefined;
            this._scriptVariables = undefined;
            this._queryList.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._continueOnFailure = value.continueOnFailure;
            this._jarFileUris = value.jarFileUris;
            this._properties = value.properties;
            this._queryFileUri = value.queryFileUri;
            this._scriptVariables = value.scriptVariables;
            this._queryList.internalValue = value.queryList;
        }
    }
    get continueOnFailure() {
        return this.getBooleanAttribute('continue_on_failure');
    }
    set continueOnFailure(value) {
        this._continueOnFailure = value;
    }
    resetContinueOnFailure() {
        this._continueOnFailure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get continueOnFailureInput() {
        return this._continueOnFailure;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get queryFileUri() {
        return this.getStringAttribute('query_file_uri');
    }
    set queryFileUri(value) {
        this._queryFileUri = value;
    }
    resetQueryFileUri() {
        this._queryFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryFileUriInput() {
        return this._queryFileUri;
    }
    get scriptVariables() {
        return this.getStringMapAttribute('script_variables');
    }
    set scriptVariables(value) {
        this._scriptVariables = value;
    }
    resetScriptVariables() {
        this._scriptVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptVariablesInput() {
        return this._scriptVariables;
    }
    get queryList() {
        return this._queryList;
    }
    putQueryList(value) {
        this._queryList.internalValue = value;
    }
    resetQueryList() {
        this._queryList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryListInput() {
        return this._queryList.internalValue;
    }
}
exports.DataprocWorkflowTemplateJobsHiveJobOutputReference = DataprocWorkflowTemplateJobsHiveJobOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsHiveJobOutputReference[_d] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsHiveJobOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsPigJobLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocWorkflowTemplateJobsPigJobLoggingConfigToTerraform = dataprocWorkflowTemplateJobsPigJobLoggingConfigToTerraform;
class DataprocWorkflowTemplateJobsPigJobLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    resetDriverLogLevels() {
        this._driverLogLevels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocWorkflowTemplateJobsPigJobLoggingConfigOutputReference = DataprocWorkflowTemplateJobsPigJobLoggingConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsPigJobLoggingConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsPigJobLoggingConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsPigJobQueryListToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        queries: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queries),
    };
}
exports.dataprocWorkflowTemplateJobsPigJobQueryListToTerraform = dataprocWorkflowTemplateJobsPigJobQueryListToTerraform;
class DataprocWorkflowTemplateJobsPigJobQueryListOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._queries !== undefined) {
            hasAnyValues = true;
            internalValueResult.queries = this._queries;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._queries = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._queries = value.queries;
        }
    }
    get queries() {
        return this.getListAttribute('queries');
    }
    set queries(value) {
        this._queries = value;
    }
    // Temporarily expose input value. Use with caution.
    get queriesInput() {
        return this._queries;
    }
}
exports.DataprocWorkflowTemplateJobsPigJobQueryListOutputReference = DataprocWorkflowTemplateJobsPigJobQueryListOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsPigJobQueryListOutputReference[_f] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsPigJobQueryListOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsPigJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        continue_on_failure: cdktf.booleanToTerraform(struct.continueOnFailure),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        query_file_uri: cdktf.stringToTerraform(struct.queryFileUri),
        script_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.scriptVariables),
        logging_config: dataprocWorkflowTemplateJobsPigJobLoggingConfigToTerraform(struct.loggingConfig),
        query_list: dataprocWorkflowTemplateJobsPigJobQueryListToTerraform(struct.queryList),
    };
}
exports.dataprocWorkflowTemplateJobsPigJobToTerraform = dataprocWorkflowTemplateJobsPigJobToTerraform;
class DataprocWorkflowTemplateJobsPigJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocWorkflowTemplateJobsPigJobLoggingConfigOutputReference(this, "logging_config");
        // query_list - computed: false, optional: true, required: false
        this._queryList = new DataprocWorkflowTemplateJobsPigJobQueryListOutputReference(this, "query_list");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._continueOnFailure !== undefined) {
            hasAnyValues = true;
            internalValueResult.continueOnFailure = this._continueOnFailure;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._queryFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryFileUri = this._queryFileUri;
        }
        if (this._scriptVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.scriptVariables = this._scriptVariables;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        if (this._queryList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryList = this._queryList?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._continueOnFailure = undefined;
            this._jarFileUris = undefined;
            this._properties = undefined;
            this._queryFileUri = undefined;
            this._scriptVariables = undefined;
            this._loggingConfig.internalValue = undefined;
            this._queryList.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._continueOnFailure = value.continueOnFailure;
            this._jarFileUris = value.jarFileUris;
            this._properties = value.properties;
            this._queryFileUri = value.queryFileUri;
            this._scriptVariables = value.scriptVariables;
            this._loggingConfig.internalValue = value.loggingConfig;
            this._queryList.internalValue = value.queryList;
        }
    }
    get continueOnFailure() {
        return this.getBooleanAttribute('continue_on_failure');
    }
    set continueOnFailure(value) {
        this._continueOnFailure = value;
    }
    resetContinueOnFailure() {
        this._continueOnFailure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get continueOnFailureInput() {
        return this._continueOnFailure;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get queryFileUri() {
        return this.getStringAttribute('query_file_uri');
    }
    set queryFileUri(value) {
        this._queryFileUri = value;
    }
    resetQueryFileUri() {
        this._queryFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryFileUriInput() {
        return this._queryFileUri;
    }
    get scriptVariables() {
        return this.getStringMapAttribute('script_variables');
    }
    set scriptVariables(value) {
        this._scriptVariables = value;
    }
    resetScriptVariables() {
        this._scriptVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptVariablesInput() {
        return this._scriptVariables;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
    get queryList() {
        return this._queryList;
    }
    putQueryList(value) {
        this._queryList.internalValue = value;
    }
    resetQueryList() {
        this._queryList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryListInput() {
        return this._queryList.internalValue;
    }
}
exports.DataprocWorkflowTemplateJobsPigJobOutputReference = DataprocWorkflowTemplateJobsPigJobOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsPigJobOutputReference[_g] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsPigJobOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsPrestoJobLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocWorkflowTemplateJobsPrestoJobLoggingConfigToTerraform = dataprocWorkflowTemplateJobsPrestoJobLoggingConfigToTerraform;
class DataprocWorkflowTemplateJobsPrestoJobLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    resetDriverLogLevels() {
        this._driverLogLevels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocWorkflowTemplateJobsPrestoJobLoggingConfigOutputReference = DataprocWorkflowTemplateJobsPrestoJobLoggingConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsPrestoJobLoggingConfigOutputReference[_h] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsPrestoJobLoggingConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsPrestoJobQueryListToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        queries: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queries),
    };
}
exports.dataprocWorkflowTemplateJobsPrestoJobQueryListToTerraform = dataprocWorkflowTemplateJobsPrestoJobQueryListToTerraform;
class DataprocWorkflowTemplateJobsPrestoJobQueryListOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._queries !== undefined) {
            hasAnyValues = true;
            internalValueResult.queries = this._queries;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._queries = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._queries = value.queries;
        }
    }
    get queries() {
        return this.getListAttribute('queries');
    }
    set queries(value) {
        this._queries = value;
    }
    // Temporarily expose input value. Use with caution.
    get queriesInput() {
        return this._queries;
    }
}
exports.DataprocWorkflowTemplateJobsPrestoJobQueryListOutputReference = DataprocWorkflowTemplateJobsPrestoJobQueryListOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsPrestoJobQueryListOutputReference[_j] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsPrestoJobQueryListOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsPrestoJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.clientTags),
        continue_on_failure: cdktf.booleanToTerraform(struct.continueOnFailure),
        output_format: cdktf.stringToTerraform(struct.outputFormat),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        query_file_uri: cdktf.stringToTerraform(struct.queryFileUri),
        logging_config: dataprocWorkflowTemplateJobsPrestoJobLoggingConfigToTerraform(struct.loggingConfig),
        query_list: dataprocWorkflowTemplateJobsPrestoJobQueryListToTerraform(struct.queryList),
    };
}
exports.dataprocWorkflowTemplateJobsPrestoJobToTerraform = dataprocWorkflowTemplateJobsPrestoJobToTerraform;
class DataprocWorkflowTemplateJobsPrestoJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocWorkflowTemplateJobsPrestoJobLoggingConfigOutputReference(this, "logging_config");
        // query_list - computed: false, optional: true, required: false
        this._queryList = new DataprocWorkflowTemplateJobsPrestoJobQueryListOutputReference(this, "query_list");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientTags = this._clientTags;
        }
        if (this._continueOnFailure !== undefined) {
            hasAnyValues = true;
            internalValueResult.continueOnFailure = this._continueOnFailure;
        }
        if (this._outputFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputFormat = this._outputFormat;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._queryFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryFileUri = this._queryFileUri;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        if (this._queryList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryList = this._queryList?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientTags = undefined;
            this._continueOnFailure = undefined;
            this._outputFormat = undefined;
            this._properties = undefined;
            this._queryFileUri = undefined;
            this._loggingConfig.internalValue = undefined;
            this._queryList.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientTags = value.clientTags;
            this._continueOnFailure = value.continueOnFailure;
            this._outputFormat = value.outputFormat;
            this._properties = value.properties;
            this._queryFileUri = value.queryFileUri;
            this._loggingConfig.internalValue = value.loggingConfig;
            this._queryList.internalValue = value.queryList;
        }
    }
    get clientTags() {
        return this.getListAttribute('client_tags');
    }
    set clientTags(value) {
        this._clientTags = value;
    }
    resetClientTags() {
        this._clientTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientTagsInput() {
        return this._clientTags;
    }
    get continueOnFailure() {
        return this.getBooleanAttribute('continue_on_failure');
    }
    set continueOnFailure(value) {
        this._continueOnFailure = value;
    }
    resetContinueOnFailure() {
        this._continueOnFailure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get continueOnFailureInput() {
        return this._continueOnFailure;
    }
    get outputFormat() {
        return this.getStringAttribute('output_format');
    }
    set outputFormat(value) {
        this._outputFormat = value;
    }
    resetOutputFormat() {
        this._outputFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputFormatInput() {
        return this._outputFormat;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get queryFileUri() {
        return this.getStringAttribute('query_file_uri');
    }
    set queryFileUri(value) {
        this._queryFileUri = value;
    }
    resetQueryFileUri() {
        this._queryFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryFileUriInput() {
        return this._queryFileUri;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
    get queryList() {
        return this._queryList;
    }
    putQueryList(value) {
        this._queryList.internalValue = value;
    }
    resetQueryList() {
        this._queryList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryListInput() {
        return this._queryList.internalValue;
    }
}
exports.DataprocWorkflowTemplateJobsPrestoJobOutputReference = DataprocWorkflowTemplateJobsPrestoJobOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsPrestoJobOutputReference[_k] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsPrestoJobOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsPysparkJobLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocWorkflowTemplateJobsPysparkJobLoggingConfigToTerraform = dataprocWorkflowTemplateJobsPysparkJobLoggingConfigToTerraform;
class DataprocWorkflowTemplateJobsPysparkJobLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    resetDriverLogLevels() {
        this._driverLogLevels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocWorkflowTemplateJobsPysparkJobLoggingConfigOutputReference = DataprocWorkflowTemplateJobsPysparkJobLoggingConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsPysparkJobLoggingConfigOutputReference[_l] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsPysparkJobLoggingConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsPysparkJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.archiveUris),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileUris),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        main_python_file_uri: cdktf.stringToTerraform(struct.mainPythonFileUri),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        python_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.pythonFileUris),
        logging_config: dataprocWorkflowTemplateJobsPysparkJobLoggingConfigToTerraform(struct.loggingConfig),
    };
}
exports.dataprocWorkflowTemplateJobsPysparkJobToTerraform = dataprocWorkflowTemplateJobsPysparkJobToTerraform;
class DataprocWorkflowTemplateJobsPysparkJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocWorkflowTemplateJobsPysparkJobLoggingConfigOutputReference(this, "logging_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveUris = this._archiveUris;
        }
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._fileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileUris = this._fileUris;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._mainPythonFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainPythonFileUri = this._mainPythonFileUri;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._pythonFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.pythonFileUris = this._pythonFileUris;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveUris = undefined;
            this._args = undefined;
            this._fileUris = undefined;
            this._jarFileUris = undefined;
            this._mainPythonFileUri = undefined;
            this._properties = undefined;
            this._pythonFileUris = undefined;
            this._loggingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveUris = value.archiveUris;
            this._args = value.args;
            this._fileUris = value.fileUris;
            this._jarFileUris = value.jarFileUris;
            this._mainPythonFileUri = value.mainPythonFileUri;
            this._properties = value.properties;
            this._pythonFileUris = value.pythonFileUris;
            this._loggingConfig.internalValue = value.loggingConfig;
        }
    }
    get archiveUris() {
        return this.getListAttribute('archive_uris');
    }
    set archiveUris(value) {
        this._archiveUris = value;
    }
    resetArchiveUris() {
        this._archiveUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveUrisInput() {
        return this._archiveUris;
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get fileUris() {
        return this.getListAttribute('file_uris');
    }
    set fileUris(value) {
        this._fileUris = value;
    }
    resetFileUris() {
        this._fileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileUrisInput() {
        return this._fileUris;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get mainPythonFileUri() {
        return this.getStringAttribute('main_python_file_uri');
    }
    set mainPythonFileUri(value) {
        this._mainPythonFileUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get mainPythonFileUriInput() {
        return this._mainPythonFileUri;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get pythonFileUris() {
        return this.getListAttribute('python_file_uris');
    }
    set pythonFileUris(value) {
        this._pythonFileUris = value;
    }
    resetPythonFileUris() {
        this._pythonFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pythonFileUrisInput() {
        return this._pythonFileUris;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
}
exports.DataprocWorkflowTemplateJobsPysparkJobOutputReference = DataprocWorkflowTemplateJobsPysparkJobOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsPysparkJobOutputReference[_m] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsPysparkJobOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsSchedulingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_failures_per_hour: cdktf.numberToTerraform(struct.maxFailuresPerHour),
        max_failures_total: cdktf.numberToTerraform(struct.maxFailuresTotal),
    };
}
exports.dataprocWorkflowTemplateJobsSchedulingToTerraform = dataprocWorkflowTemplateJobsSchedulingToTerraform;
class DataprocWorkflowTemplateJobsSchedulingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxFailuresPerHour !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFailuresPerHour = this._maxFailuresPerHour;
        }
        if (this._maxFailuresTotal !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFailuresTotal = this._maxFailuresTotal;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxFailuresPerHour = undefined;
            this._maxFailuresTotal = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxFailuresPerHour = value.maxFailuresPerHour;
            this._maxFailuresTotal = value.maxFailuresTotal;
        }
    }
    get maxFailuresPerHour() {
        return this.getNumberAttribute('max_failures_per_hour');
    }
    set maxFailuresPerHour(value) {
        this._maxFailuresPerHour = value;
    }
    resetMaxFailuresPerHour() {
        this._maxFailuresPerHour = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxFailuresPerHourInput() {
        return this._maxFailuresPerHour;
    }
    get maxFailuresTotal() {
        return this.getNumberAttribute('max_failures_total');
    }
    set maxFailuresTotal(value) {
        this._maxFailuresTotal = value;
    }
    resetMaxFailuresTotal() {
        this._maxFailuresTotal = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxFailuresTotalInput() {
        return this._maxFailuresTotal;
    }
}
exports.DataprocWorkflowTemplateJobsSchedulingOutputReference = DataprocWorkflowTemplateJobsSchedulingOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsSchedulingOutputReference[_o] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsSchedulingOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsSparkJobLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocWorkflowTemplateJobsSparkJobLoggingConfigToTerraform = dataprocWorkflowTemplateJobsSparkJobLoggingConfigToTerraform;
class DataprocWorkflowTemplateJobsSparkJobLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    resetDriverLogLevels() {
        this._driverLogLevels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocWorkflowTemplateJobsSparkJobLoggingConfigOutputReference = DataprocWorkflowTemplateJobsSparkJobLoggingConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsSparkJobLoggingConfigOutputReference[_p] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsSparkJobLoggingConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsSparkJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.archiveUris),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileUris),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        main_class: cdktf.stringToTerraform(struct.mainClass),
        main_jar_file_uri: cdktf.stringToTerraform(struct.mainJarFileUri),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        logging_config: dataprocWorkflowTemplateJobsSparkJobLoggingConfigToTerraform(struct.loggingConfig),
    };
}
exports.dataprocWorkflowTemplateJobsSparkJobToTerraform = dataprocWorkflowTemplateJobsSparkJobToTerraform;
class DataprocWorkflowTemplateJobsSparkJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocWorkflowTemplateJobsSparkJobLoggingConfigOutputReference(this, "logging_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveUris = this._archiveUris;
        }
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._fileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileUris = this._fileUris;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._mainClass !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainClass = this._mainClass;
        }
        if (this._mainJarFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainJarFileUri = this._mainJarFileUri;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveUris = undefined;
            this._args = undefined;
            this._fileUris = undefined;
            this._jarFileUris = undefined;
            this._mainClass = undefined;
            this._mainJarFileUri = undefined;
            this._properties = undefined;
            this._loggingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveUris = value.archiveUris;
            this._args = value.args;
            this._fileUris = value.fileUris;
            this._jarFileUris = value.jarFileUris;
            this._mainClass = value.mainClass;
            this._mainJarFileUri = value.mainJarFileUri;
            this._properties = value.properties;
            this._loggingConfig.internalValue = value.loggingConfig;
        }
    }
    get archiveUris() {
        return this.getListAttribute('archive_uris');
    }
    set archiveUris(value) {
        this._archiveUris = value;
    }
    resetArchiveUris() {
        this._archiveUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveUrisInput() {
        return this._archiveUris;
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get fileUris() {
        return this.getListAttribute('file_uris');
    }
    set fileUris(value) {
        this._fileUris = value;
    }
    resetFileUris() {
        this._fileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileUrisInput() {
        return this._fileUris;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get mainClass() {
        return this.getStringAttribute('main_class');
    }
    set mainClass(value) {
        this._mainClass = value;
    }
    resetMainClass() {
        this._mainClass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainClassInput() {
        return this._mainClass;
    }
    get mainJarFileUri() {
        return this.getStringAttribute('main_jar_file_uri');
    }
    set mainJarFileUri(value) {
        this._mainJarFileUri = value;
    }
    resetMainJarFileUri() {
        this._mainJarFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainJarFileUriInput() {
        return this._mainJarFileUri;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
}
exports.DataprocWorkflowTemplateJobsSparkJobOutputReference = DataprocWorkflowTemplateJobsSparkJobOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsSparkJobOutputReference[_q] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsSparkJobOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsSparkRJobLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocWorkflowTemplateJobsSparkRJobLoggingConfigToTerraform = dataprocWorkflowTemplateJobsSparkRJobLoggingConfigToTerraform;
class DataprocWorkflowTemplateJobsSparkRJobLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    resetDriverLogLevels() {
        this._driverLogLevels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocWorkflowTemplateJobsSparkRJobLoggingConfigOutputReference = DataprocWorkflowTemplateJobsSparkRJobLoggingConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsSparkRJobLoggingConfigOutputReference[_r] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsSparkRJobLoggingConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsSparkRJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.archiveUris),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileUris),
        main_r_file_uri: cdktf.stringToTerraform(struct.mainRFileUri),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        logging_config: dataprocWorkflowTemplateJobsSparkRJobLoggingConfigToTerraform(struct.loggingConfig),
    };
}
exports.dataprocWorkflowTemplateJobsSparkRJobToTerraform = dataprocWorkflowTemplateJobsSparkRJobToTerraform;
class DataprocWorkflowTemplateJobsSparkRJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocWorkflowTemplateJobsSparkRJobLoggingConfigOutputReference(this, "logging_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveUris = this._archiveUris;
        }
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._fileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileUris = this._fileUris;
        }
        if (this._mainRFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainRFileUri = this._mainRFileUri;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveUris = undefined;
            this._args = undefined;
            this._fileUris = undefined;
            this._mainRFileUri = undefined;
            this._properties = undefined;
            this._loggingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveUris = value.archiveUris;
            this._args = value.args;
            this._fileUris = value.fileUris;
            this._mainRFileUri = value.mainRFileUri;
            this._properties = value.properties;
            this._loggingConfig.internalValue = value.loggingConfig;
        }
    }
    get archiveUris() {
        return this.getListAttribute('archive_uris');
    }
    set archiveUris(value) {
        this._archiveUris = value;
    }
    resetArchiveUris() {
        this._archiveUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveUrisInput() {
        return this._archiveUris;
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get fileUris() {
        return this.getListAttribute('file_uris');
    }
    set fileUris(value) {
        this._fileUris = value;
    }
    resetFileUris() {
        this._fileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileUrisInput() {
        return this._fileUris;
    }
    get mainRFileUri() {
        return this.getStringAttribute('main_r_file_uri');
    }
    set mainRFileUri(value) {
        this._mainRFileUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get mainRFileUriInput() {
        return this._mainRFileUri;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
}
exports.DataprocWorkflowTemplateJobsSparkRJobOutputReference = DataprocWorkflowTemplateJobsSparkRJobOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsSparkRJobOutputReference[_s] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsSparkRJobOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigToTerraform = dataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigToTerraform;
class DataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    resetDriverLogLevels() {
        this._driverLogLevels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigOutputReference = DataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigOutputReference[_t] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsSparkSqlJobQueryListToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        queries: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queries),
    };
}
exports.dataprocWorkflowTemplateJobsSparkSqlJobQueryListToTerraform = dataprocWorkflowTemplateJobsSparkSqlJobQueryListToTerraform;
class DataprocWorkflowTemplateJobsSparkSqlJobQueryListOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._queries !== undefined) {
            hasAnyValues = true;
            internalValueResult.queries = this._queries;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._queries = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._queries = value.queries;
        }
    }
    get queries() {
        return this.getListAttribute('queries');
    }
    set queries(value) {
        this._queries = value;
    }
    // Temporarily expose input value. Use with caution.
    get queriesInput() {
        return this._queries;
    }
}
exports.DataprocWorkflowTemplateJobsSparkSqlJobQueryListOutputReference = DataprocWorkflowTemplateJobsSparkSqlJobQueryListOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsSparkSqlJobQueryListOutputReference[_u] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsSparkSqlJobQueryListOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsSparkSqlJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        query_file_uri: cdktf.stringToTerraform(struct.queryFileUri),
        script_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.scriptVariables),
        logging_config: dataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigToTerraform(struct.loggingConfig),
        query_list: dataprocWorkflowTemplateJobsSparkSqlJobQueryListToTerraform(struct.queryList),
    };
}
exports.dataprocWorkflowTemplateJobsSparkSqlJobToTerraform = dataprocWorkflowTemplateJobsSparkSqlJobToTerraform;
class DataprocWorkflowTemplateJobsSparkSqlJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocWorkflowTemplateJobsSparkSqlJobLoggingConfigOutputReference(this, "logging_config");
        // query_list - computed: false, optional: true, required: false
        this._queryList = new DataprocWorkflowTemplateJobsSparkSqlJobQueryListOutputReference(this, "query_list");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._queryFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryFileUri = this._queryFileUri;
        }
        if (this._scriptVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.scriptVariables = this._scriptVariables;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        if (this._queryList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryList = this._queryList?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._jarFileUris = undefined;
            this._properties = undefined;
            this._queryFileUri = undefined;
            this._scriptVariables = undefined;
            this._loggingConfig.internalValue = undefined;
            this._queryList.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._jarFileUris = value.jarFileUris;
            this._properties = value.properties;
            this._queryFileUri = value.queryFileUri;
            this._scriptVariables = value.scriptVariables;
            this._loggingConfig.internalValue = value.loggingConfig;
            this._queryList.internalValue = value.queryList;
        }
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get queryFileUri() {
        return this.getStringAttribute('query_file_uri');
    }
    set queryFileUri(value) {
        this._queryFileUri = value;
    }
    resetQueryFileUri() {
        this._queryFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryFileUriInput() {
        return this._queryFileUri;
    }
    get scriptVariables() {
        return this.getStringMapAttribute('script_variables');
    }
    set scriptVariables(value) {
        this._scriptVariables = value;
    }
    resetScriptVariables() {
        this._scriptVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptVariablesInput() {
        return this._scriptVariables;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
    get queryList() {
        return this._queryList;
    }
    putQueryList(value) {
        this._queryList.internalValue = value;
    }
    resetQueryList() {
        this._queryList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryListInput() {
        return this._queryList.internalValue;
    }
}
exports.DataprocWorkflowTemplateJobsSparkSqlJobOutputReference = DataprocWorkflowTemplateJobsSparkSqlJobOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsSparkSqlJobOutputReference[_v] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsSparkSqlJobOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateJobsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        prerequisite_step_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.prerequisiteStepIds),
        step_id: cdktf.stringToTerraform(struct.stepId),
        hadoop_job: dataprocWorkflowTemplateJobsHadoopJobToTerraform(struct.hadoopJob),
        hive_job: dataprocWorkflowTemplateJobsHiveJobToTerraform(struct.hiveJob),
        pig_job: dataprocWorkflowTemplateJobsPigJobToTerraform(struct.pigJob),
        presto_job: dataprocWorkflowTemplateJobsPrestoJobToTerraform(struct.prestoJob),
        pyspark_job: dataprocWorkflowTemplateJobsPysparkJobToTerraform(struct.pysparkJob),
        scheduling: dataprocWorkflowTemplateJobsSchedulingToTerraform(struct.scheduling),
        spark_job: dataprocWorkflowTemplateJobsSparkJobToTerraform(struct.sparkJob),
        spark_r_job: dataprocWorkflowTemplateJobsSparkRJobToTerraform(struct.sparkRJob),
        spark_sql_job: dataprocWorkflowTemplateJobsSparkSqlJobToTerraform(struct.sparkSqlJob),
    };
}
exports.dataprocWorkflowTemplateJobsToTerraform = dataprocWorkflowTemplateJobsToTerraform;
class DataprocWorkflowTemplateJobsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // hadoop_job - computed: false, optional: true, required: false
        this._hadoopJob = new DataprocWorkflowTemplateJobsHadoopJobOutputReference(this, "hadoop_job");
        // hive_job - computed: false, optional: true, required: false
        this._hiveJob = new DataprocWorkflowTemplateJobsHiveJobOutputReference(this, "hive_job");
        // pig_job - computed: false, optional: true, required: false
        this._pigJob = new DataprocWorkflowTemplateJobsPigJobOutputReference(this, "pig_job");
        // presto_job - computed: false, optional: true, required: false
        this._prestoJob = new DataprocWorkflowTemplateJobsPrestoJobOutputReference(this, "presto_job");
        // pyspark_job - computed: false, optional: true, required: false
        this._pysparkJob = new DataprocWorkflowTemplateJobsPysparkJobOutputReference(this, "pyspark_job");
        // scheduling - computed: false, optional: true, required: false
        this._scheduling = new DataprocWorkflowTemplateJobsSchedulingOutputReference(this, "scheduling");
        // spark_job - computed: false, optional: true, required: false
        this._sparkJob = new DataprocWorkflowTemplateJobsSparkJobOutputReference(this, "spark_job");
        // spark_r_job - computed: false, optional: true, required: false
        this._sparkRJob = new DataprocWorkflowTemplateJobsSparkRJobOutputReference(this, "spark_r_job");
        // spark_sql_job - computed: false, optional: true, required: false
        this._sparkSqlJob = new DataprocWorkflowTemplateJobsSparkSqlJobOutputReference(this, "spark_sql_job");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._prerequisiteStepIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.prerequisiteStepIds = this._prerequisiteStepIds;
        }
        if (this._stepId !== undefined) {
            hasAnyValues = true;
            internalValueResult.stepId = this._stepId;
        }
        if (this._hadoopJob?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hadoopJob = this._hadoopJob?.internalValue;
        }
        if (this._hiveJob?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hiveJob = this._hiveJob?.internalValue;
        }
        if (this._pigJob?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pigJob = this._pigJob?.internalValue;
        }
        if (this._prestoJob?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.prestoJob = this._prestoJob?.internalValue;
        }
        if (this._pysparkJob?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pysparkJob = this._pysparkJob?.internalValue;
        }
        if (this._scheduling?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduling = this._scheduling?.internalValue;
        }
        if (this._sparkJob?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparkJob = this._sparkJob?.internalValue;
        }
        if (this._sparkRJob?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparkRJob = this._sparkRJob?.internalValue;
        }
        if (this._sparkSqlJob?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparkSqlJob = this._sparkSqlJob?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._labels = undefined;
            this._prerequisiteStepIds = undefined;
            this._stepId = undefined;
            this._hadoopJob.internalValue = undefined;
            this._hiveJob.internalValue = undefined;
            this._pigJob.internalValue = undefined;
            this._prestoJob.internalValue = undefined;
            this._pysparkJob.internalValue = undefined;
            this._scheduling.internalValue = undefined;
            this._sparkJob.internalValue = undefined;
            this._sparkRJob.internalValue = undefined;
            this._sparkSqlJob.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._labels = value.labels;
            this._prerequisiteStepIds = value.prerequisiteStepIds;
            this._stepId = value.stepId;
            this._hadoopJob.internalValue = value.hadoopJob;
            this._hiveJob.internalValue = value.hiveJob;
            this._pigJob.internalValue = value.pigJob;
            this._prestoJob.internalValue = value.prestoJob;
            this._pysparkJob.internalValue = value.pysparkJob;
            this._scheduling.internalValue = value.scheduling;
            this._sparkJob.internalValue = value.sparkJob;
            this._sparkRJob.internalValue = value.sparkRJob;
            this._sparkSqlJob.internalValue = value.sparkSqlJob;
        }
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get prerequisiteStepIds() {
        return this.getListAttribute('prerequisite_step_ids');
    }
    set prerequisiteStepIds(value) {
        this._prerequisiteStepIds = value;
    }
    resetPrerequisiteStepIds() {
        this._prerequisiteStepIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prerequisiteStepIdsInput() {
        return this._prerequisiteStepIds;
    }
    get stepId() {
        return this.getStringAttribute('step_id');
    }
    set stepId(value) {
        this._stepId = value;
    }
    // Temporarily expose input value. Use with caution.
    get stepIdInput() {
        return this._stepId;
    }
    get hadoopJob() {
        return this._hadoopJob;
    }
    putHadoopJob(value) {
        this._hadoopJob.internalValue = value;
    }
    resetHadoopJob() {
        this._hadoopJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hadoopJobInput() {
        return this._hadoopJob.internalValue;
    }
    get hiveJob() {
        return this._hiveJob;
    }
    putHiveJob(value) {
        this._hiveJob.internalValue = value;
    }
    resetHiveJob() {
        this._hiveJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hiveJobInput() {
        return this._hiveJob.internalValue;
    }
    get pigJob() {
        return this._pigJob;
    }
    putPigJob(value) {
        this._pigJob.internalValue = value;
    }
    resetPigJob() {
        this._pigJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pigJobInput() {
        return this._pigJob.internalValue;
    }
    get prestoJob() {
        return this._prestoJob;
    }
    putPrestoJob(value) {
        this._prestoJob.internalValue = value;
    }
    resetPrestoJob() {
        this._prestoJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prestoJobInput() {
        return this._prestoJob.internalValue;
    }
    get pysparkJob() {
        return this._pysparkJob;
    }
    putPysparkJob(value) {
        this._pysparkJob.internalValue = value;
    }
    resetPysparkJob() {
        this._pysparkJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pysparkJobInput() {
        return this._pysparkJob.internalValue;
    }
    get scheduling() {
        return this._scheduling;
    }
    putScheduling(value) {
        this._scheduling.internalValue = value;
    }
    resetScheduling() {
        this._scheduling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schedulingInput() {
        return this._scheduling.internalValue;
    }
    get sparkJob() {
        return this._sparkJob;
    }
    putSparkJob(value) {
        this._sparkJob.internalValue = value;
    }
    resetSparkJob() {
        this._sparkJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkJobInput() {
        return this._sparkJob.internalValue;
    }
    get sparkRJob() {
        return this._sparkRJob;
    }
    putSparkRJob(value) {
        this._sparkRJob.internalValue = value;
    }
    resetSparkRJob() {
        this._sparkRJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkRJobInput() {
        return this._sparkRJob.internalValue;
    }
    get sparkSqlJob() {
        return this._sparkSqlJob;
    }
    putSparkSqlJob(value) {
        this._sparkSqlJob.internalValue = value;
    }
    resetSparkSqlJob() {
        this._sparkSqlJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkSqlJobInput() {
        return this._sparkSqlJob.internalValue;
    }
}
exports.DataprocWorkflowTemplateJobsOutputReference = DataprocWorkflowTemplateJobsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsOutputReference[_w] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsOutputReference", version: "5.0.1" };
class DataprocWorkflowTemplateJobsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocWorkflowTemplateJobsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocWorkflowTemplateJobsList = DataprocWorkflowTemplateJobsList;
_x = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateJobsList[_x] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateJobsList", version: "5.0.1" };
function dataprocWorkflowTemplateParametersValidationRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        regexes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.regexes),
    };
}
exports.dataprocWorkflowTemplateParametersValidationRegexToTerraform = dataprocWorkflowTemplateParametersValidationRegexToTerraform;
class DataprocWorkflowTemplateParametersValidationRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._regexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.regexes = this._regexes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._regexes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._regexes = value.regexes;
        }
    }
    get regexes() {
        return this.getListAttribute('regexes');
    }
    set regexes(value) {
        this._regexes = value;
    }
    // Temporarily expose input value. Use with caution.
    get regexesInput() {
        return this._regexes;
    }
}
exports.DataprocWorkflowTemplateParametersValidationRegexOutputReference = DataprocWorkflowTemplateParametersValidationRegexOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateParametersValidationRegexOutputReference[_y] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateParametersValidationRegexOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateParametersValidationValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataprocWorkflowTemplateParametersValidationValuesToTerraform = dataprocWorkflowTemplateParametersValidationValuesToTerraform;
class DataprocWorkflowTemplateParametersValidationValuesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._values = value.values;
        }
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataprocWorkflowTemplateParametersValidationValuesOutputReference = DataprocWorkflowTemplateParametersValidationValuesOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateParametersValidationValuesOutputReference[_z] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateParametersValidationValuesOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateParametersValidationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        regex: dataprocWorkflowTemplateParametersValidationRegexToTerraform(struct.regex),
        values: dataprocWorkflowTemplateParametersValidationValuesToTerraform(struct.values),
    };
}
exports.dataprocWorkflowTemplateParametersValidationToTerraform = dataprocWorkflowTemplateParametersValidationToTerraform;
class DataprocWorkflowTemplateParametersValidationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // regex - computed: false, optional: true, required: false
        this._regex = new DataprocWorkflowTemplateParametersValidationRegexOutputReference(this, "regex");
        // values - computed: false, optional: true, required: false
        this._values = new DataprocWorkflowTemplateParametersValidationValuesOutputReference(this, "values");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._regex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.regex = this._regex?.internalValue;
        }
        if (this._values?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._regex.internalValue = undefined;
            this._values.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._regex.internalValue = value.regex;
            this._values.internalValue = value.values;
        }
    }
    get regex() {
        return this._regex;
    }
    putRegex(value) {
        this._regex.internalValue = value;
    }
    resetRegex() {
        this._regex.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexInput() {
        return this._regex.internalValue;
    }
    get values() {
        return this._values;
    }
    putValues(value) {
        this._values.internalValue = value;
    }
    resetValues() {
        this._values.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values.internalValue;
    }
}
exports.DataprocWorkflowTemplateParametersValidationOutputReference = DataprocWorkflowTemplateParametersValidationOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateParametersValidationOutputReference[_0] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateParametersValidationOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        fields: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fields),
        name: cdktf.stringToTerraform(struct.name),
        validation: dataprocWorkflowTemplateParametersValidationToTerraform(struct.validation),
    };
}
exports.dataprocWorkflowTemplateParametersToTerraform = dataprocWorkflowTemplateParametersToTerraform;
class DataprocWorkflowTemplateParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // validation - computed: false, optional: true, required: false
        this._validation = new DataprocWorkflowTemplateParametersValidationOutputReference(this, "validation");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._fields !== undefined) {
            hasAnyValues = true;
            internalValueResult.fields = this._fields;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._validation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.validation = this._validation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._fields = undefined;
            this._name = undefined;
            this._validation.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._fields = value.fields;
            this._name = value.name;
            this._validation.internalValue = value.validation;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get fields() {
        return this.getListAttribute('fields');
    }
    set fields(value) {
        this._fields = value;
    }
    // Temporarily expose input value. Use with caution.
    get fieldsInput() {
        return this._fields;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get validation() {
        return this._validation;
    }
    putValidation(value) {
        this._validation.internalValue = value;
    }
    resetValidation() {
        this._validation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validationInput() {
        return this._validation.internalValue;
    }
}
exports.DataprocWorkflowTemplateParametersOutputReference = DataprocWorkflowTemplateParametersOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateParametersOutputReference[_1] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateParametersOutputReference", version: "5.0.1" };
class DataprocWorkflowTemplateParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocWorkflowTemplateParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocWorkflowTemplateParametersList = DataprocWorkflowTemplateParametersList;
_2 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateParametersList[_2] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateParametersList", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementClusterSelectorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.clusterLabels),
        zone: cdktf.stringToTerraform(struct.zone),
    };
}
exports.dataprocWorkflowTemplatePlacementClusterSelectorToTerraform = dataprocWorkflowTemplatePlacementClusterSelectorToTerraform;
class DataprocWorkflowTemplatePlacementClusterSelectorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterLabels !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterLabels = this._clusterLabels;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterLabels = undefined;
            this._zone = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterLabels = value.clusterLabels;
            this._zone = value.zone;
        }
    }
    get clusterLabels() {
        return this.getStringMapAttribute('cluster_labels');
    }
    set clusterLabels(value) {
        this._clusterLabels = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterLabelsInput() {
        return this._clusterLabels;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
}
exports.DataprocWorkflowTemplatePlacementClusterSelectorOutputReference = DataprocWorkflowTemplatePlacementClusterSelectorOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementClusterSelectorOutputReference[_3] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementClusterSelectorOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        policy: cdktf.stringToTerraform(struct.policy),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._policy !== undefined) {
            hasAnyValues = true;
            internalValueResult.policy = this._policy;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._policy = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._policy = value.policy;
        }
    }
    get policy() {
        return this.getStringAttribute('policy');
    }
    set policy(value) {
        this._policy = value;
    }
    resetPolicy() {
        this._policy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyInput() {
        return this._policy;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigOutputReference[_4] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gce_pd_kms_key_name: cdktf.stringToTerraform(struct.gcePdKmsKeyName),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gcePdKmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcePdKmsKeyName = this._gcePdKmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gcePdKmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gcePdKmsKeyName = value.gcePdKmsKeyName;
        }
    }
    get gcePdKmsKeyName() {
        return this.getStringAttribute('gce_pd_kms_key_name');
    }
    set gcePdKmsKeyName(value) {
        this._gcePdKmsKeyName = value;
    }
    resetGcePdKmsKeyName() {
        this._gcePdKmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcePdKmsKeyNameInput() {
        return this._gcePdKmsKeyName;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigOutputReference[_5] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_http_port_access: cdktf.booleanToTerraform(struct.enableHttpPortAccess),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // http_ports - computed: true, optional: false, required: false
        this._httpPorts = new cdktf.StringMap(this, "http_ports");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableHttpPortAccess !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableHttpPortAccess = this._enableHttpPortAccess;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableHttpPortAccess = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableHttpPortAccess = value.enableHttpPortAccess;
        }
    }
    get enableHttpPortAccess() {
        return this.getBooleanAttribute('enable_http_port_access');
    }
    set enableHttpPortAccess(value) {
        this._enableHttpPortAccess = value;
    }
    resetEnableHttpPortAccess() {
        this._enableHttpPortAccess = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableHttpPortAccessInput() {
        return this._enableHttpPortAccess;
    }
    get httpPorts() {
        return this._httpPorts;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigOutputReference[_6] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        node_group: cdktf.stringToTerraform(struct.nodeGroup),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nodeGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeGroup = this._nodeGroup;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nodeGroup = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nodeGroup = value.nodeGroup;
        }
    }
    get nodeGroup() {
        return this.getStringAttribute('node_group');
    }
    set nodeGroup(value) {
        this._nodeGroup = value;
    }
    // Temporarily expose input value. Use with caution.
    get nodeGroupInput() {
        return this._nodeGroup;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityOutputReference[_7] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        consume_reservation_type: cdktf.stringToTerraform(struct.consumeReservationType),
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._consumeReservationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.consumeReservationType = this._consumeReservationType;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._consumeReservationType = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._consumeReservationType = value.consumeReservationType;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get consumeReservationType() {
        return this.getStringAttribute('consume_reservation_type');
    }
    set consumeReservationType(value) {
        this._consumeReservationType = value;
    }
    resetConsumeReservationType() {
        this._consumeReservationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get consumeReservationTypeInput() {
        return this._consumeReservationType;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityOutputReference[_8] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_integrity_monitoring: cdktf.booleanToTerraform(struct.enableIntegrityMonitoring),
        enable_secure_boot: cdktf.booleanToTerraform(struct.enableSecureBoot),
        enable_vtpm: cdktf.booleanToTerraform(struct.enableVtpm),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableIntegrityMonitoring !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableIntegrityMonitoring = this._enableIntegrityMonitoring;
        }
        if (this._enableSecureBoot !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableSecureBoot = this._enableSecureBoot;
        }
        if (this._enableVtpm !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableVtpm = this._enableVtpm;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableIntegrityMonitoring = undefined;
            this._enableSecureBoot = undefined;
            this._enableVtpm = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableIntegrityMonitoring = value.enableIntegrityMonitoring;
            this._enableSecureBoot = value.enableSecureBoot;
            this._enableVtpm = value.enableVtpm;
        }
    }
    get enableIntegrityMonitoring() {
        return this.getBooleanAttribute('enable_integrity_monitoring');
    }
    set enableIntegrityMonitoring(value) {
        this._enableIntegrityMonitoring = value;
    }
    resetEnableIntegrityMonitoring() {
        this._enableIntegrityMonitoring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIntegrityMonitoringInput() {
        return this._enableIntegrityMonitoring;
    }
    get enableSecureBoot() {
        return this.getBooleanAttribute('enable_secure_boot');
    }
    set enableSecureBoot(value) {
        this._enableSecureBoot = value;
    }
    resetEnableSecureBoot() {
        this._enableSecureBoot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableSecureBootInput() {
        return this._enableSecureBoot;
    }
    get enableVtpm() {
        return this.getBooleanAttribute('enable_vtpm');
    }
    set enableVtpm(value) {
        this._enableVtpm = value;
    }
    resetEnableVtpm() {
        this._enableVtpm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableVtpmInput() {
        return this._enableVtpm;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference[_9] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        internal_ip_only: cdktf.booleanToTerraform(struct.internalIpOnly),
        metadata: cdktf.hashMapper(cdktf.stringToTerraform)(struct.metadata),
        network: cdktf.stringToTerraform(struct.network),
        private_ipv6_google_access: cdktf.stringToTerraform(struct.privateIpv6GoogleAccess),
        service_account: cdktf.stringToTerraform(struct.serviceAccount),
        service_account_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.serviceAccountScopes),
        subnetwork: cdktf.stringToTerraform(struct.subnetwork),
        tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.tags),
        zone: cdktf.stringToTerraform(struct.zone),
        node_group_affinity: dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityToTerraform(struct.nodeGroupAffinity),
        reservation_affinity: dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityToTerraform(struct.reservationAffinity),
        shielded_instance_config: dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform(struct.shieldedInstanceConfig),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // node_group_affinity - computed: false, optional: true, required: false
        this._nodeGroupAffinity = new DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigNodeGroupAffinityOutputReference(this, "node_group_affinity");
        // reservation_affinity - computed: false, optional: true, required: false
        this._reservationAffinity = new DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigReservationAffinityOutputReference(this, "reservation_affinity");
        // shielded_instance_config - computed: false, optional: true, required: false
        this._shieldedInstanceConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference(this, "shielded_instance_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._internalIpOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.internalIpOnly = this._internalIpOnly;
        }
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        if (this._network !== undefined) {
            hasAnyValues = true;
            internalValueResult.network = this._network;
        }
        if (this._privateIpv6GoogleAccess !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateIpv6GoogleAccess = this._privateIpv6GoogleAccess;
        }
        if (this._serviceAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccount = this._serviceAccount;
        }
        if (this._serviceAccountScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccountScopes = this._serviceAccountScopes;
        }
        if (this._subnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetwork = this._subnetwork;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        if (this._nodeGroupAffinity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeGroupAffinity = this._nodeGroupAffinity?.internalValue;
        }
        if (this._reservationAffinity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.reservationAffinity = this._reservationAffinity?.internalValue;
        }
        if (this._shieldedInstanceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.shieldedInstanceConfig = this._shieldedInstanceConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._internalIpOnly = undefined;
            this._metadata = undefined;
            this._network = undefined;
            this._privateIpv6GoogleAccess = undefined;
            this._serviceAccount = undefined;
            this._serviceAccountScopes = undefined;
            this._subnetwork = undefined;
            this._tags = undefined;
            this._zone = undefined;
            this._nodeGroupAffinity.internalValue = undefined;
            this._reservationAffinity.internalValue = undefined;
            this._shieldedInstanceConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._internalIpOnly = value.internalIpOnly;
            this._metadata = value.metadata;
            this._network = value.network;
            this._privateIpv6GoogleAccess = value.privateIpv6GoogleAccess;
            this._serviceAccount = value.serviceAccount;
            this._serviceAccountScopes = value.serviceAccountScopes;
            this._subnetwork = value.subnetwork;
            this._tags = value.tags;
            this._zone = value.zone;
            this._nodeGroupAffinity.internalValue = value.nodeGroupAffinity;
            this._reservationAffinity.internalValue = value.reservationAffinity;
            this._shieldedInstanceConfig.internalValue = value.shieldedInstanceConfig;
        }
    }
    get internalIpOnly() {
        return this.getBooleanAttribute('internal_ip_only');
    }
    set internalIpOnly(value) {
        this._internalIpOnly = value;
    }
    resetInternalIpOnly() {
        this._internalIpOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get internalIpOnlyInput() {
        return this._internalIpOnly;
    }
    get metadata() {
        return this.getStringMapAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
    get network() {
        return this.getStringAttribute('network');
    }
    set network(value) {
        this._network = value;
    }
    resetNetwork() {
        this._network = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network;
    }
    get privateIpv6GoogleAccess() {
        return this.getStringAttribute('private_ipv6_google_access');
    }
    set privateIpv6GoogleAccess(value) {
        this._privateIpv6GoogleAccess = value;
    }
    resetPrivateIpv6GoogleAccess() {
        this._privateIpv6GoogleAccess = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateIpv6GoogleAccessInput() {
        return this._privateIpv6GoogleAccess;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get serviceAccountScopes() {
        return this.getListAttribute('service_account_scopes');
    }
    set serviceAccountScopes(value) {
        this._serviceAccountScopes = value;
    }
    resetServiceAccountScopes() {
        this._serviceAccountScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountScopesInput() {
        return this._serviceAccountScopes;
    }
    get subnetwork() {
        return this.getStringAttribute('subnetwork');
    }
    set subnetwork(value) {
        this._subnetwork = value;
    }
    resetSubnetwork() {
        this._subnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkInput() {
        return this._subnetwork;
    }
    get tags() {
        return cdktf.Fn.tolist(this.getListAttribute('tags'));
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
    get nodeGroupAffinity() {
        return this._nodeGroupAffinity;
    }
    putNodeGroupAffinity(value) {
        this._nodeGroupAffinity.internalValue = value;
    }
    resetNodeGroupAffinity() {
        this._nodeGroupAffinity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeGroupAffinityInput() {
        return this._nodeGroupAffinity.internalValue;
    }
    get reservationAffinity() {
        return this._reservationAffinity;
    }
    putReservationAffinity(value) {
        this._reservationAffinity.internalValue = value;
    }
    resetReservationAffinity() {
        this._reservationAffinity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reservationAffinityInput() {
        return this._reservationAffinity.internalValue;
    }
    get shieldedInstanceConfig() {
        return this._shieldedInstanceConfig;
    }
    putShieldedInstanceConfig(value) {
        this._shieldedInstanceConfig.internalValue = value;
    }
    resetShieldedInstanceConfig() {
        this._shieldedInstanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shieldedInstanceConfigInput() {
        return this._shieldedInstanceConfig.internalValue;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigOutputReference[_10] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        executable_file: cdktf.stringToTerraform(struct.executableFile),
        execution_timeout: cdktf.stringToTerraform(struct.executionTimeout),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._executableFile !== undefined) {
            hasAnyValues = true;
            internalValueResult.executableFile = this._executableFile;
        }
        if (this._executionTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.executionTimeout = this._executionTimeout;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._executableFile = undefined;
            this._executionTimeout = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._executableFile = value.executableFile;
            this._executionTimeout = value.executionTimeout;
        }
    }
    get executableFile() {
        return this.getStringAttribute('executable_file');
    }
    set executableFile(value) {
        this._executableFile = value;
    }
    resetExecutableFile() {
        this._executableFile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get executableFileInput() {
        return this._executableFile;
    }
    get executionTimeout() {
        return this.getStringAttribute('execution_timeout');
    }
    set executionTimeout(value) {
        this._executionTimeout = value;
    }
    resetExecutionTimeout() {
        this._executionTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get executionTimeoutInput() {
        return this._executionTimeout;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsOutputReference[_11] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsOutputReference", version: "5.0.1" };
class DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsList = DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsList;
_12 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsList[_12] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsList", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_delete_time: cdktf.stringToTerraform(struct.autoDeleteTime),
        auto_delete_ttl: cdktf.stringToTerraform(struct.autoDeleteTtl),
        idle_delete_ttl: cdktf.stringToTerraform(struct.idleDeleteTtl),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoDeleteTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoDeleteTime = this._autoDeleteTime;
        }
        if (this._autoDeleteTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoDeleteTtl = this._autoDeleteTtl;
        }
        if (this._idleDeleteTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.idleDeleteTtl = this._idleDeleteTtl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoDeleteTime = undefined;
            this._autoDeleteTtl = undefined;
            this._idleDeleteTtl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoDeleteTime = value.autoDeleteTime;
            this._autoDeleteTtl = value.autoDeleteTtl;
            this._idleDeleteTtl = value.idleDeleteTtl;
        }
    }
    get autoDeleteTime() {
        return this.getStringAttribute('auto_delete_time');
    }
    set autoDeleteTime(value) {
        this._autoDeleteTime = value;
    }
    resetAutoDeleteTime() {
        this._autoDeleteTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoDeleteTimeInput() {
        return this._autoDeleteTime;
    }
    get autoDeleteTtl() {
        return this.getStringAttribute('auto_delete_ttl');
    }
    set autoDeleteTtl(value) {
        this._autoDeleteTtl = value;
    }
    resetAutoDeleteTtl() {
        this._autoDeleteTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoDeleteTtlInput() {
        return this._autoDeleteTtl;
    }
    get idleDeleteTtl() {
        return this.getStringAttribute('idle_delete_ttl');
    }
    set idleDeleteTtl(value) {
        this._idleDeleteTtl = value;
    }
    resetIdleDeleteTtl() {
        this._idleDeleteTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleDeleteTtlInput() {
        return this._idleDeleteTtl;
    }
    // idle_start_time - computed: true, optional: false, required: false
    get idleStartTime() {
        return this.getStringAttribute('idle_start_time');
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigOutputReference[_13] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // instance_group_manager_name - computed: true, optional: false, required: false
    get instanceGroupManagerName() {
        return this.getStringAttribute('instance_group_manager_name');
    }
    // instance_template_name - computed: true, optional: false, required: false
    get instanceTemplateName() {
        return this.getStringAttribute('instance_template_name');
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigOutputReference[_14] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigOutputReference", version: "5.0.1" };
class DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigList = DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigList;
_15 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigList[_15] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigList", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_count: cdktf.numberToTerraform(struct.acceleratorCount),
        accelerator_type: cdktf.stringToTerraform(struct.acceleratorType),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorCount = this._acceleratorCount;
        }
        if (this._acceleratorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorType = this._acceleratorType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._acceleratorCount = undefined;
            this._acceleratorType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._acceleratorCount = value.acceleratorCount;
            this._acceleratorType = value.acceleratorType;
        }
    }
    get acceleratorCount() {
        return this.getNumberAttribute('accelerator_count');
    }
    set acceleratorCount(value) {
        this._acceleratorCount = value;
    }
    resetAcceleratorCount() {
        this._acceleratorCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorCountInput() {
        return this._acceleratorCount;
    }
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    set acceleratorType(value) {
        this._acceleratorType = value;
    }
    resetAcceleratorType() {
        this._acceleratorType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypeInput() {
        return this._acceleratorType;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsOutputReference[_16] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsOutputReference", version: "5.0.1" };
class DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsList = DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsList;
_17 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsList[_17] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsList", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_size_gb: cdktf.numberToTerraform(struct.bootDiskSizeGb),
        boot_disk_type: cdktf.stringToTerraform(struct.bootDiskType),
        num_local_ssds: cdktf.numberToTerraform(struct.numLocalSsds),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskSizeGb = this._bootDiskSizeGb;
        }
        if (this._bootDiskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskType = this._bootDiskType;
        }
        if (this._numLocalSsds !== undefined) {
            hasAnyValues = true;
            internalValueResult.numLocalSsds = this._numLocalSsds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskSizeGb = undefined;
            this._bootDiskType = undefined;
            this._numLocalSsds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskSizeGb = value.bootDiskSizeGb;
            this._bootDiskType = value.bootDiskType;
            this._numLocalSsds = value.numLocalSsds;
        }
    }
    get bootDiskSizeGb() {
        return this.getNumberAttribute('boot_disk_size_gb');
    }
    set bootDiskSizeGb(value) {
        this._bootDiskSizeGb = value;
    }
    resetBootDiskSizeGb() {
        this._bootDiskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskSizeGbInput() {
        return this._bootDiskSizeGb;
    }
    get bootDiskType() {
        return this.getStringAttribute('boot_disk_type');
    }
    set bootDiskType(value) {
        this._bootDiskType = value;
    }
    resetBootDiskType() {
        this._bootDiskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskTypeInput() {
        return this._bootDiskType;
    }
    get numLocalSsds() {
        return this.getNumberAttribute('num_local_ssds');
    }
    set numLocalSsds(value) {
        this._numLocalSsds = value;
    }
    resetNumLocalSsds() {
        this._numLocalSsds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numLocalSsdsInput() {
        return this._numLocalSsds;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigOutputReference[_18] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image: cdktf.stringToTerraform(struct.image),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        num_instances: cdktf.numberToTerraform(struct.numInstances),
        preemptibility: cdktf.stringToTerraform(struct.preemptibility),
        accelerators: cdktf.listMapper(dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsToTerraform, true)(struct.accelerators),
        disk_config: dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigToTerraform(struct.diskConfig),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // managed_group_config - computed: true, optional: false, required: false
        this._managedGroupConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigManagedGroupConfigList(this, "managed_group_config", false);
        // accelerators - computed: false, optional: true, required: false
        this._accelerators = new DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigAcceleratorsList(this, "accelerators", false);
        // disk_config - computed: false, optional: true, required: false
        this._diskConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigDiskConfigOutputReference(this, "disk_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._image !== undefined) {
            hasAnyValues = true;
            internalValueResult.image = this._image;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._numInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.numInstances = this._numInstances;
        }
        if (this._preemptibility !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptibility = this._preemptibility;
        }
        if (this._accelerators?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accelerators = this._accelerators?.internalValue;
        }
        if (this._diskConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskConfig = this._diskConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._image = undefined;
            this._machineType = undefined;
            this._minCpuPlatform = undefined;
            this._numInstances = undefined;
            this._preemptibility = undefined;
            this._accelerators.internalValue = undefined;
            this._diskConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._image = value.image;
            this._machineType = value.machineType;
            this._minCpuPlatform = value.minCpuPlatform;
            this._numInstances = value.numInstances;
            this._preemptibility = value.preemptibility;
            this._accelerators.internalValue = value.accelerators;
            this._diskConfig.internalValue = value.diskConfig;
        }
    }
    get image() {
        return this.getStringAttribute('image');
    }
    set image(value) {
        this._image = value;
    }
    resetImage() {
        this._image = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageInput() {
        return this._image;
    }
    // instance_names - computed: true, optional: false, required: false
    get instanceNames() {
        return this.getListAttribute('instance_names');
    }
    // is_preemptible - computed: true, optional: false, required: false
    get isPreemptible() {
        return this.getBooleanAttribute('is_preemptible');
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get managedGroupConfig() {
        return this._managedGroupConfig;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get numInstances() {
        return this.getNumberAttribute('num_instances');
    }
    set numInstances(value) {
        this._numInstances = value;
    }
    resetNumInstances() {
        this._numInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numInstancesInput() {
        return this._numInstances;
    }
    get preemptibility() {
        return this.getStringAttribute('preemptibility');
    }
    set preemptibility(value) {
        this._preemptibility = value;
    }
    resetPreemptibility() {
        this._preemptibility = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibilityInput() {
        return this._preemptibility;
    }
    get accelerators() {
        return this._accelerators;
    }
    putAccelerators(value) {
        this._accelerators.internalValue = value;
    }
    resetAccelerators() {
        this._accelerators.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorsInput() {
        return this._accelerators.internalValue;
    }
    get diskConfig() {
        return this._diskConfig;
    }
    putDiskConfig(value) {
        this._diskConfig.internalValue = value;
    }
    resetDiskConfig() {
        this._diskConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskConfigInput() {
        return this._diskConfig.internalValue;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigOutputReference[_19] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // instance_group_manager_name - computed: true, optional: false, required: false
    get instanceGroupManagerName() {
        return this.getStringAttribute('instance_group_manager_name');
    }
    // instance_template_name - computed: true, optional: false, required: false
    get instanceTemplateName() {
        return this.getStringAttribute('instance_template_name');
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigOutputReference[_20] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigOutputReference", version: "5.0.1" };
class DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigList = DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigList;
_21 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigList[_21] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigList", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_count: cdktf.numberToTerraform(struct.acceleratorCount),
        accelerator_type: cdktf.stringToTerraform(struct.acceleratorType),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorCount = this._acceleratorCount;
        }
        if (this._acceleratorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorType = this._acceleratorType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._acceleratorCount = undefined;
            this._acceleratorType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._acceleratorCount = value.acceleratorCount;
            this._acceleratorType = value.acceleratorType;
        }
    }
    get acceleratorCount() {
        return this.getNumberAttribute('accelerator_count');
    }
    set acceleratorCount(value) {
        this._acceleratorCount = value;
    }
    resetAcceleratorCount() {
        this._acceleratorCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorCountInput() {
        return this._acceleratorCount;
    }
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    set acceleratorType(value) {
        this._acceleratorType = value;
    }
    resetAcceleratorType() {
        this._acceleratorType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypeInput() {
        return this._acceleratorType;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsOutputReference[_22] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsOutputReference", version: "5.0.1" };
class DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsList = DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsList;
_23 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsList[_23] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsList", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_size_gb: cdktf.numberToTerraform(struct.bootDiskSizeGb),
        boot_disk_type: cdktf.stringToTerraform(struct.bootDiskType),
        num_local_ssds: cdktf.numberToTerraform(struct.numLocalSsds),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskSizeGb = this._bootDiskSizeGb;
        }
        if (this._bootDiskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskType = this._bootDiskType;
        }
        if (this._numLocalSsds !== undefined) {
            hasAnyValues = true;
            internalValueResult.numLocalSsds = this._numLocalSsds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskSizeGb = undefined;
            this._bootDiskType = undefined;
            this._numLocalSsds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskSizeGb = value.bootDiskSizeGb;
            this._bootDiskType = value.bootDiskType;
            this._numLocalSsds = value.numLocalSsds;
        }
    }
    get bootDiskSizeGb() {
        return this.getNumberAttribute('boot_disk_size_gb');
    }
    set bootDiskSizeGb(value) {
        this._bootDiskSizeGb = value;
    }
    resetBootDiskSizeGb() {
        this._bootDiskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskSizeGbInput() {
        return this._bootDiskSizeGb;
    }
    get bootDiskType() {
        return this.getStringAttribute('boot_disk_type');
    }
    set bootDiskType(value) {
        this._bootDiskType = value;
    }
    resetBootDiskType() {
        this._bootDiskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskTypeInput() {
        return this._bootDiskType;
    }
    get numLocalSsds() {
        return this.getNumberAttribute('num_local_ssds');
    }
    set numLocalSsds(value) {
        this._numLocalSsds = value;
    }
    resetNumLocalSsds() {
        this._numLocalSsds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numLocalSsdsInput() {
        return this._numLocalSsds;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigOutputReference[_24] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image: cdktf.stringToTerraform(struct.image),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        num_instances: cdktf.numberToTerraform(struct.numInstances),
        preemptibility: cdktf.stringToTerraform(struct.preemptibility),
        accelerators: cdktf.listMapper(dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsToTerraform, true)(struct.accelerators),
        disk_config: dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigToTerraform(struct.diskConfig),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // managed_group_config - computed: true, optional: false, required: false
        this._managedGroupConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigManagedGroupConfigList(this, "managed_group_config", false);
        // accelerators - computed: false, optional: true, required: false
        this._accelerators = new DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigAcceleratorsList(this, "accelerators", false);
        // disk_config - computed: false, optional: true, required: false
        this._diskConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigDiskConfigOutputReference(this, "disk_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._image !== undefined) {
            hasAnyValues = true;
            internalValueResult.image = this._image;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._numInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.numInstances = this._numInstances;
        }
        if (this._preemptibility !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptibility = this._preemptibility;
        }
        if (this._accelerators?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accelerators = this._accelerators?.internalValue;
        }
        if (this._diskConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskConfig = this._diskConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._image = undefined;
            this._machineType = undefined;
            this._minCpuPlatform = undefined;
            this._numInstances = undefined;
            this._preemptibility = undefined;
            this._accelerators.internalValue = undefined;
            this._diskConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._image = value.image;
            this._machineType = value.machineType;
            this._minCpuPlatform = value.minCpuPlatform;
            this._numInstances = value.numInstances;
            this._preemptibility = value.preemptibility;
            this._accelerators.internalValue = value.accelerators;
            this._diskConfig.internalValue = value.diskConfig;
        }
    }
    get image() {
        return this.getStringAttribute('image');
    }
    set image(value) {
        this._image = value;
    }
    resetImage() {
        this._image = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageInput() {
        return this._image;
    }
    // instance_names - computed: true, optional: false, required: false
    get instanceNames() {
        return this.getListAttribute('instance_names');
    }
    // is_preemptible - computed: true, optional: false, required: false
    get isPreemptible() {
        return this.getBooleanAttribute('is_preemptible');
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get managedGroupConfig() {
        return this._managedGroupConfig;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get numInstances() {
        return this.getNumberAttribute('num_instances');
    }
    set numInstances(value) {
        this._numInstances = value;
    }
    resetNumInstances() {
        this._numInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numInstancesInput() {
        return this._numInstances;
    }
    get preemptibility() {
        return this.getStringAttribute('preemptibility');
    }
    set preemptibility(value) {
        this._preemptibility = value;
    }
    resetPreemptibility() {
        this._preemptibility = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibilityInput() {
        return this._preemptibility;
    }
    get accelerators() {
        return this._accelerators;
    }
    putAccelerators(value) {
        this._accelerators.internalValue = value;
    }
    resetAccelerators() {
        this._accelerators.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorsInput() {
        return this._accelerators.internalValue;
    }
    get diskConfig() {
        return this._diskConfig;
    }
    putDiskConfig(value) {
        this._diskConfig.internalValue = value;
    }
    resetDiskConfig() {
        this._diskConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskConfigInput() {
        return this._diskConfig.internalValue;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigOutputReference[_25] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cross_realm_trust_admin_server: cdktf.stringToTerraform(struct.crossRealmTrustAdminServer),
        cross_realm_trust_kdc: cdktf.stringToTerraform(struct.crossRealmTrustKdc),
        cross_realm_trust_realm: cdktf.stringToTerraform(struct.crossRealmTrustRealm),
        cross_realm_trust_shared_password: cdktf.stringToTerraform(struct.crossRealmTrustSharedPassword),
        enable_kerberos: cdktf.booleanToTerraform(struct.enableKerberos),
        kdc_db_key: cdktf.stringToTerraform(struct.kdcDbKey),
        key_password: cdktf.stringToTerraform(struct.keyPassword),
        keystore: cdktf.stringToTerraform(struct.keystore),
        keystore_password: cdktf.stringToTerraform(struct.keystorePassword),
        kms_key: cdktf.stringToTerraform(struct.kmsKey),
        realm: cdktf.stringToTerraform(struct.realm),
        root_principal_password: cdktf.stringToTerraform(struct.rootPrincipalPassword),
        tgt_lifetime_hours: cdktf.numberToTerraform(struct.tgtLifetimeHours),
        truststore: cdktf.stringToTerraform(struct.truststore),
        truststore_password: cdktf.stringToTerraform(struct.truststorePassword),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._crossRealmTrustAdminServer !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustAdminServer = this._crossRealmTrustAdminServer;
        }
        if (this._crossRealmTrustKdc !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustKdc = this._crossRealmTrustKdc;
        }
        if (this._crossRealmTrustRealm !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustRealm = this._crossRealmTrustRealm;
        }
        if (this._crossRealmTrustSharedPassword !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustSharedPassword = this._crossRealmTrustSharedPassword;
        }
        if (this._enableKerberos !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableKerberos = this._enableKerberos;
        }
        if (this._kdcDbKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.kdcDbKey = this._kdcDbKey;
        }
        if (this._keyPassword !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyPassword = this._keyPassword;
        }
        if (this._keystore !== undefined) {
            hasAnyValues = true;
            internalValueResult.keystore = this._keystore;
        }
        if (this._keystorePassword !== undefined) {
            hasAnyValues = true;
            internalValueResult.keystorePassword = this._keystorePassword;
        }
        if (this._kmsKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKey = this._kmsKey;
        }
        if (this._realm !== undefined) {
            hasAnyValues = true;
            internalValueResult.realm = this._realm;
        }
        if (this._rootPrincipalPassword !== undefined) {
            hasAnyValues = true;
            internalValueResult.rootPrincipalPassword = this._rootPrincipalPassword;
        }
        if (this._tgtLifetimeHours !== undefined) {
            hasAnyValues = true;
            internalValueResult.tgtLifetimeHours = this._tgtLifetimeHours;
        }
        if (this._truststore !== undefined) {
            hasAnyValues = true;
            internalValueResult.truststore = this._truststore;
        }
        if (this._truststorePassword !== undefined) {
            hasAnyValues = true;
            internalValueResult.truststorePassword = this._truststorePassword;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._crossRealmTrustAdminServer = undefined;
            this._crossRealmTrustKdc = undefined;
            this._crossRealmTrustRealm = undefined;
            this._crossRealmTrustSharedPassword = undefined;
            this._enableKerberos = undefined;
            this._kdcDbKey = undefined;
            this._keyPassword = undefined;
            this._keystore = undefined;
            this._keystorePassword = undefined;
            this._kmsKey = undefined;
            this._realm = undefined;
            this._rootPrincipalPassword = undefined;
            this._tgtLifetimeHours = undefined;
            this._truststore = undefined;
            this._truststorePassword = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._crossRealmTrustAdminServer = value.crossRealmTrustAdminServer;
            this._crossRealmTrustKdc = value.crossRealmTrustKdc;
            this._crossRealmTrustRealm = value.crossRealmTrustRealm;
            this._crossRealmTrustSharedPassword = value.crossRealmTrustSharedPassword;
            this._enableKerberos = value.enableKerberos;
            this._kdcDbKey = value.kdcDbKey;
            this._keyPassword = value.keyPassword;
            this._keystore = value.keystore;
            this._keystorePassword = value.keystorePassword;
            this._kmsKey = value.kmsKey;
            this._realm = value.realm;
            this._rootPrincipalPassword = value.rootPrincipalPassword;
            this._tgtLifetimeHours = value.tgtLifetimeHours;
            this._truststore = value.truststore;
            this._truststorePassword = value.truststorePassword;
        }
    }
    get crossRealmTrustAdminServer() {
        return this.getStringAttribute('cross_realm_trust_admin_server');
    }
    set crossRealmTrustAdminServer(value) {
        this._crossRealmTrustAdminServer = value;
    }
    resetCrossRealmTrustAdminServer() {
        this._crossRealmTrustAdminServer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustAdminServerInput() {
        return this._crossRealmTrustAdminServer;
    }
    get crossRealmTrustKdc() {
        return this.getStringAttribute('cross_realm_trust_kdc');
    }
    set crossRealmTrustKdc(value) {
        this._crossRealmTrustKdc = value;
    }
    resetCrossRealmTrustKdc() {
        this._crossRealmTrustKdc = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustKdcInput() {
        return this._crossRealmTrustKdc;
    }
    get crossRealmTrustRealm() {
        return this.getStringAttribute('cross_realm_trust_realm');
    }
    set crossRealmTrustRealm(value) {
        this._crossRealmTrustRealm = value;
    }
    resetCrossRealmTrustRealm() {
        this._crossRealmTrustRealm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustRealmInput() {
        return this._crossRealmTrustRealm;
    }
    get crossRealmTrustSharedPassword() {
        return this.getStringAttribute('cross_realm_trust_shared_password');
    }
    set crossRealmTrustSharedPassword(value) {
        this._crossRealmTrustSharedPassword = value;
    }
    resetCrossRealmTrustSharedPassword() {
        this._crossRealmTrustSharedPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustSharedPasswordInput() {
        return this._crossRealmTrustSharedPassword;
    }
    get enableKerberos() {
        return this.getBooleanAttribute('enable_kerberos');
    }
    set enableKerberos(value) {
        this._enableKerberos = value;
    }
    resetEnableKerberos() {
        this._enableKerberos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableKerberosInput() {
        return this._enableKerberos;
    }
    get kdcDbKey() {
        return this.getStringAttribute('kdc_db_key');
    }
    set kdcDbKey(value) {
        this._kdcDbKey = value;
    }
    resetKdcDbKey() {
        this._kdcDbKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kdcDbKeyInput() {
        return this._kdcDbKey;
    }
    get keyPassword() {
        return this.getStringAttribute('key_password');
    }
    set keyPassword(value) {
        this._keyPassword = value;
    }
    resetKeyPassword() {
        this._keyPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyPasswordInput() {
        return this._keyPassword;
    }
    get keystore() {
        return this.getStringAttribute('keystore');
    }
    set keystore(value) {
        this._keystore = value;
    }
    resetKeystore() {
        this._keystore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keystoreInput() {
        return this._keystore;
    }
    get keystorePassword() {
        return this.getStringAttribute('keystore_password');
    }
    set keystorePassword(value) {
        this._keystorePassword = value;
    }
    resetKeystorePassword() {
        this._keystorePassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keystorePasswordInput() {
        return this._keystorePassword;
    }
    get kmsKey() {
        return this.getStringAttribute('kms_key');
    }
    set kmsKey(value) {
        this._kmsKey = value;
    }
    resetKmsKey() {
        this._kmsKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyInput() {
        return this._kmsKey;
    }
    get realm() {
        return this.getStringAttribute('realm');
    }
    set realm(value) {
        this._realm = value;
    }
    resetRealm() {
        this._realm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get realmInput() {
        return this._realm;
    }
    get rootPrincipalPassword() {
        return this.getStringAttribute('root_principal_password');
    }
    set rootPrincipalPassword(value) {
        this._rootPrincipalPassword = value;
    }
    resetRootPrincipalPassword() {
        this._rootPrincipalPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rootPrincipalPasswordInput() {
        return this._rootPrincipalPassword;
    }
    get tgtLifetimeHours() {
        return this.getNumberAttribute('tgt_lifetime_hours');
    }
    set tgtLifetimeHours(value) {
        this._tgtLifetimeHours = value;
    }
    resetTgtLifetimeHours() {
        this._tgtLifetimeHours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tgtLifetimeHoursInput() {
        return this._tgtLifetimeHours;
    }
    get truststore() {
        return this.getStringAttribute('truststore');
    }
    set truststore(value) {
        this._truststore = value;
    }
    resetTruststore() {
        this._truststore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get truststoreInput() {
        return this._truststore;
    }
    get truststorePassword() {
        return this.getStringAttribute('truststore_password');
    }
    set truststorePassword(value) {
        this._truststorePassword = value;
    }
    resetTruststorePassword() {
        this._truststorePassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get truststorePasswordInput() {
        return this._truststorePassword;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigOutputReference[_26] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kerberos_config: dataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigToTerraform(struct.kerberosConfig),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kerberos_config - computed: false, optional: true, required: false
        this._kerberosConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfigOutputReference(this, "kerberos_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kerberosConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kerberosConfig = this._kerberosConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kerberosConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kerberosConfig.internalValue = value.kerberosConfig;
        }
    }
    get kerberosConfig() {
        return this._kerberosConfig;
    }
    putKerberosConfig(value) {
        this._kerberosConfig.internalValue = value;
    }
    resetKerberosConfig() {
        this._kerberosConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kerberosConfigInput() {
        return this._kerberosConfig.internalValue;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigOutputReference[_27] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_version: cdktf.stringToTerraform(struct.imageVersion),
        optional_components: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.optionalComponents),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersion = this._imageVersion;
        }
        if (this._optionalComponents !== undefined) {
            hasAnyValues = true;
            internalValueResult.optionalComponents = this._optionalComponents;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._imageVersion = undefined;
            this._optionalComponents = undefined;
            this._properties = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._imageVersion = value.imageVersion;
            this._optionalComponents = value.optionalComponents;
            this._properties = value.properties;
        }
    }
    get imageVersion() {
        return this.getStringAttribute('image_version');
    }
    set imageVersion(value) {
        this._imageVersion = value;
    }
    resetImageVersion() {
        this._imageVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionInput() {
        return this._imageVersion;
    }
    get optionalComponents() {
        return this.getListAttribute('optional_components');
    }
    set optionalComponents(value) {
        this._optionalComponents = value;
    }
    resetOptionalComponents() {
        this._optionalComponents = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get optionalComponentsInput() {
        return this._optionalComponents;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigOutputReference[_28] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // instance_group_manager_name - computed: true, optional: false, required: false
    get instanceGroupManagerName() {
        return this.getStringAttribute('instance_group_manager_name');
    }
    // instance_template_name - computed: true, optional: false, required: false
    get instanceTemplateName() {
        return this.getStringAttribute('instance_template_name');
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigOutputReference[_29] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigOutputReference", version: "5.0.1" };
class DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigList = DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigList;
_30 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigList[_30] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigList", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_count: cdktf.numberToTerraform(struct.acceleratorCount),
        accelerator_type: cdktf.stringToTerraform(struct.acceleratorType),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorCount = this._acceleratorCount;
        }
        if (this._acceleratorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorType = this._acceleratorType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._acceleratorCount = undefined;
            this._acceleratorType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._acceleratorCount = value.acceleratorCount;
            this._acceleratorType = value.acceleratorType;
        }
    }
    get acceleratorCount() {
        return this.getNumberAttribute('accelerator_count');
    }
    set acceleratorCount(value) {
        this._acceleratorCount = value;
    }
    resetAcceleratorCount() {
        this._acceleratorCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorCountInput() {
        return this._acceleratorCount;
    }
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    set acceleratorType(value) {
        this._acceleratorType = value;
    }
    resetAcceleratorType() {
        this._acceleratorType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypeInput() {
        return this._acceleratorType;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsOutputReference[_31] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsOutputReference", version: "5.0.1" };
class DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsList = DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsList;
_32 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsList[_32] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsList", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_size_gb: cdktf.numberToTerraform(struct.bootDiskSizeGb),
        boot_disk_type: cdktf.stringToTerraform(struct.bootDiskType),
        num_local_ssds: cdktf.numberToTerraform(struct.numLocalSsds),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskSizeGb = this._bootDiskSizeGb;
        }
        if (this._bootDiskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskType = this._bootDiskType;
        }
        if (this._numLocalSsds !== undefined) {
            hasAnyValues = true;
            internalValueResult.numLocalSsds = this._numLocalSsds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskSizeGb = undefined;
            this._bootDiskType = undefined;
            this._numLocalSsds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskSizeGb = value.bootDiskSizeGb;
            this._bootDiskType = value.bootDiskType;
            this._numLocalSsds = value.numLocalSsds;
        }
    }
    get bootDiskSizeGb() {
        return this.getNumberAttribute('boot_disk_size_gb');
    }
    set bootDiskSizeGb(value) {
        this._bootDiskSizeGb = value;
    }
    resetBootDiskSizeGb() {
        this._bootDiskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskSizeGbInput() {
        return this._bootDiskSizeGb;
    }
    get bootDiskType() {
        return this.getStringAttribute('boot_disk_type');
    }
    set bootDiskType(value) {
        this._bootDiskType = value;
    }
    resetBootDiskType() {
        this._bootDiskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskTypeInput() {
        return this._bootDiskType;
    }
    get numLocalSsds() {
        return this.getNumberAttribute('num_local_ssds');
    }
    set numLocalSsds(value) {
        this._numLocalSsds = value;
    }
    resetNumLocalSsds() {
        this._numLocalSsds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numLocalSsdsInput() {
        return this._numLocalSsds;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigOutputReference[_33] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image: cdktf.stringToTerraform(struct.image),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        num_instances: cdktf.numberToTerraform(struct.numInstances),
        preemptibility: cdktf.stringToTerraform(struct.preemptibility),
        accelerators: cdktf.listMapper(dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsToTerraform, true)(struct.accelerators),
        disk_config: dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigToTerraform(struct.diskConfig),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // managed_group_config - computed: true, optional: false, required: false
        this._managedGroupConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigManagedGroupConfigList(this, "managed_group_config", false);
        // accelerators - computed: false, optional: true, required: false
        this._accelerators = new DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigAcceleratorsList(this, "accelerators", false);
        // disk_config - computed: false, optional: true, required: false
        this._diskConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigDiskConfigOutputReference(this, "disk_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._image !== undefined) {
            hasAnyValues = true;
            internalValueResult.image = this._image;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._numInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.numInstances = this._numInstances;
        }
        if (this._preemptibility !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptibility = this._preemptibility;
        }
        if (this._accelerators?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accelerators = this._accelerators?.internalValue;
        }
        if (this._diskConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskConfig = this._diskConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._image = undefined;
            this._machineType = undefined;
            this._minCpuPlatform = undefined;
            this._numInstances = undefined;
            this._preemptibility = undefined;
            this._accelerators.internalValue = undefined;
            this._diskConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._image = value.image;
            this._machineType = value.machineType;
            this._minCpuPlatform = value.minCpuPlatform;
            this._numInstances = value.numInstances;
            this._preemptibility = value.preemptibility;
            this._accelerators.internalValue = value.accelerators;
            this._diskConfig.internalValue = value.diskConfig;
        }
    }
    get image() {
        return this.getStringAttribute('image');
    }
    set image(value) {
        this._image = value;
    }
    resetImage() {
        this._image = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageInput() {
        return this._image;
    }
    // instance_names - computed: true, optional: false, required: false
    get instanceNames() {
        return this.getListAttribute('instance_names');
    }
    // is_preemptible - computed: true, optional: false, required: false
    get isPreemptible() {
        return this.getBooleanAttribute('is_preemptible');
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get managedGroupConfig() {
        return this._managedGroupConfig;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get numInstances() {
        return this.getNumberAttribute('num_instances');
    }
    set numInstances(value) {
        this._numInstances = value;
    }
    resetNumInstances() {
        this._numInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numInstancesInput() {
        return this._numInstances;
    }
    get preemptibility() {
        return this.getStringAttribute('preemptibility');
    }
    set preemptibility(value) {
        this._preemptibility = value;
    }
    resetPreemptibility() {
        this._preemptibility = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibilityInput() {
        return this._preemptibility;
    }
    get accelerators() {
        return this._accelerators;
    }
    putAccelerators(value) {
        this._accelerators.internalValue = value;
    }
    resetAccelerators() {
        this._accelerators.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorsInput() {
        return this._accelerators.internalValue;
    }
    get diskConfig() {
        return this._diskConfig;
    }
    putDiskConfig(value) {
        this._diskConfig.internalValue = value;
    }
    resetDiskConfig() {
        this._diskConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskConfigInput() {
        return this._diskConfig.internalValue;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigOutputReference[_34] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        staging_bucket: cdktf.stringToTerraform(struct.stagingBucket),
        temp_bucket: cdktf.stringToTerraform(struct.tempBucket),
        autoscaling_config: dataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigToTerraform(struct.autoscalingConfig),
        encryption_config: dataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigToTerraform(struct.encryptionConfig),
        endpoint_config: dataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigToTerraform(struct.endpointConfig),
        gce_cluster_config: dataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigToTerraform(struct.gceClusterConfig),
        initialization_actions: cdktf.listMapper(dataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsToTerraform, true)(struct.initializationActions),
        lifecycle_config: dataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigToTerraform(struct.lifecycleConfig),
        master_config: dataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigToTerraform(struct.masterConfig),
        secondary_worker_config: dataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigToTerraform(struct.secondaryWorkerConfig),
        security_config: dataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigToTerraform(struct.securityConfig),
        software_config: dataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigToTerraform(struct.softwareConfig),
        worker_config: dataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigToTerraform(struct.workerConfig),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterConfigToTerraform = dataprocWorkflowTemplatePlacementManagedClusterConfigToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // autoscaling_config - computed: false, optional: true, required: false
        this._autoscalingConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigAutoscalingConfigOutputReference(this, "autoscaling_config");
        // encryption_config - computed: false, optional: true, required: false
        this._encryptionConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigEncryptionConfigOutputReference(this, "encryption_config");
        // endpoint_config - computed: false, optional: true, required: false
        this._endpointConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigEndpointConfigOutputReference(this, "endpoint_config");
        // gce_cluster_config - computed: false, optional: true, required: false
        this._gceClusterConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigGceClusterConfigOutputReference(this, "gce_cluster_config");
        // initialization_actions - computed: false, optional: true, required: false
        this._initializationActions = new DataprocWorkflowTemplatePlacementManagedClusterConfigInitializationActionsList(this, "initialization_actions", false);
        // lifecycle_config - computed: false, optional: true, required: false
        this._lifecycleConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigLifecycleConfigOutputReference(this, "lifecycle_config");
        // master_config - computed: false, optional: true, required: false
        this._masterConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigMasterConfigOutputReference(this, "master_config");
        // secondary_worker_config - computed: false, optional: true, required: false
        this._secondaryWorkerConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigSecondaryWorkerConfigOutputReference(this, "secondary_worker_config");
        // security_config - computed: false, optional: true, required: false
        this._securityConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigSecurityConfigOutputReference(this, "security_config");
        // software_config - computed: false, optional: true, required: false
        this._softwareConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigSoftwareConfigOutputReference(this, "software_config");
        // worker_config - computed: false, optional: true, required: false
        this._workerConfig = new DataprocWorkflowTemplatePlacementManagedClusterConfigWorkerConfigOutputReference(this, "worker_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._stagingBucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.stagingBucket = this._stagingBucket;
        }
        if (this._tempBucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.tempBucket = this._tempBucket;
        }
        if (this._autoscalingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoscalingConfig = this._autoscalingConfig?.internalValue;
        }
        if (this._encryptionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionConfig = this._encryptionConfig?.internalValue;
        }
        if (this._endpointConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.endpointConfig = this._endpointConfig?.internalValue;
        }
        if (this._gceClusterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gceClusterConfig = this._gceClusterConfig?.internalValue;
        }
        if (this._initializationActions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.initializationActions = this._initializationActions?.internalValue;
        }
        if (this._lifecycleConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfig = this._lifecycleConfig?.internalValue;
        }
        if (this._masterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterConfig = this._masterConfig?.internalValue;
        }
        if (this._secondaryWorkerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secondaryWorkerConfig = this._secondaryWorkerConfig?.internalValue;
        }
        if (this._securityConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityConfig = this._securityConfig?.internalValue;
        }
        if (this._softwareConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.softwareConfig = this._softwareConfig?.internalValue;
        }
        if (this._workerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.workerConfig = this._workerConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._stagingBucket = undefined;
            this._tempBucket = undefined;
            this._autoscalingConfig.internalValue = undefined;
            this._encryptionConfig.internalValue = undefined;
            this._endpointConfig.internalValue = undefined;
            this._gceClusterConfig.internalValue = undefined;
            this._initializationActions.internalValue = undefined;
            this._lifecycleConfig.internalValue = undefined;
            this._masterConfig.internalValue = undefined;
            this._secondaryWorkerConfig.internalValue = undefined;
            this._securityConfig.internalValue = undefined;
            this._softwareConfig.internalValue = undefined;
            this._workerConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._stagingBucket = value.stagingBucket;
            this._tempBucket = value.tempBucket;
            this._autoscalingConfig.internalValue = value.autoscalingConfig;
            this._encryptionConfig.internalValue = value.encryptionConfig;
            this._endpointConfig.internalValue = value.endpointConfig;
            this._gceClusterConfig.internalValue = value.gceClusterConfig;
            this._initializationActions.internalValue = value.initializationActions;
            this._lifecycleConfig.internalValue = value.lifecycleConfig;
            this._masterConfig.internalValue = value.masterConfig;
            this._secondaryWorkerConfig.internalValue = value.secondaryWorkerConfig;
            this._securityConfig.internalValue = value.securityConfig;
            this._softwareConfig.internalValue = value.softwareConfig;
            this._workerConfig.internalValue = value.workerConfig;
        }
    }
    get stagingBucket() {
        return this.getStringAttribute('staging_bucket');
    }
    set stagingBucket(value) {
        this._stagingBucket = value;
    }
    resetStagingBucket() {
        this._stagingBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stagingBucketInput() {
        return this._stagingBucket;
    }
    get tempBucket() {
        return this.getStringAttribute('temp_bucket');
    }
    set tempBucket(value) {
        this._tempBucket = value;
    }
    resetTempBucket() {
        this._tempBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tempBucketInput() {
        return this._tempBucket;
    }
    get autoscalingConfig() {
        return this._autoscalingConfig;
    }
    putAutoscalingConfig(value) {
        this._autoscalingConfig.internalValue = value;
    }
    resetAutoscalingConfig() {
        this._autoscalingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoscalingConfigInput() {
        return this._autoscalingConfig.internalValue;
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    resetEncryptionConfig() {
        this._encryptionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
    get endpointConfig() {
        return this._endpointConfig;
    }
    putEndpointConfig(value) {
        this._endpointConfig.internalValue = value;
    }
    resetEndpointConfig() {
        this._endpointConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointConfigInput() {
        return this._endpointConfig.internalValue;
    }
    get gceClusterConfig() {
        return this._gceClusterConfig;
    }
    putGceClusterConfig(value) {
        this._gceClusterConfig.internalValue = value;
    }
    resetGceClusterConfig() {
        this._gceClusterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gceClusterConfigInput() {
        return this._gceClusterConfig.internalValue;
    }
    get initializationActions() {
        return this._initializationActions;
    }
    putInitializationActions(value) {
        this._initializationActions.internalValue = value;
    }
    resetInitializationActions() {
        this._initializationActions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initializationActionsInput() {
        return this._initializationActions.internalValue;
    }
    get lifecycleConfig() {
        return this._lifecycleConfig;
    }
    putLifecycleConfig(value) {
        this._lifecycleConfig.internalValue = value;
    }
    resetLifecycleConfig() {
        this._lifecycleConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigInput() {
        return this._lifecycleConfig.internalValue;
    }
    get masterConfig() {
        return this._masterConfig;
    }
    putMasterConfig(value) {
        this._masterConfig.internalValue = value;
    }
    resetMasterConfig() {
        this._masterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterConfigInput() {
        return this._masterConfig.internalValue;
    }
    get secondaryWorkerConfig() {
        return this._secondaryWorkerConfig;
    }
    putSecondaryWorkerConfig(value) {
        this._secondaryWorkerConfig.internalValue = value;
    }
    resetSecondaryWorkerConfig() {
        this._secondaryWorkerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondaryWorkerConfigInput() {
        return this._secondaryWorkerConfig.internalValue;
    }
    get securityConfig() {
        return this._securityConfig;
    }
    putSecurityConfig(value) {
        this._securityConfig.internalValue = value;
    }
    resetSecurityConfig() {
        this._securityConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityConfigInput() {
        return this._securityConfig.internalValue;
    }
    get softwareConfig() {
        return this._softwareConfig;
    }
    putSoftwareConfig(value) {
        this._softwareConfig.internalValue = value;
    }
    resetSoftwareConfig() {
        this._softwareConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get softwareConfigInput() {
        return this._softwareConfig.internalValue;
    }
    get workerConfig() {
        return this._workerConfig;
    }
    putWorkerConfig(value) {
        this._workerConfig.internalValue = value;
    }
    resetWorkerConfig() {
        this._workerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workerConfigInput() {
        return this._workerConfig.internalValue;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterConfigOutputReference = DataprocWorkflowTemplatePlacementManagedClusterConfigOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterConfigOutputReference[_35] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterConfigOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementManagedClusterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_name: cdktf.stringToTerraform(struct.clusterName),
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        config: dataprocWorkflowTemplatePlacementManagedClusterConfigToTerraform(struct.config),
    };
}
exports.dataprocWorkflowTemplatePlacementManagedClusterToTerraform = dataprocWorkflowTemplatePlacementManagedClusterToTerraform;
class DataprocWorkflowTemplatePlacementManagedClusterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // config - computed: false, optional: false, required: true
        this._config = new DataprocWorkflowTemplatePlacementManagedClusterConfigOutputReference(this, "config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterName = this._clusterName;
        }
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._config?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.config = this._config?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterName = undefined;
            this._labels = undefined;
            this._config.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterName = value.clusterName;
            this._labels = value.labels;
            this._config.internalValue = value.config;
        }
    }
    get clusterName() {
        return this.getStringAttribute('cluster_name');
    }
    set clusterName(value) {
        this._clusterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterNameInput() {
        return this._clusterName;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get config() {
        return this._config;
    }
    putConfig(value) {
        this._config.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get configInput() {
        return this._config.internalValue;
    }
}
exports.DataprocWorkflowTemplatePlacementManagedClusterOutputReference = DataprocWorkflowTemplatePlacementManagedClusterOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementManagedClusterOutputReference[_36] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementManagedClusterOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplatePlacementToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_selector: dataprocWorkflowTemplatePlacementClusterSelectorToTerraform(struct.clusterSelector),
        managed_cluster: dataprocWorkflowTemplatePlacementManagedClusterToTerraform(struct.managedCluster),
    };
}
exports.dataprocWorkflowTemplatePlacementToTerraform = dataprocWorkflowTemplatePlacementToTerraform;
class DataprocWorkflowTemplatePlacementOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cluster_selector - computed: false, optional: true, required: false
        this._clusterSelector = new DataprocWorkflowTemplatePlacementClusterSelectorOutputReference(this, "cluster_selector");
        // managed_cluster - computed: false, optional: true, required: false
        this._managedCluster = new DataprocWorkflowTemplatePlacementManagedClusterOutputReference(this, "managed_cluster");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterSelector?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterSelector = this._clusterSelector?.internalValue;
        }
        if (this._managedCluster?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.managedCluster = this._managedCluster?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterSelector.internalValue = undefined;
            this._managedCluster.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterSelector.internalValue = value.clusterSelector;
            this._managedCluster.internalValue = value.managedCluster;
        }
    }
    get clusterSelector() {
        return this._clusterSelector;
    }
    putClusterSelector(value) {
        this._clusterSelector.internalValue = value;
    }
    resetClusterSelector() {
        this._clusterSelector.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterSelectorInput() {
        return this._clusterSelector.internalValue;
    }
    get managedCluster() {
        return this._managedCluster;
    }
    putManagedCluster(value) {
        this._managedCluster.internalValue = value;
    }
    resetManagedCluster() {
        this._managedCluster.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get managedClusterInput() {
        return this._managedCluster.internalValue;
    }
}
exports.DataprocWorkflowTemplatePlacementOutputReference = DataprocWorkflowTemplatePlacementOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplatePlacementOutputReference[_37] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplatePlacementOutputReference", version: "5.0.1" };
function dataprocWorkflowTemplateTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.dataprocWorkflowTemplateTimeoutsToTerraform = dataprocWorkflowTemplateTimeoutsToTerraform;
class DataprocWorkflowTemplateTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.DataprocWorkflowTemplateTimeoutsOutputReference = DataprocWorkflowTemplateTimeoutsOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplateTimeoutsOutputReference[_38] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplateTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/dataproc_workflow_template google_dataproc_workflow_template}
*/
class DataprocWorkflowTemplate extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/dataproc_workflow_template google_dataproc_workflow_template} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataprocWorkflowTemplateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_dataproc_workflow_template',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // jobs - computed: false, optional: false, required: true
        this._jobs = new DataprocWorkflowTemplateJobsList(this, "jobs", false);
        // parameters - computed: false, optional: true, required: false
        this._parameters = new DataprocWorkflowTemplateParametersList(this, "parameters", false);
        // placement - computed: false, optional: false, required: true
        this._placement = new DataprocWorkflowTemplatePlacementOutputReference(this, "placement");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DataprocWorkflowTemplateTimeoutsOutputReference(this, "timeouts");
        this._dagTimeout = config.dagTimeout;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._version = config.version;
        this._jobs.internalValue = config.jobs;
        this._parameters.internalValue = config.parameters;
        this._placement.internalValue = config.placement;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get dagTimeout() {
        return this.getStringAttribute('dag_timeout');
    }
    set dagTimeout(value) {
        this._dagTimeout = value;
    }
    resetDagTimeout() {
        this._dagTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dagTimeoutInput() {
        return this._dagTimeout;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get version() {
        return this.getNumberAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get jobs() {
        return this._jobs;
    }
    putJobs(value) {
        this._jobs.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get jobsInput() {
        return this._jobs.internalValue;
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
    get placement() {
        return this._placement;
    }
    putPlacement(value) {
        this._placement.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get placementInput() {
        return this._placement.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            dag_timeout: cdktf.stringToTerraform(this._dagTimeout),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            version: cdktf.numberToTerraform(this._version),
            jobs: cdktf.listMapper(dataprocWorkflowTemplateJobsToTerraform, true)(this._jobs.internalValue),
            parameters: cdktf.listMapper(dataprocWorkflowTemplateParametersToTerraform, true)(this._parameters.internalValue),
            placement: dataprocWorkflowTemplatePlacementToTerraform(this._placement.internalValue),
            timeouts: dataprocWorkflowTemplateTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.DataprocWorkflowTemplate = DataprocWorkflowTemplate;
_39 = JSII_RTTI_SYMBOL_1;
DataprocWorkflowTemplate[_39] = { fqn: "@cdktf/provider-google.dataprocWorkflowTemplate.DataprocWorkflowTemplate", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
DataprocWorkflowTemplate.tfResourceType = "google_dataproc_workflow_template";
//# sourceMappingURL=data:application/json;base64,