"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnsRecordSet = exports.DnsRecordSetRoutingPolicyOutputReference = exports.dnsRecordSetRoutingPolicyToTerraform = exports.DnsRecordSetRoutingPolicyWrrList = exports.DnsRecordSetRoutingPolicyWrrOutputReference = exports.dnsRecordSetRoutingPolicyWrrToTerraform = exports.DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsOutputReference = exports.dnsRecordSetRoutingPolicyWrrHealthCheckedTargetsToTerraform = exports.DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersList = exports.DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersOutputReference = exports.dnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersToTerraform = exports.DnsRecordSetRoutingPolicyPrimaryBackupOutputReference = exports.dnsRecordSetRoutingPolicyPrimaryBackupToTerraform = exports.DnsRecordSetRoutingPolicyPrimaryBackupPrimaryOutputReference = exports.dnsRecordSetRoutingPolicyPrimaryBackupPrimaryToTerraform = exports.DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersList = exports.DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersOutputReference = exports.dnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersToTerraform = exports.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoList = exports.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoOutputReference = exports.dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoToTerraform = exports.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsOutputReference = exports.dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsToTerraform = exports.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersList = exports.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersOutputReference = exports.dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersToTerraform = exports.DnsRecordSetRoutingPolicyGeoList = exports.DnsRecordSetRoutingPolicyGeoOutputReference = exports.dnsRecordSetRoutingPolicyGeoToTerraform = exports.DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsOutputReference = exports.dnsRecordSetRoutingPolicyGeoHealthCheckedTargetsToTerraform = exports.DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersList = exports.DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersOutputReference = exports.dnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ip_address: cdktf.stringToTerraform(struct.ipAddress),
        ip_protocol: cdktf.stringToTerraform(struct.ipProtocol),
        load_balancer_type: cdktf.stringToTerraform(struct.loadBalancerType),
        network_url: cdktf.stringToTerraform(struct.networkUrl),
        port: cdktf.stringToTerraform(struct.port),
        project: cdktf.stringToTerraform(struct.project),
        region: cdktf.stringToTerraform(struct.region),
    };
}
exports.dnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersToTerraform = dnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersToTerraform;
class DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ipAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipAddress = this._ipAddress;
        }
        if (this._ipProtocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipProtocol = this._ipProtocol;
        }
        if (this._loadBalancerType !== undefined) {
            hasAnyValues = true;
            internalValueResult.loadBalancerType = this._loadBalancerType;
        }
        if (this._networkUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkUrl = this._networkUrl;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._project !== undefined) {
            hasAnyValues = true;
            internalValueResult.project = this._project;
        }
        if (this._region !== undefined) {
            hasAnyValues = true;
            internalValueResult.region = this._region;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ipAddress = undefined;
            this._ipProtocol = undefined;
            this._loadBalancerType = undefined;
            this._networkUrl = undefined;
            this._port = undefined;
            this._project = undefined;
            this._region = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ipAddress = value.ipAddress;
            this._ipProtocol = value.ipProtocol;
            this._loadBalancerType = value.loadBalancerType;
            this._networkUrl = value.networkUrl;
            this._port = value.port;
            this._project = value.project;
            this._region = value.region;
        }
    }
    get ipAddress() {
        return this.getStringAttribute('ip_address');
    }
    set ipAddress(value) {
        this._ipAddress = value;
    }
    // Temporarily expose input value. Use with caution.
    get ipAddressInput() {
        return this._ipAddress;
    }
    get ipProtocol() {
        return this.getStringAttribute('ip_protocol');
    }
    set ipProtocol(value) {
        this._ipProtocol = value;
    }
    // Temporarily expose input value. Use with caution.
    get ipProtocolInput() {
        return this._ipProtocol;
    }
    get loadBalancerType() {
        return this.getStringAttribute('load_balancer_type');
    }
    set loadBalancerType(value) {
        this._loadBalancerType = value;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancerTypeInput() {
        return this._loadBalancerType;
    }
    get networkUrl() {
        return this.getStringAttribute('network_url');
    }
    set networkUrl(value) {
        this._networkUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkUrlInput() {
        return this._networkUrl;
    }
    get port() {
        return this.getStringAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
}
exports.DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersOutputReference = DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersOutputReference[_a] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersOutputReference", version: "4.0.3" };
class DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersList = DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersList;
_b = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersList[_b] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersList", version: "4.0.3" };
function dnsRecordSetRoutingPolicyGeoHealthCheckedTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        internal_load_balancers: cdktf.listMapper(dnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersToTerraform, true)(struct.internalLoadBalancers),
    };
}
exports.dnsRecordSetRoutingPolicyGeoHealthCheckedTargetsToTerraform = dnsRecordSetRoutingPolicyGeoHealthCheckedTargetsToTerraform;
class DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // internal_load_balancers - computed: false, optional: false, required: true
        this._internalLoadBalancers = new DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsInternalLoadBalancersList(this, "internal_load_balancers", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._internalLoadBalancers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.internalLoadBalancers = this._internalLoadBalancers?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._internalLoadBalancers.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._internalLoadBalancers.internalValue = value.internalLoadBalancers;
        }
    }
    get internalLoadBalancers() {
        return this._internalLoadBalancers;
    }
    putInternalLoadBalancers(value) {
        this._internalLoadBalancers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get internalLoadBalancersInput() {
        return this._internalLoadBalancers.internalValue;
    }
}
exports.DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsOutputReference = DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsOutputReference[_c] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsOutputReference", version: "4.0.3" };
function dnsRecordSetRoutingPolicyGeoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        location: cdktf.stringToTerraform(struct.location),
        rrdatas: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.rrdatas),
        health_checked_targets: dnsRecordSetRoutingPolicyGeoHealthCheckedTargetsToTerraform(struct.healthCheckedTargets),
    };
}
exports.dnsRecordSetRoutingPolicyGeoToTerraform = dnsRecordSetRoutingPolicyGeoToTerraform;
class DnsRecordSetRoutingPolicyGeoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // health_checked_targets - computed: false, optional: true, required: false
        this._healthCheckedTargets = new DnsRecordSetRoutingPolicyGeoHealthCheckedTargetsOutputReference(this, "health_checked_targets");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        if (this._rrdatas !== undefined) {
            hasAnyValues = true;
            internalValueResult.rrdatas = this._rrdatas;
        }
        if (this._healthCheckedTargets?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthCheckedTargets = this._healthCheckedTargets?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._location = undefined;
            this._rrdatas = undefined;
            this._healthCheckedTargets.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._location = value.location;
            this._rrdatas = value.rrdatas;
            this._healthCheckedTargets.internalValue = value.healthCheckedTargets;
        }
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get rrdatas() {
        return this.getListAttribute('rrdatas');
    }
    set rrdatas(value) {
        this._rrdatas = value;
    }
    resetRrdatas() {
        this._rrdatas = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rrdatasInput() {
        return this._rrdatas;
    }
    get healthCheckedTargets() {
        return this._healthCheckedTargets;
    }
    putHealthCheckedTargets(value) {
        this._healthCheckedTargets.internalValue = value;
    }
    resetHealthCheckedTargets() {
        this._healthCheckedTargets.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckedTargetsInput() {
        return this._healthCheckedTargets.internalValue;
    }
}
exports.DnsRecordSetRoutingPolicyGeoOutputReference = DnsRecordSetRoutingPolicyGeoOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyGeoOutputReference[_d] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyGeoOutputReference", version: "4.0.3" };
class DnsRecordSetRoutingPolicyGeoList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DnsRecordSetRoutingPolicyGeoOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DnsRecordSetRoutingPolicyGeoList = DnsRecordSetRoutingPolicyGeoList;
_e = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyGeoList[_e] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyGeoList", version: "4.0.3" };
function dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ip_address: cdktf.stringToTerraform(struct.ipAddress),
        ip_protocol: cdktf.stringToTerraform(struct.ipProtocol),
        load_balancer_type: cdktf.stringToTerraform(struct.loadBalancerType),
        network_url: cdktf.stringToTerraform(struct.networkUrl),
        port: cdktf.stringToTerraform(struct.port),
        project: cdktf.stringToTerraform(struct.project),
        region: cdktf.stringToTerraform(struct.region),
    };
}
exports.dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersToTerraform = dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersToTerraform;
class DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ipAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipAddress = this._ipAddress;
        }
        if (this._ipProtocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipProtocol = this._ipProtocol;
        }
        if (this._loadBalancerType !== undefined) {
            hasAnyValues = true;
            internalValueResult.loadBalancerType = this._loadBalancerType;
        }
        if (this._networkUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkUrl = this._networkUrl;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._project !== undefined) {
            hasAnyValues = true;
            internalValueResult.project = this._project;
        }
        if (this._region !== undefined) {
            hasAnyValues = true;
            internalValueResult.region = this._region;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ipAddress = undefined;
            this._ipProtocol = undefined;
            this._loadBalancerType = undefined;
            this._networkUrl = undefined;
            this._port = undefined;
            this._project = undefined;
            this._region = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ipAddress = value.ipAddress;
            this._ipProtocol = value.ipProtocol;
            this._loadBalancerType = value.loadBalancerType;
            this._networkUrl = value.networkUrl;
            this._port = value.port;
            this._project = value.project;
            this._region = value.region;
        }
    }
    get ipAddress() {
        return this.getStringAttribute('ip_address');
    }
    set ipAddress(value) {
        this._ipAddress = value;
    }
    // Temporarily expose input value. Use with caution.
    get ipAddressInput() {
        return this._ipAddress;
    }
    get ipProtocol() {
        return this.getStringAttribute('ip_protocol');
    }
    set ipProtocol(value) {
        this._ipProtocol = value;
    }
    // Temporarily expose input value. Use with caution.
    get ipProtocolInput() {
        return this._ipProtocol;
    }
    get loadBalancerType() {
        return this.getStringAttribute('load_balancer_type');
    }
    set loadBalancerType(value) {
        this._loadBalancerType = value;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancerTypeInput() {
        return this._loadBalancerType;
    }
    get networkUrl() {
        return this.getStringAttribute('network_url');
    }
    set networkUrl(value) {
        this._networkUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkUrlInput() {
        return this._networkUrl;
    }
    get port() {
        return this.getStringAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
}
exports.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersOutputReference = DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersOutputReference[_f] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersOutputReference", version: "4.0.3" };
class DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersList = DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersList;
_g = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersList[_g] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersList", version: "4.0.3" };
function dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        internal_load_balancers: cdktf.listMapper(dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersToTerraform, true)(struct.internalLoadBalancers),
    };
}
exports.dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsToTerraform = dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsToTerraform;
class DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // internal_load_balancers - computed: false, optional: false, required: true
        this._internalLoadBalancers = new DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsInternalLoadBalancersList(this, "internal_load_balancers", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._internalLoadBalancers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.internalLoadBalancers = this._internalLoadBalancers?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._internalLoadBalancers.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._internalLoadBalancers.internalValue = value.internalLoadBalancers;
        }
    }
    get internalLoadBalancers() {
        return this._internalLoadBalancers;
    }
    putInternalLoadBalancers(value) {
        this._internalLoadBalancers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get internalLoadBalancersInput() {
        return this._internalLoadBalancers.internalValue;
    }
}
exports.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsOutputReference = DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsOutputReference[_h] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsOutputReference", version: "4.0.3" };
function dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        location: cdktf.stringToTerraform(struct.location),
        rrdatas: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.rrdatas),
        health_checked_targets: dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsToTerraform(struct.healthCheckedTargets),
    };
}
exports.dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoToTerraform = dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoToTerraform;
class DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // health_checked_targets - computed: false, optional: true, required: false
        this._healthCheckedTargets = new DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoHealthCheckedTargetsOutputReference(this, "health_checked_targets");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        if (this._rrdatas !== undefined) {
            hasAnyValues = true;
            internalValueResult.rrdatas = this._rrdatas;
        }
        if (this._healthCheckedTargets?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthCheckedTargets = this._healthCheckedTargets?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._location = undefined;
            this._rrdatas = undefined;
            this._healthCheckedTargets.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._location = value.location;
            this._rrdatas = value.rrdatas;
            this._healthCheckedTargets.internalValue = value.healthCheckedTargets;
        }
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get rrdatas() {
        return this.getListAttribute('rrdatas');
    }
    set rrdatas(value) {
        this._rrdatas = value;
    }
    resetRrdatas() {
        this._rrdatas = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rrdatasInput() {
        return this._rrdatas;
    }
    get healthCheckedTargets() {
        return this._healthCheckedTargets;
    }
    putHealthCheckedTargets(value) {
        this._healthCheckedTargets.internalValue = value;
    }
    resetHealthCheckedTargets() {
        this._healthCheckedTargets.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckedTargetsInput() {
        return this._healthCheckedTargets.internalValue;
    }
}
exports.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoOutputReference = DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoOutputReference[_j] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoOutputReference", version: "4.0.3" };
class DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoList = DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoList;
_k = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoList[_k] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoList", version: "4.0.3" };
function dnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ip_address: cdktf.stringToTerraform(struct.ipAddress),
        ip_protocol: cdktf.stringToTerraform(struct.ipProtocol),
        load_balancer_type: cdktf.stringToTerraform(struct.loadBalancerType),
        network_url: cdktf.stringToTerraform(struct.networkUrl),
        port: cdktf.stringToTerraform(struct.port),
        project: cdktf.stringToTerraform(struct.project),
        region: cdktf.stringToTerraform(struct.region),
    };
}
exports.dnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersToTerraform = dnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersToTerraform;
class DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ipAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipAddress = this._ipAddress;
        }
        if (this._ipProtocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipProtocol = this._ipProtocol;
        }
        if (this._loadBalancerType !== undefined) {
            hasAnyValues = true;
            internalValueResult.loadBalancerType = this._loadBalancerType;
        }
        if (this._networkUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkUrl = this._networkUrl;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._project !== undefined) {
            hasAnyValues = true;
            internalValueResult.project = this._project;
        }
        if (this._region !== undefined) {
            hasAnyValues = true;
            internalValueResult.region = this._region;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ipAddress = undefined;
            this._ipProtocol = undefined;
            this._loadBalancerType = undefined;
            this._networkUrl = undefined;
            this._port = undefined;
            this._project = undefined;
            this._region = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ipAddress = value.ipAddress;
            this._ipProtocol = value.ipProtocol;
            this._loadBalancerType = value.loadBalancerType;
            this._networkUrl = value.networkUrl;
            this._port = value.port;
            this._project = value.project;
            this._region = value.region;
        }
    }
    get ipAddress() {
        return this.getStringAttribute('ip_address');
    }
    set ipAddress(value) {
        this._ipAddress = value;
    }
    // Temporarily expose input value. Use with caution.
    get ipAddressInput() {
        return this._ipAddress;
    }
    get ipProtocol() {
        return this.getStringAttribute('ip_protocol');
    }
    set ipProtocol(value) {
        this._ipProtocol = value;
    }
    // Temporarily expose input value. Use with caution.
    get ipProtocolInput() {
        return this._ipProtocol;
    }
    get loadBalancerType() {
        return this.getStringAttribute('load_balancer_type');
    }
    set loadBalancerType(value) {
        this._loadBalancerType = value;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancerTypeInput() {
        return this._loadBalancerType;
    }
    get networkUrl() {
        return this.getStringAttribute('network_url');
    }
    set networkUrl(value) {
        this._networkUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkUrlInput() {
        return this._networkUrl;
    }
    get port() {
        return this.getStringAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
}
exports.DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersOutputReference = DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersOutputReference[_l] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersOutputReference", version: "4.0.3" };
class DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersList = DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersList;
_m = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersList[_m] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersList", version: "4.0.3" };
function dnsRecordSetRoutingPolicyPrimaryBackupPrimaryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        internal_load_balancers: cdktf.listMapper(dnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersToTerraform, true)(struct.internalLoadBalancers),
    };
}
exports.dnsRecordSetRoutingPolicyPrimaryBackupPrimaryToTerraform = dnsRecordSetRoutingPolicyPrimaryBackupPrimaryToTerraform;
class DnsRecordSetRoutingPolicyPrimaryBackupPrimaryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // internal_load_balancers - computed: false, optional: false, required: true
        this._internalLoadBalancers = new DnsRecordSetRoutingPolicyPrimaryBackupPrimaryInternalLoadBalancersList(this, "internal_load_balancers", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._internalLoadBalancers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.internalLoadBalancers = this._internalLoadBalancers?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._internalLoadBalancers.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._internalLoadBalancers.internalValue = value.internalLoadBalancers;
        }
    }
    get internalLoadBalancers() {
        return this._internalLoadBalancers;
    }
    putInternalLoadBalancers(value) {
        this._internalLoadBalancers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get internalLoadBalancersInput() {
        return this._internalLoadBalancers.internalValue;
    }
}
exports.DnsRecordSetRoutingPolicyPrimaryBackupPrimaryOutputReference = DnsRecordSetRoutingPolicyPrimaryBackupPrimaryOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyPrimaryBackupPrimaryOutputReference[_o] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyPrimaryBackupPrimaryOutputReference", version: "4.0.3" };
function dnsRecordSetRoutingPolicyPrimaryBackupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_geo_fencing_for_backups: cdktf.booleanToTerraform(struct.enableGeoFencingForBackups),
        trickle_ratio: cdktf.numberToTerraform(struct.trickleRatio),
        backup_geo: cdktf.listMapper(dnsRecordSetRoutingPolicyPrimaryBackupBackupGeoToTerraform, true)(struct.backupGeo),
        primary: dnsRecordSetRoutingPolicyPrimaryBackupPrimaryToTerraform(struct.primary),
    };
}
exports.dnsRecordSetRoutingPolicyPrimaryBackupToTerraform = dnsRecordSetRoutingPolicyPrimaryBackupToTerraform;
class DnsRecordSetRoutingPolicyPrimaryBackupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // backup_geo - computed: false, optional: false, required: true
        this._backupGeo = new DnsRecordSetRoutingPolicyPrimaryBackupBackupGeoList(this, "backup_geo", false);
        // primary - computed: false, optional: false, required: true
        this._primary = new DnsRecordSetRoutingPolicyPrimaryBackupPrimaryOutputReference(this, "primary");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableGeoFencingForBackups !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableGeoFencingForBackups = this._enableGeoFencingForBackups;
        }
        if (this._trickleRatio !== undefined) {
            hasAnyValues = true;
            internalValueResult.trickleRatio = this._trickleRatio;
        }
        if (this._backupGeo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.backupGeo = this._backupGeo?.internalValue;
        }
        if (this._primary?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.primary = this._primary?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableGeoFencingForBackups = undefined;
            this._trickleRatio = undefined;
            this._backupGeo.internalValue = undefined;
            this._primary.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableGeoFencingForBackups = value.enableGeoFencingForBackups;
            this._trickleRatio = value.trickleRatio;
            this._backupGeo.internalValue = value.backupGeo;
            this._primary.internalValue = value.primary;
        }
    }
    get enableGeoFencingForBackups() {
        return this.getBooleanAttribute('enable_geo_fencing_for_backups');
    }
    set enableGeoFencingForBackups(value) {
        this._enableGeoFencingForBackups = value;
    }
    resetEnableGeoFencingForBackups() {
        this._enableGeoFencingForBackups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableGeoFencingForBackupsInput() {
        return this._enableGeoFencingForBackups;
    }
    get trickleRatio() {
        return this.getNumberAttribute('trickle_ratio');
    }
    set trickleRatio(value) {
        this._trickleRatio = value;
    }
    resetTrickleRatio() {
        this._trickleRatio = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trickleRatioInput() {
        return this._trickleRatio;
    }
    get backupGeo() {
        return this._backupGeo;
    }
    putBackupGeo(value) {
        this._backupGeo.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get backupGeoInput() {
        return this._backupGeo.internalValue;
    }
    get primary() {
        return this._primary;
    }
    putPrimary(value) {
        this._primary.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get primaryInput() {
        return this._primary.internalValue;
    }
}
exports.DnsRecordSetRoutingPolicyPrimaryBackupOutputReference = DnsRecordSetRoutingPolicyPrimaryBackupOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyPrimaryBackupOutputReference[_p] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyPrimaryBackupOutputReference", version: "4.0.3" };
function dnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ip_address: cdktf.stringToTerraform(struct.ipAddress),
        ip_protocol: cdktf.stringToTerraform(struct.ipProtocol),
        load_balancer_type: cdktf.stringToTerraform(struct.loadBalancerType),
        network_url: cdktf.stringToTerraform(struct.networkUrl),
        port: cdktf.stringToTerraform(struct.port),
        project: cdktf.stringToTerraform(struct.project),
        region: cdktf.stringToTerraform(struct.region),
    };
}
exports.dnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersToTerraform = dnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersToTerraform;
class DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ipAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipAddress = this._ipAddress;
        }
        if (this._ipProtocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipProtocol = this._ipProtocol;
        }
        if (this._loadBalancerType !== undefined) {
            hasAnyValues = true;
            internalValueResult.loadBalancerType = this._loadBalancerType;
        }
        if (this._networkUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkUrl = this._networkUrl;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._project !== undefined) {
            hasAnyValues = true;
            internalValueResult.project = this._project;
        }
        if (this._region !== undefined) {
            hasAnyValues = true;
            internalValueResult.region = this._region;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ipAddress = undefined;
            this._ipProtocol = undefined;
            this._loadBalancerType = undefined;
            this._networkUrl = undefined;
            this._port = undefined;
            this._project = undefined;
            this._region = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ipAddress = value.ipAddress;
            this._ipProtocol = value.ipProtocol;
            this._loadBalancerType = value.loadBalancerType;
            this._networkUrl = value.networkUrl;
            this._port = value.port;
            this._project = value.project;
            this._region = value.region;
        }
    }
    get ipAddress() {
        return this.getStringAttribute('ip_address');
    }
    set ipAddress(value) {
        this._ipAddress = value;
    }
    // Temporarily expose input value. Use with caution.
    get ipAddressInput() {
        return this._ipAddress;
    }
    get ipProtocol() {
        return this.getStringAttribute('ip_protocol');
    }
    set ipProtocol(value) {
        this._ipProtocol = value;
    }
    // Temporarily expose input value. Use with caution.
    get ipProtocolInput() {
        return this._ipProtocol;
    }
    get loadBalancerType() {
        return this.getStringAttribute('load_balancer_type');
    }
    set loadBalancerType(value) {
        this._loadBalancerType = value;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancerTypeInput() {
        return this._loadBalancerType;
    }
    get networkUrl() {
        return this.getStringAttribute('network_url');
    }
    set networkUrl(value) {
        this._networkUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkUrlInput() {
        return this._networkUrl;
    }
    get port() {
        return this.getStringAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
}
exports.DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersOutputReference = DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersOutputReference[_q] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersOutputReference", version: "4.0.3" };
class DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersList = DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersList;
_r = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersList[_r] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersList", version: "4.0.3" };
function dnsRecordSetRoutingPolicyWrrHealthCheckedTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        internal_load_balancers: cdktf.listMapper(dnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersToTerraform, true)(struct.internalLoadBalancers),
    };
}
exports.dnsRecordSetRoutingPolicyWrrHealthCheckedTargetsToTerraform = dnsRecordSetRoutingPolicyWrrHealthCheckedTargetsToTerraform;
class DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // internal_load_balancers - computed: false, optional: false, required: true
        this._internalLoadBalancers = new DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsInternalLoadBalancersList(this, "internal_load_balancers", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._internalLoadBalancers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.internalLoadBalancers = this._internalLoadBalancers?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._internalLoadBalancers.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._internalLoadBalancers.internalValue = value.internalLoadBalancers;
        }
    }
    get internalLoadBalancers() {
        return this._internalLoadBalancers;
    }
    putInternalLoadBalancers(value) {
        this._internalLoadBalancers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get internalLoadBalancersInput() {
        return this._internalLoadBalancers.internalValue;
    }
}
exports.DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsOutputReference = DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsOutputReference[_s] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsOutputReference", version: "4.0.3" };
function dnsRecordSetRoutingPolicyWrrToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rrdatas: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.rrdatas),
        weight: cdktf.numberToTerraform(struct.weight),
        health_checked_targets: dnsRecordSetRoutingPolicyWrrHealthCheckedTargetsToTerraform(struct.healthCheckedTargets),
    };
}
exports.dnsRecordSetRoutingPolicyWrrToTerraform = dnsRecordSetRoutingPolicyWrrToTerraform;
class DnsRecordSetRoutingPolicyWrrOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // health_checked_targets - computed: false, optional: true, required: false
        this._healthCheckedTargets = new DnsRecordSetRoutingPolicyWrrHealthCheckedTargetsOutputReference(this, "health_checked_targets");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._rrdatas !== undefined) {
            hasAnyValues = true;
            internalValueResult.rrdatas = this._rrdatas;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        if (this._healthCheckedTargets?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthCheckedTargets = this._healthCheckedTargets?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._rrdatas = undefined;
            this._weight = undefined;
            this._healthCheckedTargets.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._rrdatas = value.rrdatas;
            this._weight = value.weight;
            this._healthCheckedTargets.internalValue = value.healthCheckedTargets;
        }
    }
    get rrdatas() {
        return this.getListAttribute('rrdatas');
    }
    set rrdatas(value) {
        this._rrdatas = value;
    }
    resetRrdatas() {
        this._rrdatas = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rrdatasInput() {
        return this._rrdatas;
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
    get healthCheckedTargets() {
        return this._healthCheckedTargets;
    }
    putHealthCheckedTargets(value) {
        this._healthCheckedTargets.internalValue = value;
    }
    resetHealthCheckedTargets() {
        this._healthCheckedTargets.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckedTargetsInput() {
        return this._healthCheckedTargets.internalValue;
    }
}
exports.DnsRecordSetRoutingPolicyWrrOutputReference = DnsRecordSetRoutingPolicyWrrOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyWrrOutputReference[_t] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyWrrOutputReference", version: "4.0.3" };
class DnsRecordSetRoutingPolicyWrrList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DnsRecordSetRoutingPolicyWrrOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DnsRecordSetRoutingPolicyWrrList = DnsRecordSetRoutingPolicyWrrList;
_u = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyWrrList[_u] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyWrrList", version: "4.0.3" };
function dnsRecordSetRoutingPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_geo_fencing: cdktf.booleanToTerraform(struct.enableGeoFencing),
        geo: cdktf.listMapper(dnsRecordSetRoutingPolicyGeoToTerraform, true)(struct.geo),
        primary_backup: dnsRecordSetRoutingPolicyPrimaryBackupToTerraform(struct.primaryBackup),
        wrr: cdktf.listMapper(dnsRecordSetRoutingPolicyWrrToTerraform, true)(struct.wrr),
    };
}
exports.dnsRecordSetRoutingPolicyToTerraform = dnsRecordSetRoutingPolicyToTerraform;
class DnsRecordSetRoutingPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // geo - computed: false, optional: true, required: false
        this._geo = new DnsRecordSetRoutingPolicyGeoList(this, "geo", false);
        // primary_backup - computed: false, optional: true, required: false
        this._primaryBackup = new DnsRecordSetRoutingPolicyPrimaryBackupOutputReference(this, "primary_backup");
        // wrr - computed: false, optional: true, required: false
        this._wrr = new DnsRecordSetRoutingPolicyWrrList(this, "wrr", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableGeoFencing !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableGeoFencing = this._enableGeoFencing;
        }
        if (this._geo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.geo = this._geo?.internalValue;
        }
        if (this._primaryBackup?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryBackup = this._primaryBackup?.internalValue;
        }
        if (this._wrr?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.wrr = this._wrr?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableGeoFencing = undefined;
            this._geo.internalValue = undefined;
            this._primaryBackup.internalValue = undefined;
            this._wrr.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableGeoFencing = value.enableGeoFencing;
            this._geo.internalValue = value.geo;
            this._primaryBackup.internalValue = value.primaryBackup;
            this._wrr.internalValue = value.wrr;
        }
    }
    get enableGeoFencing() {
        return this.getBooleanAttribute('enable_geo_fencing');
    }
    set enableGeoFencing(value) {
        this._enableGeoFencing = value;
    }
    resetEnableGeoFencing() {
        this._enableGeoFencing = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableGeoFencingInput() {
        return this._enableGeoFencing;
    }
    get geo() {
        return this._geo;
    }
    putGeo(value) {
        this._geo.internalValue = value;
    }
    resetGeo() {
        this._geo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get geoInput() {
        return this._geo.internalValue;
    }
    get primaryBackup() {
        return this._primaryBackup;
    }
    putPrimaryBackup(value) {
        this._primaryBackup.internalValue = value;
    }
    resetPrimaryBackup() {
        this._primaryBackup.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryBackupInput() {
        return this._primaryBackup.internalValue;
    }
    get wrr() {
        return this._wrr;
    }
    putWrr(value) {
        this._wrr.internalValue = value;
    }
    resetWrr() {
        this._wrr.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get wrrInput() {
        return this._wrr.internalValue;
    }
}
exports.DnsRecordSetRoutingPolicyOutputReference = DnsRecordSetRoutingPolicyOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DnsRecordSetRoutingPolicyOutputReference[_v] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSetRoutingPolicyOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/dns_record_set google_dns_record_set}
*/
class DnsRecordSet extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/dns_record_set google_dns_record_set} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DnsRecordSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_dns_record_set',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // routing_policy - computed: false, optional: true, required: false
        this._routingPolicy = new DnsRecordSetRoutingPolicyOutputReference(this, "routing_policy");
        this._id = config.id;
        this._managedZone = config.managedZone;
        this._name = config.name;
        this._project = config.project;
        this._rrdatas = config.rrdatas;
        this._ttl = config.ttl;
        this._type = config.type;
        this._routingPolicy.internalValue = config.routingPolicy;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get managedZone() {
        return this.getStringAttribute('managed_zone');
    }
    set managedZone(value) {
        this._managedZone = value;
    }
    // Temporarily expose input value. Use with caution.
    get managedZoneInput() {
        return this._managedZone;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get rrdatas() {
        return this.getListAttribute('rrdatas');
    }
    set rrdatas(value) {
        this._rrdatas = value;
    }
    resetRrdatas() {
        this._rrdatas = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rrdatasInput() {
        return this._rrdatas;
    }
    get ttl() {
        return this.getNumberAttribute('ttl');
    }
    set ttl(value) {
        this._ttl = value;
    }
    resetTtl() {
        this._ttl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ttlInput() {
        return this._ttl;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get routingPolicy() {
        return this._routingPolicy;
    }
    putRoutingPolicy(value) {
        this._routingPolicy.internalValue = value;
    }
    resetRoutingPolicy() {
        this._routingPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routingPolicyInput() {
        return this._routingPolicy.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            managed_zone: cdktf.stringToTerraform(this._managedZone),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            rrdatas: cdktf.listMapper(cdktf.stringToTerraform, false)(this._rrdatas),
            ttl: cdktf.numberToTerraform(this._ttl),
            type: cdktf.stringToTerraform(this._type),
            routing_policy: dnsRecordSetRoutingPolicyToTerraform(this._routingPolicy.internalValue),
        };
    }
}
exports.DnsRecordSet = DnsRecordSet;
_w = JSII_RTTI_SYMBOL_1;
DnsRecordSet[_w] = { fqn: "@cdktf/provider-google.dnsRecordSet.DnsRecordSet", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
DnsRecordSet.tfResourceType = "google_dns_record_set";
//# sourceMappingURL=data:application/json;base64,