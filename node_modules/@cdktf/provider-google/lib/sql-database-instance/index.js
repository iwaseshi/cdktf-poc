"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlDatabaseInstance = exports.SqlDatabaseInstanceTimeoutsOutputReference = exports.sqlDatabaseInstanceTimeoutsToTerraform = exports.SqlDatabaseInstanceSettingsOutputReference = exports.sqlDatabaseInstanceSettingsToTerraform = exports.SqlDatabaseInstanceSettingsSqlServerAuditConfigOutputReference = exports.sqlDatabaseInstanceSettingsSqlServerAuditConfigToTerraform = exports.SqlDatabaseInstanceSettingsPasswordValidationPolicyOutputReference = exports.sqlDatabaseInstanceSettingsPasswordValidationPolicyToTerraform = exports.SqlDatabaseInstanceSettingsMaintenanceWindowOutputReference = exports.sqlDatabaseInstanceSettingsMaintenanceWindowToTerraform = exports.SqlDatabaseInstanceSettingsLocationPreferenceOutputReference = exports.sqlDatabaseInstanceSettingsLocationPreferenceToTerraform = exports.SqlDatabaseInstanceSettingsIpConfigurationOutputReference = exports.sqlDatabaseInstanceSettingsIpConfigurationToTerraform = exports.SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksList = exports.SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksOutputReference = exports.sqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksToTerraform = exports.SqlDatabaseInstanceSettingsInsightsConfigOutputReference = exports.sqlDatabaseInstanceSettingsInsightsConfigToTerraform = exports.SqlDatabaseInstanceSettingsDenyMaintenancePeriodOutputReference = exports.sqlDatabaseInstanceSettingsDenyMaintenancePeriodToTerraform = exports.SqlDatabaseInstanceSettingsDatabaseFlagsList = exports.SqlDatabaseInstanceSettingsDatabaseFlagsOutputReference = exports.sqlDatabaseInstanceSettingsDatabaseFlagsToTerraform = exports.SqlDatabaseInstanceSettingsBackupConfigurationOutputReference = exports.sqlDatabaseInstanceSettingsBackupConfigurationToTerraform = exports.SqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsOutputReference = exports.sqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsToTerraform = exports.SqlDatabaseInstanceSettingsActiveDirectoryConfigOutputReference = exports.sqlDatabaseInstanceSettingsActiveDirectoryConfigToTerraform = exports.SqlDatabaseInstanceRestoreBackupContextOutputReference = exports.sqlDatabaseInstanceRestoreBackupContextToTerraform = exports.SqlDatabaseInstanceReplicaConfigurationOutputReference = exports.sqlDatabaseInstanceReplicaConfigurationToTerraform = exports.SqlDatabaseInstanceCloneOutputReference = exports.sqlDatabaseInstanceCloneToTerraform = exports.SqlDatabaseInstanceServerCaCertList = exports.SqlDatabaseInstanceServerCaCertOutputReference = exports.sqlDatabaseInstanceServerCaCertToTerraform = exports.SqlDatabaseInstanceIpAddressList = exports.SqlDatabaseInstanceIpAddressOutputReference = exports.sqlDatabaseInstanceIpAddressToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sqlDatabaseInstanceIpAddressToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.sqlDatabaseInstanceIpAddressToTerraform = sqlDatabaseInstanceIpAddressToTerraform;
class SqlDatabaseInstanceIpAddressOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // ip_address - computed: true, optional: false, required: false
    get ipAddress() {
        return this.getStringAttribute('ip_address');
    }
    // time_to_retire - computed: true, optional: false, required: false
    get timeToRetire() {
        return this.getStringAttribute('time_to_retire');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.SqlDatabaseInstanceIpAddressOutputReference = SqlDatabaseInstanceIpAddressOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceIpAddressOutputReference[_a] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceIpAddressOutputReference", version: "5.0.1" };
class SqlDatabaseInstanceIpAddressList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SqlDatabaseInstanceIpAddressOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SqlDatabaseInstanceIpAddressList = SqlDatabaseInstanceIpAddressList;
_b = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceIpAddressList[_b] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceIpAddressList", version: "5.0.1" };
function sqlDatabaseInstanceServerCaCertToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.sqlDatabaseInstanceServerCaCertToTerraform = sqlDatabaseInstanceServerCaCertToTerraform;
class SqlDatabaseInstanceServerCaCertOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // cert - computed: true, optional: false, required: false
    get cert() {
        return this.getStringAttribute('cert');
    }
    // common_name - computed: true, optional: false, required: false
    get commonName() {
        return this.getStringAttribute('common_name');
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    // expiration_time - computed: true, optional: false, required: false
    get expirationTime() {
        return this.getStringAttribute('expiration_time');
    }
    // sha1_fingerprint - computed: true, optional: false, required: false
    get sha1Fingerprint() {
        return this.getStringAttribute('sha1_fingerprint');
    }
}
exports.SqlDatabaseInstanceServerCaCertOutputReference = SqlDatabaseInstanceServerCaCertOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceServerCaCertOutputReference[_c] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceServerCaCertOutputReference", version: "5.0.1" };
class SqlDatabaseInstanceServerCaCertList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SqlDatabaseInstanceServerCaCertOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SqlDatabaseInstanceServerCaCertList = SqlDatabaseInstanceServerCaCertList;
_d = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceServerCaCertList[_d] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceServerCaCertList", version: "5.0.1" };
function sqlDatabaseInstanceCloneToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allocated_ip_range: cdktf.stringToTerraform(struct.allocatedIpRange),
        point_in_time: cdktf.stringToTerraform(struct.pointInTime),
        source_instance_name: cdktf.stringToTerraform(struct.sourceInstanceName),
    };
}
exports.sqlDatabaseInstanceCloneToTerraform = sqlDatabaseInstanceCloneToTerraform;
class SqlDatabaseInstanceCloneOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allocatedIpRange !== undefined) {
            hasAnyValues = true;
            internalValueResult.allocatedIpRange = this._allocatedIpRange;
        }
        if (this._pointInTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.pointInTime = this._pointInTime;
        }
        if (this._sourceInstanceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceInstanceName = this._sourceInstanceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allocatedIpRange = undefined;
            this._pointInTime = undefined;
            this._sourceInstanceName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allocatedIpRange = value.allocatedIpRange;
            this._pointInTime = value.pointInTime;
            this._sourceInstanceName = value.sourceInstanceName;
        }
    }
    get allocatedIpRange() {
        return this.getStringAttribute('allocated_ip_range');
    }
    set allocatedIpRange(value) {
        this._allocatedIpRange = value;
    }
    resetAllocatedIpRange() {
        this._allocatedIpRange = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allocatedIpRangeInput() {
        return this._allocatedIpRange;
    }
    get pointInTime() {
        return this.getStringAttribute('point_in_time');
    }
    set pointInTime(value) {
        this._pointInTime = value;
    }
    resetPointInTime() {
        this._pointInTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pointInTimeInput() {
        return this._pointInTime;
    }
    get sourceInstanceName() {
        return this.getStringAttribute('source_instance_name');
    }
    set sourceInstanceName(value) {
        this._sourceInstanceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInstanceNameInput() {
        return this._sourceInstanceName;
    }
}
exports.SqlDatabaseInstanceCloneOutputReference = SqlDatabaseInstanceCloneOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceCloneOutputReference[_e] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceCloneOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceReplicaConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
        client_certificate: cdktf.stringToTerraform(struct.clientCertificate),
        client_key: cdktf.stringToTerraform(struct.clientKey),
        connect_retry_interval: cdktf.numberToTerraform(struct.connectRetryInterval),
        dump_file_path: cdktf.stringToTerraform(struct.dumpFilePath),
        failover_target: cdktf.booleanToTerraform(struct.failoverTarget),
        master_heartbeat_period: cdktf.numberToTerraform(struct.masterHeartbeatPeriod),
        password: cdktf.stringToTerraform(struct.password),
        ssl_cipher: cdktf.stringToTerraform(struct.sslCipher),
        username: cdktf.stringToTerraform(struct.username),
        verify_server_certificate: cdktf.booleanToTerraform(struct.verifyServerCertificate),
    };
}
exports.sqlDatabaseInstanceReplicaConfigurationToTerraform = sqlDatabaseInstanceReplicaConfigurationToTerraform;
class SqlDatabaseInstanceReplicaConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        if (this._clientCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientCertificate = this._clientCertificate;
        }
        if (this._clientKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientKey = this._clientKey;
        }
        if (this._connectRetryInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectRetryInterval = this._connectRetryInterval;
        }
        if (this._dumpFilePath !== undefined) {
            hasAnyValues = true;
            internalValueResult.dumpFilePath = this._dumpFilePath;
        }
        if (this._failoverTarget !== undefined) {
            hasAnyValues = true;
            internalValueResult.failoverTarget = this._failoverTarget;
        }
        if (this._masterHeartbeatPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterHeartbeatPeriod = this._masterHeartbeatPeriod;
        }
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._sslCipher !== undefined) {
            hasAnyValues = true;
            internalValueResult.sslCipher = this._sslCipher;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        if (this._verifyServerCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.verifyServerCertificate = this._verifyServerCertificate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
            this._clientCertificate = undefined;
            this._clientKey = undefined;
            this._connectRetryInterval = undefined;
            this._dumpFilePath = undefined;
            this._failoverTarget = undefined;
            this._masterHeartbeatPeriod = undefined;
            this._password = undefined;
            this._sslCipher = undefined;
            this._username = undefined;
            this._verifyServerCertificate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
            this._clientCertificate = value.clientCertificate;
            this._clientKey = value.clientKey;
            this._connectRetryInterval = value.connectRetryInterval;
            this._dumpFilePath = value.dumpFilePath;
            this._failoverTarget = value.failoverTarget;
            this._masterHeartbeatPeriod = value.masterHeartbeatPeriod;
            this._password = value.password;
            this._sslCipher = value.sslCipher;
            this._username = value.username;
            this._verifyServerCertificate = value.verifyServerCertificate;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    resetCaCertificate() {
        this._caCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
    get clientCertificate() {
        return this.getStringAttribute('client_certificate');
    }
    set clientCertificate(value) {
        this._clientCertificate = value;
    }
    resetClientCertificate() {
        this._clientCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertificateInput() {
        return this._clientCertificate;
    }
    get clientKey() {
        return this.getStringAttribute('client_key');
    }
    set clientKey(value) {
        this._clientKey = value;
    }
    resetClientKey() {
        this._clientKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientKeyInput() {
        return this._clientKey;
    }
    get connectRetryInterval() {
        return this.getNumberAttribute('connect_retry_interval');
    }
    set connectRetryInterval(value) {
        this._connectRetryInterval = value;
    }
    resetConnectRetryInterval() {
        this._connectRetryInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectRetryIntervalInput() {
        return this._connectRetryInterval;
    }
    get dumpFilePath() {
        return this.getStringAttribute('dump_file_path');
    }
    set dumpFilePath(value) {
        this._dumpFilePath = value;
    }
    resetDumpFilePath() {
        this._dumpFilePath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dumpFilePathInput() {
        return this._dumpFilePath;
    }
    get failoverTarget() {
        return this.getBooleanAttribute('failover_target');
    }
    set failoverTarget(value) {
        this._failoverTarget = value;
    }
    resetFailoverTarget() {
        this._failoverTarget = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failoverTargetInput() {
        return this._failoverTarget;
    }
    get masterHeartbeatPeriod() {
        return this.getNumberAttribute('master_heartbeat_period');
    }
    set masterHeartbeatPeriod(value) {
        this._masterHeartbeatPeriod = value;
    }
    resetMasterHeartbeatPeriod() {
        this._masterHeartbeatPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterHeartbeatPeriodInput() {
        return this._masterHeartbeatPeriod;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    resetPassword() {
        this._password = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get sslCipher() {
        return this.getStringAttribute('ssl_cipher');
    }
    set sslCipher(value) {
        this._sslCipher = value;
    }
    resetSslCipher() {
        this._sslCipher = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslCipherInput() {
        return this._sslCipher;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
    get verifyServerCertificate() {
        return this.getBooleanAttribute('verify_server_certificate');
    }
    set verifyServerCertificate(value) {
        this._verifyServerCertificate = value;
    }
    resetVerifyServerCertificate() {
        this._verifyServerCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get verifyServerCertificateInput() {
        return this._verifyServerCertificate;
    }
}
exports.SqlDatabaseInstanceReplicaConfigurationOutputReference = SqlDatabaseInstanceReplicaConfigurationOutputReference;
_f = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceReplicaConfigurationOutputReference[_f] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceReplicaConfigurationOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceRestoreBackupContextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backup_run_id: cdktf.numberToTerraform(struct.backupRunId),
        instance_id: cdktf.stringToTerraform(struct.instanceId),
        project: cdktf.stringToTerraform(struct.project),
    };
}
exports.sqlDatabaseInstanceRestoreBackupContextToTerraform = sqlDatabaseInstanceRestoreBackupContextToTerraform;
class SqlDatabaseInstanceRestoreBackupContextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backupRunId !== undefined) {
            hasAnyValues = true;
            internalValueResult.backupRunId = this._backupRunId;
        }
        if (this._instanceId !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceId = this._instanceId;
        }
        if (this._project !== undefined) {
            hasAnyValues = true;
            internalValueResult.project = this._project;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backupRunId = undefined;
            this._instanceId = undefined;
            this._project = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backupRunId = value.backupRunId;
            this._instanceId = value.instanceId;
            this._project = value.project;
        }
    }
    get backupRunId() {
        return this.getNumberAttribute('backup_run_id');
    }
    set backupRunId(value) {
        this._backupRunId = value;
    }
    // Temporarily expose input value. Use with caution.
    get backupRunIdInput() {
        return this._backupRunId;
    }
    get instanceId() {
        return this.getStringAttribute('instance_id');
    }
    set instanceId(value) {
        this._instanceId = value;
    }
    resetInstanceId() {
        this._instanceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceIdInput() {
        return this._instanceId;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
}
exports.SqlDatabaseInstanceRestoreBackupContextOutputReference = SqlDatabaseInstanceRestoreBackupContextOutputReference;
_g = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceRestoreBackupContextOutputReference[_g] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceRestoreBackupContextOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceSettingsActiveDirectoryConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        domain: cdktf.stringToTerraform(struct.domain),
    };
}
exports.sqlDatabaseInstanceSettingsActiveDirectoryConfigToTerraform = sqlDatabaseInstanceSettingsActiveDirectoryConfigToTerraform;
class SqlDatabaseInstanceSettingsActiveDirectoryConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._domain !== undefined) {
            hasAnyValues = true;
            internalValueResult.domain = this._domain;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._domain = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._domain = value.domain;
        }
    }
    get domain() {
        return this.getStringAttribute('domain');
    }
    set domain(value) {
        this._domain = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainInput() {
        return this._domain;
    }
}
exports.SqlDatabaseInstanceSettingsActiveDirectoryConfigOutputReference = SqlDatabaseInstanceSettingsActiveDirectoryConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsActiveDirectoryConfigOutputReference[_h] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsActiveDirectoryConfigOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        retained_backups: cdktf.numberToTerraform(struct.retainedBackups),
        retention_unit: cdktf.stringToTerraform(struct.retentionUnit),
    };
}
exports.sqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsToTerraform = sqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsToTerraform;
class SqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._retainedBackups !== undefined) {
            hasAnyValues = true;
            internalValueResult.retainedBackups = this._retainedBackups;
        }
        if (this._retentionUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.retentionUnit = this._retentionUnit;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._retainedBackups = undefined;
            this._retentionUnit = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._retainedBackups = value.retainedBackups;
            this._retentionUnit = value.retentionUnit;
        }
    }
    get retainedBackups() {
        return this.getNumberAttribute('retained_backups');
    }
    set retainedBackups(value) {
        this._retainedBackups = value;
    }
    // Temporarily expose input value. Use with caution.
    get retainedBackupsInput() {
        return this._retainedBackups;
    }
    get retentionUnit() {
        return this.getStringAttribute('retention_unit');
    }
    set retentionUnit(value) {
        this._retentionUnit = value;
    }
    resetRetentionUnit() {
        this._retentionUnit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionUnitInput() {
        return this._retentionUnit;
    }
}
exports.SqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsOutputReference = SqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsOutputReference[_j] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceSettingsBackupConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        binary_log_enabled: cdktf.booleanToTerraform(struct.binaryLogEnabled),
        enabled: cdktf.booleanToTerraform(struct.enabled),
        location: cdktf.stringToTerraform(struct.location),
        point_in_time_recovery_enabled: cdktf.booleanToTerraform(struct.pointInTimeRecoveryEnabled),
        start_time: cdktf.stringToTerraform(struct.startTime),
        transaction_log_retention_days: cdktf.numberToTerraform(struct.transactionLogRetentionDays),
        backup_retention_settings: sqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsToTerraform(struct.backupRetentionSettings),
    };
}
exports.sqlDatabaseInstanceSettingsBackupConfigurationToTerraform = sqlDatabaseInstanceSettingsBackupConfigurationToTerraform;
class SqlDatabaseInstanceSettingsBackupConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // backup_retention_settings - computed: false, optional: true, required: false
        this._backupRetentionSettings = new SqlDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsOutputReference(this, "backup_retention_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._binaryLogEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.binaryLogEnabled = this._binaryLogEnabled;
        }
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        if (this._pointInTimeRecoveryEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.pointInTimeRecoveryEnabled = this._pointInTimeRecoveryEnabled;
        }
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        if (this._transactionLogRetentionDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.transactionLogRetentionDays = this._transactionLogRetentionDays;
        }
        if (this._backupRetentionSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.backupRetentionSettings = this._backupRetentionSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._binaryLogEnabled = undefined;
            this._enabled = undefined;
            this._location = undefined;
            this._pointInTimeRecoveryEnabled = undefined;
            this._startTime = undefined;
            this._transactionLogRetentionDays = undefined;
            this._backupRetentionSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._binaryLogEnabled = value.binaryLogEnabled;
            this._enabled = value.enabled;
            this._location = value.location;
            this._pointInTimeRecoveryEnabled = value.pointInTimeRecoveryEnabled;
            this._startTime = value.startTime;
            this._transactionLogRetentionDays = value.transactionLogRetentionDays;
            this._backupRetentionSettings.internalValue = value.backupRetentionSettings;
        }
    }
    get binaryLogEnabled() {
        return this.getBooleanAttribute('binary_log_enabled');
    }
    set binaryLogEnabled(value) {
        this._binaryLogEnabled = value;
    }
    resetBinaryLogEnabled() {
        this._binaryLogEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get binaryLogEnabledInput() {
        return this._binaryLogEnabled;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get pointInTimeRecoveryEnabled() {
        return this.getBooleanAttribute('point_in_time_recovery_enabled');
    }
    set pointInTimeRecoveryEnabled(value) {
        this._pointInTimeRecoveryEnabled = value;
    }
    resetPointInTimeRecoveryEnabled() {
        this._pointInTimeRecoveryEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pointInTimeRecoveryEnabledInput() {
        return this._pointInTimeRecoveryEnabled;
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    resetStartTime() {
        this._startTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
    get transactionLogRetentionDays() {
        return this.getNumberAttribute('transaction_log_retention_days');
    }
    set transactionLogRetentionDays(value) {
        this._transactionLogRetentionDays = value;
    }
    resetTransactionLogRetentionDays() {
        this._transactionLogRetentionDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transactionLogRetentionDaysInput() {
        return this._transactionLogRetentionDays;
    }
    get backupRetentionSettings() {
        return this._backupRetentionSettings;
    }
    putBackupRetentionSettings(value) {
        this._backupRetentionSettings.internalValue = value;
    }
    resetBackupRetentionSettings() {
        this._backupRetentionSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupRetentionSettingsInput() {
        return this._backupRetentionSettings.internalValue;
    }
}
exports.SqlDatabaseInstanceSettingsBackupConfigurationOutputReference = SqlDatabaseInstanceSettingsBackupConfigurationOutputReference;
_k = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsBackupConfigurationOutputReference[_k] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsBackupConfigurationOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceSettingsDatabaseFlagsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sqlDatabaseInstanceSettingsDatabaseFlagsToTerraform = sqlDatabaseInstanceSettingsDatabaseFlagsToTerraform;
class SqlDatabaseInstanceSettingsDatabaseFlagsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._value = value.value;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.SqlDatabaseInstanceSettingsDatabaseFlagsOutputReference = SqlDatabaseInstanceSettingsDatabaseFlagsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsDatabaseFlagsOutputReference[_l] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsDatabaseFlagsOutputReference", version: "5.0.1" };
class SqlDatabaseInstanceSettingsDatabaseFlagsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SqlDatabaseInstanceSettingsDatabaseFlagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SqlDatabaseInstanceSettingsDatabaseFlagsList = SqlDatabaseInstanceSettingsDatabaseFlagsList;
_m = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsDatabaseFlagsList[_m] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsDatabaseFlagsList", version: "5.0.1" };
function sqlDatabaseInstanceSettingsDenyMaintenancePeriodToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        end_date: cdktf.stringToTerraform(struct.endDate),
        start_date: cdktf.stringToTerraform(struct.startDate),
        time: cdktf.stringToTerraform(struct.time),
    };
}
exports.sqlDatabaseInstanceSettingsDenyMaintenancePeriodToTerraform = sqlDatabaseInstanceSettingsDenyMaintenancePeriodToTerraform;
class SqlDatabaseInstanceSettingsDenyMaintenancePeriodOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endDate !== undefined) {
            hasAnyValues = true;
            internalValueResult.endDate = this._endDate;
        }
        if (this._startDate !== undefined) {
            hasAnyValues = true;
            internalValueResult.startDate = this._startDate;
        }
        if (this._time !== undefined) {
            hasAnyValues = true;
            internalValueResult.time = this._time;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._endDate = undefined;
            this._startDate = undefined;
            this._time = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._endDate = value.endDate;
            this._startDate = value.startDate;
            this._time = value.time;
        }
    }
    get endDate() {
        return this.getStringAttribute('end_date');
    }
    set endDate(value) {
        this._endDate = value;
    }
    // Temporarily expose input value. Use with caution.
    get endDateInput() {
        return this._endDate;
    }
    get startDate() {
        return this.getStringAttribute('start_date');
    }
    set startDate(value) {
        this._startDate = value;
    }
    // Temporarily expose input value. Use with caution.
    get startDateInput() {
        return this._startDate;
    }
    get time() {
        return this.getStringAttribute('time');
    }
    set time(value) {
        this._time = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeInput() {
        return this._time;
    }
}
exports.SqlDatabaseInstanceSettingsDenyMaintenancePeriodOutputReference = SqlDatabaseInstanceSettingsDenyMaintenancePeriodOutputReference;
_o = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsDenyMaintenancePeriodOutputReference[_o] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsDenyMaintenancePeriodOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceSettingsInsightsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        query_insights_enabled: cdktf.booleanToTerraform(struct.queryInsightsEnabled),
        query_plans_per_minute: cdktf.numberToTerraform(struct.queryPlansPerMinute),
        query_string_length: cdktf.numberToTerraform(struct.queryStringLength),
        record_application_tags: cdktf.booleanToTerraform(struct.recordApplicationTags),
        record_client_address: cdktf.booleanToTerraform(struct.recordClientAddress),
    };
}
exports.sqlDatabaseInstanceSettingsInsightsConfigToTerraform = sqlDatabaseInstanceSettingsInsightsConfigToTerraform;
class SqlDatabaseInstanceSettingsInsightsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._queryInsightsEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryInsightsEnabled = this._queryInsightsEnabled;
        }
        if (this._queryPlansPerMinute !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryPlansPerMinute = this._queryPlansPerMinute;
        }
        if (this._queryStringLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryStringLength = this._queryStringLength;
        }
        if (this._recordApplicationTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordApplicationTags = this._recordApplicationTags;
        }
        if (this._recordClientAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordClientAddress = this._recordClientAddress;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._queryInsightsEnabled = undefined;
            this._queryPlansPerMinute = undefined;
            this._queryStringLength = undefined;
            this._recordApplicationTags = undefined;
            this._recordClientAddress = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._queryInsightsEnabled = value.queryInsightsEnabled;
            this._queryPlansPerMinute = value.queryPlansPerMinute;
            this._queryStringLength = value.queryStringLength;
            this._recordApplicationTags = value.recordApplicationTags;
            this._recordClientAddress = value.recordClientAddress;
        }
    }
    get queryInsightsEnabled() {
        return this.getBooleanAttribute('query_insights_enabled');
    }
    set queryInsightsEnabled(value) {
        this._queryInsightsEnabled = value;
    }
    resetQueryInsightsEnabled() {
        this._queryInsightsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryInsightsEnabledInput() {
        return this._queryInsightsEnabled;
    }
    get queryPlansPerMinute() {
        return this.getNumberAttribute('query_plans_per_minute');
    }
    set queryPlansPerMinute(value) {
        this._queryPlansPerMinute = value;
    }
    resetQueryPlansPerMinute() {
        this._queryPlansPerMinute = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryPlansPerMinuteInput() {
        return this._queryPlansPerMinute;
    }
    get queryStringLength() {
        return this.getNumberAttribute('query_string_length');
    }
    set queryStringLength(value) {
        this._queryStringLength = value;
    }
    resetQueryStringLength() {
        this._queryStringLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryStringLengthInput() {
        return this._queryStringLength;
    }
    get recordApplicationTags() {
        return this.getBooleanAttribute('record_application_tags');
    }
    set recordApplicationTags(value) {
        this._recordApplicationTags = value;
    }
    resetRecordApplicationTags() {
        this._recordApplicationTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recordApplicationTagsInput() {
        return this._recordApplicationTags;
    }
    get recordClientAddress() {
        return this.getBooleanAttribute('record_client_address');
    }
    set recordClientAddress(value) {
        this._recordClientAddress = value;
    }
    resetRecordClientAddress() {
        this._recordClientAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recordClientAddressInput() {
        return this._recordClientAddress;
    }
}
exports.SqlDatabaseInstanceSettingsInsightsConfigOutputReference = SqlDatabaseInstanceSettingsInsightsConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsInsightsConfigOutputReference[_p] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsInsightsConfigOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        expiration_time: cdktf.stringToTerraform(struct.expirationTime),
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.sqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksToTerraform = sqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksToTerraform;
class SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._expirationTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.expirationTime = this._expirationTime;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._expirationTime = undefined;
            this._name = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._expirationTime = value.expirationTime;
            this._name = value.name;
            this._value = value.value;
        }
    }
    get expirationTime() {
        return this.getStringAttribute('expiration_time');
    }
    set expirationTime(value) {
        this._expirationTime = value;
    }
    resetExpirationTime() {
        this._expirationTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expirationTimeInput() {
        return this._expirationTime;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksOutputReference = SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksOutputReference;
_q = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksOutputReference[_q] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksOutputReference", version: "5.0.1" };
class SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksList = SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksList;
_r = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksList[_r] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksList", version: "5.0.1" };
function sqlDatabaseInstanceSettingsIpConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allocated_ip_range: cdktf.stringToTerraform(struct.allocatedIpRange),
        ipv4_enabled: cdktf.booleanToTerraform(struct.ipv4Enabled),
        private_network: cdktf.stringToTerraform(struct.privateNetwork),
        require_ssl: cdktf.booleanToTerraform(struct.requireSsl),
        authorized_networks: cdktf.listMapper(sqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksToTerraform, true)(struct.authorizedNetworks),
    };
}
exports.sqlDatabaseInstanceSettingsIpConfigurationToTerraform = sqlDatabaseInstanceSettingsIpConfigurationToTerraform;
class SqlDatabaseInstanceSettingsIpConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authorized_networks - computed: false, optional: true, required: false
        this._authorizedNetworks = new SqlDatabaseInstanceSettingsIpConfigurationAuthorizedNetworksList(this, "authorized_networks", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allocatedIpRange !== undefined) {
            hasAnyValues = true;
            internalValueResult.allocatedIpRange = this._allocatedIpRange;
        }
        if (this._ipv4Enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv4Enabled = this._ipv4Enabled;
        }
        if (this._privateNetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateNetwork = this._privateNetwork;
        }
        if (this._requireSsl !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireSsl = this._requireSsl;
        }
        if (this._authorizedNetworks?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizedNetworks = this._authorizedNetworks?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allocatedIpRange = undefined;
            this._ipv4Enabled = undefined;
            this._privateNetwork = undefined;
            this._requireSsl = undefined;
            this._authorizedNetworks.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allocatedIpRange = value.allocatedIpRange;
            this._ipv4Enabled = value.ipv4Enabled;
            this._privateNetwork = value.privateNetwork;
            this._requireSsl = value.requireSsl;
            this._authorizedNetworks.internalValue = value.authorizedNetworks;
        }
    }
    get allocatedIpRange() {
        return this.getStringAttribute('allocated_ip_range');
    }
    set allocatedIpRange(value) {
        this._allocatedIpRange = value;
    }
    resetAllocatedIpRange() {
        this._allocatedIpRange = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allocatedIpRangeInput() {
        return this._allocatedIpRange;
    }
    get ipv4Enabled() {
        return this.getBooleanAttribute('ipv4_enabled');
    }
    set ipv4Enabled(value) {
        this._ipv4Enabled = value;
    }
    resetIpv4Enabled() {
        this._ipv4Enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv4EnabledInput() {
        return this._ipv4Enabled;
    }
    get privateNetwork() {
        return this.getStringAttribute('private_network');
    }
    set privateNetwork(value) {
        this._privateNetwork = value;
    }
    resetPrivateNetwork() {
        this._privateNetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateNetworkInput() {
        return this._privateNetwork;
    }
    get requireSsl() {
        return this.getBooleanAttribute('require_ssl');
    }
    set requireSsl(value) {
        this._requireSsl = value;
    }
    resetRequireSsl() {
        this._requireSsl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireSslInput() {
        return this._requireSsl;
    }
    get authorizedNetworks() {
        return this._authorizedNetworks;
    }
    putAuthorizedNetworks(value) {
        this._authorizedNetworks.internalValue = value;
    }
    resetAuthorizedNetworks() {
        this._authorizedNetworks.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizedNetworksInput() {
        return this._authorizedNetworks.internalValue;
    }
}
exports.SqlDatabaseInstanceSettingsIpConfigurationOutputReference = SqlDatabaseInstanceSettingsIpConfigurationOutputReference;
_s = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsIpConfigurationOutputReference[_s] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsIpConfigurationOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceSettingsLocationPreferenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        follow_gae_application: cdktf.stringToTerraform(struct.followGaeApplication),
        secondary_zone: cdktf.stringToTerraform(struct.secondaryZone),
        zone: cdktf.stringToTerraform(struct.zone),
    };
}
exports.sqlDatabaseInstanceSettingsLocationPreferenceToTerraform = sqlDatabaseInstanceSettingsLocationPreferenceToTerraform;
class SqlDatabaseInstanceSettingsLocationPreferenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._followGaeApplication !== undefined) {
            hasAnyValues = true;
            internalValueResult.followGaeApplication = this._followGaeApplication;
        }
        if (this._secondaryZone !== undefined) {
            hasAnyValues = true;
            internalValueResult.secondaryZone = this._secondaryZone;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._followGaeApplication = undefined;
            this._secondaryZone = undefined;
            this._zone = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._followGaeApplication = value.followGaeApplication;
            this._secondaryZone = value.secondaryZone;
            this._zone = value.zone;
        }
    }
    get followGaeApplication() {
        return this.getStringAttribute('follow_gae_application');
    }
    set followGaeApplication(value) {
        this._followGaeApplication = value;
    }
    resetFollowGaeApplication() {
        this._followGaeApplication = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get followGaeApplicationInput() {
        return this._followGaeApplication;
    }
    get secondaryZone() {
        return this.getStringAttribute('secondary_zone');
    }
    set secondaryZone(value) {
        this._secondaryZone = value;
    }
    resetSecondaryZone() {
        this._secondaryZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondaryZoneInput() {
        return this._secondaryZone;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
}
exports.SqlDatabaseInstanceSettingsLocationPreferenceOutputReference = SqlDatabaseInstanceSettingsLocationPreferenceOutputReference;
_t = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsLocationPreferenceOutputReference[_t] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsLocationPreferenceOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceSettingsMaintenanceWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        hour: cdktf.numberToTerraform(struct.hour),
        update_track: cdktf.stringToTerraform(struct.updateTrack),
    };
}
exports.sqlDatabaseInstanceSettingsMaintenanceWindowToTerraform = sqlDatabaseInstanceSettingsMaintenanceWindowToTerraform;
class SqlDatabaseInstanceSettingsMaintenanceWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._hour !== undefined) {
            hasAnyValues = true;
            internalValueResult.hour = this._hour;
        }
        if (this._updateTrack !== undefined) {
            hasAnyValues = true;
            internalValueResult.updateTrack = this._updateTrack;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._hour = undefined;
            this._updateTrack = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._hour = value.hour;
            this._updateTrack = value.updateTrack;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get hour() {
        return this.getNumberAttribute('hour');
    }
    set hour(value) {
        this._hour = value;
    }
    resetHour() {
        this._hour = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hourInput() {
        return this._hour;
    }
    get updateTrack() {
        return this.getStringAttribute('update_track');
    }
    set updateTrack(value) {
        this._updateTrack = value;
    }
    resetUpdateTrack() {
        this._updateTrack = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateTrackInput() {
        return this._updateTrack;
    }
}
exports.SqlDatabaseInstanceSettingsMaintenanceWindowOutputReference = SqlDatabaseInstanceSettingsMaintenanceWindowOutputReference;
_u = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsMaintenanceWindowOutputReference[_u] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsMaintenanceWindowOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceSettingsPasswordValidationPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        complexity: cdktf.stringToTerraform(struct.complexity),
        disallow_username_substring: cdktf.booleanToTerraform(struct.disallowUsernameSubstring),
        enable_password_policy: cdktf.booleanToTerraform(struct.enablePasswordPolicy),
        min_length: cdktf.numberToTerraform(struct.minLength),
        password_change_interval: cdktf.stringToTerraform(struct.passwordChangeInterval),
        reuse_interval: cdktf.numberToTerraform(struct.reuseInterval),
    };
}
exports.sqlDatabaseInstanceSettingsPasswordValidationPolicyToTerraform = sqlDatabaseInstanceSettingsPasswordValidationPolicyToTerraform;
class SqlDatabaseInstanceSettingsPasswordValidationPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._complexity !== undefined) {
            hasAnyValues = true;
            internalValueResult.complexity = this._complexity;
        }
        if (this._disallowUsernameSubstring !== undefined) {
            hasAnyValues = true;
            internalValueResult.disallowUsernameSubstring = this._disallowUsernameSubstring;
        }
        if (this._enablePasswordPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePasswordPolicy = this._enablePasswordPolicy;
        }
        if (this._minLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.minLength = this._minLength;
        }
        if (this._passwordChangeInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordChangeInterval = this._passwordChangeInterval;
        }
        if (this._reuseInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.reuseInterval = this._reuseInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._complexity = undefined;
            this._disallowUsernameSubstring = undefined;
            this._enablePasswordPolicy = undefined;
            this._minLength = undefined;
            this._passwordChangeInterval = undefined;
            this._reuseInterval = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._complexity = value.complexity;
            this._disallowUsernameSubstring = value.disallowUsernameSubstring;
            this._enablePasswordPolicy = value.enablePasswordPolicy;
            this._minLength = value.minLength;
            this._passwordChangeInterval = value.passwordChangeInterval;
            this._reuseInterval = value.reuseInterval;
        }
    }
    get complexity() {
        return this.getStringAttribute('complexity');
    }
    set complexity(value) {
        this._complexity = value;
    }
    resetComplexity() {
        this._complexity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get complexityInput() {
        return this._complexity;
    }
    get disallowUsernameSubstring() {
        return this.getBooleanAttribute('disallow_username_substring');
    }
    set disallowUsernameSubstring(value) {
        this._disallowUsernameSubstring = value;
    }
    resetDisallowUsernameSubstring() {
        this._disallowUsernameSubstring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disallowUsernameSubstringInput() {
        return this._disallowUsernameSubstring;
    }
    get enablePasswordPolicy() {
        return this.getBooleanAttribute('enable_password_policy');
    }
    set enablePasswordPolicy(value) {
        this._enablePasswordPolicy = value;
    }
    // Temporarily expose input value. Use with caution.
    get enablePasswordPolicyInput() {
        return this._enablePasswordPolicy;
    }
    get minLength() {
        return this.getNumberAttribute('min_length');
    }
    set minLength(value) {
        this._minLength = value;
    }
    resetMinLength() {
        this._minLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minLengthInput() {
        return this._minLength;
    }
    get passwordChangeInterval() {
        return this.getStringAttribute('password_change_interval');
    }
    set passwordChangeInterval(value) {
        this._passwordChangeInterval = value;
    }
    resetPasswordChangeInterval() {
        this._passwordChangeInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordChangeIntervalInput() {
        return this._passwordChangeInterval;
    }
    get reuseInterval() {
        return this.getNumberAttribute('reuse_interval');
    }
    set reuseInterval(value) {
        this._reuseInterval = value;
    }
    resetReuseInterval() {
        this._reuseInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reuseIntervalInput() {
        return this._reuseInterval;
    }
}
exports.SqlDatabaseInstanceSettingsPasswordValidationPolicyOutputReference = SqlDatabaseInstanceSettingsPasswordValidationPolicyOutputReference;
_v = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsPasswordValidationPolicyOutputReference[_v] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsPasswordValidationPolicyOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceSettingsSqlServerAuditConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        retention_interval: cdktf.stringToTerraform(struct.retentionInterval),
        upload_interval: cdktf.stringToTerraform(struct.uploadInterval),
    };
}
exports.sqlDatabaseInstanceSettingsSqlServerAuditConfigToTerraform = sqlDatabaseInstanceSettingsSqlServerAuditConfigToTerraform;
class SqlDatabaseInstanceSettingsSqlServerAuditConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._retentionInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.retentionInterval = this._retentionInterval;
        }
        if (this._uploadInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.uploadInterval = this._uploadInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._retentionInterval = undefined;
            this._uploadInterval = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._retentionInterval = value.retentionInterval;
            this._uploadInterval = value.uploadInterval;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    resetBucket() {
        this._bucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get retentionInterval() {
        return this.getStringAttribute('retention_interval');
    }
    set retentionInterval(value) {
        this._retentionInterval = value;
    }
    resetRetentionInterval() {
        this._retentionInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionIntervalInput() {
        return this._retentionInterval;
    }
    get uploadInterval() {
        return this.getStringAttribute('upload_interval');
    }
    set uploadInterval(value) {
        this._uploadInterval = value;
    }
    resetUploadInterval() {
        this._uploadInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uploadIntervalInput() {
        return this._uploadInterval;
    }
}
exports.SqlDatabaseInstanceSettingsSqlServerAuditConfigOutputReference = SqlDatabaseInstanceSettingsSqlServerAuditConfigOutputReference;
_w = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsSqlServerAuditConfigOutputReference[_w] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsSqlServerAuditConfigOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        activation_policy: cdktf.stringToTerraform(struct.activationPolicy),
        availability_type: cdktf.stringToTerraform(struct.availabilityType),
        collation: cdktf.stringToTerraform(struct.collation),
        connector_enforcement: cdktf.stringToTerraform(struct.connectorEnforcement),
        deletion_protection_enabled: cdktf.booleanToTerraform(struct.deletionProtectionEnabled),
        disk_autoresize: cdktf.booleanToTerraform(struct.diskAutoresize),
        disk_autoresize_limit: cdktf.numberToTerraform(struct.diskAutoresizeLimit),
        disk_size: cdktf.numberToTerraform(struct.diskSize),
        disk_type: cdktf.stringToTerraform(struct.diskType),
        pricing_plan: cdktf.stringToTerraform(struct.pricingPlan),
        tier: cdktf.stringToTerraform(struct.tier),
        time_zone: cdktf.stringToTerraform(struct.timeZone),
        user_labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.userLabels),
        active_directory_config: sqlDatabaseInstanceSettingsActiveDirectoryConfigToTerraform(struct.activeDirectoryConfig),
        backup_configuration: sqlDatabaseInstanceSettingsBackupConfigurationToTerraform(struct.backupConfiguration),
        database_flags: cdktf.listMapper(sqlDatabaseInstanceSettingsDatabaseFlagsToTerraform, true)(struct.databaseFlags),
        deny_maintenance_period: sqlDatabaseInstanceSettingsDenyMaintenancePeriodToTerraform(struct.denyMaintenancePeriod),
        insights_config: sqlDatabaseInstanceSettingsInsightsConfigToTerraform(struct.insightsConfig),
        ip_configuration: sqlDatabaseInstanceSettingsIpConfigurationToTerraform(struct.ipConfiguration),
        location_preference: sqlDatabaseInstanceSettingsLocationPreferenceToTerraform(struct.locationPreference),
        maintenance_window: sqlDatabaseInstanceSettingsMaintenanceWindowToTerraform(struct.maintenanceWindow),
        password_validation_policy: sqlDatabaseInstanceSettingsPasswordValidationPolicyToTerraform(struct.passwordValidationPolicy),
        sql_server_audit_config: sqlDatabaseInstanceSettingsSqlServerAuditConfigToTerraform(struct.sqlServerAuditConfig),
    };
}
exports.sqlDatabaseInstanceSettingsToTerraform = sqlDatabaseInstanceSettingsToTerraform;
class SqlDatabaseInstanceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // active_directory_config - computed: false, optional: true, required: false
        this._activeDirectoryConfig = new SqlDatabaseInstanceSettingsActiveDirectoryConfigOutputReference(this, "active_directory_config");
        // backup_configuration - computed: false, optional: true, required: false
        this._backupConfiguration = new SqlDatabaseInstanceSettingsBackupConfigurationOutputReference(this, "backup_configuration");
        // database_flags - computed: false, optional: true, required: false
        this._databaseFlags = new SqlDatabaseInstanceSettingsDatabaseFlagsList(this, "database_flags", false);
        // deny_maintenance_period - computed: false, optional: true, required: false
        this._denyMaintenancePeriod = new SqlDatabaseInstanceSettingsDenyMaintenancePeriodOutputReference(this, "deny_maintenance_period");
        // insights_config - computed: false, optional: true, required: false
        this._insightsConfig = new SqlDatabaseInstanceSettingsInsightsConfigOutputReference(this, "insights_config");
        // ip_configuration - computed: false, optional: true, required: false
        this._ipConfiguration = new SqlDatabaseInstanceSettingsIpConfigurationOutputReference(this, "ip_configuration");
        // location_preference - computed: false, optional: true, required: false
        this._locationPreference = new SqlDatabaseInstanceSettingsLocationPreferenceOutputReference(this, "location_preference");
        // maintenance_window - computed: false, optional: true, required: false
        this._maintenanceWindow = new SqlDatabaseInstanceSettingsMaintenanceWindowOutputReference(this, "maintenance_window");
        // password_validation_policy - computed: false, optional: true, required: false
        this._passwordValidationPolicy = new SqlDatabaseInstanceSettingsPasswordValidationPolicyOutputReference(this, "password_validation_policy");
        // sql_server_audit_config - computed: false, optional: true, required: false
        this._sqlServerAuditConfig = new SqlDatabaseInstanceSettingsSqlServerAuditConfigOutputReference(this, "sql_server_audit_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._activationPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.activationPolicy = this._activationPolicy;
        }
        if (this._availabilityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.availabilityType = this._availabilityType;
        }
        if (this._collation !== undefined) {
            hasAnyValues = true;
            internalValueResult.collation = this._collation;
        }
        if (this._connectorEnforcement !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectorEnforcement = this._connectorEnforcement;
        }
        if (this._deletionProtectionEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.deletionProtectionEnabled = this._deletionProtectionEnabled;
        }
        if (this._diskAutoresize !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskAutoresize = this._diskAutoresize;
        }
        if (this._diskAutoresizeLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskAutoresizeLimit = this._diskAutoresizeLimit;
        }
        if (this._diskSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskSize = this._diskSize;
        }
        if (this._diskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskType = this._diskType;
        }
        if (this._pricingPlan !== undefined) {
            hasAnyValues = true;
            internalValueResult.pricingPlan = this._pricingPlan;
        }
        if (this._tier !== undefined) {
            hasAnyValues = true;
            internalValueResult.tier = this._tier;
        }
        if (this._timeZone !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeZone = this._timeZone;
        }
        if (this._userLabels !== undefined) {
            hasAnyValues = true;
            internalValueResult.userLabels = this._userLabels;
        }
        if (this._activeDirectoryConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.activeDirectoryConfig = this._activeDirectoryConfig?.internalValue;
        }
        if (this._backupConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.backupConfiguration = this._backupConfiguration?.internalValue;
        }
        if (this._databaseFlags?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseFlags = this._databaseFlags?.internalValue;
        }
        if (this._denyMaintenancePeriod?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.denyMaintenancePeriod = this._denyMaintenancePeriod?.internalValue;
        }
        if (this._insightsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.insightsConfig = this._insightsConfig?.internalValue;
        }
        if (this._ipConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipConfiguration = this._ipConfiguration?.internalValue;
        }
        if (this._locationPreference?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.locationPreference = this._locationPreference?.internalValue;
        }
        if (this._maintenanceWindow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceWindow = this._maintenanceWindow?.internalValue;
        }
        if (this._passwordValidationPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordValidationPolicy = this._passwordValidationPolicy?.internalValue;
        }
        if (this._sqlServerAuditConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sqlServerAuditConfig = this._sqlServerAuditConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._activationPolicy = undefined;
            this._availabilityType = undefined;
            this._collation = undefined;
            this._connectorEnforcement = undefined;
            this._deletionProtectionEnabled = undefined;
            this._diskAutoresize = undefined;
            this._diskAutoresizeLimit = undefined;
            this._diskSize = undefined;
            this._diskType = undefined;
            this._pricingPlan = undefined;
            this._tier = undefined;
            this._timeZone = undefined;
            this._userLabels = undefined;
            this._activeDirectoryConfig.internalValue = undefined;
            this._backupConfiguration.internalValue = undefined;
            this._databaseFlags.internalValue = undefined;
            this._denyMaintenancePeriod.internalValue = undefined;
            this._insightsConfig.internalValue = undefined;
            this._ipConfiguration.internalValue = undefined;
            this._locationPreference.internalValue = undefined;
            this._maintenanceWindow.internalValue = undefined;
            this._passwordValidationPolicy.internalValue = undefined;
            this._sqlServerAuditConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._activationPolicy = value.activationPolicy;
            this._availabilityType = value.availabilityType;
            this._collation = value.collation;
            this._connectorEnforcement = value.connectorEnforcement;
            this._deletionProtectionEnabled = value.deletionProtectionEnabled;
            this._diskAutoresize = value.diskAutoresize;
            this._diskAutoresizeLimit = value.diskAutoresizeLimit;
            this._diskSize = value.diskSize;
            this._diskType = value.diskType;
            this._pricingPlan = value.pricingPlan;
            this._tier = value.tier;
            this._timeZone = value.timeZone;
            this._userLabels = value.userLabels;
            this._activeDirectoryConfig.internalValue = value.activeDirectoryConfig;
            this._backupConfiguration.internalValue = value.backupConfiguration;
            this._databaseFlags.internalValue = value.databaseFlags;
            this._denyMaintenancePeriod.internalValue = value.denyMaintenancePeriod;
            this._insightsConfig.internalValue = value.insightsConfig;
            this._ipConfiguration.internalValue = value.ipConfiguration;
            this._locationPreference.internalValue = value.locationPreference;
            this._maintenanceWindow.internalValue = value.maintenanceWindow;
            this._passwordValidationPolicy.internalValue = value.passwordValidationPolicy;
            this._sqlServerAuditConfig.internalValue = value.sqlServerAuditConfig;
        }
    }
    get activationPolicy() {
        return this.getStringAttribute('activation_policy');
    }
    set activationPolicy(value) {
        this._activationPolicy = value;
    }
    resetActivationPolicy() {
        this._activationPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activationPolicyInput() {
        return this._activationPolicy;
    }
    get availabilityType() {
        return this.getStringAttribute('availability_type');
    }
    set availabilityType(value) {
        this._availabilityType = value;
    }
    resetAvailabilityType() {
        this._availabilityType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityTypeInput() {
        return this._availabilityType;
    }
    get collation() {
        return this.getStringAttribute('collation');
    }
    set collation(value) {
        this._collation = value;
    }
    resetCollation() {
        this._collation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collationInput() {
        return this._collation;
    }
    get connectorEnforcement() {
        return this.getStringAttribute('connector_enforcement');
    }
    set connectorEnforcement(value) {
        this._connectorEnforcement = value;
    }
    resetConnectorEnforcement() {
        this._connectorEnforcement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectorEnforcementInput() {
        return this._connectorEnforcement;
    }
    get deletionProtectionEnabled() {
        return this.getBooleanAttribute('deletion_protection_enabled');
    }
    set deletionProtectionEnabled(value) {
        this._deletionProtectionEnabled = value;
    }
    resetDeletionProtectionEnabled() {
        this._deletionProtectionEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectionEnabledInput() {
        return this._deletionProtectionEnabled;
    }
    get diskAutoresize() {
        return this.getBooleanAttribute('disk_autoresize');
    }
    set diskAutoresize(value) {
        this._diskAutoresize = value;
    }
    resetDiskAutoresize() {
        this._diskAutoresize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskAutoresizeInput() {
        return this._diskAutoresize;
    }
    get diskAutoresizeLimit() {
        return this.getNumberAttribute('disk_autoresize_limit');
    }
    set diskAutoresizeLimit(value) {
        this._diskAutoresizeLimit = value;
    }
    resetDiskAutoresizeLimit() {
        this._diskAutoresizeLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskAutoresizeLimitInput() {
        return this._diskAutoresizeLimit;
    }
    get diskSize() {
        return this.getNumberAttribute('disk_size');
    }
    set diskSize(value) {
        this._diskSize = value;
    }
    resetDiskSize() {
        this._diskSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskSizeInput() {
        return this._diskSize;
    }
    get diskType() {
        return this.getStringAttribute('disk_type');
    }
    set diskType(value) {
        this._diskType = value;
    }
    resetDiskType() {
        this._diskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskTypeInput() {
        return this._diskType;
    }
    get pricingPlan() {
        return this.getStringAttribute('pricing_plan');
    }
    set pricingPlan(value) {
        this._pricingPlan = value;
    }
    resetPricingPlan() {
        this._pricingPlan = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pricingPlanInput() {
        return this._pricingPlan;
    }
    get tier() {
        return this.getStringAttribute('tier');
    }
    set tier(value) {
        this._tier = value;
    }
    // Temporarily expose input value. Use with caution.
    get tierInput() {
        return this._tier;
    }
    get timeZone() {
        return this.getStringAttribute('time_zone');
    }
    set timeZone(value) {
        this._timeZone = value;
    }
    resetTimeZone() {
        this._timeZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeZoneInput() {
        return this._timeZone;
    }
    get userLabels() {
        return this.getStringMapAttribute('user_labels');
    }
    set userLabels(value) {
        this._userLabels = value;
    }
    resetUserLabels() {
        this._userLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userLabelsInput() {
        return this._userLabels;
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getNumberAttribute('version');
    }
    get activeDirectoryConfig() {
        return this._activeDirectoryConfig;
    }
    putActiveDirectoryConfig(value) {
        this._activeDirectoryConfig.internalValue = value;
    }
    resetActiveDirectoryConfig() {
        this._activeDirectoryConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activeDirectoryConfigInput() {
        return this._activeDirectoryConfig.internalValue;
    }
    get backupConfiguration() {
        return this._backupConfiguration;
    }
    putBackupConfiguration(value) {
        this._backupConfiguration.internalValue = value;
    }
    resetBackupConfiguration() {
        this._backupConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupConfigurationInput() {
        return this._backupConfiguration.internalValue;
    }
    get databaseFlags() {
        return this._databaseFlags;
    }
    putDatabaseFlags(value) {
        this._databaseFlags.internalValue = value;
    }
    resetDatabaseFlags() {
        this._databaseFlags.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseFlagsInput() {
        return this._databaseFlags.internalValue;
    }
    get denyMaintenancePeriod() {
        return this._denyMaintenancePeriod;
    }
    putDenyMaintenancePeriod(value) {
        this._denyMaintenancePeriod.internalValue = value;
    }
    resetDenyMaintenancePeriod() {
        this._denyMaintenancePeriod.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get denyMaintenancePeriodInput() {
        return this._denyMaintenancePeriod.internalValue;
    }
    get insightsConfig() {
        return this._insightsConfig;
    }
    putInsightsConfig(value) {
        this._insightsConfig.internalValue = value;
    }
    resetInsightsConfig() {
        this._insightsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insightsConfigInput() {
        return this._insightsConfig.internalValue;
    }
    get ipConfiguration() {
        return this._ipConfiguration;
    }
    putIpConfiguration(value) {
        this._ipConfiguration.internalValue = value;
    }
    resetIpConfiguration() {
        this._ipConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipConfigurationInput() {
        return this._ipConfiguration.internalValue;
    }
    get locationPreference() {
        return this._locationPreference;
    }
    putLocationPreference(value) {
        this._locationPreference.internalValue = value;
    }
    resetLocationPreference() {
        this._locationPreference.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationPreferenceInput() {
        return this._locationPreference.internalValue;
    }
    get maintenanceWindow() {
        return this._maintenanceWindow;
    }
    putMaintenanceWindow(value) {
        this._maintenanceWindow.internalValue = value;
    }
    resetMaintenanceWindow() {
        this._maintenanceWindow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowInput() {
        return this._maintenanceWindow.internalValue;
    }
    get passwordValidationPolicy() {
        return this._passwordValidationPolicy;
    }
    putPasswordValidationPolicy(value) {
        this._passwordValidationPolicy.internalValue = value;
    }
    resetPasswordValidationPolicy() {
        this._passwordValidationPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordValidationPolicyInput() {
        return this._passwordValidationPolicy.internalValue;
    }
    get sqlServerAuditConfig() {
        return this._sqlServerAuditConfig;
    }
    putSqlServerAuditConfig(value) {
        this._sqlServerAuditConfig.internalValue = value;
    }
    resetSqlServerAuditConfig() {
        this._sqlServerAuditConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqlServerAuditConfigInput() {
        return this._sqlServerAuditConfig.internalValue;
    }
}
exports.SqlDatabaseInstanceSettingsOutputReference = SqlDatabaseInstanceSettingsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceSettingsOutputReference[_x] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceSettingsOutputReference", version: "5.0.1" };
function sqlDatabaseInstanceTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.sqlDatabaseInstanceTimeoutsToTerraform = sqlDatabaseInstanceTimeoutsToTerraform;
class SqlDatabaseInstanceTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.SqlDatabaseInstanceTimeoutsOutputReference = SqlDatabaseInstanceTimeoutsOutputReference;
_y = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstanceTimeoutsOutputReference[_y] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstanceTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/sql_database_instance google_sql_database_instance}
*/
class SqlDatabaseInstance extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/sql_database_instance google_sql_database_instance} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SqlDatabaseInstanceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_sql_database_instance',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ip_address - computed: true, optional: false, required: false
        this._ipAddress = new SqlDatabaseInstanceIpAddressList(this, "ip_address", false);
        // server_ca_cert - computed: true, optional: false, required: false
        this._serverCaCert = new SqlDatabaseInstanceServerCaCertList(this, "server_ca_cert", false);
        // clone - computed: false, optional: true, required: false
        this._clone = new SqlDatabaseInstanceCloneOutputReference(this, "clone");
        // replica_configuration - computed: false, optional: true, required: false
        this._replicaConfiguration = new SqlDatabaseInstanceReplicaConfigurationOutputReference(this, "replica_configuration");
        // restore_backup_context - computed: false, optional: true, required: false
        this._restoreBackupContext = new SqlDatabaseInstanceRestoreBackupContextOutputReference(this, "restore_backup_context");
        // settings - computed: false, optional: true, required: false
        this._settings = new SqlDatabaseInstanceSettingsOutputReference(this, "settings");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new SqlDatabaseInstanceTimeoutsOutputReference(this, "timeouts");
        this._databaseVersion = config.databaseVersion;
        this._deletionProtection = config.deletionProtection;
        this._encryptionKeyName = config.encryptionKeyName;
        this._id = config.id;
        this._maintenanceVersion = config.maintenanceVersion;
        this._masterInstanceName = config.masterInstanceName;
        this._name = config.name;
        this._project = config.project;
        this._region = config.region;
        this._rootPassword = config.rootPassword;
        this._clone.internalValue = config.clone;
        this._replicaConfiguration.internalValue = config.replicaConfiguration;
        this._restoreBackupContext.internalValue = config.restoreBackupContext;
        this._settings.internalValue = config.settings;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // available_maintenance_versions - computed: true, optional: false, required: false
    get availableMaintenanceVersions() {
        return this.getListAttribute('available_maintenance_versions');
    }
    // connection_name - computed: true, optional: false, required: false
    get connectionName() {
        return this.getStringAttribute('connection_name');
    }
    get databaseVersion() {
        return this.getStringAttribute('database_version');
    }
    set databaseVersion(value) {
        this._databaseVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseVersionInput() {
        return this._databaseVersion;
    }
    get deletionProtection() {
        return this.getBooleanAttribute('deletion_protection');
    }
    set deletionProtection(value) {
        this._deletionProtection = value;
    }
    resetDeletionProtection() {
        this._deletionProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectionInput() {
        return this._deletionProtection;
    }
    get encryptionKeyName() {
        return this.getStringAttribute('encryption_key_name');
    }
    set encryptionKeyName(value) {
        this._encryptionKeyName = value;
    }
    resetEncryptionKeyName() {
        this._encryptionKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionKeyNameInput() {
        return this._encryptionKeyName;
    }
    // first_ip_address - computed: true, optional: false, required: false
    get firstIpAddress() {
        return this.getStringAttribute('first_ip_address');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // instance_type - computed: true, optional: false, required: false
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    get ipAddress() {
        return this._ipAddress;
    }
    get maintenanceVersion() {
        return this.getStringAttribute('maintenance_version');
    }
    set maintenanceVersion(value) {
        this._maintenanceVersion = value;
    }
    resetMaintenanceVersion() {
        this._maintenanceVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceVersionInput() {
        return this._maintenanceVersion;
    }
    get masterInstanceName() {
        return this.getStringAttribute('master_instance_name');
    }
    set masterInstanceName(value) {
        this._masterInstanceName = value;
    }
    resetMasterInstanceName() {
        this._masterInstanceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterInstanceNameInput() {
        return this._masterInstanceName;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // private_ip_address - computed: true, optional: false, required: false
    get privateIpAddress() {
        return this.getStringAttribute('private_ip_address');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // public_ip_address - computed: true, optional: false, required: false
    get publicIpAddress() {
        return this.getStringAttribute('public_ip_address');
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get rootPassword() {
        return this.getStringAttribute('root_password');
    }
    set rootPassword(value) {
        this._rootPassword = value;
    }
    resetRootPassword() {
        this._rootPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rootPasswordInput() {
        return this._rootPassword;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    get serverCaCert() {
        return this._serverCaCert;
    }
    // service_account_email_address - computed: true, optional: false, required: false
    get serviceAccountEmailAddress() {
        return this.getStringAttribute('service_account_email_address');
    }
    get clone() {
        return this._clone;
    }
    putClone(value) {
        this._clone.internalValue = value;
    }
    resetClone() {
        this._clone.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloneInput() {
        return this._clone.internalValue;
    }
    get replicaConfiguration() {
        return this._replicaConfiguration;
    }
    putReplicaConfiguration(value) {
        this._replicaConfiguration.internalValue = value;
    }
    resetReplicaConfiguration() {
        this._replicaConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicaConfigurationInput() {
        return this._replicaConfiguration.internalValue;
    }
    get restoreBackupContext() {
        return this._restoreBackupContext;
    }
    putRestoreBackupContext(value) {
        this._restoreBackupContext.internalValue = value;
    }
    resetRestoreBackupContext() {
        this._restoreBackupContext.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restoreBackupContextInput() {
        return this._restoreBackupContext.internalValue;
    }
    get settings() {
        return this._settings;
    }
    putSettings(value) {
        this._settings.internalValue = value;
    }
    resetSettings() {
        this._settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get settingsInput() {
        return this._settings.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            database_version: cdktf.stringToTerraform(this._databaseVersion),
            deletion_protection: cdktf.booleanToTerraform(this._deletionProtection),
            encryption_key_name: cdktf.stringToTerraform(this._encryptionKeyName),
            id: cdktf.stringToTerraform(this._id),
            maintenance_version: cdktf.stringToTerraform(this._maintenanceVersion),
            master_instance_name: cdktf.stringToTerraform(this._masterInstanceName),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            root_password: cdktf.stringToTerraform(this._rootPassword),
            clone: sqlDatabaseInstanceCloneToTerraform(this._clone.internalValue),
            replica_configuration: sqlDatabaseInstanceReplicaConfigurationToTerraform(this._replicaConfiguration.internalValue),
            restore_backup_context: sqlDatabaseInstanceRestoreBackupContextToTerraform(this._restoreBackupContext.internalValue),
            settings: sqlDatabaseInstanceSettingsToTerraform(this._settings.internalValue),
            timeouts: sqlDatabaseInstanceTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.SqlDatabaseInstance = SqlDatabaseInstance;
_z = JSII_RTTI_SYMBOL_1;
SqlDatabaseInstance[_z] = { fqn: "@cdktf/provider-google.sqlDatabaseInstance.SqlDatabaseInstance", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
SqlDatabaseInstance.tfResourceType = "google_sql_database_instance";
//# sourceMappingURL=data:application/json;base64,