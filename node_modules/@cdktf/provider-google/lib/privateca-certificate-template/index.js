"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivatecaCertificateTemplate = exports.PrivatecaCertificateTemplateTimeoutsOutputReference = exports.privatecaCertificateTemplateTimeoutsToTerraform = exports.PrivatecaCertificateTemplatePredefinedValuesOutputReference = exports.privatecaCertificateTemplatePredefinedValuesToTerraform = exports.PrivatecaCertificateTemplatePredefinedValuesPolicyIdsList = exports.PrivatecaCertificateTemplatePredefinedValuesPolicyIdsOutputReference = exports.privatecaCertificateTemplatePredefinedValuesPolicyIdsToTerraform = exports.PrivatecaCertificateTemplatePredefinedValuesKeyUsageOutputReference = exports.privatecaCertificateTemplatePredefinedValuesKeyUsageToTerraform = exports.PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesList = exports.PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesOutputReference = exports.privatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesToTerraform = exports.PrivatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageOutputReference = exports.privatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageToTerraform = exports.PrivatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageOutputReference = exports.privatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageToTerraform = exports.PrivatecaCertificateTemplatePredefinedValuesCaOptionsOutputReference = exports.privatecaCertificateTemplatePredefinedValuesCaOptionsToTerraform = exports.PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsList = exports.PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsOutputReference = exports.privatecaCertificateTemplatePredefinedValuesAdditionalExtensionsToTerraform = exports.PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdOutputReference = exports.privatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdToTerraform = exports.PrivatecaCertificateTemplatePassthroughExtensionsOutputReference = exports.privatecaCertificateTemplatePassthroughExtensionsToTerraform = exports.PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsList = exports.PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsOutputReference = exports.privatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsToTerraform = exports.PrivatecaCertificateTemplateIdentityConstraintsOutputReference = exports.privatecaCertificateTemplateIdentityConstraintsToTerraform = exports.PrivatecaCertificateTemplateIdentityConstraintsCelExpressionOutputReference = exports.privatecaCertificateTemplateIdentityConstraintsCelExpressionToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function privatecaCertificateTemplateIdentityConstraintsCelExpressionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        expression: cdktf.stringToTerraform(struct.expression),
        location: cdktf.stringToTerraform(struct.location),
        title: cdktf.stringToTerraform(struct.title),
    };
}
exports.privatecaCertificateTemplateIdentityConstraintsCelExpressionToTerraform = privatecaCertificateTemplateIdentityConstraintsCelExpressionToTerraform;
class PrivatecaCertificateTemplateIdentityConstraintsCelExpressionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._expression !== undefined) {
            hasAnyValues = true;
            internalValueResult.expression = this._expression;
        }
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._description = undefined;
            this._expression = undefined;
            this._location = undefined;
            this._title = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._description = value.description;
            this._expression = value.expression;
            this._location = value.location;
            this._title = value.title;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get expression() {
        return this.getStringAttribute('expression');
    }
    set expression(value) {
        this._expression = value;
    }
    resetExpression() {
        this._expression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expressionInput() {
        return this._expression;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    resetTitle() {
        this._title = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
}
exports.PrivatecaCertificateTemplateIdentityConstraintsCelExpressionOutputReference = PrivatecaCertificateTemplateIdentityConstraintsCelExpressionOutputReference;
_a = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplateIdentityConstraintsCelExpressionOutputReference[_a] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplateIdentityConstraintsCelExpressionOutputReference", version: "5.0.1" };
function privatecaCertificateTemplateIdentityConstraintsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_subject_alt_names_passthrough: cdktf.booleanToTerraform(struct.allowSubjectAltNamesPassthrough),
        allow_subject_passthrough: cdktf.booleanToTerraform(struct.allowSubjectPassthrough),
        cel_expression: privatecaCertificateTemplateIdentityConstraintsCelExpressionToTerraform(struct.celExpression),
    };
}
exports.privatecaCertificateTemplateIdentityConstraintsToTerraform = privatecaCertificateTemplateIdentityConstraintsToTerraform;
class PrivatecaCertificateTemplateIdentityConstraintsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cel_expression - computed: false, optional: true, required: false
        this._celExpression = new PrivatecaCertificateTemplateIdentityConstraintsCelExpressionOutputReference(this, "cel_expression");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowSubjectAltNamesPassthrough !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowSubjectAltNamesPassthrough = this._allowSubjectAltNamesPassthrough;
        }
        if (this._allowSubjectPassthrough !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowSubjectPassthrough = this._allowSubjectPassthrough;
        }
        if (this._celExpression?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.celExpression = this._celExpression?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowSubjectAltNamesPassthrough = undefined;
            this._allowSubjectPassthrough = undefined;
            this._celExpression.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowSubjectAltNamesPassthrough = value.allowSubjectAltNamesPassthrough;
            this._allowSubjectPassthrough = value.allowSubjectPassthrough;
            this._celExpression.internalValue = value.celExpression;
        }
    }
    get allowSubjectAltNamesPassthrough() {
        return this.getBooleanAttribute('allow_subject_alt_names_passthrough');
    }
    set allowSubjectAltNamesPassthrough(value) {
        this._allowSubjectAltNamesPassthrough = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowSubjectAltNamesPassthroughInput() {
        return this._allowSubjectAltNamesPassthrough;
    }
    get allowSubjectPassthrough() {
        return this.getBooleanAttribute('allow_subject_passthrough');
    }
    set allowSubjectPassthrough(value) {
        this._allowSubjectPassthrough = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowSubjectPassthroughInput() {
        return this._allowSubjectPassthrough;
    }
    get celExpression() {
        return this._celExpression;
    }
    putCelExpression(value) {
        this._celExpression.internalValue = value;
    }
    resetCelExpression() {
        this._celExpression.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get celExpressionInput() {
        return this._celExpression.internalValue;
    }
}
exports.PrivatecaCertificateTemplateIdentityConstraintsOutputReference = PrivatecaCertificateTemplateIdentityConstraintsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplateIdentityConstraintsOutputReference[_b] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplateIdentityConstraintsOutputReference", version: "5.0.1" };
function privatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsToTerraform = privatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsToTerraform;
class PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._objectIdPath = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsOutputReference = PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsOutputReference[_c] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsOutputReference", version: "5.0.1" };
class PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsList = PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsList;
_d = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsList[_d] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsList", version: "5.0.1" };
function privatecaCertificateTemplatePassthroughExtensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        known_extensions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.knownExtensions),
        additional_extensions: cdktf.listMapper(privatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsToTerraform, true)(struct.additionalExtensions),
    };
}
exports.privatecaCertificateTemplatePassthroughExtensionsToTerraform = privatecaCertificateTemplatePassthroughExtensionsToTerraform;
class PrivatecaCertificateTemplatePassthroughExtensionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // additional_extensions - computed: false, optional: true, required: false
        this._additionalExtensions = new PrivatecaCertificateTemplatePassthroughExtensionsAdditionalExtensionsList(this, "additional_extensions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._knownExtensions !== undefined) {
            hasAnyValues = true;
            internalValueResult.knownExtensions = this._knownExtensions;
        }
        if (this._additionalExtensions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalExtensions = this._additionalExtensions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._knownExtensions = undefined;
            this._additionalExtensions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._knownExtensions = value.knownExtensions;
            this._additionalExtensions.internalValue = value.additionalExtensions;
        }
    }
    get knownExtensions() {
        return this.getListAttribute('known_extensions');
    }
    set knownExtensions(value) {
        this._knownExtensions = value;
    }
    resetKnownExtensions() {
        this._knownExtensions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get knownExtensionsInput() {
        return this._knownExtensions;
    }
    get additionalExtensions() {
        return this._additionalExtensions;
    }
    putAdditionalExtensions(value) {
        this._additionalExtensions.internalValue = value;
    }
    resetAdditionalExtensions() {
        this._additionalExtensions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalExtensionsInput() {
        return this._additionalExtensions.internalValue;
    }
}
exports.PrivatecaCertificateTemplatePassthroughExtensionsOutputReference = PrivatecaCertificateTemplatePassthroughExtensionsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePassthroughExtensionsOutputReference[_e] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePassthroughExtensionsOutputReference", version: "5.0.1" };
function privatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdToTerraform = privatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdToTerraform;
class PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._objectIdPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdOutputReference = PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdOutputReference;
_f = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdOutputReference[_f] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdOutputReference", version: "5.0.1" };
function privatecaCertificateTemplatePredefinedValuesAdditionalExtensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        critical: cdktf.booleanToTerraform(struct.critical),
        value: cdktf.stringToTerraform(struct.value),
        object_id: privatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdToTerraform(struct.objectId),
    };
}
exports.privatecaCertificateTemplatePredefinedValuesAdditionalExtensionsToTerraform = privatecaCertificateTemplatePredefinedValuesAdditionalExtensionsToTerraform;
class PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // object_id - computed: false, optional: false, required: true
        this._objectId = new PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsObjectIdOutputReference(this, "object_id");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._critical !== undefined) {
            hasAnyValues = true;
            internalValueResult.critical = this._critical;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        if (this._objectId?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectId = this._objectId?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._critical = undefined;
            this._value = undefined;
            this._objectId.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._critical = value.critical;
            this._value = value.value;
            this._objectId.internalValue = value.objectId;
        }
    }
    get critical() {
        return this.getBooleanAttribute('critical');
    }
    set critical(value) {
        this._critical = value;
    }
    resetCritical() {
        this._critical = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get criticalInput() {
        return this._critical;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
    get objectId() {
        return this._objectId;
    }
    putObjectId(value) {
        this._objectId.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdInput() {
        return this._objectId.internalValue;
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsOutputReference = PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsOutputReference[_g] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsOutputReference", version: "5.0.1" };
class PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsList = PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsList;
_h = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsList[_h] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsList", version: "5.0.1" };
function privatecaCertificateTemplatePredefinedValuesCaOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        is_ca: cdktf.booleanToTerraform(struct.isCa),
        max_issuer_path_length: cdktf.numberToTerraform(struct.maxIssuerPathLength),
    };
}
exports.privatecaCertificateTemplatePredefinedValuesCaOptionsToTerraform = privatecaCertificateTemplatePredefinedValuesCaOptionsToTerraform;
class PrivatecaCertificateTemplatePredefinedValuesCaOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._isCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.isCa = this._isCa;
        }
        if (this._maxIssuerPathLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxIssuerPathLength = this._maxIssuerPathLength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._isCa = undefined;
            this._maxIssuerPathLength = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._isCa = value.isCa;
            this._maxIssuerPathLength = value.maxIssuerPathLength;
        }
    }
    get isCa() {
        return this.getBooleanAttribute('is_ca');
    }
    set isCa(value) {
        this._isCa = value;
    }
    resetIsCa() {
        this._isCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isCaInput() {
        return this._isCa;
    }
    get maxIssuerPathLength() {
        return this.getNumberAttribute('max_issuer_path_length');
    }
    set maxIssuerPathLength(value) {
        this._maxIssuerPathLength = value;
    }
    resetMaxIssuerPathLength() {
        this._maxIssuerPathLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxIssuerPathLengthInput() {
        return this._maxIssuerPathLength;
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesCaOptionsOutputReference = PrivatecaCertificateTemplatePredefinedValuesCaOptionsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesCaOptionsOutputReference[_j] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesCaOptionsOutputReference", version: "5.0.1" };
function privatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cert_sign: cdktf.booleanToTerraform(struct.certSign),
        content_commitment: cdktf.booleanToTerraform(struct.contentCommitment),
        crl_sign: cdktf.booleanToTerraform(struct.crlSign),
        data_encipherment: cdktf.booleanToTerraform(struct.dataEncipherment),
        decipher_only: cdktf.booleanToTerraform(struct.decipherOnly),
        digital_signature: cdktf.booleanToTerraform(struct.digitalSignature),
        encipher_only: cdktf.booleanToTerraform(struct.encipherOnly),
        key_agreement: cdktf.booleanToTerraform(struct.keyAgreement),
        key_encipherment: cdktf.booleanToTerraform(struct.keyEncipherment),
    };
}
exports.privatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageToTerraform = privatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageToTerraform;
class PrivatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certSign !== undefined) {
            hasAnyValues = true;
            internalValueResult.certSign = this._certSign;
        }
        if (this._contentCommitment !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentCommitment = this._contentCommitment;
        }
        if (this._crlSign !== undefined) {
            hasAnyValues = true;
            internalValueResult.crlSign = this._crlSign;
        }
        if (this._dataEncipherment !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataEncipherment = this._dataEncipherment;
        }
        if (this._decipherOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.decipherOnly = this._decipherOnly;
        }
        if (this._digitalSignature !== undefined) {
            hasAnyValues = true;
            internalValueResult.digitalSignature = this._digitalSignature;
        }
        if (this._encipherOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.encipherOnly = this._encipherOnly;
        }
        if (this._keyAgreement !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyAgreement = this._keyAgreement;
        }
        if (this._keyEncipherment !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyEncipherment = this._keyEncipherment;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certSign = undefined;
            this._contentCommitment = undefined;
            this._crlSign = undefined;
            this._dataEncipherment = undefined;
            this._decipherOnly = undefined;
            this._digitalSignature = undefined;
            this._encipherOnly = undefined;
            this._keyAgreement = undefined;
            this._keyEncipherment = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certSign = value.certSign;
            this._contentCommitment = value.contentCommitment;
            this._crlSign = value.crlSign;
            this._dataEncipherment = value.dataEncipherment;
            this._decipherOnly = value.decipherOnly;
            this._digitalSignature = value.digitalSignature;
            this._encipherOnly = value.encipherOnly;
            this._keyAgreement = value.keyAgreement;
            this._keyEncipherment = value.keyEncipherment;
        }
    }
    get certSign() {
        return this.getBooleanAttribute('cert_sign');
    }
    set certSign(value) {
        this._certSign = value;
    }
    resetCertSign() {
        this._certSign = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certSignInput() {
        return this._certSign;
    }
    get contentCommitment() {
        return this.getBooleanAttribute('content_commitment');
    }
    set contentCommitment(value) {
        this._contentCommitment = value;
    }
    resetContentCommitment() {
        this._contentCommitment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentCommitmentInput() {
        return this._contentCommitment;
    }
    get crlSign() {
        return this.getBooleanAttribute('crl_sign');
    }
    set crlSign(value) {
        this._crlSign = value;
    }
    resetCrlSign() {
        this._crlSign = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crlSignInput() {
        return this._crlSign;
    }
    get dataEncipherment() {
        return this.getBooleanAttribute('data_encipherment');
    }
    set dataEncipherment(value) {
        this._dataEncipherment = value;
    }
    resetDataEncipherment() {
        this._dataEncipherment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataEnciphermentInput() {
        return this._dataEncipherment;
    }
    get decipherOnly() {
        return this.getBooleanAttribute('decipher_only');
    }
    set decipherOnly(value) {
        this._decipherOnly = value;
    }
    resetDecipherOnly() {
        this._decipherOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get decipherOnlyInput() {
        return this._decipherOnly;
    }
    get digitalSignature() {
        return this.getBooleanAttribute('digital_signature');
    }
    set digitalSignature(value) {
        this._digitalSignature = value;
    }
    resetDigitalSignature() {
        this._digitalSignature = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get digitalSignatureInput() {
        return this._digitalSignature;
    }
    get encipherOnly() {
        return this.getBooleanAttribute('encipher_only');
    }
    set encipherOnly(value) {
        this._encipherOnly = value;
    }
    resetEncipherOnly() {
        this._encipherOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encipherOnlyInput() {
        return this._encipherOnly;
    }
    get keyAgreement() {
        return this.getBooleanAttribute('key_agreement');
    }
    set keyAgreement(value) {
        this._keyAgreement = value;
    }
    resetKeyAgreement() {
        this._keyAgreement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyAgreementInput() {
        return this._keyAgreement;
    }
    get keyEncipherment() {
        return this.getBooleanAttribute('key_encipherment');
    }
    set keyEncipherment(value) {
        this._keyEncipherment = value;
    }
    resetKeyEncipherment() {
        this._keyEncipherment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyEnciphermentInput() {
        return this._keyEncipherment;
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageOutputReference = PrivatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageOutputReference;
_k = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageOutputReference[_k] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageOutputReference", version: "5.0.1" };
function privatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_auth: cdktf.booleanToTerraform(struct.clientAuth),
        code_signing: cdktf.booleanToTerraform(struct.codeSigning),
        email_protection: cdktf.booleanToTerraform(struct.emailProtection),
        ocsp_signing: cdktf.booleanToTerraform(struct.ocspSigning),
        server_auth: cdktf.booleanToTerraform(struct.serverAuth),
        time_stamping: cdktf.booleanToTerraform(struct.timeStamping),
    };
}
exports.privatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageToTerraform = privatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageToTerraform;
class PrivatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientAuth !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientAuth = this._clientAuth;
        }
        if (this._codeSigning !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeSigning = this._codeSigning;
        }
        if (this._emailProtection !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailProtection = this._emailProtection;
        }
        if (this._ocspSigning !== undefined) {
            hasAnyValues = true;
            internalValueResult.ocspSigning = this._ocspSigning;
        }
        if (this._serverAuth !== undefined) {
            hasAnyValues = true;
            internalValueResult.serverAuth = this._serverAuth;
        }
        if (this._timeStamping !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeStamping = this._timeStamping;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientAuth = undefined;
            this._codeSigning = undefined;
            this._emailProtection = undefined;
            this._ocspSigning = undefined;
            this._serverAuth = undefined;
            this._timeStamping = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientAuth = value.clientAuth;
            this._codeSigning = value.codeSigning;
            this._emailProtection = value.emailProtection;
            this._ocspSigning = value.ocspSigning;
            this._serverAuth = value.serverAuth;
            this._timeStamping = value.timeStamping;
        }
    }
    get clientAuth() {
        return this.getBooleanAttribute('client_auth');
    }
    set clientAuth(value) {
        this._clientAuth = value;
    }
    resetClientAuth() {
        this._clientAuth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientAuthInput() {
        return this._clientAuth;
    }
    get codeSigning() {
        return this.getBooleanAttribute('code_signing');
    }
    set codeSigning(value) {
        this._codeSigning = value;
    }
    resetCodeSigning() {
        this._codeSigning = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeSigningInput() {
        return this._codeSigning;
    }
    get emailProtection() {
        return this.getBooleanAttribute('email_protection');
    }
    set emailProtection(value) {
        this._emailProtection = value;
    }
    resetEmailProtection() {
        this._emailProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailProtectionInput() {
        return this._emailProtection;
    }
    get ocspSigning() {
        return this.getBooleanAttribute('ocsp_signing');
    }
    set ocspSigning(value) {
        this._ocspSigning = value;
    }
    resetOcspSigning() {
        this._ocspSigning = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ocspSigningInput() {
        return this._ocspSigning;
    }
    get serverAuth() {
        return this.getBooleanAttribute('server_auth');
    }
    set serverAuth(value) {
        this._serverAuth = value;
    }
    resetServerAuth() {
        this._serverAuth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverAuthInput() {
        return this._serverAuth;
    }
    get timeStamping() {
        return this.getBooleanAttribute('time_stamping');
    }
    set timeStamping(value) {
        this._timeStamping = value;
    }
    resetTimeStamping() {
        this._timeStamping = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeStampingInput() {
        return this._timeStamping;
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageOutputReference = PrivatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageOutputReference;
_l = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageOutputReference[_l] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageOutputReference", version: "5.0.1" };
function privatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesToTerraform = privatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesToTerraform;
class PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._objectIdPath = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesOutputReference = PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesOutputReference[_m] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesOutputReference", version: "5.0.1" };
class PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesList = PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesList;
_o = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesList[_o] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesList", version: "5.0.1" };
function privatecaCertificateTemplatePredefinedValuesKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        base_key_usage: privatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageToTerraform(struct.baseKeyUsage),
        extended_key_usage: privatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageToTerraform(struct.extendedKeyUsage),
        unknown_extended_key_usages: cdktf.listMapper(privatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesToTerraform, true)(struct.unknownExtendedKeyUsages),
    };
}
exports.privatecaCertificateTemplatePredefinedValuesKeyUsageToTerraform = privatecaCertificateTemplatePredefinedValuesKeyUsageToTerraform;
class PrivatecaCertificateTemplatePredefinedValuesKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // base_key_usage - computed: false, optional: true, required: false
        this._baseKeyUsage = new PrivatecaCertificateTemplatePredefinedValuesKeyUsageBaseKeyUsageOutputReference(this, "base_key_usage");
        // extended_key_usage - computed: false, optional: true, required: false
        this._extendedKeyUsage = new PrivatecaCertificateTemplatePredefinedValuesKeyUsageExtendedKeyUsageOutputReference(this, "extended_key_usage");
        // unknown_extended_key_usages - computed: false, optional: true, required: false
        this._unknownExtendedKeyUsages = new PrivatecaCertificateTemplatePredefinedValuesKeyUsageUnknownExtendedKeyUsagesList(this, "unknown_extended_key_usages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._baseKeyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseKeyUsage = this._baseKeyUsage?.internalValue;
        }
        if (this._extendedKeyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.extendedKeyUsage = this._extendedKeyUsage?.internalValue;
        }
        if (this._unknownExtendedKeyUsages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.unknownExtendedKeyUsages = this._unknownExtendedKeyUsages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._baseKeyUsage.internalValue = undefined;
            this._extendedKeyUsage.internalValue = undefined;
            this._unknownExtendedKeyUsages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._baseKeyUsage.internalValue = value.baseKeyUsage;
            this._extendedKeyUsage.internalValue = value.extendedKeyUsage;
            this._unknownExtendedKeyUsages.internalValue = value.unknownExtendedKeyUsages;
        }
    }
    get baseKeyUsage() {
        return this._baseKeyUsage;
    }
    putBaseKeyUsage(value) {
        this._baseKeyUsage.internalValue = value;
    }
    resetBaseKeyUsage() {
        this._baseKeyUsage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baseKeyUsageInput() {
        return this._baseKeyUsage.internalValue;
    }
    get extendedKeyUsage() {
        return this._extendedKeyUsage;
    }
    putExtendedKeyUsage(value) {
        this._extendedKeyUsage.internalValue = value;
    }
    resetExtendedKeyUsage() {
        this._extendedKeyUsage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get extendedKeyUsageInput() {
        return this._extendedKeyUsage.internalValue;
    }
    get unknownExtendedKeyUsages() {
        return this._unknownExtendedKeyUsages;
    }
    putUnknownExtendedKeyUsages(value) {
        this._unknownExtendedKeyUsages.internalValue = value;
    }
    resetUnknownExtendedKeyUsages() {
        this._unknownExtendedKeyUsages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unknownExtendedKeyUsagesInput() {
        return this._unknownExtendedKeyUsages.internalValue;
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesKeyUsageOutputReference = PrivatecaCertificateTemplatePredefinedValuesKeyUsageOutputReference;
_p = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesKeyUsageOutputReference[_p] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesKeyUsageOutputReference", version: "5.0.1" };
function privatecaCertificateTemplatePredefinedValuesPolicyIdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCertificateTemplatePredefinedValuesPolicyIdsToTerraform = privatecaCertificateTemplatePredefinedValuesPolicyIdsToTerraform;
class PrivatecaCertificateTemplatePredefinedValuesPolicyIdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._objectIdPath = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesPolicyIdsOutputReference = PrivatecaCertificateTemplatePredefinedValuesPolicyIdsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesPolicyIdsOutputReference[_q] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesPolicyIdsOutputReference", version: "5.0.1" };
class PrivatecaCertificateTemplatePredefinedValuesPolicyIdsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateTemplatePredefinedValuesPolicyIdsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesPolicyIdsList = PrivatecaCertificateTemplatePredefinedValuesPolicyIdsList;
_r = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesPolicyIdsList[_r] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesPolicyIdsList", version: "5.0.1" };
function privatecaCertificateTemplatePredefinedValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aia_ocsp_servers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.aiaOcspServers),
        additional_extensions: cdktf.listMapper(privatecaCertificateTemplatePredefinedValuesAdditionalExtensionsToTerraform, true)(struct.additionalExtensions),
        ca_options: privatecaCertificateTemplatePredefinedValuesCaOptionsToTerraform(struct.caOptions),
        key_usage: privatecaCertificateTemplatePredefinedValuesKeyUsageToTerraform(struct.keyUsage),
        policy_ids: cdktf.listMapper(privatecaCertificateTemplatePredefinedValuesPolicyIdsToTerraform, true)(struct.policyIds),
    };
}
exports.privatecaCertificateTemplatePredefinedValuesToTerraform = privatecaCertificateTemplatePredefinedValuesToTerraform;
class PrivatecaCertificateTemplatePredefinedValuesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // additional_extensions - computed: false, optional: true, required: false
        this._additionalExtensions = new PrivatecaCertificateTemplatePredefinedValuesAdditionalExtensionsList(this, "additional_extensions", false);
        // ca_options - computed: false, optional: true, required: false
        this._caOptions = new PrivatecaCertificateTemplatePredefinedValuesCaOptionsOutputReference(this, "ca_options");
        // key_usage - computed: false, optional: true, required: false
        this._keyUsage = new PrivatecaCertificateTemplatePredefinedValuesKeyUsageOutputReference(this, "key_usage");
        // policy_ids - computed: false, optional: true, required: false
        this._policyIds = new PrivatecaCertificateTemplatePredefinedValuesPolicyIdsList(this, "policy_ids", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._aiaOcspServers !== undefined) {
            hasAnyValues = true;
            internalValueResult.aiaOcspServers = this._aiaOcspServers;
        }
        if (this._additionalExtensions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalExtensions = this._additionalExtensions?.internalValue;
        }
        if (this._caOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.caOptions = this._caOptions?.internalValue;
        }
        if (this._keyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyUsage = this._keyUsage?.internalValue;
        }
        if (this._policyIds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyIds = this._policyIds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._aiaOcspServers = undefined;
            this._additionalExtensions.internalValue = undefined;
            this._caOptions.internalValue = undefined;
            this._keyUsage.internalValue = undefined;
            this._policyIds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._aiaOcspServers = value.aiaOcspServers;
            this._additionalExtensions.internalValue = value.additionalExtensions;
            this._caOptions.internalValue = value.caOptions;
            this._keyUsage.internalValue = value.keyUsage;
            this._policyIds.internalValue = value.policyIds;
        }
    }
    get aiaOcspServers() {
        return this.getListAttribute('aia_ocsp_servers');
    }
    set aiaOcspServers(value) {
        this._aiaOcspServers = value;
    }
    resetAiaOcspServers() {
        this._aiaOcspServers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aiaOcspServersInput() {
        return this._aiaOcspServers;
    }
    get additionalExtensions() {
        return this._additionalExtensions;
    }
    putAdditionalExtensions(value) {
        this._additionalExtensions.internalValue = value;
    }
    resetAdditionalExtensions() {
        this._additionalExtensions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalExtensionsInput() {
        return this._additionalExtensions.internalValue;
    }
    get caOptions() {
        return this._caOptions;
    }
    putCaOptions(value) {
        this._caOptions.internalValue = value;
    }
    resetCaOptions() {
        this._caOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caOptionsInput() {
        return this._caOptions.internalValue;
    }
    get keyUsage() {
        return this._keyUsage;
    }
    putKeyUsage(value) {
        this._keyUsage.internalValue = value;
    }
    resetKeyUsage() {
        this._keyUsage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyUsageInput() {
        return this._keyUsage.internalValue;
    }
    get policyIds() {
        return this._policyIds;
    }
    putPolicyIds(value) {
        this._policyIds.internalValue = value;
    }
    resetPolicyIds() {
        this._policyIds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyIdsInput() {
        return this._policyIds.internalValue;
    }
}
exports.PrivatecaCertificateTemplatePredefinedValuesOutputReference = PrivatecaCertificateTemplatePredefinedValuesOutputReference;
_s = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplatePredefinedValuesOutputReference[_s] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplatePredefinedValuesOutputReference", version: "5.0.1" };
function privatecaCertificateTemplateTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.privatecaCertificateTemplateTimeoutsToTerraform = privatecaCertificateTemplateTimeoutsToTerraform;
class PrivatecaCertificateTemplateTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.PrivatecaCertificateTemplateTimeoutsOutputReference = PrivatecaCertificateTemplateTimeoutsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplateTimeoutsOutputReference[_t] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplateTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/privateca_certificate_template google_privateca_certificate_template}
*/
class PrivatecaCertificateTemplate extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/privateca_certificate_template google_privateca_certificate_template} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options PrivatecaCertificateTemplateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_privateca_certificate_template',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // identity_constraints - computed: false, optional: true, required: false
        this._identityConstraints = new PrivatecaCertificateTemplateIdentityConstraintsOutputReference(this, "identity_constraints");
        // passthrough_extensions - computed: false, optional: true, required: false
        this._passthroughExtensions = new PrivatecaCertificateTemplatePassthroughExtensionsOutputReference(this, "passthrough_extensions");
        // predefined_values - computed: false, optional: true, required: false
        this._predefinedValues = new PrivatecaCertificateTemplatePredefinedValuesOutputReference(this, "predefined_values");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new PrivatecaCertificateTemplateTimeoutsOutputReference(this, "timeouts");
        this._description = config.description;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._identityConstraints.internalValue = config.identityConstraints;
        this._passthroughExtensions.internalValue = config.passthroughExtensions;
        this._predefinedValues.internalValue = config.predefinedValues;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get identityConstraints() {
        return this._identityConstraints;
    }
    putIdentityConstraints(value) {
        this._identityConstraints.internalValue = value;
    }
    resetIdentityConstraints() {
        this._identityConstraints.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityConstraintsInput() {
        return this._identityConstraints.internalValue;
    }
    get passthroughExtensions() {
        return this._passthroughExtensions;
    }
    putPassthroughExtensions(value) {
        this._passthroughExtensions.internalValue = value;
    }
    resetPassthroughExtensions() {
        this._passthroughExtensions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passthroughExtensionsInput() {
        return this._passthroughExtensions.internalValue;
    }
    get predefinedValues() {
        return this._predefinedValues;
    }
    putPredefinedValues(value) {
        this._predefinedValues.internalValue = value;
    }
    resetPredefinedValues() {
        this._predefinedValues.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get predefinedValuesInput() {
        return this._predefinedValues.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            identity_constraints: privatecaCertificateTemplateIdentityConstraintsToTerraform(this._identityConstraints.internalValue),
            passthrough_extensions: privatecaCertificateTemplatePassthroughExtensionsToTerraform(this._passthroughExtensions.internalValue),
            predefined_values: privatecaCertificateTemplatePredefinedValuesToTerraform(this._predefinedValues.internalValue),
            timeouts: privatecaCertificateTemplateTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.PrivatecaCertificateTemplate = PrivatecaCertificateTemplate;
_u = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTemplate[_u] = { fqn: "@cdktf/provider-google.privatecaCertificateTemplate.PrivatecaCertificateTemplate", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
PrivatecaCertificateTemplate.tfResourceType = "google_privateca_certificate_template";
//# sourceMappingURL=data:application/json;base64,