"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecaptchaEnterpriseKey = exports.RecaptchaEnterpriseKeyWebSettingsOutputReference = exports.recaptchaEnterpriseKeyWebSettingsToTerraform = exports.RecaptchaEnterpriseKeyTimeoutsOutputReference = exports.recaptchaEnterpriseKeyTimeoutsToTerraform = exports.RecaptchaEnterpriseKeyTestingOptionsOutputReference = exports.recaptchaEnterpriseKeyTestingOptionsToTerraform = exports.RecaptchaEnterpriseKeyIosSettingsOutputReference = exports.recaptchaEnterpriseKeyIosSettingsToTerraform = exports.RecaptchaEnterpriseKeyAndroidSettingsOutputReference = exports.recaptchaEnterpriseKeyAndroidSettingsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function recaptchaEnterpriseKeyAndroidSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_all_package_names: cdktf.booleanToTerraform(struct.allowAllPackageNames),
        allowed_package_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedPackageNames),
    };
}
exports.recaptchaEnterpriseKeyAndroidSettingsToTerraform = recaptchaEnterpriseKeyAndroidSettingsToTerraform;
class RecaptchaEnterpriseKeyAndroidSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowAllPackageNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowAllPackageNames = this._allowAllPackageNames;
        }
        if (this._allowedPackageNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedPackageNames = this._allowedPackageNames;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowAllPackageNames = undefined;
            this._allowedPackageNames = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowAllPackageNames = value.allowAllPackageNames;
            this._allowedPackageNames = value.allowedPackageNames;
        }
    }
    get allowAllPackageNames() {
        return this.getBooleanAttribute('allow_all_package_names');
    }
    set allowAllPackageNames(value) {
        this._allowAllPackageNames = value;
    }
    resetAllowAllPackageNames() {
        this._allowAllPackageNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowAllPackageNamesInput() {
        return this._allowAllPackageNames;
    }
    get allowedPackageNames() {
        return this.getListAttribute('allowed_package_names');
    }
    set allowedPackageNames(value) {
        this._allowedPackageNames = value;
    }
    resetAllowedPackageNames() {
        this._allowedPackageNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedPackageNamesInput() {
        return this._allowedPackageNames;
    }
}
exports.RecaptchaEnterpriseKeyAndroidSettingsOutputReference = RecaptchaEnterpriseKeyAndroidSettingsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
RecaptchaEnterpriseKeyAndroidSettingsOutputReference[_a] = { fqn: "@cdktf/provider-google.recaptchaEnterpriseKey.RecaptchaEnterpriseKeyAndroidSettingsOutputReference", version: "4.0.3" };
function recaptchaEnterpriseKeyIosSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_all_bundle_ids: cdktf.booleanToTerraform(struct.allowAllBundleIds),
        allowed_bundle_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedBundleIds),
    };
}
exports.recaptchaEnterpriseKeyIosSettingsToTerraform = recaptchaEnterpriseKeyIosSettingsToTerraform;
class RecaptchaEnterpriseKeyIosSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowAllBundleIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowAllBundleIds = this._allowAllBundleIds;
        }
        if (this._allowedBundleIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedBundleIds = this._allowedBundleIds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowAllBundleIds = undefined;
            this._allowedBundleIds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowAllBundleIds = value.allowAllBundleIds;
            this._allowedBundleIds = value.allowedBundleIds;
        }
    }
    get allowAllBundleIds() {
        return this.getBooleanAttribute('allow_all_bundle_ids');
    }
    set allowAllBundleIds(value) {
        this._allowAllBundleIds = value;
    }
    resetAllowAllBundleIds() {
        this._allowAllBundleIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowAllBundleIdsInput() {
        return this._allowAllBundleIds;
    }
    get allowedBundleIds() {
        return this.getListAttribute('allowed_bundle_ids');
    }
    set allowedBundleIds(value) {
        this._allowedBundleIds = value;
    }
    resetAllowedBundleIds() {
        this._allowedBundleIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedBundleIdsInput() {
        return this._allowedBundleIds;
    }
}
exports.RecaptchaEnterpriseKeyIosSettingsOutputReference = RecaptchaEnterpriseKeyIosSettingsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
RecaptchaEnterpriseKeyIosSettingsOutputReference[_b] = { fqn: "@cdktf/provider-google.recaptchaEnterpriseKey.RecaptchaEnterpriseKeyIosSettingsOutputReference", version: "4.0.3" };
function recaptchaEnterpriseKeyTestingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        testing_challenge: cdktf.stringToTerraform(struct.testingChallenge),
        testing_score: cdktf.numberToTerraform(struct.testingScore),
    };
}
exports.recaptchaEnterpriseKeyTestingOptionsToTerraform = recaptchaEnterpriseKeyTestingOptionsToTerraform;
class RecaptchaEnterpriseKeyTestingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._testingChallenge !== undefined) {
            hasAnyValues = true;
            internalValueResult.testingChallenge = this._testingChallenge;
        }
        if (this._testingScore !== undefined) {
            hasAnyValues = true;
            internalValueResult.testingScore = this._testingScore;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._testingChallenge = undefined;
            this._testingScore = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._testingChallenge = value.testingChallenge;
            this._testingScore = value.testingScore;
        }
    }
    get testingChallenge() {
        return this.getStringAttribute('testing_challenge');
    }
    set testingChallenge(value) {
        this._testingChallenge = value;
    }
    resetTestingChallenge() {
        this._testingChallenge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get testingChallengeInput() {
        return this._testingChallenge;
    }
    get testingScore() {
        return this.getNumberAttribute('testing_score');
    }
    set testingScore(value) {
        this._testingScore = value;
    }
    resetTestingScore() {
        this._testingScore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get testingScoreInput() {
        return this._testingScore;
    }
}
exports.RecaptchaEnterpriseKeyTestingOptionsOutputReference = RecaptchaEnterpriseKeyTestingOptionsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
RecaptchaEnterpriseKeyTestingOptionsOutputReference[_c] = { fqn: "@cdktf/provider-google.recaptchaEnterpriseKey.RecaptchaEnterpriseKeyTestingOptionsOutputReference", version: "4.0.3" };
function recaptchaEnterpriseKeyTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.recaptchaEnterpriseKeyTimeoutsToTerraform = recaptchaEnterpriseKeyTimeoutsToTerraform;
class RecaptchaEnterpriseKeyTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.RecaptchaEnterpriseKeyTimeoutsOutputReference = RecaptchaEnterpriseKeyTimeoutsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
RecaptchaEnterpriseKeyTimeoutsOutputReference[_d] = { fqn: "@cdktf/provider-google.recaptchaEnterpriseKey.RecaptchaEnterpriseKeyTimeoutsOutputReference", version: "4.0.3" };
function recaptchaEnterpriseKeyWebSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_all_domains: cdktf.booleanToTerraform(struct.allowAllDomains),
        allow_amp_traffic: cdktf.booleanToTerraform(struct.allowAmpTraffic),
        allowed_domains: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedDomains),
        challenge_security_preference: cdktf.stringToTerraform(struct.challengeSecurityPreference),
        integration_type: cdktf.stringToTerraform(struct.integrationType),
    };
}
exports.recaptchaEnterpriseKeyWebSettingsToTerraform = recaptchaEnterpriseKeyWebSettingsToTerraform;
class RecaptchaEnterpriseKeyWebSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowAllDomains !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowAllDomains = this._allowAllDomains;
        }
        if (this._allowAmpTraffic !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowAmpTraffic = this._allowAmpTraffic;
        }
        if (this._allowedDomains !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedDomains = this._allowedDomains;
        }
        if (this._challengeSecurityPreference !== undefined) {
            hasAnyValues = true;
            internalValueResult.challengeSecurityPreference = this._challengeSecurityPreference;
        }
        if (this._integrationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.integrationType = this._integrationType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowAllDomains = undefined;
            this._allowAmpTraffic = undefined;
            this._allowedDomains = undefined;
            this._challengeSecurityPreference = undefined;
            this._integrationType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowAllDomains = value.allowAllDomains;
            this._allowAmpTraffic = value.allowAmpTraffic;
            this._allowedDomains = value.allowedDomains;
            this._challengeSecurityPreference = value.challengeSecurityPreference;
            this._integrationType = value.integrationType;
        }
    }
    get allowAllDomains() {
        return this.getBooleanAttribute('allow_all_domains');
    }
    set allowAllDomains(value) {
        this._allowAllDomains = value;
    }
    resetAllowAllDomains() {
        this._allowAllDomains = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowAllDomainsInput() {
        return this._allowAllDomains;
    }
    get allowAmpTraffic() {
        return this.getBooleanAttribute('allow_amp_traffic');
    }
    set allowAmpTraffic(value) {
        this._allowAmpTraffic = value;
    }
    resetAllowAmpTraffic() {
        this._allowAmpTraffic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowAmpTrafficInput() {
        return this._allowAmpTraffic;
    }
    get allowedDomains() {
        return this.getListAttribute('allowed_domains');
    }
    set allowedDomains(value) {
        this._allowedDomains = value;
    }
    resetAllowedDomains() {
        this._allowedDomains = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedDomainsInput() {
        return this._allowedDomains;
    }
    get challengeSecurityPreference() {
        return this.getStringAttribute('challenge_security_preference');
    }
    set challengeSecurityPreference(value) {
        this._challengeSecurityPreference = value;
    }
    resetChallengeSecurityPreference() {
        this._challengeSecurityPreference = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get challengeSecurityPreferenceInput() {
        return this._challengeSecurityPreference;
    }
    get integrationType() {
        return this.getStringAttribute('integration_type');
    }
    set integrationType(value) {
        this._integrationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get integrationTypeInput() {
        return this._integrationType;
    }
}
exports.RecaptchaEnterpriseKeyWebSettingsOutputReference = RecaptchaEnterpriseKeyWebSettingsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
RecaptchaEnterpriseKeyWebSettingsOutputReference[_e] = { fqn: "@cdktf/provider-google.recaptchaEnterpriseKey.RecaptchaEnterpriseKeyWebSettingsOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/recaptcha_enterprise_key google_recaptcha_enterprise_key}
*/
class RecaptchaEnterpriseKey extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/recaptcha_enterprise_key google_recaptcha_enterprise_key} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options RecaptchaEnterpriseKeyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_recaptcha_enterprise_key',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // android_settings - computed: false, optional: true, required: false
        this._androidSettings = new RecaptchaEnterpriseKeyAndroidSettingsOutputReference(this, "android_settings");
        // ios_settings - computed: false, optional: true, required: false
        this._iosSettings = new RecaptchaEnterpriseKeyIosSettingsOutputReference(this, "ios_settings");
        // testing_options - computed: false, optional: true, required: false
        this._testingOptions = new RecaptchaEnterpriseKeyTestingOptionsOutputReference(this, "testing_options");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new RecaptchaEnterpriseKeyTimeoutsOutputReference(this, "timeouts");
        // web_settings - computed: false, optional: true, required: false
        this._webSettings = new RecaptchaEnterpriseKeyWebSettingsOutputReference(this, "web_settings");
        this._displayName = config.displayName;
        this._id = config.id;
        this._labels = config.labels;
        this._project = config.project;
        this._androidSettings.internalValue = config.androidSettings;
        this._iosSettings.internalValue = config.iosSettings;
        this._testingOptions.internalValue = config.testingOptions;
        this._timeouts.internalValue = config.timeouts;
        this._webSettings.internalValue = config.webSettings;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get androidSettings() {
        return this._androidSettings;
    }
    putAndroidSettings(value) {
        this._androidSettings.internalValue = value;
    }
    resetAndroidSettings() {
        this._androidSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get androidSettingsInput() {
        return this._androidSettings.internalValue;
    }
    get iosSettings() {
        return this._iosSettings;
    }
    putIosSettings(value) {
        this._iosSettings.internalValue = value;
    }
    resetIosSettings() {
        this._iosSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iosSettingsInput() {
        return this._iosSettings.internalValue;
    }
    get testingOptions() {
        return this._testingOptions;
    }
    putTestingOptions(value) {
        this._testingOptions.internalValue = value;
    }
    resetTestingOptions() {
        this._testingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get testingOptionsInput() {
        return this._testingOptions.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get webSettings() {
        return this._webSettings;
    }
    putWebSettings(value) {
        this._webSettings.internalValue = value;
    }
    resetWebSettings() {
        this._webSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webSettingsInput() {
        return this._webSettings.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            project: cdktf.stringToTerraform(this._project),
            android_settings: recaptchaEnterpriseKeyAndroidSettingsToTerraform(this._androidSettings.internalValue),
            ios_settings: recaptchaEnterpriseKeyIosSettingsToTerraform(this._iosSettings.internalValue),
            testing_options: recaptchaEnterpriseKeyTestingOptionsToTerraform(this._testingOptions.internalValue),
            timeouts: recaptchaEnterpriseKeyTimeoutsToTerraform(this._timeouts.internalValue),
            web_settings: recaptchaEnterpriseKeyWebSettingsToTerraform(this._webSettings.internalValue),
        };
    }
}
exports.RecaptchaEnterpriseKey = RecaptchaEnterpriseKey;
_f = JSII_RTTI_SYMBOL_1;
RecaptchaEnterpriseKey[_f] = { fqn: "@cdktf/provider-google.recaptchaEnterpriseKey.RecaptchaEnterpriseKey", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
RecaptchaEnterpriseKey.tfResourceType = "google_recaptcha_enterprise_key";
//# sourceMappingURL=data:application/json;base64,