"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DialogflowCxPage = exports.DialogflowCxPageTransitionRoutesList = exports.DialogflowCxPageTransitionRoutesOutputReference = exports.dialogflowCxPageTransitionRoutesToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToTerraform = exports.DialogflowCxPageTimeoutsOutputReference = exports.dialogflowCxPageTimeoutsToTerraform = exports.DialogflowCxPageFormOutputReference = exports.dialogflowCxPageFormToTerraform = exports.DialogflowCxPageFormParametersList = exports.DialogflowCxPageFormParametersOutputReference = exports.dialogflowCxPageFormParametersToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToTerraform = exports.DialogflowCxPageEventHandlersList = exports.DialogflowCxPageEventHandlersOutputReference = exports.dialogflowCxPageEventHandlersToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList = exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToTerraform = exports.DialogflowCxPageEntryFulfillmentOutputReference = exports.dialogflowCxPageEntryFulfillmentToTerraform = exports.DialogflowCxPageEntryFulfillmentMessagesList = exports.DialogflowCxPageEntryFulfillmentMessagesOutputReference = exports.dialogflowCxPageEntryFulfillmentMessagesToTerraform = exports.DialogflowCxPageEntryFulfillmentMessagesTextOutputReference = exports.dialogflowCxPageEntryFulfillmentMessagesTextToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dialogflowCxPageEntryFulfillmentMessagesTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.text),
    };
}
exports.dialogflowCxPageEntryFulfillmentMessagesTextToTerraform = dialogflowCxPageEntryFulfillmentMessagesTextToTerraform;
class DialogflowCxPageEntryFulfillmentMessagesTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get text() {
        return this.getListAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageEntryFulfillmentMessagesTextOutputReference = DialogflowCxPageEntryFulfillmentMessagesTextOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentMessagesTextOutputReference[_a] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentMessagesTextOutputReference", version: "4.0.3" };
function dialogflowCxPageEntryFulfillmentMessagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: dialogflowCxPageEntryFulfillmentMessagesTextToTerraform(struct.text),
    };
}
exports.dialogflowCxPageEntryFulfillmentMessagesToTerraform = dialogflowCxPageEntryFulfillmentMessagesToTerraform;
class DialogflowCxPageEntryFulfillmentMessagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // text - computed: false, optional: true, required: false
        this._text = new DialogflowCxPageEntryFulfillmentMessagesTextOutputReference(this, "text");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text.internalValue = value.text;
        }
    }
    get text() {
        return this._text;
    }
    putText(value) {
        this._text.internalValue = value;
    }
    resetText() {
        this._text.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text.internalValue;
    }
}
exports.DialogflowCxPageEntryFulfillmentMessagesOutputReference = DialogflowCxPageEntryFulfillmentMessagesOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentMessagesOutputReference[_b] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentMessagesOutputReference", version: "4.0.3" };
class DialogflowCxPageEntryFulfillmentMessagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageEntryFulfillmentMessagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageEntryFulfillmentMessagesList = DialogflowCxPageEntryFulfillmentMessagesList;
_c = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentMessagesList[_c] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentMessagesList", version: "4.0.3" };
function dialogflowCxPageEntryFulfillmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        return_partial_responses: cdktf.booleanToTerraform(struct.returnPartialResponses),
        tag: cdktf.stringToTerraform(struct.tag),
        webhook: cdktf.stringToTerraform(struct.webhook),
        messages: cdktf.listMapper(dialogflowCxPageEntryFulfillmentMessagesToTerraform, true)(struct.messages),
    };
}
exports.dialogflowCxPageEntryFulfillmentToTerraform = dialogflowCxPageEntryFulfillmentToTerraform;
class DialogflowCxPageEntryFulfillmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // messages - computed: false, optional: true, required: false
        this._messages = new DialogflowCxPageEntryFulfillmentMessagesList(this, "messages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._returnPartialResponses !== undefined) {
            hasAnyValues = true;
            internalValueResult.returnPartialResponses = this._returnPartialResponses;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        if (this._webhook !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhook = this._webhook;
        }
        if (this._messages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messages = this._messages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._returnPartialResponses = undefined;
            this._tag = undefined;
            this._webhook = undefined;
            this._messages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._returnPartialResponses = value.returnPartialResponses;
            this._tag = value.tag;
            this._webhook = value.webhook;
            this._messages.internalValue = value.messages;
        }
    }
    get returnPartialResponses() {
        return this.getBooleanAttribute('return_partial_responses');
    }
    set returnPartialResponses(value) {
        this._returnPartialResponses = value;
    }
    resetReturnPartialResponses() {
        this._returnPartialResponses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get returnPartialResponsesInput() {
        return this._returnPartialResponses;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
    get webhook() {
        return this.getStringAttribute('webhook');
    }
    set webhook(value) {
        this._webhook = value;
    }
    resetWebhook() {
        this._webhook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookInput() {
        return this._webhook;
    }
    get messages() {
        return this._messages;
    }
    putMessages(value) {
        this._messages.internalValue = value;
    }
    resetMessages() {
        this._messages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messagesInput() {
        return this._messages.internalValue;
    }
}
exports.DialogflowCxPageEntryFulfillmentOutputReference = DialogflowCxPageEntryFulfillmentOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentOutputReference[_d] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentOutputReference", version: "4.0.3" };
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.text),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get text() {
        return this.getListAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference[_e] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference", version: "4.0.3" };
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToTerraform(struct.text),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // text - computed: false, optional: true, required: false
        this._text = new DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference(this, "text");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text.internalValue = value.text;
        }
    }
    get text() {
        return this._text;
    }
    putText(value) {
        this._text.internalValue = value;
    }
    resetText() {
        this._text.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text.internalValue;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference[_f] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference", version: "4.0.3" };
class DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList = DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList;
_g = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList[_g] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList", version: "4.0.3" };
function dialogflowCxPageEventHandlersTriggerFulfillmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        return_partial_responses: cdktf.booleanToTerraform(struct.returnPartialResponses),
        tag: cdktf.stringToTerraform(struct.tag),
        webhook: cdktf.stringToTerraform(struct.webhook),
        messages: cdktf.listMapper(dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToTerraform, true)(struct.messages),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentToTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // messages - computed: false, optional: true, required: false
        this._messages = new DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList(this, "messages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._returnPartialResponses !== undefined) {
            hasAnyValues = true;
            internalValueResult.returnPartialResponses = this._returnPartialResponses;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        if (this._webhook !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhook = this._webhook;
        }
        if (this._messages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messages = this._messages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._returnPartialResponses = undefined;
            this._tag = undefined;
            this._webhook = undefined;
            this._messages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._returnPartialResponses = value.returnPartialResponses;
            this._tag = value.tag;
            this._webhook = value.webhook;
            this._messages.internalValue = value.messages;
        }
    }
    get returnPartialResponses() {
        return this.getBooleanAttribute('return_partial_responses');
    }
    set returnPartialResponses(value) {
        this._returnPartialResponses = value;
    }
    resetReturnPartialResponses() {
        this._returnPartialResponses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get returnPartialResponsesInput() {
        return this._returnPartialResponses;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
    get webhook() {
        return this.getStringAttribute('webhook');
    }
    set webhook(value) {
        this._webhook = value;
    }
    resetWebhook() {
        this._webhook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookInput() {
        return this._webhook;
    }
    get messages() {
        return this._messages;
    }
    putMessages(value) {
        this._messages.internalValue = value;
    }
    resetMessages() {
        this._messages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messagesInput() {
        return this._messages.internalValue;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference[_h] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference", version: "4.0.3" };
function dialogflowCxPageEventHandlersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event: cdktf.stringToTerraform(struct.event),
        target_flow: cdktf.stringToTerraform(struct.targetFlow),
        target_page: cdktf.stringToTerraform(struct.targetPage),
        trigger_fulfillment: dialogflowCxPageEventHandlersTriggerFulfillmentToTerraform(struct.triggerFulfillment),
    };
}
exports.dialogflowCxPageEventHandlersToTerraform = dialogflowCxPageEventHandlersToTerraform;
class DialogflowCxPageEventHandlersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // trigger_fulfillment - computed: false, optional: true, required: false
        this._triggerFulfillment = new DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference(this, "trigger_fulfillment");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._event !== undefined) {
            hasAnyValues = true;
            internalValueResult.event = this._event;
        }
        if (this._targetFlow !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetFlow = this._targetFlow;
        }
        if (this._targetPage !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetPage = this._targetPage;
        }
        if (this._triggerFulfillment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggerFulfillment = this._triggerFulfillment?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._event = undefined;
            this._targetFlow = undefined;
            this._targetPage = undefined;
            this._triggerFulfillment.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._event = value.event;
            this._targetFlow = value.targetFlow;
            this._targetPage = value.targetPage;
            this._triggerFulfillment.internalValue = value.triggerFulfillment;
        }
    }
    get event() {
        return this.getStringAttribute('event');
    }
    set event(value) {
        this._event = value;
    }
    resetEvent() {
        this._event = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventInput() {
        return this._event;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get targetFlow() {
        return this.getStringAttribute('target_flow');
    }
    set targetFlow(value) {
        this._targetFlow = value;
    }
    resetTargetFlow() {
        this._targetFlow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetFlowInput() {
        return this._targetFlow;
    }
    get targetPage() {
        return this.getStringAttribute('target_page');
    }
    set targetPage(value) {
        this._targetPage = value;
    }
    resetTargetPage() {
        this._targetPage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetPageInput() {
        return this._targetPage;
    }
    get triggerFulfillment() {
        return this._triggerFulfillment;
    }
    putTriggerFulfillment(value) {
        this._triggerFulfillment.internalValue = value;
    }
    resetTriggerFulfillment() {
        this._triggerFulfillment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerFulfillmentInput() {
        return this._triggerFulfillment.internalValue;
    }
}
exports.DialogflowCxPageEventHandlersOutputReference = DialogflowCxPageEventHandlersOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersOutputReference[_j] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersOutputReference", version: "4.0.3" };
class DialogflowCxPageEventHandlersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageEventHandlersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageEventHandlersList = DialogflowCxPageEventHandlersList;
_k = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersList[_k] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersList", version: "4.0.3" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.text),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get text() {
        return this.getListAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference[_l] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference", version: "4.0.3" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToTerraform(struct.text),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // text - computed: false, optional: true, required: false
        this._text = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference(this, "text");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text.internalValue = value.text;
        }
    }
    get text() {
        return this._text;
    }
    putText(value) {
        this._text.internalValue = value;
    }
    resetText() {
        this._text.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text.internalValue;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference[_m] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference", version: "4.0.3" };
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList;
_o = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList[_o] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList", version: "4.0.3" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        return_partial_responses: cdktf.booleanToTerraform(struct.returnPartialResponses),
        tag: cdktf.stringToTerraform(struct.tag),
        webhook: cdktf.stringToTerraform(struct.webhook),
        messages: cdktf.listMapper(dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToTerraform, true)(struct.messages),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // messages - computed: false, optional: true, required: false
        this._messages = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList(this, "messages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._returnPartialResponses !== undefined) {
            hasAnyValues = true;
            internalValueResult.returnPartialResponses = this._returnPartialResponses;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        if (this._webhook !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhook = this._webhook;
        }
        if (this._messages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messages = this._messages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._returnPartialResponses = undefined;
            this._tag = undefined;
            this._webhook = undefined;
            this._messages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._returnPartialResponses = value.returnPartialResponses;
            this._tag = value.tag;
            this._webhook = value.webhook;
            this._messages.internalValue = value.messages;
        }
    }
    get returnPartialResponses() {
        return this.getBooleanAttribute('return_partial_responses');
    }
    set returnPartialResponses(value) {
        this._returnPartialResponses = value;
    }
    resetReturnPartialResponses() {
        this._returnPartialResponses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get returnPartialResponsesInput() {
        return this._returnPartialResponses;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
    get webhook() {
        return this.getStringAttribute('webhook');
    }
    set webhook(value) {
        this._webhook = value;
    }
    resetWebhook() {
        this._webhook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookInput() {
        return this._webhook;
    }
    get messages() {
        return this._messages;
    }
    putMessages(value) {
        this._messages.internalValue = value;
    }
    resetMessages() {
        this._messages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messagesInput() {
        return this._messages.internalValue;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference[_p] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference", version: "4.0.3" };
function dialogflowCxPageFormParametersFillBehaviorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        initial_prompt_fulfillment: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToTerraform(struct.initialPromptFulfillment),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorToTerraform = dialogflowCxPageFormParametersFillBehaviorToTerraform;
class DialogflowCxPageFormParametersFillBehaviorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // initial_prompt_fulfillment - computed: false, optional: true, required: false
        this._initialPromptFulfillment = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference(this, "initial_prompt_fulfillment");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._initialPromptFulfillment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.initialPromptFulfillment = this._initialPromptFulfillment?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._initialPromptFulfillment.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._initialPromptFulfillment.internalValue = value.initialPromptFulfillment;
        }
    }
    get initialPromptFulfillment() {
        return this._initialPromptFulfillment;
    }
    putInitialPromptFulfillment(value) {
        this._initialPromptFulfillment.internalValue = value;
    }
    resetInitialPromptFulfillment() {
        this._initialPromptFulfillment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialPromptFulfillmentInput() {
        return this._initialPromptFulfillment.internalValue;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorOutputReference = DialogflowCxPageFormParametersFillBehaviorOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorOutputReference[_q] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorOutputReference", version: "4.0.3" };
function dialogflowCxPageFormParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        display_name: cdktf.stringToTerraform(struct.displayName),
        entity_type: cdktf.stringToTerraform(struct.entityType),
        is_list: cdktf.booleanToTerraform(struct.isList),
        redact: cdktf.booleanToTerraform(struct.redact),
        required: cdktf.booleanToTerraform(struct.required),
        fill_behavior: dialogflowCxPageFormParametersFillBehaviorToTerraform(struct.fillBehavior),
    };
}
exports.dialogflowCxPageFormParametersToTerraform = dialogflowCxPageFormParametersToTerraform;
class DialogflowCxPageFormParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // fill_behavior - computed: false, optional: true, required: false
        this._fillBehavior = new DialogflowCxPageFormParametersFillBehaviorOutputReference(this, "fill_behavior");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        if (this._entityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.entityType = this._entityType;
        }
        if (this._isList !== undefined) {
            hasAnyValues = true;
            internalValueResult.isList = this._isList;
        }
        if (this._redact !== undefined) {
            hasAnyValues = true;
            internalValueResult.redact = this._redact;
        }
        if (this._required !== undefined) {
            hasAnyValues = true;
            internalValueResult.required = this._required;
        }
        if (this._fillBehavior?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fillBehavior = this._fillBehavior?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._displayName = undefined;
            this._entityType = undefined;
            this._isList = undefined;
            this._redact = undefined;
            this._required = undefined;
            this._fillBehavior.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._displayName = value.displayName;
            this._entityType = value.entityType;
            this._isList = value.isList;
            this._redact = value.redact;
            this._required = value.required;
            this._fillBehavior.internalValue = value.fillBehavior;
        }
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get entityType() {
        return this.getStringAttribute('entity_type');
    }
    set entityType(value) {
        this._entityType = value;
    }
    resetEntityType() {
        this._entityType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entityTypeInput() {
        return this._entityType;
    }
    get isList() {
        return this.getBooleanAttribute('is_list');
    }
    set isList(value) {
        this._isList = value;
    }
    resetIsList() {
        this._isList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isListInput() {
        return this._isList;
    }
    get redact() {
        return this.getBooleanAttribute('redact');
    }
    set redact(value) {
        this._redact = value;
    }
    resetRedact() {
        this._redact = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redactInput() {
        return this._redact;
    }
    get required() {
        return this.getBooleanAttribute('required');
    }
    set required(value) {
        this._required = value;
    }
    resetRequired() {
        this._required = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredInput() {
        return this._required;
    }
    get fillBehavior() {
        return this._fillBehavior;
    }
    putFillBehavior(value) {
        this._fillBehavior.internalValue = value;
    }
    resetFillBehavior() {
        this._fillBehavior.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fillBehaviorInput() {
        return this._fillBehavior.internalValue;
    }
}
exports.DialogflowCxPageFormParametersOutputReference = DialogflowCxPageFormParametersOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersOutputReference[_r] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersOutputReference", version: "4.0.3" };
class DialogflowCxPageFormParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageFormParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageFormParametersList = DialogflowCxPageFormParametersList;
_s = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersList[_s] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersList", version: "4.0.3" };
function dialogflowCxPageFormToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameters: cdktf.listMapper(dialogflowCxPageFormParametersToTerraform, true)(struct.parameters),
    };
}
exports.dialogflowCxPageFormToTerraform = dialogflowCxPageFormToTerraform;
class DialogflowCxPageFormOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // parameters - computed: false, optional: true, required: false
        this._parameters = new DialogflowCxPageFormParametersList(this, "parameters", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameters = this._parameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._parameters.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._parameters.internalValue = value.parameters;
        }
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
}
exports.DialogflowCxPageFormOutputReference = DialogflowCxPageFormOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormOutputReference[_t] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormOutputReference", version: "4.0.3" };
function dialogflowCxPageTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dialogflowCxPageTimeoutsToTerraform = dialogflowCxPageTimeoutsToTerraform;
class DialogflowCxPageTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DialogflowCxPageTimeoutsOutputReference = DialogflowCxPageTimeoutsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTimeoutsOutputReference[_u] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTimeoutsOutputReference", version: "4.0.3" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.text),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get text() {
        return this.getListAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference[_v] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference", version: "4.0.3" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToTerraform(struct.text),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // text - computed: false, optional: true, required: false
        this._text = new DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference(this, "text");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text.internalValue = value.text;
        }
    }
    get text() {
        return this._text;
    }
    putText(value) {
        this._text.internalValue = value;
    }
    resetText() {
        this._text.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text.internalValue;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference[_w] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference", version: "4.0.3" };
class DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList = DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList;
_x = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList[_x] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList", version: "4.0.3" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        return_partial_responses: cdktf.booleanToTerraform(struct.returnPartialResponses),
        tag: cdktf.stringToTerraform(struct.tag),
        webhook: cdktf.stringToTerraform(struct.webhook),
        messages: cdktf.listMapper(dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToTerraform, true)(struct.messages),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentToTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // messages - computed: false, optional: true, required: false
        this._messages = new DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList(this, "messages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._returnPartialResponses !== undefined) {
            hasAnyValues = true;
            internalValueResult.returnPartialResponses = this._returnPartialResponses;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        if (this._webhook !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhook = this._webhook;
        }
        if (this._messages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messages = this._messages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._returnPartialResponses = undefined;
            this._tag = undefined;
            this._webhook = undefined;
            this._messages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._returnPartialResponses = value.returnPartialResponses;
            this._tag = value.tag;
            this._webhook = value.webhook;
            this._messages.internalValue = value.messages;
        }
    }
    get returnPartialResponses() {
        return this.getBooleanAttribute('return_partial_responses');
    }
    set returnPartialResponses(value) {
        this._returnPartialResponses = value;
    }
    resetReturnPartialResponses() {
        this._returnPartialResponses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get returnPartialResponsesInput() {
        return this._returnPartialResponses;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
    get webhook() {
        return this.getStringAttribute('webhook');
    }
    set webhook(value) {
        this._webhook = value;
    }
    resetWebhook() {
        this._webhook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookInput() {
        return this._webhook;
    }
    get messages() {
        return this._messages;
    }
    putMessages(value) {
        this._messages.internalValue = value;
    }
    resetMessages() {
        this._messages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messagesInput() {
        return this._messages.internalValue;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference[_y] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference", version: "4.0.3" };
function dialogflowCxPageTransitionRoutesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        condition: cdktf.stringToTerraform(struct.condition),
        intent: cdktf.stringToTerraform(struct.intent),
        target_flow: cdktf.stringToTerraform(struct.targetFlow),
        target_page: cdktf.stringToTerraform(struct.targetPage),
        trigger_fulfillment: dialogflowCxPageTransitionRoutesTriggerFulfillmentToTerraform(struct.triggerFulfillment),
    };
}
exports.dialogflowCxPageTransitionRoutesToTerraform = dialogflowCxPageTransitionRoutesToTerraform;
class DialogflowCxPageTransitionRoutesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // trigger_fulfillment - computed: false, optional: true, required: false
        this._triggerFulfillment = new DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference(this, "trigger_fulfillment");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._condition !== undefined) {
            hasAnyValues = true;
            internalValueResult.condition = this._condition;
        }
        if (this._intent !== undefined) {
            hasAnyValues = true;
            internalValueResult.intent = this._intent;
        }
        if (this._targetFlow !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetFlow = this._targetFlow;
        }
        if (this._targetPage !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetPage = this._targetPage;
        }
        if (this._triggerFulfillment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggerFulfillment = this._triggerFulfillment?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._condition = undefined;
            this._intent = undefined;
            this._targetFlow = undefined;
            this._targetPage = undefined;
            this._triggerFulfillment.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._condition = value.condition;
            this._intent = value.intent;
            this._targetFlow = value.targetFlow;
            this._targetPage = value.targetPage;
            this._triggerFulfillment.internalValue = value.triggerFulfillment;
        }
    }
    get condition() {
        return this.getStringAttribute('condition');
    }
    set condition(value) {
        this._condition = value;
    }
    resetCondition() {
        this._condition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionInput() {
        return this._condition;
    }
    get intent() {
        return this.getStringAttribute('intent');
    }
    set intent(value) {
        this._intent = value;
    }
    resetIntent() {
        this._intent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intentInput() {
        return this._intent;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get targetFlow() {
        return this.getStringAttribute('target_flow');
    }
    set targetFlow(value) {
        this._targetFlow = value;
    }
    resetTargetFlow() {
        this._targetFlow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetFlowInput() {
        return this._targetFlow;
    }
    get targetPage() {
        return this.getStringAttribute('target_page');
    }
    set targetPage(value) {
        this._targetPage = value;
    }
    resetTargetPage() {
        this._targetPage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetPageInput() {
        return this._targetPage;
    }
    get triggerFulfillment() {
        return this._triggerFulfillment;
    }
    putTriggerFulfillment(value) {
        this._triggerFulfillment.internalValue = value;
    }
    resetTriggerFulfillment() {
        this._triggerFulfillment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerFulfillmentInput() {
        return this._triggerFulfillment.internalValue;
    }
}
exports.DialogflowCxPageTransitionRoutesOutputReference = DialogflowCxPageTransitionRoutesOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesOutputReference[_z] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesOutputReference", version: "4.0.3" };
class DialogflowCxPageTransitionRoutesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageTransitionRoutesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageTransitionRoutesList = DialogflowCxPageTransitionRoutesList;
_0 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesList[_0] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesList", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/dialogflow_cx_page google_dialogflow_cx_page}
*/
class DialogflowCxPage extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/dialogflow_cx_page google_dialogflow_cx_page} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DialogflowCxPageConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_dialogflow_cx_page',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // entry_fulfillment - computed: false, optional: true, required: false
        this._entryFulfillment = new DialogflowCxPageEntryFulfillmentOutputReference(this, "entry_fulfillment");
        // event_handlers - computed: false, optional: true, required: false
        this._eventHandlers = new DialogflowCxPageEventHandlersList(this, "event_handlers", false);
        // form - computed: false, optional: true, required: false
        this._form = new DialogflowCxPageFormOutputReference(this, "form");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DialogflowCxPageTimeoutsOutputReference(this, "timeouts");
        // transition_routes - computed: false, optional: true, required: false
        this._transitionRoutes = new DialogflowCxPageTransitionRoutesList(this, "transition_routes", false);
        this._displayName = config.displayName;
        this._id = config.id;
        this._languageCode = config.languageCode;
        this._parent = config.parent;
        this._transitionRouteGroups = config.transitionRouteGroups;
        this._entryFulfillment.internalValue = config.entryFulfillment;
        this._eventHandlers.internalValue = config.eventHandlers;
        this._form.internalValue = config.form;
        this._timeouts.internalValue = config.timeouts;
        this._transitionRoutes.internalValue = config.transitionRoutes;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    resetLanguageCode() {
        this._languageCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get parent() {
        return this.getStringAttribute('parent');
    }
    set parent(value) {
        this._parent = value;
    }
    resetParent() {
        this._parent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parentInput() {
        return this._parent;
    }
    get transitionRouteGroups() {
        return this.getListAttribute('transition_route_groups');
    }
    set transitionRouteGroups(value) {
        this._transitionRouteGroups = value;
    }
    resetTransitionRouteGroups() {
        this._transitionRouteGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transitionRouteGroupsInput() {
        return this._transitionRouteGroups;
    }
    get entryFulfillment() {
        return this._entryFulfillment;
    }
    putEntryFulfillment(value) {
        this._entryFulfillment.internalValue = value;
    }
    resetEntryFulfillment() {
        this._entryFulfillment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entryFulfillmentInput() {
        return this._entryFulfillment.internalValue;
    }
    get eventHandlers() {
        return this._eventHandlers;
    }
    putEventHandlers(value) {
        this._eventHandlers.internalValue = value;
    }
    resetEventHandlers() {
        this._eventHandlers.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventHandlersInput() {
        return this._eventHandlers.internalValue;
    }
    get form() {
        return this._form;
    }
    putForm(value) {
        this._form.internalValue = value;
    }
    resetForm() {
        this._form.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get formInput() {
        return this._form.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get transitionRoutes() {
        return this._transitionRoutes;
    }
    putTransitionRoutes(value) {
        this._transitionRoutes.internalValue = value;
    }
    resetTransitionRoutes() {
        this._transitionRoutes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transitionRoutesInput() {
        return this._transitionRoutes.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            language_code: cdktf.stringToTerraform(this._languageCode),
            parent: cdktf.stringToTerraform(this._parent),
            transition_route_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(this._transitionRouteGroups),
            entry_fulfillment: dialogflowCxPageEntryFulfillmentToTerraform(this._entryFulfillment.internalValue),
            event_handlers: cdktf.listMapper(dialogflowCxPageEventHandlersToTerraform, true)(this._eventHandlers.internalValue),
            form: dialogflowCxPageFormToTerraform(this._form.internalValue),
            timeouts: dialogflowCxPageTimeoutsToTerraform(this._timeouts.internalValue),
            transition_routes: cdktf.listMapper(dialogflowCxPageTransitionRoutesToTerraform, true)(this._transitionRoutes.internalValue),
        };
    }
}
exports.DialogflowCxPage = DialogflowCxPage;
_1 = JSII_RTTI_SYMBOL_1;
DialogflowCxPage[_1] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPage", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
DialogflowCxPage.tfResourceType = "google_dialogflow_cx_page";
//# sourceMappingURL=data:application/json;base64,