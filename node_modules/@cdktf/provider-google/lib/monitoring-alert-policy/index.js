"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringAlertPolicy = exports.MonitoringAlertPolicyTimeoutsOutputReference = exports.monitoringAlertPolicyTimeoutsToTerraform = exports.MonitoringAlertPolicyDocumentationOutputReference = exports.monitoringAlertPolicyDocumentationToTerraform = exports.MonitoringAlertPolicyConditionsList = exports.MonitoringAlertPolicyConditionsOutputReference = exports.monitoringAlertPolicyConditionsToTerraform = exports.MonitoringAlertPolicyConditionsConditionThresholdOutputReference = exports.monitoringAlertPolicyConditionsConditionThresholdToTerraform = exports.MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference = exports.monitoringAlertPolicyConditionsConditionThresholdTriggerToTerraform = exports.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList = exports.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference = exports.monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToTerraform = exports.MonitoringAlertPolicyConditionsConditionThresholdAggregationsList = exports.MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference = exports.monitoringAlertPolicyConditionsConditionThresholdAggregationsToTerraform = exports.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference = exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToTerraform = exports.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference = exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToTerraform = exports.MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference = exports.monitoringAlertPolicyConditionsConditionMatchedLogToTerraform = exports.MonitoringAlertPolicyConditionsConditionAbsentOutputReference = exports.monitoringAlertPolicyConditionsConditionAbsentToTerraform = exports.MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference = exports.monitoringAlertPolicyConditionsConditionAbsentTriggerToTerraform = exports.MonitoringAlertPolicyConditionsConditionAbsentAggregationsList = exports.MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference = exports.monitoringAlertPolicyConditionsConditionAbsentAggregationsToTerraform = exports.MonitoringAlertPolicyAlertStrategyOutputReference = exports.monitoringAlertPolicyAlertStrategyToTerraform = exports.MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference = exports.monitoringAlertPolicyAlertStrategyNotificationRateLimitToTerraform = exports.MonitoringAlertPolicyCreationRecordList = exports.MonitoringAlertPolicyCreationRecordOutputReference = exports.monitoringAlertPolicyCreationRecordToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function monitoringAlertPolicyCreationRecordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.monitoringAlertPolicyCreationRecordToTerraform = monitoringAlertPolicyCreationRecordToTerraform;
class MonitoringAlertPolicyCreationRecordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // mutate_time - computed: true, optional: false, required: false
    get mutateTime() {
        return this.getStringAttribute('mutate_time');
    }
    // mutated_by - computed: true, optional: false, required: false
    get mutatedBy() {
        return this.getStringAttribute('mutated_by');
    }
}
exports.MonitoringAlertPolicyCreationRecordOutputReference = MonitoringAlertPolicyCreationRecordOutputReference;
_a = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyCreationRecordOutputReference[_a] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyCreationRecordOutputReference", version: "5.0.1" };
class MonitoringAlertPolicyCreationRecordList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyCreationRecordOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyCreationRecordList = MonitoringAlertPolicyCreationRecordList;
_b = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyCreationRecordList[_b] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyCreationRecordList", version: "5.0.1" };
function monitoringAlertPolicyAlertStrategyNotificationRateLimitToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        period: cdktf.stringToTerraform(struct.period),
    };
}
exports.monitoringAlertPolicyAlertStrategyNotificationRateLimitToTerraform = monitoringAlertPolicyAlertStrategyNotificationRateLimitToTerraform;
class MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._period !== undefined) {
            hasAnyValues = true;
            internalValueResult.period = this._period;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._period = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._period = value.period;
        }
    }
    get period() {
        return this.getStringAttribute('period');
    }
    set period(value) {
        this._period = value;
    }
    resetPeriod() {
        this._period = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get periodInput() {
        return this._period;
    }
}
exports.MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference = MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference;
_c = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference[_c] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference", version: "5.0.1" };
function monitoringAlertPolicyAlertStrategyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_close: cdktf.stringToTerraform(struct.autoClose),
        notification_rate_limit: monitoringAlertPolicyAlertStrategyNotificationRateLimitToTerraform(struct.notificationRateLimit),
    };
}
exports.monitoringAlertPolicyAlertStrategyToTerraform = monitoringAlertPolicyAlertStrategyToTerraform;
class MonitoringAlertPolicyAlertStrategyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // notification_rate_limit - computed: false, optional: true, required: false
        this._notificationRateLimit = new MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference(this, "notification_rate_limit");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoClose !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoClose = this._autoClose;
        }
        if (this._notificationRateLimit?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.notificationRateLimit = this._notificationRateLimit?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoClose = undefined;
            this._notificationRateLimit.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoClose = value.autoClose;
            this._notificationRateLimit.internalValue = value.notificationRateLimit;
        }
    }
    get autoClose() {
        return this.getStringAttribute('auto_close');
    }
    set autoClose(value) {
        this._autoClose = value;
    }
    resetAutoClose() {
        this._autoClose = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoCloseInput() {
        return this._autoClose;
    }
    get notificationRateLimit() {
        return this._notificationRateLimit;
    }
    putNotificationRateLimit(value) {
        this._notificationRateLimit.internalValue = value;
    }
    resetNotificationRateLimit() {
        this._notificationRateLimit.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationRateLimitInput() {
        return this._notificationRateLimit.internalValue;
    }
}
exports.MonitoringAlertPolicyAlertStrategyOutputReference = MonitoringAlertPolicyAlertStrategyOutputReference;
_d = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyAlertStrategyOutputReference[_d] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyAlertStrategyOutputReference", version: "5.0.1" };
function monitoringAlertPolicyConditionsConditionAbsentAggregationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alignment_period: cdktf.stringToTerraform(struct.alignmentPeriod),
        cross_series_reducer: cdktf.stringToTerraform(struct.crossSeriesReducer),
        group_by_fields: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.groupByFields),
        per_series_aligner: cdktf.stringToTerraform(struct.perSeriesAligner),
    };
}
exports.monitoringAlertPolicyConditionsConditionAbsentAggregationsToTerraform = monitoringAlertPolicyConditionsConditionAbsentAggregationsToTerraform;
class MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alignmentPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.alignmentPeriod = this._alignmentPeriod;
        }
        if (this._crossSeriesReducer !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossSeriesReducer = this._crossSeriesReducer;
        }
        if (this._groupByFields !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupByFields = this._groupByFields;
        }
        if (this._perSeriesAligner !== undefined) {
            hasAnyValues = true;
            internalValueResult.perSeriesAligner = this._perSeriesAligner;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._alignmentPeriod = undefined;
            this._crossSeriesReducer = undefined;
            this._groupByFields = undefined;
            this._perSeriesAligner = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._alignmentPeriod = value.alignmentPeriod;
            this._crossSeriesReducer = value.crossSeriesReducer;
            this._groupByFields = value.groupByFields;
            this._perSeriesAligner = value.perSeriesAligner;
        }
    }
    get alignmentPeriod() {
        return this.getStringAttribute('alignment_period');
    }
    set alignmentPeriod(value) {
        this._alignmentPeriod = value;
    }
    resetAlignmentPeriod() {
        this._alignmentPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alignmentPeriodInput() {
        return this._alignmentPeriod;
    }
    get crossSeriesReducer() {
        return this.getStringAttribute('cross_series_reducer');
    }
    set crossSeriesReducer(value) {
        this._crossSeriesReducer = value;
    }
    resetCrossSeriesReducer() {
        this._crossSeriesReducer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossSeriesReducerInput() {
        return this._crossSeriesReducer;
    }
    get groupByFields() {
        return this.getListAttribute('group_by_fields');
    }
    set groupByFields(value) {
        this._groupByFields = value;
    }
    resetGroupByFields() {
        this._groupByFields = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupByFieldsInput() {
        return this._groupByFields;
    }
    get perSeriesAligner() {
        return this.getStringAttribute('per_series_aligner');
    }
    set perSeriesAligner(value) {
        this._perSeriesAligner = value;
    }
    resetPerSeriesAligner() {
        this._perSeriesAligner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perSeriesAlignerInput() {
        return this._perSeriesAligner;
    }
}
exports.MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference = MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference[_e] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference", version: "5.0.1" };
class MonitoringAlertPolicyConditionsConditionAbsentAggregationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyConditionsConditionAbsentAggregationsList = MonitoringAlertPolicyConditionsConditionAbsentAggregationsList;
_f = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionAbsentAggregationsList[_f] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionAbsentAggregationsList", version: "5.0.1" };
function monitoringAlertPolicyConditionsConditionAbsentTriggerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        percent: cdktf.numberToTerraform(struct.percent),
    };
}
exports.monitoringAlertPolicyConditionsConditionAbsentTriggerToTerraform = monitoringAlertPolicyConditionsConditionAbsentTriggerToTerraform;
class MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._percent !== undefined) {
            hasAnyValues = true;
            internalValueResult.percent = this._percent;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._percent = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._percent = value.percent;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get percent() {
        return this.getNumberAttribute('percent');
    }
    set percent(value) {
        this._percent = value;
    }
    resetPercent() {
        this._percent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentInput() {
        return this._percent;
    }
}
exports.MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference = MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference;
_g = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference[_g] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference", version: "5.0.1" };
function monitoringAlertPolicyConditionsConditionAbsentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        duration: cdktf.stringToTerraform(struct.duration),
        filter: cdktf.stringToTerraform(struct.filter),
        aggregations: cdktf.listMapper(monitoringAlertPolicyConditionsConditionAbsentAggregationsToTerraform, true)(struct.aggregations),
        trigger: monitoringAlertPolicyConditionsConditionAbsentTriggerToTerraform(struct.trigger),
    };
}
exports.monitoringAlertPolicyConditionsConditionAbsentToTerraform = monitoringAlertPolicyConditionsConditionAbsentToTerraform;
class MonitoringAlertPolicyConditionsConditionAbsentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aggregations - computed: false, optional: true, required: false
        this._aggregations = new MonitoringAlertPolicyConditionsConditionAbsentAggregationsList(this, "aggregations", false);
        // trigger - computed: false, optional: true, required: false
        this._trigger = new MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference(this, "trigger");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._duration !== undefined) {
            hasAnyValues = true;
            internalValueResult.duration = this._duration;
        }
        if (this._filter !== undefined) {
            hasAnyValues = true;
            internalValueResult.filter = this._filter;
        }
        if (this._aggregations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aggregations = this._aggregations?.internalValue;
        }
        if (this._trigger?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trigger = this._trigger?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._duration = undefined;
            this._filter = undefined;
            this._aggregations.internalValue = undefined;
            this._trigger.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._duration = value.duration;
            this._filter = value.filter;
            this._aggregations.internalValue = value.aggregations;
            this._trigger.internalValue = value.trigger;
        }
    }
    get duration() {
        return this.getStringAttribute('duration');
    }
    set duration(value) {
        this._duration = value;
    }
    // Temporarily expose input value. Use with caution.
    get durationInput() {
        return this._duration;
    }
    get filter() {
        return this.getStringAttribute('filter');
    }
    set filter(value) {
        this._filter = value;
    }
    resetFilter() {
        this._filter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter;
    }
    get aggregations() {
        return this._aggregations;
    }
    putAggregations(value) {
        this._aggregations.internalValue = value;
    }
    resetAggregations() {
        this._aggregations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aggregationsInput() {
        return this._aggregations.internalValue;
    }
    get trigger() {
        return this._trigger;
    }
    putTrigger(value) {
        this._trigger.internalValue = value;
    }
    resetTrigger() {
        this._trigger.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerInput() {
        return this._trigger.internalValue;
    }
}
exports.MonitoringAlertPolicyConditionsConditionAbsentOutputReference = MonitoringAlertPolicyConditionsConditionAbsentOutputReference;
_h = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionAbsentOutputReference[_h] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionAbsentOutputReference", version: "5.0.1" };
function monitoringAlertPolicyConditionsConditionMatchedLogToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        filter: cdktf.stringToTerraform(struct.filter),
        label_extractors: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labelExtractors),
    };
}
exports.monitoringAlertPolicyConditionsConditionMatchedLogToTerraform = monitoringAlertPolicyConditionsConditionMatchedLogToTerraform;
class MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._filter !== undefined) {
            hasAnyValues = true;
            internalValueResult.filter = this._filter;
        }
        if (this._labelExtractors !== undefined) {
            hasAnyValues = true;
            internalValueResult.labelExtractors = this._labelExtractors;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._filter = undefined;
            this._labelExtractors = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._filter = value.filter;
            this._labelExtractors = value.labelExtractors;
        }
    }
    get filter() {
        return this.getStringAttribute('filter');
    }
    set filter(value) {
        this._filter = value;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter;
    }
    get labelExtractors() {
        return this.getStringMapAttribute('label_extractors');
    }
    set labelExtractors(value) {
        this._labelExtractors = value;
    }
    resetLabelExtractors() {
        this._labelExtractors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelExtractorsInput() {
        return this._labelExtractors;
    }
}
exports.MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference = MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference;
_j = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference[_j] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference", version: "5.0.1" };
function monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        percent: cdktf.numberToTerraform(struct.percent),
    };
}
exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToTerraform = monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToTerraform;
class MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._percent !== undefined) {
            hasAnyValues = true;
            internalValueResult.percent = this._percent;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._percent = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._percent = value.percent;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get percent() {
        return this.getNumberAttribute('percent');
    }
    set percent(value) {
        this._percent = value;
    }
    resetPercent() {
        this._percent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentInput() {
        return this._percent;
    }
}
exports.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference = MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference;
_k = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference[_k] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference", version: "5.0.1" };
function monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        duration: cdktf.stringToTerraform(struct.duration),
        evaluation_missing_data: cdktf.stringToTerraform(struct.evaluationMissingData),
        query: cdktf.stringToTerraform(struct.query),
        trigger: monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToTerraform(struct.trigger),
    };
}
exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToTerraform = monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToTerraform;
class MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // trigger - computed: false, optional: true, required: false
        this._trigger = new MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference(this, "trigger");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._duration !== undefined) {
            hasAnyValues = true;
            internalValueResult.duration = this._duration;
        }
        if (this._evaluationMissingData !== undefined) {
            hasAnyValues = true;
            internalValueResult.evaluationMissingData = this._evaluationMissingData;
        }
        if (this._query !== undefined) {
            hasAnyValues = true;
            internalValueResult.query = this._query;
        }
        if (this._trigger?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trigger = this._trigger?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._duration = undefined;
            this._evaluationMissingData = undefined;
            this._query = undefined;
            this._trigger.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._duration = value.duration;
            this._evaluationMissingData = value.evaluationMissingData;
            this._query = value.query;
            this._trigger.internalValue = value.trigger;
        }
    }
    get duration() {
        return this.getStringAttribute('duration');
    }
    set duration(value) {
        this._duration = value;
    }
    // Temporarily expose input value. Use with caution.
    get durationInput() {
        return this._duration;
    }
    get evaluationMissingData() {
        return this.getStringAttribute('evaluation_missing_data');
    }
    set evaluationMissingData(value) {
        this._evaluationMissingData = value;
    }
    resetEvaluationMissingData() {
        this._evaluationMissingData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get evaluationMissingDataInput() {
        return this._evaluationMissingData;
    }
    get query() {
        return this.getStringAttribute('query');
    }
    set query(value) {
        this._query = value;
    }
    // Temporarily expose input value. Use with caution.
    get queryInput() {
        return this._query;
    }
    get trigger() {
        return this._trigger;
    }
    putTrigger(value) {
        this._trigger.internalValue = value;
    }
    resetTrigger() {
        this._trigger.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerInput() {
        return this._trigger.internalValue;
    }
}
exports.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference = MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference;
_l = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference[_l] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference", version: "5.0.1" };
function monitoringAlertPolicyConditionsConditionThresholdAggregationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alignment_period: cdktf.stringToTerraform(struct.alignmentPeriod),
        cross_series_reducer: cdktf.stringToTerraform(struct.crossSeriesReducer),
        group_by_fields: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.groupByFields),
        per_series_aligner: cdktf.stringToTerraform(struct.perSeriesAligner),
    };
}
exports.monitoringAlertPolicyConditionsConditionThresholdAggregationsToTerraform = monitoringAlertPolicyConditionsConditionThresholdAggregationsToTerraform;
class MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alignmentPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.alignmentPeriod = this._alignmentPeriod;
        }
        if (this._crossSeriesReducer !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossSeriesReducer = this._crossSeriesReducer;
        }
        if (this._groupByFields !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupByFields = this._groupByFields;
        }
        if (this._perSeriesAligner !== undefined) {
            hasAnyValues = true;
            internalValueResult.perSeriesAligner = this._perSeriesAligner;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._alignmentPeriod = undefined;
            this._crossSeriesReducer = undefined;
            this._groupByFields = undefined;
            this._perSeriesAligner = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._alignmentPeriod = value.alignmentPeriod;
            this._crossSeriesReducer = value.crossSeriesReducer;
            this._groupByFields = value.groupByFields;
            this._perSeriesAligner = value.perSeriesAligner;
        }
    }
    get alignmentPeriod() {
        return this.getStringAttribute('alignment_period');
    }
    set alignmentPeriod(value) {
        this._alignmentPeriod = value;
    }
    resetAlignmentPeriod() {
        this._alignmentPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alignmentPeriodInput() {
        return this._alignmentPeriod;
    }
    get crossSeriesReducer() {
        return this.getStringAttribute('cross_series_reducer');
    }
    set crossSeriesReducer(value) {
        this._crossSeriesReducer = value;
    }
    resetCrossSeriesReducer() {
        this._crossSeriesReducer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossSeriesReducerInput() {
        return this._crossSeriesReducer;
    }
    get groupByFields() {
        return this.getListAttribute('group_by_fields');
    }
    set groupByFields(value) {
        this._groupByFields = value;
    }
    resetGroupByFields() {
        this._groupByFields = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupByFieldsInput() {
        return this._groupByFields;
    }
    get perSeriesAligner() {
        return this.getStringAttribute('per_series_aligner');
    }
    set perSeriesAligner(value) {
        this._perSeriesAligner = value;
    }
    resetPerSeriesAligner() {
        this._perSeriesAligner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perSeriesAlignerInput() {
        return this._perSeriesAligner;
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference = MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference[_m] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference", version: "5.0.1" };
class MonitoringAlertPolicyConditionsConditionThresholdAggregationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdAggregationsList = MonitoringAlertPolicyConditionsConditionThresholdAggregationsList;
_o = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdAggregationsList[_o] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdAggregationsList", version: "5.0.1" };
function monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alignment_period: cdktf.stringToTerraform(struct.alignmentPeriod),
        cross_series_reducer: cdktf.stringToTerraform(struct.crossSeriesReducer),
        group_by_fields: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.groupByFields),
        per_series_aligner: cdktf.stringToTerraform(struct.perSeriesAligner),
    };
}
exports.monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToTerraform = monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToTerraform;
class MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alignmentPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.alignmentPeriod = this._alignmentPeriod;
        }
        if (this._crossSeriesReducer !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossSeriesReducer = this._crossSeriesReducer;
        }
        if (this._groupByFields !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupByFields = this._groupByFields;
        }
        if (this._perSeriesAligner !== undefined) {
            hasAnyValues = true;
            internalValueResult.perSeriesAligner = this._perSeriesAligner;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._alignmentPeriod = undefined;
            this._crossSeriesReducer = undefined;
            this._groupByFields = undefined;
            this._perSeriesAligner = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._alignmentPeriod = value.alignmentPeriod;
            this._crossSeriesReducer = value.crossSeriesReducer;
            this._groupByFields = value.groupByFields;
            this._perSeriesAligner = value.perSeriesAligner;
        }
    }
    get alignmentPeriod() {
        return this.getStringAttribute('alignment_period');
    }
    set alignmentPeriod(value) {
        this._alignmentPeriod = value;
    }
    resetAlignmentPeriod() {
        this._alignmentPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alignmentPeriodInput() {
        return this._alignmentPeriod;
    }
    get crossSeriesReducer() {
        return this.getStringAttribute('cross_series_reducer');
    }
    set crossSeriesReducer(value) {
        this._crossSeriesReducer = value;
    }
    resetCrossSeriesReducer() {
        this._crossSeriesReducer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossSeriesReducerInput() {
        return this._crossSeriesReducer;
    }
    get groupByFields() {
        return this.getListAttribute('group_by_fields');
    }
    set groupByFields(value) {
        this._groupByFields = value;
    }
    resetGroupByFields() {
        this._groupByFields = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupByFieldsInput() {
        return this._groupByFields;
    }
    get perSeriesAligner() {
        return this.getStringAttribute('per_series_aligner');
    }
    set perSeriesAligner(value) {
        this._perSeriesAligner = value;
    }
    resetPerSeriesAligner() {
        this._perSeriesAligner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perSeriesAlignerInput() {
        return this._perSeriesAligner;
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference = MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference[_p] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference", version: "5.0.1" };
class MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList = MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList;
_q = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList[_q] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList", version: "5.0.1" };
function monitoringAlertPolicyConditionsConditionThresholdTriggerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        percent: cdktf.numberToTerraform(struct.percent),
    };
}
exports.monitoringAlertPolicyConditionsConditionThresholdTriggerToTerraform = monitoringAlertPolicyConditionsConditionThresholdTriggerToTerraform;
class MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._percent !== undefined) {
            hasAnyValues = true;
            internalValueResult.percent = this._percent;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._percent = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._percent = value.percent;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get percent() {
        return this.getNumberAttribute('percent');
    }
    set percent(value) {
        this._percent = value;
    }
    resetPercent() {
        this._percent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentInput() {
        return this._percent;
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference = MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference;
_r = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference[_r] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference", version: "5.0.1" };
function monitoringAlertPolicyConditionsConditionThresholdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        comparison: cdktf.stringToTerraform(struct.comparison),
        denominator_filter: cdktf.stringToTerraform(struct.denominatorFilter),
        duration: cdktf.stringToTerraform(struct.duration),
        evaluation_missing_data: cdktf.stringToTerraform(struct.evaluationMissingData),
        filter: cdktf.stringToTerraform(struct.filter),
        threshold_value: cdktf.numberToTerraform(struct.thresholdValue),
        aggregations: cdktf.listMapper(monitoringAlertPolicyConditionsConditionThresholdAggregationsToTerraform, true)(struct.aggregations),
        denominator_aggregations: cdktf.listMapper(monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToTerraform, true)(struct.denominatorAggregations),
        trigger: monitoringAlertPolicyConditionsConditionThresholdTriggerToTerraform(struct.trigger),
    };
}
exports.monitoringAlertPolicyConditionsConditionThresholdToTerraform = monitoringAlertPolicyConditionsConditionThresholdToTerraform;
class MonitoringAlertPolicyConditionsConditionThresholdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aggregations - computed: false, optional: true, required: false
        this._aggregations = new MonitoringAlertPolicyConditionsConditionThresholdAggregationsList(this, "aggregations", false);
        // denominator_aggregations - computed: false, optional: true, required: false
        this._denominatorAggregations = new MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList(this, "denominator_aggregations", false);
        // trigger - computed: false, optional: true, required: false
        this._trigger = new MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference(this, "trigger");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._comparison !== undefined) {
            hasAnyValues = true;
            internalValueResult.comparison = this._comparison;
        }
        if (this._denominatorFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.denominatorFilter = this._denominatorFilter;
        }
        if (this._duration !== undefined) {
            hasAnyValues = true;
            internalValueResult.duration = this._duration;
        }
        if (this._evaluationMissingData !== undefined) {
            hasAnyValues = true;
            internalValueResult.evaluationMissingData = this._evaluationMissingData;
        }
        if (this._filter !== undefined) {
            hasAnyValues = true;
            internalValueResult.filter = this._filter;
        }
        if (this._thresholdValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.thresholdValue = this._thresholdValue;
        }
        if (this._aggregations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aggregations = this._aggregations?.internalValue;
        }
        if (this._denominatorAggregations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.denominatorAggregations = this._denominatorAggregations?.internalValue;
        }
        if (this._trigger?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trigger = this._trigger?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._comparison = undefined;
            this._denominatorFilter = undefined;
            this._duration = undefined;
            this._evaluationMissingData = undefined;
            this._filter = undefined;
            this._thresholdValue = undefined;
            this._aggregations.internalValue = undefined;
            this._denominatorAggregations.internalValue = undefined;
            this._trigger.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._comparison = value.comparison;
            this._denominatorFilter = value.denominatorFilter;
            this._duration = value.duration;
            this._evaluationMissingData = value.evaluationMissingData;
            this._filter = value.filter;
            this._thresholdValue = value.thresholdValue;
            this._aggregations.internalValue = value.aggregations;
            this._denominatorAggregations.internalValue = value.denominatorAggregations;
            this._trigger.internalValue = value.trigger;
        }
    }
    get comparison() {
        return this.getStringAttribute('comparison');
    }
    set comparison(value) {
        this._comparison = value;
    }
    // Temporarily expose input value. Use with caution.
    get comparisonInput() {
        return this._comparison;
    }
    get denominatorFilter() {
        return this.getStringAttribute('denominator_filter');
    }
    set denominatorFilter(value) {
        this._denominatorFilter = value;
    }
    resetDenominatorFilter() {
        this._denominatorFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get denominatorFilterInput() {
        return this._denominatorFilter;
    }
    get duration() {
        return this.getStringAttribute('duration');
    }
    set duration(value) {
        this._duration = value;
    }
    // Temporarily expose input value. Use with caution.
    get durationInput() {
        return this._duration;
    }
    get evaluationMissingData() {
        return this.getStringAttribute('evaluation_missing_data');
    }
    set evaluationMissingData(value) {
        this._evaluationMissingData = value;
    }
    resetEvaluationMissingData() {
        this._evaluationMissingData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get evaluationMissingDataInput() {
        return this._evaluationMissingData;
    }
    get filter() {
        return this.getStringAttribute('filter');
    }
    set filter(value) {
        this._filter = value;
    }
    resetFilter() {
        this._filter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter;
    }
    get thresholdValue() {
        return this.getNumberAttribute('threshold_value');
    }
    set thresholdValue(value) {
        this._thresholdValue = value;
    }
    resetThresholdValue() {
        this._thresholdValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thresholdValueInput() {
        return this._thresholdValue;
    }
    get aggregations() {
        return this._aggregations;
    }
    putAggregations(value) {
        this._aggregations.internalValue = value;
    }
    resetAggregations() {
        this._aggregations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aggregationsInput() {
        return this._aggregations.internalValue;
    }
    get denominatorAggregations() {
        return this._denominatorAggregations;
    }
    putDenominatorAggregations(value) {
        this._denominatorAggregations.internalValue = value;
    }
    resetDenominatorAggregations() {
        this._denominatorAggregations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get denominatorAggregationsInput() {
        return this._denominatorAggregations.internalValue;
    }
    get trigger() {
        return this._trigger;
    }
    putTrigger(value) {
        this._trigger.internalValue = value;
    }
    resetTrigger() {
        this._trigger.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerInput() {
        return this._trigger.internalValue;
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdOutputReference = MonitoringAlertPolicyConditionsConditionThresholdOutputReference;
_s = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdOutputReference[_s] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdOutputReference", version: "5.0.1" };
function monitoringAlertPolicyConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        display_name: cdktf.stringToTerraform(struct.displayName),
        condition_absent: monitoringAlertPolicyConditionsConditionAbsentToTerraform(struct.conditionAbsent),
        condition_matched_log: monitoringAlertPolicyConditionsConditionMatchedLogToTerraform(struct.conditionMatchedLog),
        condition_monitoring_query_language: monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToTerraform(struct.conditionMonitoringQueryLanguage),
        condition_threshold: monitoringAlertPolicyConditionsConditionThresholdToTerraform(struct.conditionThreshold),
    };
}
exports.monitoringAlertPolicyConditionsToTerraform = monitoringAlertPolicyConditionsToTerraform;
class MonitoringAlertPolicyConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // condition_absent - computed: false, optional: true, required: false
        this._conditionAbsent = new MonitoringAlertPolicyConditionsConditionAbsentOutputReference(this, "condition_absent");
        // condition_matched_log - computed: false, optional: true, required: false
        this._conditionMatchedLog = new MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference(this, "condition_matched_log");
        // condition_monitoring_query_language - computed: false, optional: true, required: false
        this._conditionMonitoringQueryLanguage = new MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference(this, "condition_monitoring_query_language");
        // condition_threshold - computed: false, optional: true, required: false
        this._conditionThreshold = new MonitoringAlertPolicyConditionsConditionThresholdOutputReference(this, "condition_threshold");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        if (this._conditionAbsent?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionAbsent = this._conditionAbsent?.internalValue;
        }
        if (this._conditionMatchedLog?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionMatchedLog = this._conditionMatchedLog?.internalValue;
        }
        if (this._conditionMonitoringQueryLanguage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionMonitoringQueryLanguage = this._conditionMonitoringQueryLanguage?.internalValue;
        }
        if (this._conditionThreshold?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionThreshold = this._conditionThreshold?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._displayName = undefined;
            this._conditionAbsent.internalValue = undefined;
            this._conditionMatchedLog.internalValue = undefined;
            this._conditionMonitoringQueryLanguage.internalValue = undefined;
            this._conditionThreshold.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._displayName = value.displayName;
            this._conditionAbsent.internalValue = value.conditionAbsent;
            this._conditionMatchedLog.internalValue = value.conditionMatchedLog;
            this._conditionMonitoringQueryLanguage.internalValue = value.conditionMonitoringQueryLanguage;
            this._conditionThreshold.internalValue = value.conditionThreshold;
        }
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get conditionAbsent() {
        return this._conditionAbsent;
    }
    putConditionAbsent(value) {
        this._conditionAbsent.internalValue = value;
    }
    resetConditionAbsent() {
        this._conditionAbsent.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionAbsentInput() {
        return this._conditionAbsent.internalValue;
    }
    get conditionMatchedLog() {
        return this._conditionMatchedLog;
    }
    putConditionMatchedLog(value) {
        this._conditionMatchedLog.internalValue = value;
    }
    resetConditionMatchedLog() {
        this._conditionMatchedLog.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionMatchedLogInput() {
        return this._conditionMatchedLog.internalValue;
    }
    get conditionMonitoringQueryLanguage() {
        return this._conditionMonitoringQueryLanguage;
    }
    putConditionMonitoringQueryLanguage(value) {
        this._conditionMonitoringQueryLanguage.internalValue = value;
    }
    resetConditionMonitoringQueryLanguage() {
        this._conditionMonitoringQueryLanguage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionMonitoringQueryLanguageInput() {
        return this._conditionMonitoringQueryLanguage.internalValue;
    }
    get conditionThreshold() {
        return this._conditionThreshold;
    }
    putConditionThreshold(value) {
        this._conditionThreshold.internalValue = value;
    }
    resetConditionThreshold() {
        this._conditionThreshold.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionThresholdInput() {
        return this._conditionThreshold.internalValue;
    }
}
exports.MonitoringAlertPolicyConditionsOutputReference = MonitoringAlertPolicyConditionsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsOutputReference[_t] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsOutputReference", version: "5.0.1" };
class MonitoringAlertPolicyConditionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyConditionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyConditionsList = MonitoringAlertPolicyConditionsList;
_u = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsList[_u] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsList", version: "5.0.1" };
function monitoringAlertPolicyDocumentationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        content: cdktf.stringToTerraform(struct.content),
        mime_type: cdktf.stringToTerraform(struct.mimeType),
    };
}
exports.monitoringAlertPolicyDocumentationToTerraform = monitoringAlertPolicyDocumentationToTerraform;
class MonitoringAlertPolicyDocumentationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._content !== undefined) {
            hasAnyValues = true;
            internalValueResult.content = this._content;
        }
        if (this._mimeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.mimeType = this._mimeType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._content = undefined;
            this._mimeType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._content = value.content;
            this._mimeType = value.mimeType;
        }
    }
    get content() {
        return this.getStringAttribute('content');
    }
    set content(value) {
        this._content = value;
    }
    resetContent() {
        this._content = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentInput() {
        return this._content;
    }
    get mimeType() {
        return this.getStringAttribute('mime_type');
    }
    set mimeType(value) {
        this._mimeType = value;
    }
    resetMimeType() {
        this._mimeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mimeTypeInput() {
        return this._mimeType;
    }
}
exports.MonitoringAlertPolicyDocumentationOutputReference = MonitoringAlertPolicyDocumentationOutputReference;
_v = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyDocumentationOutputReference[_v] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyDocumentationOutputReference", version: "5.0.1" };
function monitoringAlertPolicyTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.monitoringAlertPolicyTimeoutsToTerraform = monitoringAlertPolicyTimeoutsToTerraform;
class MonitoringAlertPolicyTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.MonitoringAlertPolicyTimeoutsOutputReference = MonitoringAlertPolicyTimeoutsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyTimeoutsOutputReference[_w] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/monitoring_alert_policy google_monitoring_alert_policy}
*/
class MonitoringAlertPolicy extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/monitoring_alert_policy google_monitoring_alert_policy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MonitoringAlertPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_monitoring_alert_policy',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // creation_record - computed: true, optional: false, required: false
        this._creationRecord = new MonitoringAlertPolicyCreationRecordList(this, "creation_record", false);
        // alert_strategy - computed: false, optional: true, required: false
        this._alertStrategy = new MonitoringAlertPolicyAlertStrategyOutputReference(this, "alert_strategy");
        // conditions - computed: false, optional: false, required: true
        this._conditions = new MonitoringAlertPolicyConditionsList(this, "conditions", false);
        // documentation - computed: false, optional: true, required: false
        this._documentation = new MonitoringAlertPolicyDocumentationOutputReference(this, "documentation");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new MonitoringAlertPolicyTimeoutsOutputReference(this, "timeouts");
        this._combiner = config.combiner;
        this._displayName = config.displayName;
        this._enabled = config.enabled;
        this._id = config.id;
        this._notificationChannels = config.notificationChannels;
        this._project = config.project;
        this._userLabels = config.userLabels;
        this._alertStrategy.internalValue = config.alertStrategy;
        this._conditions.internalValue = config.conditions;
        this._documentation.internalValue = config.documentation;
        this._timeouts.internalValue = config.timeouts;
    }
    get combiner() {
        return this.getStringAttribute('combiner');
    }
    set combiner(value) {
        this._combiner = value;
    }
    // Temporarily expose input value. Use with caution.
    get combinerInput() {
        return this._combiner;
    }
    get creationRecord() {
        return this._creationRecord;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get notificationChannels() {
        return this.getListAttribute('notification_channels');
    }
    set notificationChannels(value) {
        this._notificationChannels = value;
    }
    resetNotificationChannels() {
        this._notificationChannels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationChannelsInput() {
        return this._notificationChannels;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get userLabels() {
        return this.getStringMapAttribute('user_labels');
    }
    set userLabels(value) {
        this._userLabels = value;
    }
    resetUserLabels() {
        this._userLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userLabelsInput() {
        return this._userLabels;
    }
    get alertStrategy() {
        return this._alertStrategy;
    }
    putAlertStrategy(value) {
        this._alertStrategy.internalValue = value;
    }
    resetAlertStrategy() {
        this._alertStrategy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alertStrategyInput() {
        return this._alertStrategy.internalValue;
    }
    get conditions() {
        return this._conditions;
    }
    putConditions(value) {
        this._conditions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get conditionsInput() {
        return this._conditions.internalValue;
    }
    get documentation() {
        return this._documentation;
    }
    putDocumentation(value) {
        this._documentation.internalValue = value;
    }
    resetDocumentation() {
        this._documentation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentationInput() {
        return this._documentation.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            combiner: cdktf.stringToTerraform(this._combiner),
            display_name: cdktf.stringToTerraform(this._displayName),
            enabled: cdktf.booleanToTerraform(this._enabled),
            id: cdktf.stringToTerraform(this._id),
            notification_channels: cdktf.listMapper(cdktf.stringToTerraform, false)(this._notificationChannels),
            project: cdktf.stringToTerraform(this._project),
            user_labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._userLabels),
            alert_strategy: monitoringAlertPolicyAlertStrategyToTerraform(this._alertStrategy.internalValue),
            conditions: cdktf.listMapper(monitoringAlertPolicyConditionsToTerraform, true)(this._conditions.internalValue),
            documentation: monitoringAlertPolicyDocumentationToTerraform(this._documentation.internalValue),
            timeouts: monitoringAlertPolicyTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.MonitoringAlertPolicy = MonitoringAlertPolicy;
_x = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicy[_x] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicy", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
MonitoringAlertPolicy.tfResourceType = "google_monitoring_alert_policy";
//# sourceMappingURL=data:application/json;base64,