"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivatecaCaPool = exports.PrivatecaCaPoolTimeoutsOutputReference = exports.privatecaCaPoolTimeoutsToTerraform = exports.PrivatecaCaPoolPublishingOptionsOutputReference = exports.privatecaCaPoolPublishingOptionsToTerraform = exports.PrivatecaCaPoolIssuancePolicyOutputReference = exports.privatecaCaPoolIssuancePolicyToTerraform = exports.PrivatecaCaPoolIssuancePolicyIdentityConstraintsOutputReference = exports.privatecaCaPoolIssuancePolicyIdentityConstraintsToTerraform = exports.PrivatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionOutputReference = exports.privatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionToTerraform = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesOutputReference = exports.privatecaCaPoolIssuancePolicyBaselineValuesToTerraform = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsList = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsOutputReference = exports.privatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsToTerraform = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageOutputReference = exports.privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageToTerraform = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesList = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesOutputReference = exports.privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesToTerraform = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageOutputReference = exports.privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageToTerraform = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageOutputReference = exports.privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageToTerraform = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesCaOptionsOutputReference = exports.privatecaCaPoolIssuancePolicyBaselineValuesCaOptionsToTerraform = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsList = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsOutputReference = exports.privatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsToTerraform = exports.PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdOutputReference = exports.privatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdToTerraform = exports.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesList = exports.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesOutputReference = exports.privatecaCaPoolIssuancePolicyAllowedKeyTypesToTerraform = exports.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesRsaOutputReference = exports.privatecaCaPoolIssuancePolicyAllowedKeyTypesRsaToTerraform = exports.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveOutputReference = exports.privatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveToTerraform = exports.PrivatecaCaPoolIssuancePolicyAllowedIssuanceModesOutputReference = exports.privatecaCaPoolIssuancePolicyAllowedIssuanceModesToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function privatecaCaPoolIssuancePolicyAllowedIssuanceModesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_config_based_issuance: cdktf.booleanToTerraform(struct.allowConfigBasedIssuance),
        allow_csr_based_issuance: cdktf.booleanToTerraform(struct.allowCsrBasedIssuance),
    };
}
exports.privatecaCaPoolIssuancePolicyAllowedIssuanceModesToTerraform = privatecaCaPoolIssuancePolicyAllowedIssuanceModesToTerraform;
class PrivatecaCaPoolIssuancePolicyAllowedIssuanceModesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowConfigBasedIssuance !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowConfigBasedIssuance = this._allowConfigBasedIssuance;
        }
        if (this._allowCsrBasedIssuance !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowCsrBasedIssuance = this._allowCsrBasedIssuance;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowConfigBasedIssuance = undefined;
            this._allowCsrBasedIssuance = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowConfigBasedIssuance = value.allowConfigBasedIssuance;
            this._allowCsrBasedIssuance = value.allowCsrBasedIssuance;
        }
    }
    get allowConfigBasedIssuance() {
        return this.getBooleanAttribute('allow_config_based_issuance');
    }
    set allowConfigBasedIssuance(value) {
        this._allowConfigBasedIssuance = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowConfigBasedIssuanceInput() {
        return this._allowConfigBasedIssuance;
    }
    get allowCsrBasedIssuance() {
        return this.getBooleanAttribute('allow_csr_based_issuance');
    }
    set allowCsrBasedIssuance(value) {
        this._allowCsrBasedIssuance = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowCsrBasedIssuanceInput() {
        return this._allowCsrBasedIssuance;
    }
}
exports.PrivatecaCaPoolIssuancePolicyAllowedIssuanceModesOutputReference = PrivatecaCaPoolIssuancePolicyAllowedIssuanceModesOutputReference;
_a = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyAllowedIssuanceModesOutputReference[_a] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyAllowedIssuanceModesOutputReference", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        signature_algorithm: cdktf.stringToTerraform(struct.signatureAlgorithm),
    };
}
exports.privatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveToTerraform = privatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveToTerraform;
class PrivatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._signatureAlgorithm !== undefined) {
            hasAnyValues = true;
            internalValueResult.signatureAlgorithm = this._signatureAlgorithm;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._signatureAlgorithm = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._signatureAlgorithm = value.signatureAlgorithm;
        }
    }
    get signatureAlgorithm() {
        return this.getStringAttribute('signature_algorithm');
    }
    set signatureAlgorithm(value) {
        this._signatureAlgorithm = value;
    }
    // Temporarily expose input value. Use with caution.
    get signatureAlgorithmInput() {
        return this._signatureAlgorithm;
    }
}
exports.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveOutputReference = PrivatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveOutputReference;
_b = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveOutputReference[_b] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveOutputReference", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyAllowedKeyTypesRsaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_modulus_size: cdktf.stringToTerraform(struct.maxModulusSize),
        min_modulus_size: cdktf.stringToTerraform(struct.minModulusSize),
    };
}
exports.privatecaCaPoolIssuancePolicyAllowedKeyTypesRsaToTerraform = privatecaCaPoolIssuancePolicyAllowedKeyTypesRsaToTerraform;
class PrivatecaCaPoolIssuancePolicyAllowedKeyTypesRsaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxModulusSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxModulusSize = this._maxModulusSize;
        }
        if (this._minModulusSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.minModulusSize = this._minModulusSize;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxModulusSize = undefined;
            this._minModulusSize = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxModulusSize = value.maxModulusSize;
            this._minModulusSize = value.minModulusSize;
        }
    }
    get maxModulusSize() {
        return this.getStringAttribute('max_modulus_size');
    }
    set maxModulusSize(value) {
        this._maxModulusSize = value;
    }
    resetMaxModulusSize() {
        this._maxModulusSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxModulusSizeInput() {
        return this._maxModulusSize;
    }
    get minModulusSize() {
        return this.getStringAttribute('min_modulus_size');
    }
    set minModulusSize(value) {
        this._minModulusSize = value;
    }
    resetMinModulusSize() {
        this._minModulusSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minModulusSizeInput() {
        return this._minModulusSize;
    }
}
exports.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesRsaOutputReference = PrivatecaCaPoolIssuancePolicyAllowedKeyTypesRsaOutputReference;
_c = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyAllowedKeyTypesRsaOutputReference[_c] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesRsaOutputReference", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyAllowedKeyTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        elliptic_curve: privatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveToTerraform(struct.ellipticCurve),
        rsa: privatecaCaPoolIssuancePolicyAllowedKeyTypesRsaToTerraform(struct.rsa),
    };
}
exports.privatecaCaPoolIssuancePolicyAllowedKeyTypesToTerraform = privatecaCaPoolIssuancePolicyAllowedKeyTypesToTerraform;
class PrivatecaCaPoolIssuancePolicyAllowedKeyTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // elliptic_curve - computed: false, optional: true, required: false
        this._ellipticCurve = new PrivatecaCaPoolIssuancePolicyAllowedKeyTypesEllipticCurveOutputReference(this, "elliptic_curve");
        // rsa - computed: false, optional: true, required: false
        this._rsa = new PrivatecaCaPoolIssuancePolicyAllowedKeyTypesRsaOutputReference(this, "rsa");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ellipticCurve?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ellipticCurve = this._ellipticCurve?.internalValue;
        }
        if (this._rsa?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rsa = this._rsa?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ellipticCurve.internalValue = undefined;
            this._rsa.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ellipticCurve.internalValue = value.ellipticCurve;
            this._rsa.internalValue = value.rsa;
        }
    }
    get ellipticCurve() {
        return this._ellipticCurve;
    }
    putEllipticCurve(value) {
        this._ellipticCurve.internalValue = value;
    }
    resetEllipticCurve() {
        this._ellipticCurve.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ellipticCurveInput() {
        return this._ellipticCurve.internalValue;
    }
    get rsa() {
        return this._rsa;
    }
    putRsa(value) {
        this._rsa.internalValue = value;
    }
    resetRsa() {
        this._rsa.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rsaInput() {
        return this._rsa.internalValue;
    }
}
exports.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesOutputReference = PrivatecaCaPoolIssuancePolicyAllowedKeyTypesOutputReference;
_d = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyAllowedKeyTypesOutputReference[_d] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesOutputReference", version: "5.0.1" };
class PrivatecaCaPoolIssuancePolicyAllowedKeyTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCaPoolIssuancePolicyAllowedKeyTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesList = PrivatecaCaPoolIssuancePolicyAllowedKeyTypesList;
_e = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyAllowedKeyTypesList[_e] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyAllowedKeyTypesList", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdToTerraform = privatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdToTerraform;
class PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._objectIdPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdOutputReference = PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdOutputReference;
_f = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdOutputReference[_f] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdOutputReference", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        critical: cdktf.booleanToTerraform(struct.critical),
        value: cdktf.stringToTerraform(struct.value),
        object_id: privatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdToTerraform(struct.objectId),
    };
}
exports.privatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsToTerraform = privatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsToTerraform;
class PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // object_id - computed: false, optional: false, required: true
        this._objectId = new PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsObjectIdOutputReference(this, "object_id");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._critical !== undefined) {
            hasAnyValues = true;
            internalValueResult.critical = this._critical;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        if (this._objectId?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectId = this._objectId?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._critical = undefined;
            this._value = undefined;
            this._objectId.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._critical = value.critical;
            this._value = value.value;
            this._objectId.internalValue = value.objectId;
        }
    }
    get critical() {
        return this.getBooleanAttribute('critical');
    }
    set critical(value) {
        this._critical = value;
    }
    // Temporarily expose input value. Use with caution.
    get criticalInput() {
        return this._critical;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
    get objectId() {
        return this._objectId;
    }
    putObjectId(value) {
        this._objectId.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdInput() {
        return this._objectId.internalValue;
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsOutputReference = PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsOutputReference[_g] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsOutputReference", version: "5.0.1" };
class PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsList = PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsList;
_h = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsList[_h] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsList", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyBaselineValuesCaOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        is_ca: cdktf.booleanToTerraform(struct.isCa),
        max_issuer_path_length: cdktf.numberToTerraform(struct.maxIssuerPathLength),
        non_ca: cdktf.booleanToTerraform(struct.nonCa),
        zero_max_issuer_path_length: cdktf.booleanToTerraform(struct.zeroMaxIssuerPathLength),
    };
}
exports.privatecaCaPoolIssuancePolicyBaselineValuesCaOptionsToTerraform = privatecaCaPoolIssuancePolicyBaselineValuesCaOptionsToTerraform;
class PrivatecaCaPoolIssuancePolicyBaselineValuesCaOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._isCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.isCa = this._isCa;
        }
        if (this._maxIssuerPathLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxIssuerPathLength = this._maxIssuerPathLength;
        }
        if (this._nonCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.nonCa = this._nonCa;
        }
        if (this._zeroMaxIssuerPathLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.zeroMaxIssuerPathLength = this._zeroMaxIssuerPathLength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._isCa = undefined;
            this._maxIssuerPathLength = undefined;
            this._nonCa = undefined;
            this._zeroMaxIssuerPathLength = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._isCa = value.isCa;
            this._maxIssuerPathLength = value.maxIssuerPathLength;
            this._nonCa = value.nonCa;
            this._zeroMaxIssuerPathLength = value.zeroMaxIssuerPathLength;
        }
    }
    get isCa() {
        return this.getBooleanAttribute('is_ca');
    }
    set isCa(value) {
        this._isCa = value;
    }
    resetIsCa() {
        this._isCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isCaInput() {
        return this._isCa;
    }
    get maxIssuerPathLength() {
        return this.getNumberAttribute('max_issuer_path_length');
    }
    set maxIssuerPathLength(value) {
        this._maxIssuerPathLength = value;
    }
    resetMaxIssuerPathLength() {
        this._maxIssuerPathLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxIssuerPathLengthInput() {
        return this._maxIssuerPathLength;
    }
    get nonCa() {
        return this.getBooleanAttribute('non_ca');
    }
    set nonCa(value) {
        this._nonCa = value;
    }
    resetNonCa() {
        this._nonCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nonCaInput() {
        return this._nonCa;
    }
    get zeroMaxIssuerPathLength() {
        return this.getBooleanAttribute('zero_max_issuer_path_length');
    }
    set zeroMaxIssuerPathLength(value) {
        this._zeroMaxIssuerPathLength = value;
    }
    resetZeroMaxIssuerPathLength() {
        this._zeroMaxIssuerPathLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zeroMaxIssuerPathLengthInput() {
        return this._zeroMaxIssuerPathLength;
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesCaOptionsOutputReference = PrivatecaCaPoolIssuancePolicyBaselineValuesCaOptionsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesCaOptionsOutputReference[_j] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesCaOptionsOutputReference", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cert_sign: cdktf.booleanToTerraform(struct.certSign),
        content_commitment: cdktf.booleanToTerraform(struct.contentCommitment),
        crl_sign: cdktf.booleanToTerraform(struct.crlSign),
        data_encipherment: cdktf.booleanToTerraform(struct.dataEncipherment),
        decipher_only: cdktf.booleanToTerraform(struct.decipherOnly),
        digital_signature: cdktf.booleanToTerraform(struct.digitalSignature),
        encipher_only: cdktf.booleanToTerraform(struct.encipherOnly),
        key_agreement: cdktf.booleanToTerraform(struct.keyAgreement),
        key_encipherment: cdktf.booleanToTerraform(struct.keyEncipherment),
    };
}
exports.privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageToTerraform = privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageToTerraform;
class PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certSign !== undefined) {
            hasAnyValues = true;
            internalValueResult.certSign = this._certSign;
        }
        if (this._contentCommitment !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentCommitment = this._contentCommitment;
        }
        if (this._crlSign !== undefined) {
            hasAnyValues = true;
            internalValueResult.crlSign = this._crlSign;
        }
        if (this._dataEncipherment !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataEncipherment = this._dataEncipherment;
        }
        if (this._decipherOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.decipherOnly = this._decipherOnly;
        }
        if (this._digitalSignature !== undefined) {
            hasAnyValues = true;
            internalValueResult.digitalSignature = this._digitalSignature;
        }
        if (this._encipherOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.encipherOnly = this._encipherOnly;
        }
        if (this._keyAgreement !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyAgreement = this._keyAgreement;
        }
        if (this._keyEncipherment !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyEncipherment = this._keyEncipherment;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certSign = undefined;
            this._contentCommitment = undefined;
            this._crlSign = undefined;
            this._dataEncipherment = undefined;
            this._decipherOnly = undefined;
            this._digitalSignature = undefined;
            this._encipherOnly = undefined;
            this._keyAgreement = undefined;
            this._keyEncipherment = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certSign = value.certSign;
            this._contentCommitment = value.contentCommitment;
            this._crlSign = value.crlSign;
            this._dataEncipherment = value.dataEncipherment;
            this._decipherOnly = value.decipherOnly;
            this._digitalSignature = value.digitalSignature;
            this._encipherOnly = value.encipherOnly;
            this._keyAgreement = value.keyAgreement;
            this._keyEncipherment = value.keyEncipherment;
        }
    }
    get certSign() {
        return this.getBooleanAttribute('cert_sign');
    }
    set certSign(value) {
        this._certSign = value;
    }
    resetCertSign() {
        this._certSign = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certSignInput() {
        return this._certSign;
    }
    get contentCommitment() {
        return this.getBooleanAttribute('content_commitment');
    }
    set contentCommitment(value) {
        this._contentCommitment = value;
    }
    resetContentCommitment() {
        this._contentCommitment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentCommitmentInput() {
        return this._contentCommitment;
    }
    get crlSign() {
        return this.getBooleanAttribute('crl_sign');
    }
    set crlSign(value) {
        this._crlSign = value;
    }
    resetCrlSign() {
        this._crlSign = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crlSignInput() {
        return this._crlSign;
    }
    get dataEncipherment() {
        return this.getBooleanAttribute('data_encipherment');
    }
    set dataEncipherment(value) {
        this._dataEncipherment = value;
    }
    resetDataEncipherment() {
        this._dataEncipherment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataEnciphermentInput() {
        return this._dataEncipherment;
    }
    get decipherOnly() {
        return this.getBooleanAttribute('decipher_only');
    }
    set decipherOnly(value) {
        this._decipherOnly = value;
    }
    resetDecipherOnly() {
        this._decipherOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get decipherOnlyInput() {
        return this._decipherOnly;
    }
    get digitalSignature() {
        return this.getBooleanAttribute('digital_signature');
    }
    set digitalSignature(value) {
        this._digitalSignature = value;
    }
    resetDigitalSignature() {
        this._digitalSignature = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get digitalSignatureInput() {
        return this._digitalSignature;
    }
    get encipherOnly() {
        return this.getBooleanAttribute('encipher_only');
    }
    set encipherOnly(value) {
        this._encipherOnly = value;
    }
    resetEncipherOnly() {
        this._encipherOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encipherOnlyInput() {
        return this._encipherOnly;
    }
    get keyAgreement() {
        return this.getBooleanAttribute('key_agreement');
    }
    set keyAgreement(value) {
        this._keyAgreement = value;
    }
    resetKeyAgreement() {
        this._keyAgreement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyAgreementInput() {
        return this._keyAgreement;
    }
    get keyEncipherment() {
        return this.getBooleanAttribute('key_encipherment');
    }
    set keyEncipherment(value) {
        this._keyEncipherment = value;
    }
    resetKeyEncipherment() {
        this._keyEncipherment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyEnciphermentInput() {
        return this._keyEncipherment;
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageOutputReference = PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageOutputReference;
_k = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageOutputReference[_k] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageOutputReference", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_auth: cdktf.booleanToTerraform(struct.clientAuth),
        code_signing: cdktf.booleanToTerraform(struct.codeSigning),
        email_protection: cdktf.booleanToTerraform(struct.emailProtection),
        ocsp_signing: cdktf.booleanToTerraform(struct.ocspSigning),
        server_auth: cdktf.booleanToTerraform(struct.serverAuth),
        time_stamping: cdktf.booleanToTerraform(struct.timeStamping),
    };
}
exports.privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageToTerraform = privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageToTerraform;
class PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientAuth !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientAuth = this._clientAuth;
        }
        if (this._codeSigning !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeSigning = this._codeSigning;
        }
        if (this._emailProtection !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailProtection = this._emailProtection;
        }
        if (this._ocspSigning !== undefined) {
            hasAnyValues = true;
            internalValueResult.ocspSigning = this._ocspSigning;
        }
        if (this._serverAuth !== undefined) {
            hasAnyValues = true;
            internalValueResult.serverAuth = this._serverAuth;
        }
        if (this._timeStamping !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeStamping = this._timeStamping;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientAuth = undefined;
            this._codeSigning = undefined;
            this._emailProtection = undefined;
            this._ocspSigning = undefined;
            this._serverAuth = undefined;
            this._timeStamping = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientAuth = value.clientAuth;
            this._codeSigning = value.codeSigning;
            this._emailProtection = value.emailProtection;
            this._ocspSigning = value.ocspSigning;
            this._serverAuth = value.serverAuth;
            this._timeStamping = value.timeStamping;
        }
    }
    get clientAuth() {
        return this.getBooleanAttribute('client_auth');
    }
    set clientAuth(value) {
        this._clientAuth = value;
    }
    resetClientAuth() {
        this._clientAuth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientAuthInput() {
        return this._clientAuth;
    }
    get codeSigning() {
        return this.getBooleanAttribute('code_signing');
    }
    set codeSigning(value) {
        this._codeSigning = value;
    }
    resetCodeSigning() {
        this._codeSigning = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeSigningInput() {
        return this._codeSigning;
    }
    get emailProtection() {
        return this.getBooleanAttribute('email_protection');
    }
    set emailProtection(value) {
        this._emailProtection = value;
    }
    resetEmailProtection() {
        this._emailProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailProtectionInput() {
        return this._emailProtection;
    }
    get ocspSigning() {
        return this.getBooleanAttribute('ocsp_signing');
    }
    set ocspSigning(value) {
        this._ocspSigning = value;
    }
    resetOcspSigning() {
        this._ocspSigning = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ocspSigningInput() {
        return this._ocspSigning;
    }
    get serverAuth() {
        return this.getBooleanAttribute('server_auth');
    }
    set serverAuth(value) {
        this._serverAuth = value;
    }
    resetServerAuth() {
        this._serverAuth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverAuthInput() {
        return this._serverAuth;
    }
    get timeStamping() {
        return this.getBooleanAttribute('time_stamping');
    }
    set timeStamping(value) {
        this._timeStamping = value;
    }
    resetTimeStamping() {
        this._timeStamping = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeStampingInput() {
        return this._timeStamping;
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageOutputReference = PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageOutputReference;
_l = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageOutputReference[_l] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageOutputReference", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesToTerraform = privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesToTerraform;
class PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._objectIdPath = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesOutputReference = PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesOutputReference[_m] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesOutputReference", version: "5.0.1" };
class PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesList = PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesList;
_o = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesList[_o] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesList", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        base_key_usage: privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageToTerraform(struct.baseKeyUsage),
        extended_key_usage: privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageToTerraform(struct.extendedKeyUsage),
        unknown_extended_key_usages: cdktf.listMapper(privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesToTerraform, true)(struct.unknownExtendedKeyUsages),
    };
}
exports.privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageToTerraform = privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageToTerraform;
class PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // base_key_usage - computed: false, optional: false, required: true
        this._baseKeyUsage = new PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageBaseKeyUsageOutputReference(this, "base_key_usage");
        // extended_key_usage - computed: false, optional: false, required: true
        this._extendedKeyUsage = new PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsageOutputReference(this, "extended_key_usage");
        // unknown_extended_key_usages - computed: false, optional: true, required: false
        this._unknownExtendedKeyUsages = new PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsagesList(this, "unknown_extended_key_usages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._baseKeyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseKeyUsage = this._baseKeyUsage?.internalValue;
        }
        if (this._extendedKeyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.extendedKeyUsage = this._extendedKeyUsage?.internalValue;
        }
        if (this._unknownExtendedKeyUsages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.unknownExtendedKeyUsages = this._unknownExtendedKeyUsages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._baseKeyUsage.internalValue = undefined;
            this._extendedKeyUsage.internalValue = undefined;
            this._unknownExtendedKeyUsages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._baseKeyUsage.internalValue = value.baseKeyUsage;
            this._extendedKeyUsage.internalValue = value.extendedKeyUsage;
            this._unknownExtendedKeyUsages.internalValue = value.unknownExtendedKeyUsages;
        }
    }
    get baseKeyUsage() {
        return this._baseKeyUsage;
    }
    putBaseKeyUsage(value) {
        this._baseKeyUsage.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get baseKeyUsageInput() {
        return this._baseKeyUsage.internalValue;
    }
    get extendedKeyUsage() {
        return this._extendedKeyUsage;
    }
    putExtendedKeyUsage(value) {
        this._extendedKeyUsage.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get extendedKeyUsageInput() {
        return this._extendedKeyUsage.internalValue;
    }
    get unknownExtendedKeyUsages() {
        return this._unknownExtendedKeyUsages;
    }
    putUnknownExtendedKeyUsages(value) {
        this._unknownExtendedKeyUsages.internalValue = value;
    }
    resetUnknownExtendedKeyUsages() {
        this._unknownExtendedKeyUsages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unknownExtendedKeyUsagesInput() {
        return this._unknownExtendedKeyUsages.internalValue;
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageOutputReference = PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageOutputReference;
_p = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageOutputReference[_p] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageOutputReference", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsToTerraform = privatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsToTerraform;
class PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._objectIdPath = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsOutputReference = PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsOutputReference[_q] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsOutputReference", version: "5.0.1" };
class PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsList = PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsList;
_r = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsList[_r] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsList", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyBaselineValuesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aia_ocsp_servers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.aiaOcspServers),
        additional_extensions: cdktf.listMapper(privatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsToTerraform, true)(struct.additionalExtensions),
        ca_options: privatecaCaPoolIssuancePolicyBaselineValuesCaOptionsToTerraform(struct.caOptions),
        key_usage: privatecaCaPoolIssuancePolicyBaselineValuesKeyUsageToTerraform(struct.keyUsage),
        policy_ids: cdktf.listMapper(privatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsToTerraform, true)(struct.policyIds),
    };
}
exports.privatecaCaPoolIssuancePolicyBaselineValuesToTerraform = privatecaCaPoolIssuancePolicyBaselineValuesToTerraform;
class PrivatecaCaPoolIssuancePolicyBaselineValuesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // additional_extensions - computed: false, optional: true, required: false
        this._additionalExtensions = new PrivatecaCaPoolIssuancePolicyBaselineValuesAdditionalExtensionsList(this, "additional_extensions", false);
        // ca_options - computed: false, optional: false, required: true
        this._caOptions = new PrivatecaCaPoolIssuancePolicyBaselineValuesCaOptionsOutputReference(this, "ca_options");
        // key_usage - computed: false, optional: false, required: true
        this._keyUsage = new PrivatecaCaPoolIssuancePolicyBaselineValuesKeyUsageOutputReference(this, "key_usage");
        // policy_ids - computed: false, optional: true, required: false
        this._policyIds = new PrivatecaCaPoolIssuancePolicyBaselineValuesPolicyIdsList(this, "policy_ids", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._aiaOcspServers !== undefined) {
            hasAnyValues = true;
            internalValueResult.aiaOcspServers = this._aiaOcspServers;
        }
        if (this._additionalExtensions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalExtensions = this._additionalExtensions?.internalValue;
        }
        if (this._caOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.caOptions = this._caOptions?.internalValue;
        }
        if (this._keyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyUsage = this._keyUsage?.internalValue;
        }
        if (this._policyIds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyIds = this._policyIds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._aiaOcspServers = undefined;
            this._additionalExtensions.internalValue = undefined;
            this._caOptions.internalValue = undefined;
            this._keyUsage.internalValue = undefined;
            this._policyIds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._aiaOcspServers = value.aiaOcspServers;
            this._additionalExtensions.internalValue = value.additionalExtensions;
            this._caOptions.internalValue = value.caOptions;
            this._keyUsage.internalValue = value.keyUsage;
            this._policyIds.internalValue = value.policyIds;
        }
    }
    get aiaOcspServers() {
        return this.getListAttribute('aia_ocsp_servers');
    }
    set aiaOcspServers(value) {
        this._aiaOcspServers = value;
    }
    resetAiaOcspServers() {
        this._aiaOcspServers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aiaOcspServersInput() {
        return this._aiaOcspServers;
    }
    get additionalExtensions() {
        return this._additionalExtensions;
    }
    putAdditionalExtensions(value) {
        this._additionalExtensions.internalValue = value;
    }
    resetAdditionalExtensions() {
        this._additionalExtensions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalExtensionsInput() {
        return this._additionalExtensions.internalValue;
    }
    get caOptions() {
        return this._caOptions;
    }
    putCaOptions(value) {
        this._caOptions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get caOptionsInput() {
        return this._caOptions.internalValue;
    }
    get keyUsage() {
        return this._keyUsage;
    }
    putKeyUsage(value) {
        this._keyUsage.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyUsageInput() {
        return this._keyUsage.internalValue;
    }
    get policyIds() {
        return this._policyIds;
    }
    putPolicyIds(value) {
        this._policyIds.internalValue = value;
    }
    resetPolicyIds() {
        this._policyIds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyIdsInput() {
        return this._policyIds.internalValue;
    }
}
exports.PrivatecaCaPoolIssuancePolicyBaselineValuesOutputReference = PrivatecaCaPoolIssuancePolicyBaselineValuesOutputReference;
_s = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyBaselineValuesOutputReference[_s] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyBaselineValuesOutputReference", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        expression: cdktf.stringToTerraform(struct.expression),
        location: cdktf.stringToTerraform(struct.location),
        title: cdktf.stringToTerraform(struct.title),
    };
}
exports.privatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionToTerraform = privatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionToTerraform;
class PrivatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._expression !== undefined) {
            hasAnyValues = true;
            internalValueResult.expression = this._expression;
        }
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        if (this._title !== undefined) {
            hasAnyValues = true;
            internalValueResult.title = this._title;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._description = undefined;
            this._expression = undefined;
            this._location = undefined;
            this._title = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._description = value.description;
            this._expression = value.expression;
            this._location = value.location;
            this._title = value.title;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get expression() {
        return this.getStringAttribute('expression');
    }
    set expression(value) {
        this._expression = value;
    }
    // Temporarily expose input value. Use with caution.
    get expressionInput() {
        return this._expression;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    resetTitle() {
        this._title = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
}
exports.PrivatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionOutputReference = PrivatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionOutputReference;
_t = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionOutputReference[_t] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionOutputReference", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyIdentityConstraintsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_subject_alt_names_passthrough: cdktf.booleanToTerraform(struct.allowSubjectAltNamesPassthrough),
        allow_subject_passthrough: cdktf.booleanToTerraform(struct.allowSubjectPassthrough),
        cel_expression: privatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionToTerraform(struct.celExpression),
    };
}
exports.privatecaCaPoolIssuancePolicyIdentityConstraintsToTerraform = privatecaCaPoolIssuancePolicyIdentityConstraintsToTerraform;
class PrivatecaCaPoolIssuancePolicyIdentityConstraintsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cel_expression - computed: false, optional: true, required: false
        this._celExpression = new PrivatecaCaPoolIssuancePolicyIdentityConstraintsCelExpressionOutputReference(this, "cel_expression");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowSubjectAltNamesPassthrough !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowSubjectAltNamesPassthrough = this._allowSubjectAltNamesPassthrough;
        }
        if (this._allowSubjectPassthrough !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowSubjectPassthrough = this._allowSubjectPassthrough;
        }
        if (this._celExpression?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.celExpression = this._celExpression?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowSubjectAltNamesPassthrough = undefined;
            this._allowSubjectPassthrough = undefined;
            this._celExpression.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowSubjectAltNamesPassthrough = value.allowSubjectAltNamesPassthrough;
            this._allowSubjectPassthrough = value.allowSubjectPassthrough;
            this._celExpression.internalValue = value.celExpression;
        }
    }
    get allowSubjectAltNamesPassthrough() {
        return this.getBooleanAttribute('allow_subject_alt_names_passthrough');
    }
    set allowSubjectAltNamesPassthrough(value) {
        this._allowSubjectAltNamesPassthrough = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowSubjectAltNamesPassthroughInput() {
        return this._allowSubjectAltNamesPassthrough;
    }
    get allowSubjectPassthrough() {
        return this.getBooleanAttribute('allow_subject_passthrough');
    }
    set allowSubjectPassthrough(value) {
        this._allowSubjectPassthrough = value;
    }
    // Temporarily expose input value. Use with caution.
    get allowSubjectPassthroughInput() {
        return this._allowSubjectPassthrough;
    }
    get celExpression() {
        return this._celExpression;
    }
    putCelExpression(value) {
        this._celExpression.internalValue = value;
    }
    resetCelExpression() {
        this._celExpression.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get celExpressionInput() {
        return this._celExpression.internalValue;
    }
}
exports.PrivatecaCaPoolIssuancePolicyIdentityConstraintsOutputReference = PrivatecaCaPoolIssuancePolicyIdentityConstraintsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyIdentityConstraintsOutputReference[_u] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyIdentityConstraintsOutputReference", version: "5.0.1" };
function privatecaCaPoolIssuancePolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        maximum_lifetime: cdktf.stringToTerraform(struct.maximumLifetime),
        allowed_issuance_modes: privatecaCaPoolIssuancePolicyAllowedIssuanceModesToTerraform(struct.allowedIssuanceModes),
        allowed_key_types: cdktf.listMapper(privatecaCaPoolIssuancePolicyAllowedKeyTypesToTerraform, true)(struct.allowedKeyTypes),
        baseline_values: privatecaCaPoolIssuancePolicyBaselineValuesToTerraform(struct.baselineValues),
        identity_constraints: privatecaCaPoolIssuancePolicyIdentityConstraintsToTerraform(struct.identityConstraints),
    };
}
exports.privatecaCaPoolIssuancePolicyToTerraform = privatecaCaPoolIssuancePolicyToTerraform;
class PrivatecaCaPoolIssuancePolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // allowed_issuance_modes - computed: false, optional: true, required: false
        this._allowedIssuanceModes = new PrivatecaCaPoolIssuancePolicyAllowedIssuanceModesOutputReference(this, "allowed_issuance_modes");
        // allowed_key_types - computed: false, optional: true, required: false
        this._allowedKeyTypes = new PrivatecaCaPoolIssuancePolicyAllowedKeyTypesList(this, "allowed_key_types", false);
        // baseline_values - computed: false, optional: true, required: false
        this._baselineValues = new PrivatecaCaPoolIssuancePolicyBaselineValuesOutputReference(this, "baseline_values");
        // identity_constraints - computed: false, optional: true, required: false
        this._identityConstraints = new PrivatecaCaPoolIssuancePolicyIdentityConstraintsOutputReference(this, "identity_constraints");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maximumLifetime !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumLifetime = this._maximumLifetime;
        }
        if (this._allowedIssuanceModes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedIssuanceModes = this._allowedIssuanceModes?.internalValue;
        }
        if (this._allowedKeyTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedKeyTypes = this._allowedKeyTypes?.internalValue;
        }
        if (this._baselineValues?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.baselineValues = this._baselineValues?.internalValue;
        }
        if (this._identityConstraints?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityConstraints = this._identityConstraints?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maximumLifetime = undefined;
            this._allowedIssuanceModes.internalValue = undefined;
            this._allowedKeyTypes.internalValue = undefined;
            this._baselineValues.internalValue = undefined;
            this._identityConstraints.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maximumLifetime = value.maximumLifetime;
            this._allowedIssuanceModes.internalValue = value.allowedIssuanceModes;
            this._allowedKeyTypes.internalValue = value.allowedKeyTypes;
            this._baselineValues.internalValue = value.baselineValues;
            this._identityConstraints.internalValue = value.identityConstraints;
        }
    }
    get maximumLifetime() {
        return this.getStringAttribute('maximum_lifetime');
    }
    set maximumLifetime(value) {
        this._maximumLifetime = value;
    }
    resetMaximumLifetime() {
        this._maximumLifetime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maximumLifetimeInput() {
        return this._maximumLifetime;
    }
    get allowedIssuanceModes() {
        return this._allowedIssuanceModes;
    }
    putAllowedIssuanceModes(value) {
        this._allowedIssuanceModes.internalValue = value;
    }
    resetAllowedIssuanceModes() {
        this._allowedIssuanceModes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedIssuanceModesInput() {
        return this._allowedIssuanceModes.internalValue;
    }
    get allowedKeyTypes() {
        return this._allowedKeyTypes;
    }
    putAllowedKeyTypes(value) {
        this._allowedKeyTypes.internalValue = value;
    }
    resetAllowedKeyTypes() {
        this._allowedKeyTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedKeyTypesInput() {
        return this._allowedKeyTypes.internalValue;
    }
    get baselineValues() {
        return this._baselineValues;
    }
    putBaselineValues(value) {
        this._baselineValues.internalValue = value;
    }
    resetBaselineValues() {
        this._baselineValues.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get baselineValuesInput() {
        return this._baselineValues.internalValue;
    }
    get identityConstraints() {
        return this._identityConstraints;
    }
    putIdentityConstraints(value) {
        this._identityConstraints.internalValue = value;
    }
    resetIdentityConstraints() {
        this._identityConstraints.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityConstraintsInput() {
        return this._identityConstraints.internalValue;
    }
}
exports.PrivatecaCaPoolIssuancePolicyOutputReference = PrivatecaCaPoolIssuancePolicyOutputReference;
_v = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolIssuancePolicyOutputReference[_v] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolIssuancePolicyOutputReference", version: "5.0.1" };
function privatecaCaPoolPublishingOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        publish_ca_cert: cdktf.booleanToTerraform(struct.publishCaCert),
        publish_crl: cdktf.booleanToTerraform(struct.publishCrl),
    };
}
exports.privatecaCaPoolPublishingOptionsToTerraform = privatecaCaPoolPublishingOptionsToTerraform;
class PrivatecaCaPoolPublishingOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._publishCaCert !== undefined) {
            hasAnyValues = true;
            internalValueResult.publishCaCert = this._publishCaCert;
        }
        if (this._publishCrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.publishCrl = this._publishCrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._publishCaCert = undefined;
            this._publishCrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._publishCaCert = value.publishCaCert;
            this._publishCrl = value.publishCrl;
        }
    }
    get publishCaCert() {
        return this.getBooleanAttribute('publish_ca_cert');
    }
    set publishCaCert(value) {
        this._publishCaCert = value;
    }
    // Temporarily expose input value. Use with caution.
    get publishCaCertInput() {
        return this._publishCaCert;
    }
    get publishCrl() {
        return this.getBooleanAttribute('publish_crl');
    }
    set publishCrl(value) {
        this._publishCrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get publishCrlInput() {
        return this._publishCrl;
    }
}
exports.PrivatecaCaPoolPublishingOptionsOutputReference = PrivatecaCaPoolPublishingOptionsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolPublishingOptionsOutputReference[_w] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolPublishingOptionsOutputReference", version: "5.0.1" };
function privatecaCaPoolTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.privatecaCaPoolTimeoutsToTerraform = privatecaCaPoolTimeoutsToTerraform;
class PrivatecaCaPoolTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.PrivatecaCaPoolTimeoutsOutputReference = PrivatecaCaPoolTimeoutsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
PrivatecaCaPoolTimeoutsOutputReference[_x] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPoolTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/privateca_ca_pool google_privateca_ca_pool}
*/
class PrivatecaCaPool extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/privateca_ca_pool google_privateca_ca_pool} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options PrivatecaCaPoolConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_privateca_ca_pool',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // issuance_policy - computed: false, optional: true, required: false
        this._issuancePolicy = new PrivatecaCaPoolIssuancePolicyOutputReference(this, "issuance_policy");
        // publishing_options - computed: false, optional: true, required: false
        this._publishingOptions = new PrivatecaCaPoolPublishingOptionsOutputReference(this, "publishing_options");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new PrivatecaCaPoolTimeoutsOutputReference(this, "timeouts");
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._tier = config.tier;
        this._issuancePolicy.internalValue = config.issuancePolicy;
        this._publishingOptions.internalValue = config.publishingOptions;
        this._timeouts.internalValue = config.timeouts;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get tier() {
        return this.getStringAttribute('tier');
    }
    set tier(value) {
        this._tier = value;
    }
    // Temporarily expose input value. Use with caution.
    get tierInput() {
        return this._tier;
    }
    get issuancePolicy() {
        return this._issuancePolicy;
    }
    putIssuancePolicy(value) {
        this._issuancePolicy.internalValue = value;
    }
    resetIssuancePolicy() {
        this._issuancePolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get issuancePolicyInput() {
        return this._issuancePolicy.internalValue;
    }
    get publishingOptions() {
        return this._publishingOptions;
    }
    putPublishingOptions(value) {
        this._publishingOptions.internalValue = value;
    }
    resetPublishingOptions() {
        this._publishingOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publishingOptionsInput() {
        return this._publishingOptions.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            tier: cdktf.stringToTerraform(this._tier),
            issuance_policy: privatecaCaPoolIssuancePolicyToTerraform(this._issuancePolicy.internalValue),
            publishing_options: privatecaCaPoolPublishingOptionsToTerraform(this._publishingOptions.internalValue),
            timeouts: privatecaCaPoolTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.PrivatecaCaPool = PrivatecaCaPool;
_y = JSII_RTTI_SYMBOL_1;
PrivatecaCaPool[_y] = { fqn: "@cdktf/provider-google.privatecaCaPool.PrivatecaCaPool", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
PrivatecaCaPool.tfResourceType = "google_privateca_ca_pool";
//# sourceMappingURL=data:application/json;base64,