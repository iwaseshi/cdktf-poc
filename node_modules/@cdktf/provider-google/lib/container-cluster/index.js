"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerCluster = exports.ContainerClusterWorkloadIdentityConfigOutputReference = exports.containerClusterWorkloadIdentityConfigToTerraform = exports.ContainerClusterVerticalPodAutoscalingOutputReference = exports.containerClusterVerticalPodAutoscalingToTerraform = exports.ContainerClusterTimeoutsOutputReference = exports.containerClusterTimeoutsToTerraform = exports.ContainerClusterServiceExternalIpsConfigOutputReference = exports.containerClusterServiceExternalIpsConfigToTerraform = exports.ContainerClusterResourceUsageExportConfigOutputReference = exports.containerClusterResourceUsageExportConfigToTerraform = exports.ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference = exports.containerClusterResourceUsageExportConfigBigqueryDestinationToTerraform = exports.ContainerClusterReleaseChannelOutputReference = exports.containerClusterReleaseChannelToTerraform = exports.ContainerClusterPrivateClusterConfigOutputReference = exports.containerClusterPrivateClusterConfigToTerraform = exports.ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference = exports.containerClusterPrivateClusterConfigMasterGlobalAccessConfigToTerraform = exports.ContainerClusterNotificationConfigOutputReference = exports.containerClusterNotificationConfigToTerraform = exports.ContainerClusterNotificationConfigPubsubOutputReference = exports.containerClusterNotificationConfigPubsubToTerraform = exports.ContainerClusterNotificationConfigPubsubFilterOutputReference = exports.containerClusterNotificationConfigPubsubFilterToTerraform = exports.ContainerClusterNodePoolDefaultsOutputReference = exports.containerClusterNodePoolDefaultsToTerraform = exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsToTerraform = exports.ContainerClusterNodePoolList = exports.ContainerClusterNodePoolOutputReference = exports.containerClusterNodePoolToTerraform = exports.ContainerClusterNodePoolUpgradeSettingsOutputReference = exports.containerClusterNodePoolUpgradeSettingsToTerraform = exports.ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsOutputReference = exports.containerClusterNodePoolUpgradeSettingsBlueGreenSettingsToTerraform = exports.ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyOutputReference = exports.containerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyToTerraform = exports.ContainerClusterNodePoolNodeConfigOutputReference = exports.containerClusterNodePoolNodeConfigToTerraform = exports.ContainerClusterNodePoolNodeConfigWorkloadMetadataConfigOutputReference = exports.containerClusterNodePoolNodeConfigWorkloadMetadataConfigToTerraform = exports.ContainerClusterNodePoolNodeConfigShieldedInstanceConfigOutputReference = exports.containerClusterNodePoolNodeConfigShieldedInstanceConfigToTerraform = exports.ContainerClusterNodePoolNodeConfigReservationAffinityOutputReference = exports.containerClusterNodePoolNodeConfigReservationAffinityToTerraform = exports.ContainerClusterNodePoolNodeConfigGvnicOutputReference = exports.containerClusterNodePoolNodeConfigGvnicToTerraform = exports.ContainerClusterNodePoolNodeConfigGcfsConfigOutputReference = exports.containerClusterNodePoolNodeConfigGcfsConfigToTerraform = exports.ContainerClusterNodePoolNodeConfigTaintList = exports.ContainerClusterNodePoolNodeConfigTaintOutputReference = exports.containerClusterNodePoolNodeConfigTaintToTerraform = exports.ContainerClusterNodePoolNodeConfigGuestAcceleratorList = exports.ContainerClusterNodePoolNodeConfigGuestAcceleratorOutputReference = exports.containerClusterNodePoolNodeConfigGuestAcceleratorToTerraform = exports.ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigList = exports.ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigOutputReference = exports.containerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigToTerraform = exports.ContainerClusterNodePoolNetworkConfigOutputReference = exports.containerClusterNodePoolNetworkConfigToTerraform = exports.ContainerClusterNodePoolManagementOutputReference = exports.containerClusterNodePoolManagementToTerraform = exports.ContainerClusterNodePoolAutoscalingOutputReference = exports.containerClusterNodePoolAutoscalingToTerraform = exports.ContainerClusterNodeConfigOutputReference = exports.containerClusterNodeConfigToTerraform = exports.ContainerClusterNodeConfigWorkloadMetadataConfigOutputReference = exports.containerClusterNodeConfigWorkloadMetadataConfigToTerraform = exports.ContainerClusterNodeConfigShieldedInstanceConfigOutputReference = exports.containerClusterNodeConfigShieldedInstanceConfigToTerraform = exports.ContainerClusterNodeConfigReservationAffinityOutputReference = exports.containerClusterNodeConfigReservationAffinityToTerraform = exports.ContainerClusterNodeConfigGvnicOutputReference = exports.containerClusterNodeConfigGvnicToTerraform = exports.ContainerClusterNodeConfigGcfsConfigOutputReference = exports.containerClusterNodeConfigGcfsConfigToTerraform = exports.ContainerClusterNodeConfigTaintList = exports.ContainerClusterNodeConfigTaintOutputReference = exports.containerClusterNodeConfigTaintToTerraform = exports.ContainerClusterNodeConfigGuestAcceleratorList = exports.ContainerClusterNodeConfigGuestAcceleratorOutputReference = exports.containerClusterNodeConfigGuestAcceleratorToTerraform = exports.ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigList = exports.ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigOutputReference = exports.containerClusterNodeConfigGuestAcceleratorGpuSharingConfigToTerraform = exports.ContainerClusterNetworkPolicyOutputReference = exports.containerClusterNetworkPolicyToTerraform = exports.ContainerClusterMonitoringConfigOutputReference = exports.containerClusterMonitoringConfigToTerraform = exports.ContainerClusterMonitoringConfigManagedPrometheusOutputReference = exports.containerClusterMonitoringConfigManagedPrometheusToTerraform = exports.ContainerClusterMeshCertificatesOutputReference = exports.containerClusterMeshCertificatesToTerraform = exports.ContainerClusterMasterAuthorizedNetworksConfigOutputReference = exports.containerClusterMasterAuthorizedNetworksConfigToTerraform = exports.ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksList = exports.ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksOutputReference = exports.containerClusterMasterAuthorizedNetworksConfigCidrBlocksToTerraform = exports.ContainerClusterMasterAuthOutputReference = exports.containerClusterMasterAuthToTerraform = exports.ContainerClusterMasterAuthClientCertificateConfigOutputReference = exports.containerClusterMasterAuthClientCertificateConfigToTerraform = exports.ContainerClusterMaintenancePolicyOutputReference = exports.containerClusterMaintenancePolicyToTerraform = exports.ContainerClusterMaintenancePolicyRecurringWindowOutputReference = exports.containerClusterMaintenancePolicyRecurringWindowToTerraform = exports.ContainerClusterMaintenancePolicyMaintenanceExclusionList = exports.ContainerClusterMaintenancePolicyMaintenanceExclusionOutputReference = exports.containerClusterMaintenancePolicyMaintenanceExclusionToTerraform = exports.ContainerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsOutputReference = exports.containerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsToTerraform = exports.ContainerClusterMaintenancePolicyDailyMaintenanceWindowOutputReference = exports.containerClusterMaintenancePolicyDailyMaintenanceWindowToTerraform = exports.ContainerClusterLoggingConfigOutputReference = exports.containerClusterLoggingConfigToTerraform = exports.ContainerClusterIpAllocationPolicyOutputReference = exports.containerClusterIpAllocationPolicyToTerraform = exports.ContainerClusterDnsConfigOutputReference = exports.containerClusterDnsConfigToTerraform = exports.ContainerClusterDefaultSnatStatusOutputReference = exports.containerClusterDefaultSnatStatusToTerraform = exports.ContainerClusterDatabaseEncryptionOutputReference = exports.containerClusterDatabaseEncryptionToTerraform = exports.ContainerClusterCostManagementConfigOutputReference = exports.containerClusterCostManagementConfigToTerraform = exports.ContainerClusterConfidentialNodesOutputReference = exports.containerClusterConfidentialNodesToTerraform = exports.ContainerClusterClusterAutoscalingOutputReference = exports.containerClusterClusterAutoscalingToTerraform = exports.ContainerClusterClusterAutoscalingResourceLimitsList = exports.ContainerClusterClusterAutoscalingResourceLimitsOutputReference = exports.containerClusterClusterAutoscalingResourceLimitsToTerraform = exports.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsOutputReference = exports.containerClusterClusterAutoscalingAutoProvisioningDefaultsToTerraform = exports.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigOutputReference = exports.containerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigToTerraform = exports.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementOutputReference = exports.containerClusterClusterAutoscalingAutoProvisioningDefaultsManagementToTerraform = exports.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsList = exports.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsOutputReference = exports.containerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsToTerraform = exports.ContainerClusterBinaryAuthorizationOutputReference = exports.containerClusterBinaryAuthorizationToTerraform = exports.ContainerClusterAuthenticatorGroupsConfigOutputReference = exports.containerClusterAuthenticatorGroupsConfigToTerraform = exports.ContainerClusterAddonsConfigOutputReference = exports.containerClusterAddonsConfigToTerraform = exports.ContainerClusterAddonsConfigNetworkPolicyConfigOutputReference = exports.containerClusterAddonsConfigNetworkPolicyConfigToTerraform = exports.ContainerClusterAddonsConfigHttpLoadBalancingOutputReference = exports.containerClusterAddonsConfigHttpLoadBalancingToTerraform = exports.ContainerClusterAddonsConfigHorizontalPodAutoscalingOutputReference = exports.containerClusterAddonsConfigHorizontalPodAutoscalingToTerraform = exports.ContainerClusterAddonsConfigGcpFilestoreCsiDriverConfigOutputReference = exports.containerClusterAddonsConfigGcpFilestoreCsiDriverConfigToTerraform = exports.ContainerClusterAddonsConfigGcePersistentDiskCsiDriverConfigOutputReference = exports.containerClusterAddonsConfigGcePersistentDiskCsiDriverConfigToTerraform = exports.ContainerClusterAddonsConfigDnsCacheConfigOutputReference = exports.containerClusterAddonsConfigDnsCacheConfigToTerraform = exports.ContainerClusterAddonsConfigCloudrunConfigOutputReference = exports.containerClusterAddonsConfigCloudrunConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function containerClusterAddonsConfigCloudrunConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: cdktf.booleanToTerraform(struct.disabled),
        load_balancer_type: cdktf.stringToTerraform(struct.loadBalancerType),
    };
}
exports.containerClusterAddonsConfigCloudrunConfigToTerraform = containerClusterAddonsConfigCloudrunConfigToTerraform;
class ContainerClusterAddonsConfigCloudrunConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        if (this._loadBalancerType !== undefined) {
            hasAnyValues = true;
            internalValueResult.loadBalancerType = this._loadBalancerType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled = undefined;
            this._loadBalancerType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled = value.disabled;
            this._loadBalancerType = value.loadBalancerType;
        }
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get loadBalancerType() {
        return this.getStringAttribute('load_balancer_type');
    }
    set loadBalancerType(value) {
        this._loadBalancerType = value;
    }
    resetLoadBalancerType() {
        this._loadBalancerType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancerTypeInput() {
        return this._loadBalancerType;
    }
}
exports.ContainerClusterAddonsConfigCloudrunConfigOutputReference = ContainerClusterAddonsConfigCloudrunConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ContainerClusterAddonsConfigCloudrunConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterAddonsConfigCloudrunConfigOutputReference", version: "4.0.3" };
function containerClusterAddonsConfigDnsCacheConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterAddonsConfigDnsCacheConfigToTerraform = containerClusterAddonsConfigDnsCacheConfigToTerraform;
class ContainerClusterAddonsConfigDnsCacheConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterAddonsConfigDnsCacheConfigOutputReference = ContainerClusterAddonsConfigDnsCacheConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ContainerClusterAddonsConfigDnsCacheConfigOutputReference[_b] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterAddonsConfigDnsCacheConfigOutputReference", version: "4.0.3" };
function containerClusterAddonsConfigGcePersistentDiskCsiDriverConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterAddonsConfigGcePersistentDiskCsiDriverConfigToTerraform = containerClusterAddonsConfigGcePersistentDiskCsiDriverConfigToTerraform;
class ContainerClusterAddonsConfigGcePersistentDiskCsiDriverConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterAddonsConfigGcePersistentDiskCsiDriverConfigOutputReference = ContainerClusterAddonsConfigGcePersistentDiskCsiDriverConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ContainerClusterAddonsConfigGcePersistentDiskCsiDriverConfigOutputReference[_c] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterAddonsConfigGcePersistentDiskCsiDriverConfigOutputReference", version: "4.0.3" };
function containerClusterAddonsConfigGcpFilestoreCsiDriverConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterAddonsConfigGcpFilestoreCsiDriverConfigToTerraform = containerClusterAddonsConfigGcpFilestoreCsiDriverConfigToTerraform;
class ContainerClusterAddonsConfigGcpFilestoreCsiDriverConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterAddonsConfigGcpFilestoreCsiDriverConfigOutputReference = ContainerClusterAddonsConfigGcpFilestoreCsiDriverConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ContainerClusterAddonsConfigGcpFilestoreCsiDriverConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterAddonsConfigGcpFilestoreCsiDriverConfigOutputReference", version: "4.0.3" };
function containerClusterAddonsConfigHorizontalPodAutoscalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: cdktf.booleanToTerraform(struct.disabled),
    };
}
exports.containerClusterAddonsConfigHorizontalPodAutoscalingToTerraform = containerClusterAddonsConfigHorizontalPodAutoscalingToTerraform;
class ContainerClusterAddonsConfigHorizontalPodAutoscalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled = value.disabled;
        }
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
}
exports.ContainerClusterAddonsConfigHorizontalPodAutoscalingOutputReference = ContainerClusterAddonsConfigHorizontalPodAutoscalingOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ContainerClusterAddonsConfigHorizontalPodAutoscalingOutputReference[_e] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterAddonsConfigHorizontalPodAutoscalingOutputReference", version: "4.0.3" };
function containerClusterAddonsConfigHttpLoadBalancingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: cdktf.booleanToTerraform(struct.disabled),
    };
}
exports.containerClusterAddonsConfigHttpLoadBalancingToTerraform = containerClusterAddonsConfigHttpLoadBalancingToTerraform;
class ContainerClusterAddonsConfigHttpLoadBalancingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled = value.disabled;
        }
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
}
exports.ContainerClusterAddonsConfigHttpLoadBalancingOutputReference = ContainerClusterAddonsConfigHttpLoadBalancingOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ContainerClusterAddonsConfigHttpLoadBalancingOutputReference[_f] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterAddonsConfigHttpLoadBalancingOutputReference", version: "4.0.3" };
function containerClusterAddonsConfigNetworkPolicyConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: cdktf.booleanToTerraform(struct.disabled),
    };
}
exports.containerClusterAddonsConfigNetworkPolicyConfigToTerraform = containerClusterAddonsConfigNetworkPolicyConfigToTerraform;
class ContainerClusterAddonsConfigNetworkPolicyConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled = value.disabled;
        }
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
}
exports.ContainerClusterAddonsConfigNetworkPolicyConfigOutputReference = ContainerClusterAddonsConfigNetworkPolicyConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ContainerClusterAddonsConfigNetworkPolicyConfigOutputReference[_g] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterAddonsConfigNetworkPolicyConfigOutputReference", version: "4.0.3" };
function containerClusterAddonsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloudrun_config: containerClusterAddonsConfigCloudrunConfigToTerraform(struct.cloudrunConfig),
        dns_cache_config: containerClusterAddonsConfigDnsCacheConfigToTerraform(struct.dnsCacheConfig),
        gce_persistent_disk_csi_driver_config: containerClusterAddonsConfigGcePersistentDiskCsiDriverConfigToTerraform(struct.gcePersistentDiskCsiDriverConfig),
        gcp_filestore_csi_driver_config: containerClusterAddonsConfigGcpFilestoreCsiDriverConfigToTerraform(struct.gcpFilestoreCsiDriverConfig),
        horizontal_pod_autoscaling: containerClusterAddonsConfigHorizontalPodAutoscalingToTerraform(struct.horizontalPodAutoscaling),
        http_load_balancing: containerClusterAddonsConfigHttpLoadBalancingToTerraform(struct.httpLoadBalancing),
        network_policy_config: containerClusterAddonsConfigNetworkPolicyConfigToTerraform(struct.networkPolicyConfig),
    };
}
exports.containerClusterAddonsConfigToTerraform = containerClusterAddonsConfigToTerraform;
class ContainerClusterAddonsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloudrun_config - computed: false, optional: true, required: false
        this._cloudrunConfig = new ContainerClusterAddonsConfigCloudrunConfigOutputReference(this, "cloudrun_config");
        // dns_cache_config - computed: false, optional: true, required: false
        this._dnsCacheConfig = new ContainerClusterAddonsConfigDnsCacheConfigOutputReference(this, "dns_cache_config");
        // gce_persistent_disk_csi_driver_config - computed: false, optional: true, required: false
        this._gcePersistentDiskCsiDriverConfig = new ContainerClusterAddonsConfigGcePersistentDiskCsiDriverConfigOutputReference(this, "gce_persistent_disk_csi_driver_config");
        // gcp_filestore_csi_driver_config - computed: false, optional: true, required: false
        this._gcpFilestoreCsiDriverConfig = new ContainerClusterAddonsConfigGcpFilestoreCsiDriverConfigOutputReference(this, "gcp_filestore_csi_driver_config");
        // horizontal_pod_autoscaling - computed: false, optional: true, required: false
        this._horizontalPodAutoscaling = new ContainerClusterAddonsConfigHorizontalPodAutoscalingOutputReference(this, "horizontal_pod_autoscaling");
        // http_load_balancing - computed: false, optional: true, required: false
        this._httpLoadBalancing = new ContainerClusterAddonsConfigHttpLoadBalancingOutputReference(this, "http_load_balancing");
        // network_policy_config - computed: false, optional: true, required: false
        this._networkPolicyConfig = new ContainerClusterAddonsConfigNetworkPolicyConfigOutputReference(this, "network_policy_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudrunConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudrunConfig = this._cloudrunConfig?.internalValue;
        }
        if (this._dnsCacheConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dnsCacheConfig = this._dnsCacheConfig?.internalValue;
        }
        if (this._gcePersistentDiskCsiDriverConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcePersistentDiskCsiDriverConfig = this._gcePersistentDiskCsiDriverConfig?.internalValue;
        }
        if (this._gcpFilestoreCsiDriverConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcpFilestoreCsiDriverConfig = this._gcpFilestoreCsiDriverConfig?.internalValue;
        }
        if (this._horizontalPodAutoscaling?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.horizontalPodAutoscaling = this._horizontalPodAutoscaling?.internalValue;
        }
        if (this._httpLoadBalancing?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpLoadBalancing = this._httpLoadBalancing?.internalValue;
        }
        if (this._networkPolicyConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkPolicyConfig = this._networkPolicyConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudrunConfig.internalValue = undefined;
            this._dnsCacheConfig.internalValue = undefined;
            this._gcePersistentDiskCsiDriverConfig.internalValue = undefined;
            this._gcpFilestoreCsiDriverConfig.internalValue = undefined;
            this._horizontalPodAutoscaling.internalValue = undefined;
            this._httpLoadBalancing.internalValue = undefined;
            this._networkPolicyConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudrunConfig.internalValue = value.cloudrunConfig;
            this._dnsCacheConfig.internalValue = value.dnsCacheConfig;
            this._gcePersistentDiskCsiDriverConfig.internalValue = value.gcePersistentDiskCsiDriverConfig;
            this._gcpFilestoreCsiDriverConfig.internalValue = value.gcpFilestoreCsiDriverConfig;
            this._horizontalPodAutoscaling.internalValue = value.horizontalPodAutoscaling;
            this._httpLoadBalancing.internalValue = value.httpLoadBalancing;
            this._networkPolicyConfig.internalValue = value.networkPolicyConfig;
        }
    }
    get cloudrunConfig() {
        return this._cloudrunConfig;
    }
    putCloudrunConfig(value) {
        this._cloudrunConfig.internalValue = value;
    }
    resetCloudrunConfig() {
        this._cloudrunConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudrunConfigInput() {
        return this._cloudrunConfig.internalValue;
    }
    get dnsCacheConfig() {
        return this._dnsCacheConfig;
    }
    putDnsCacheConfig(value) {
        this._dnsCacheConfig.internalValue = value;
    }
    resetDnsCacheConfig() {
        this._dnsCacheConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsCacheConfigInput() {
        return this._dnsCacheConfig.internalValue;
    }
    get gcePersistentDiskCsiDriverConfig() {
        return this._gcePersistentDiskCsiDriverConfig;
    }
    putGcePersistentDiskCsiDriverConfig(value) {
        this._gcePersistentDiskCsiDriverConfig.internalValue = value;
    }
    resetGcePersistentDiskCsiDriverConfig() {
        this._gcePersistentDiskCsiDriverConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcePersistentDiskCsiDriverConfigInput() {
        return this._gcePersistentDiskCsiDriverConfig.internalValue;
    }
    get gcpFilestoreCsiDriverConfig() {
        return this._gcpFilestoreCsiDriverConfig;
    }
    putGcpFilestoreCsiDriverConfig(value) {
        this._gcpFilestoreCsiDriverConfig.internalValue = value;
    }
    resetGcpFilestoreCsiDriverConfig() {
        this._gcpFilestoreCsiDriverConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcpFilestoreCsiDriverConfigInput() {
        return this._gcpFilestoreCsiDriverConfig.internalValue;
    }
    get horizontalPodAutoscaling() {
        return this._horizontalPodAutoscaling;
    }
    putHorizontalPodAutoscaling(value) {
        this._horizontalPodAutoscaling.internalValue = value;
    }
    resetHorizontalPodAutoscaling() {
        this._horizontalPodAutoscaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get horizontalPodAutoscalingInput() {
        return this._horizontalPodAutoscaling.internalValue;
    }
    get httpLoadBalancing() {
        return this._httpLoadBalancing;
    }
    putHttpLoadBalancing(value) {
        this._httpLoadBalancing.internalValue = value;
    }
    resetHttpLoadBalancing() {
        this._httpLoadBalancing.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpLoadBalancingInput() {
        return this._httpLoadBalancing.internalValue;
    }
    get networkPolicyConfig() {
        return this._networkPolicyConfig;
    }
    putNetworkPolicyConfig(value) {
        this._networkPolicyConfig.internalValue = value;
    }
    resetNetworkPolicyConfig() {
        this._networkPolicyConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkPolicyConfigInput() {
        return this._networkPolicyConfig.internalValue;
    }
}
exports.ContainerClusterAddonsConfigOutputReference = ContainerClusterAddonsConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
ContainerClusterAddonsConfigOutputReference[_h] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterAddonsConfigOutputReference", version: "4.0.3" };
function containerClusterAuthenticatorGroupsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        security_group: cdktf.stringToTerraform(struct.securityGroup),
    };
}
exports.containerClusterAuthenticatorGroupsConfigToTerraform = containerClusterAuthenticatorGroupsConfigToTerraform;
class ContainerClusterAuthenticatorGroupsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._securityGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroup = this._securityGroup;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._securityGroup = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._securityGroup = value.securityGroup;
        }
    }
    get securityGroup() {
        return this.getStringAttribute('security_group');
    }
    set securityGroup(value) {
        this._securityGroup = value;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupInput() {
        return this._securityGroup;
    }
}
exports.ContainerClusterAuthenticatorGroupsConfigOutputReference = ContainerClusterAuthenticatorGroupsConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ContainerClusterAuthenticatorGroupsConfigOutputReference[_j] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterAuthenticatorGroupsConfigOutputReference", version: "4.0.3" };
function containerClusterBinaryAuthorizationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        evaluation_mode: cdktf.stringToTerraform(struct.evaluationMode),
    };
}
exports.containerClusterBinaryAuthorizationToTerraform = containerClusterBinaryAuthorizationToTerraform;
class ContainerClusterBinaryAuthorizationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._evaluationMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.evaluationMode = this._evaluationMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._evaluationMode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._evaluationMode = value.evaluationMode;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get evaluationMode() {
        return this.getStringAttribute('evaluation_mode');
    }
    set evaluationMode(value) {
        this._evaluationMode = value;
    }
    resetEvaluationMode() {
        this._evaluationMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get evaluationModeInput() {
        return this._evaluationMode;
    }
}
exports.ContainerClusterBinaryAuthorizationOutputReference = ContainerClusterBinaryAuthorizationOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ContainerClusterBinaryAuthorizationOutputReference[_k] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterBinaryAuthorizationOutputReference", version: "4.0.3" };
function containerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.containerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsToTerraform = containerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsToTerraform;
class ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // auto_upgrade_start_time - computed: true, optional: false, required: false
    get autoUpgradeStartTime() {
        return this.getStringAttribute('auto_upgrade_start_time');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
}
exports.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsOutputReference = ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsOutputReference[_l] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsOutputReference", version: "4.0.3" };
class ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsList = ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsList;
_m = JSII_RTTI_SYMBOL_1;
ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsList[_m] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsList", version: "4.0.3" };
function containerClusterClusterAutoscalingAutoProvisioningDefaultsManagementToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_repair: cdktf.booleanToTerraform(struct.autoRepair),
        auto_upgrade: cdktf.booleanToTerraform(struct.autoUpgrade),
    };
}
exports.containerClusterClusterAutoscalingAutoProvisioningDefaultsManagementToTerraform = containerClusterClusterAutoscalingAutoProvisioningDefaultsManagementToTerraform;
class ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // upgrade_options - computed: true, optional: false, required: false
        this._upgradeOptions = new ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementUpgradeOptionsList(this, "upgrade_options", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoRepair !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoRepair = this._autoRepair;
        }
        if (this._autoUpgrade !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoUpgrade = this._autoUpgrade;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoRepair = undefined;
            this._autoUpgrade = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoRepair = value.autoRepair;
            this._autoUpgrade = value.autoUpgrade;
        }
    }
    get autoRepair() {
        return this.getBooleanAttribute('auto_repair');
    }
    set autoRepair(value) {
        this._autoRepair = value;
    }
    resetAutoRepair() {
        this._autoRepair = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoRepairInput() {
        return this._autoRepair;
    }
    get autoUpgrade() {
        return this.getBooleanAttribute('auto_upgrade');
    }
    set autoUpgrade(value) {
        this._autoUpgrade = value;
    }
    resetAutoUpgrade() {
        this._autoUpgrade = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoUpgradeInput() {
        return this._autoUpgrade;
    }
    get upgradeOptions() {
        return this._upgradeOptions;
    }
}
exports.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementOutputReference = ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementOutputReference[_o] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementOutputReference", version: "4.0.3" };
function containerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_integrity_monitoring: cdktf.booleanToTerraform(struct.enableIntegrityMonitoring),
        enable_secure_boot: cdktf.booleanToTerraform(struct.enableSecureBoot),
    };
}
exports.containerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigToTerraform = containerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigToTerraform;
class ContainerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableIntegrityMonitoring !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableIntegrityMonitoring = this._enableIntegrityMonitoring;
        }
        if (this._enableSecureBoot !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableSecureBoot = this._enableSecureBoot;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableIntegrityMonitoring = undefined;
            this._enableSecureBoot = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableIntegrityMonitoring = value.enableIntegrityMonitoring;
            this._enableSecureBoot = value.enableSecureBoot;
        }
    }
    get enableIntegrityMonitoring() {
        return this.getBooleanAttribute('enable_integrity_monitoring');
    }
    set enableIntegrityMonitoring(value) {
        this._enableIntegrityMonitoring = value;
    }
    resetEnableIntegrityMonitoring() {
        this._enableIntegrityMonitoring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIntegrityMonitoringInput() {
        return this._enableIntegrityMonitoring;
    }
    get enableSecureBoot() {
        return this.getBooleanAttribute('enable_secure_boot');
    }
    set enableSecureBoot(value) {
        this._enableSecureBoot = value;
    }
    resetEnableSecureBoot() {
        this._enableSecureBoot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableSecureBootInput() {
        return this._enableSecureBoot;
    }
}
exports.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigOutputReference = ContainerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
ContainerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigOutputReference[_p] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigOutputReference", version: "4.0.3" };
function containerClusterClusterAutoscalingAutoProvisioningDefaultsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_kms_key: cdktf.stringToTerraform(struct.bootDiskKmsKey),
        disk_size: cdktf.numberToTerraform(struct.diskSize),
        disk_type: cdktf.stringToTerraform(struct.diskType),
        image_type: cdktf.stringToTerraform(struct.imageType),
        oauth_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.oauthScopes),
        service_account: cdktf.stringToTerraform(struct.serviceAccount),
        management: containerClusterClusterAutoscalingAutoProvisioningDefaultsManagementToTerraform(struct.management),
        shielded_instance_config: containerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigToTerraform(struct.shieldedInstanceConfig),
    };
}
exports.containerClusterClusterAutoscalingAutoProvisioningDefaultsToTerraform = containerClusterClusterAutoscalingAutoProvisioningDefaultsToTerraform;
class ContainerClusterClusterAutoscalingAutoProvisioningDefaultsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // management - computed: false, optional: true, required: false
        this._management = new ContainerClusterClusterAutoscalingAutoProvisioningDefaultsManagementOutputReference(this, "management");
        // shielded_instance_config - computed: false, optional: true, required: false
        this._shieldedInstanceConfig = new ContainerClusterClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfigOutputReference(this, "shielded_instance_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskKmsKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskKmsKey = this._bootDiskKmsKey;
        }
        if (this._diskSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskSize = this._diskSize;
        }
        if (this._diskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskType = this._diskType;
        }
        if (this._imageType !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageType = this._imageType;
        }
        if (this._oauthScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthScopes = this._oauthScopes;
        }
        if (this._serviceAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccount = this._serviceAccount;
        }
        if (this._management?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.management = this._management?.internalValue;
        }
        if (this._shieldedInstanceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.shieldedInstanceConfig = this._shieldedInstanceConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskKmsKey = undefined;
            this._diskSize = undefined;
            this._diskType = undefined;
            this._imageType = undefined;
            this._oauthScopes = undefined;
            this._serviceAccount = undefined;
            this._management.internalValue = undefined;
            this._shieldedInstanceConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskKmsKey = value.bootDiskKmsKey;
            this._diskSize = value.diskSize;
            this._diskType = value.diskType;
            this._imageType = value.imageType;
            this._oauthScopes = value.oauthScopes;
            this._serviceAccount = value.serviceAccount;
            this._management.internalValue = value.management;
            this._shieldedInstanceConfig.internalValue = value.shieldedInstanceConfig;
        }
    }
    get bootDiskKmsKey() {
        return this.getStringAttribute('boot_disk_kms_key');
    }
    set bootDiskKmsKey(value) {
        this._bootDiskKmsKey = value;
    }
    resetBootDiskKmsKey() {
        this._bootDiskKmsKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskKmsKeyInput() {
        return this._bootDiskKmsKey;
    }
    get diskSize() {
        return this.getNumberAttribute('disk_size');
    }
    set diskSize(value) {
        this._diskSize = value;
    }
    resetDiskSize() {
        this._diskSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskSizeInput() {
        return this._diskSize;
    }
    get diskType() {
        return this.getStringAttribute('disk_type');
    }
    set diskType(value) {
        this._diskType = value;
    }
    resetDiskType() {
        this._diskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskTypeInput() {
        return this._diskType;
    }
    get imageType() {
        return this.getStringAttribute('image_type');
    }
    set imageType(value) {
        this._imageType = value;
    }
    resetImageType() {
        this._imageType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageTypeInput() {
        return this._imageType;
    }
    get oauthScopes() {
        return this.getListAttribute('oauth_scopes');
    }
    set oauthScopes(value) {
        this._oauthScopes = value;
    }
    resetOauthScopes() {
        this._oauthScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthScopesInput() {
        return this._oauthScopes;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get management() {
        return this._management;
    }
    putManagement(value) {
        this._management.internalValue = value;
    }
    resetManagement() {
        this._management.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get managementInput() {
        return this._management.internalValue;
    }
    get shieldedInstanceConfig() {
        return this._shieldedInstanceConfig;
    }
    putShieldedInstanceConfig(value) {
        this._shieldedInstanceConfig.internalValue = value;
    }
    resetShieldedInstanceConfig() {
        this._shieldedInstanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shieldedInstanceConfigInput() {
        return this._shieldedInstanceConfig.internalValue;
    }
}
exports.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsOutputReference = ContainerClusterClusterAutoscalingAutoProvisioningDefaultsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ContainerClusterClusterAutoscalingAutoProvisioningDefaultsOutputReference[_q] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterClusterAutoscalingAutoProvisioningDefaultsOutputReference", version: "4.0.3" };
function containerClusterClusterAutoscalingResourceLimitsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        maximum: cdktf.numberToTerraform(struct.maximum),
        minimum: cdktf.numberToTerraform(struct.minimum),
        resource_type: cdktf.stringToTerraform(struct.resourceType),
    };
}
exports.containerClusterClusterAutoscalingResourceLimitsToTerraform = containerClusterClusterAutoscalingResourceLimitsToTerraform;
class ContainerClusterClusterAutoscalingResourceLimitsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maximum !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximum = this._maximum;
        }
        if (this._minimum !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimum = this._minimum;
        }
        if (this._resourceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceType = this._resourceType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._maximum = undefined;
            this._minimum = undefined;
            this._resourceType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._maximum = value.maximum;
            this._minimum = value.minimum;
            this._resourceType = value.resourceType;
        }
    }
    get maximum() {
        return this.getNumberAttribute('maximum');
    }
    set maximum(value) {
        this._maximum = value;
    }
    resetMaximum() {
        this._maximum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maximumInput() {
        return this._maximum;
    }
    get minimum() {
        return this.getNumberAttribute('minimum');
    }
    set minimum(value) {
        this._minimum = value;
    }
    resetMinimum() {
        this._minimum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimumInput() {
        return this._minimum;
    }
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
    set resourceType(value) {
        this._resourceType = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeInput() {
        return this._resourceType;
    }
}
exports.ContainerClusterClusterAutoscalingResourceLimitsOutputReference = ContainerClusterClusterAutoscalingResourceLimitsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ContainerClusterClusterAutoscalingResourceLimitsOutputReference[_r] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterClusterAutoscalingResourceLimitsOutputReference", version: "4.0.3" };
class ContainerClusterClusterAutoscalingResourceLimitsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterClusterAutoscalingResourceLimitsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterClusterAutoscalingResourceLimitsList = ContainerClusterClusterAutoscalingResourceLimitsList;
_s = JSII_RTTI_SYMBOL_1;
ContainerClusterClusterAutoscalingResourceLimitsList[_s] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterClusterAutoscalingResourceLimitsList", version: "4.0.3" };
function containerClusterClusterAutoscalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        auto_provisioning_defaults: containerClusterClusterAutoscalingAutoProvisioningDefaultsToTerraform(struct.autoProvisioningDefaults),
        resource_limits: cdktf.listMapper(containerClusterClusterAutoscalingResourceLimitsToTerraform, true)(struct.resourceLimits),
    };
}
exports.containerClusterClusterAutoscalingToTerraform = containerClusterClusterAutoscalingToTerraform;
class ContainerClusterClusterAutoscalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // auto_provisioning_defaults - computed: false, optional: true, required: false
        this._autoProvisioningDefaults = new ContainerClusterClusterAutoscalingAutoProvisioningDefaultsOutputReference(this, "auto_provisioning_defaults");
        // resource_limits - computed: false, optional: true, required: false
        this._resourceLimits = new ContainerClusterClusterAutoscalingResourceLimitsList(this, "resource_limits", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._autoProvisioningDefaults?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoProvisioningDefaults = this._autoProvisioningDefaults?.internalValue;
        }
        if (this._resourceLimits?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceLimits = this._resourceLimits?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._autoProvisioningDefaults.internalValue = undefined;
            this._resourceLimits.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._autoProvisioningDefaults.internalValue = value.autoProvisioningDefaults;
            this._resourceLimits.internalValue = value.resourceLimits;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get autoProvisioningDefaults() {
        return this._autoProvisioningDefaults;
    }
    putAutoProvisioningDefaults(value) {
        this._autoProvisioningDefaults.internalValue = value;
    }
    resetAutoProvisioningDefaults() {
        this._autoProvisioningDefaults.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoProvisioningDefaultsInput() {
        return this._autoProvisioningDefaults.internalValue;
    }
    get resourceLimits() {
        return this._resourceLimits;
    }
    putResourceLimits(value) {
        this._resourceLimits.internalValue = value;
    }
    resetResourceLimits() {
        this._resourceLimits.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceLimitsInput() {
        return this._resourceLimits.internalValue;
    }
}
exports.ContainerClusterClusterAutoscalingOutputReference = ContainerClusterClusterAutoscalingOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ContainerClusterClusterAutoscalingOutputReference[_t] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterClusterAutoscalingOutputReference", version: "4.0.3" };
function containerClusterConfidentialNodesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterConfidentialNodesToTerraform = containerClusterConfidentialNodesToTerraform;
class ContainerClusterConfidentialNodesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterConfidentialNodesOutputReference = ContainerClusterConfidentialNodesOutputReference;
_u = JSII_RTTI_SYMBOL_1;
ContainerClusterConfidentialNodesOutputReference[_u] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterConfidentialNodesOutputReference", version: "4.0.3" };
function containerClusterCostManagementConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterCostManagementConfigToTerraform = containerClusterCostManagementConfigToTerraform;
class ContainerClusterCostManagementConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterCostManagementConfigOutputReference = ContainerClusterCostManagementConfigOutputReference;
_v = JSII_RTTI_SYMBOL_1;
ContainerClusterCostManagementConfigOutputReference[_v] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterCostManagementConfigOutputReference", version: "4.0.3" };
function containerClusterDatabaseEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key_name: cdktf.stringToTerraform(struct.keyName),
        state: cdktf.stringToTerraform(struct.state),
    };
}
exports.containerClusterDatabaseEncryptionToTerraform = containerClusterDatabaseEncryptionToTerraform;
class ContainerClusterDatabaseEncryptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._keyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyName = this._keyName;
        }
        if (this._state !== undefined) {
            hasAnyValues = true;
            internalValueResult.state = this._state;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._keyName = undefined;
            this._state = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._keyName = value.keyName;
            this._state = value.state;
        }
    }
    get keyName() {
        return this.getStringAttribute('key_name');
    }
    set keyName(value) {
        this._keyName = value;
    }
    resetKeyName() {
        this._keyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyNameInput() {
        return this._keyName;
    }
    get state() {
        return this.getStringAttribute('state');
    }
    set state(value) {
        this._state = value;
    }
    // Temporarily expose input value. Use with caution.
    get stateInput() {
        return this._state;
    }
}
exports.ContainerClusterDatabaseEncryptionOutputReference = ContainerClusterDatabaseEncryptionOutputReference;
_w = JSII_RTTI_SYMBOL_1;
ContainerClusterDatabaseEncryptionOutputReference[_w] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterDatabaseEncryptionOutputReference", version: "4.0.3" };
function containerClusterDefaultSnatStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled: cdktf.booleanToTerraform(struct.disabled),
    };
}
exports.containerClusterDefaultSnatStatusToTerraform = containerClusterDefaultSnatStatusToTerraform;
class ContainerClusterDefaultSnatStatusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabled = value.disabled;
        }
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
}
exports.ContainerClusterDefaultSnatStatusOutputReference = ContainerClusterDefaultSnatStatusOutputReference;
_x = JSII_RTTI_SYMBOL_1;
ContainerClusterDefaultSnatStatusOutputReference[_x] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterDefaultSnatStatusOutputReference", version: "4.0.3" };
function containerClusterDnsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_dns: cdktf.stringToTerraform(struct.clusterDns),
        cluster_dns_domain: cdktf.stringToTerraform(struct.clusterDnsDomain),
        cluster_dns_scope: cdktf.stringToTerraform(struct.clusterDnsScope),
    };
}
exports.containerClusterDnsConfigToTerraform = containerClusterDnsConfigToTerraform;
class ContainerClusterDnsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterDns !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterDns = this._clusterDns;
        }
        if (this._clusterDnsDomain !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterDnsDomain = this._clusterDnsDomain;
        }
        if (this._clusterDnsScope !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterDnsScope = this._clusterDnsScope;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterDns = undefined;
            this._clusterDnsDomain = undefined;
            this._clusterDnsScope = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterDns = value.clusterDns;
            this._clusterDnsDomain = value.clusterDnsDomain;
            this._clusterDnsScope = value.clusterDnsScope;
        }
    }
    get clusterDns() {
        return this.getStringAttribute('cluster_dns');
    }
    set clusterDns(value) {
        this._clusterDns = value;
    }
    resetClusterDns() {
        this._clusterDns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterDnsInput() {
        return this._clusterDns;
    }
    get clusterDnsDomain() {
        return this.getStringAttribute('cluster_dns_domain');
    }
    set clusterDnsDomain(value) {
        this._clusterDnsDomain = value;
    }
    resetClusterDnsDomain() {
        this._clusterDnsDomain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterDnsDomainInput() {
        return this._clusterDnsDomain;
    }
    get clusterDnsScope() {
        return this.getStringAttribute('cluster_dns_scope');
    }
    set clusterDnsScope(value) {
        this._clusterDnsScope = value;
    }
    resetClusterDnsScope() {
        this._clusterDnsScope = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterDnsScopeInput() {
        return this._clusterDnsScope;
    }
}
exports.ContainerClusterDnsConfigOutputReference = ContainerClusterDnsConfigOutputReference;
_y = JSII_RTTI_SYMBOL_1;
ContainerClusterDnsConfigOutputReference[_y] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterDnsConfigOutputReference", version: "4.0.3" };
function containerClusterIpAllocationPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_ipv4_cidr_block: cdktf.stringToTerraform(struct.clusterIpv4CidrBlock),
        cluster_secondary_range_name: cdktf.stringToTerraform(struct.clusterSecondaryRangeName),
        services_ipv4_cidr_block: cdktf.stringToTerraform(struct.servicesIpv4CidrBlock),
        services_secondary_range_name: cdktf.stringToTerraform(struct.servicesSecondaryRangeName),
    };
}
exports.containerClusterIpAllocationPolicyToTerraform = containerClusterIpAllocationPolicyToTerraform;
class ContainerClusterIpAllocationPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterIpv4CidrBlock = this._clusterIpv4CidrBlock;
        }
        if (this._clusterSecondaryRangeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterSecondaryRangeName = this._clusterSecondaryRangeName;
        }
        if (this._servicesIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.servicesIpv4CidrBlock = this._servicesIpv4CidrBlock;
        }
        if (this._servicesSecondaryRangeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.servicesSecondaryRangeName = this._servicesSecondaryRangeName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterIpv4CidrBlock = undefined;
            this._clusterSecondaryRangeName = undefined;
            this._servicesIpv4CidrBlock = undefined;
            this._servicesSecondaryRangeName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterIpv4CidrBlock = value.clusterIpv4CidrBlock;
            this._clusterSecondaryRangeName = value.clusterSecondaryRangeName;
            this._servicesIpv4CidrBlock = value.servicesIpv4CidrBlock;
            this._servicesSecondaryRangeName = value.servicesSecondaryRangeName;
        }
    }
    get clusterIpv4CidrBlock() {
        return this.getStringAttribute('cluster_ipv4_cidr_block');
    }
    set clusterIpv4CidrBlock(value) {
        this._clusterIpv4CidrBlock = value;
    }
    resetClusterIpv4CidrBlock() {
        this._clusterIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIpv4CidrBlockInput() {
        return this._clusterIpv4CidrBlock;
    }
    get clusterSecondaryRangeName() {
        return this.getStringAttribute('cluster_secondary_range_name');
    }
    set clusterSecondaryRangeName(value) {
        this._clusterSecondaryRangeName = value;
    }
    resetClusterSecondaryRangeName() {
        this._clusterSecondaryRangeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterSecondaryRangeNameInput() {
        return this._clusterSecondaryRangeName;
    }
    get servicesIpv4CidrBlock() {
        return this.getStringAttribute('services_ipv4_cidr_block');
    }
    set servicesIpv4CidrBlock(value) {
        this._servicesIpv4CidrBlock = value;
    }
    resetServicesIpv4CidrBlock() {
        this._servicesIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get servicesIpv4CidrBlockInput() {
        return this._servicesIpv4CidrBlock;
    }
    get servicesSecondaryRangeName() {
        return this.getStringAttribute('services_secondary_range_name');
    }
    set servicesSecondaryRangeName(value) {
        this._servicesSecondaryRangeName = value;
    }
    resetServicesSecondaryRangeName() {
        this._servicesSecondaryRangeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get servicesSecondaryRangeNameInput() {
        return this._servicesSecondaryRangeName;
    }
}
exports.ContainerClusterIpAllocationPolicyOutputReference = ContainerClusterIpAllocationPolicyOutputReference;
_z = JSII_RTTI_SYMBOL_1;
ContainerClusterIpAllocationPolicyOutputReference[_z] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterIpAllocationPolicyOutputReference", version: "4.0.3" };
function containerClusterLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_components: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.enableComponents),
    };
}
exports.containerClusterLoggingConfigToTerraform = containerClusterLoggingConfigToTerraform;
class ContainerClusterLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableComponents !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableComponents = this._enableComponents;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableComponents = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableComponents = value.enableComponents;
        }
    }
    get enableComponents() {
        return this.getListAttribute('enable_components');
    }
    set enableComponents(value) {
        this._enableComponents = value;
    }
    // Temporarily expose input value. Use with caution.
    get enableComponentsInput() {
        return this._enableComponents;
    }
}
exports.ContainerClusterLoggingConfigOutputReference = ContainerClusterLoggingConfigOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
ContainerClusterLoggingConfigOutputReference[_0] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterLoggingConfigOutputReference", version: "4.0.3" };
function containerClusterMaintenancePolicyDailyMaintenanceWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        start_time: cdktf.stringToTerraform(struct.startTime),
    };
}
exports.containerClusterMaintenancePolicyDailyMaintenanceWindowToTerraform = containerClusterMaintenancePolicyDailyMaintenanceWindowToTerraform;
class ContainerClusterMaintenancePolicyDailyMaintenanceWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._startTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._startTime = value.startTime;
        }
    }
    // duration - computed: true, optional: false, required: false
    get duration() {
        return this.getStringAttribute('duration');
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
}
exports.ContainerClusterMaintenancePolicyDailyMaintenanceWindowOutputReference = ContainerClusterMaintenancePolicyDailyMaintenanceWindowOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
ContainerClusterMaintenancePolicyDailyMaintenanceWindowOutputReference[_1] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMaintenancePolicyDailyMaintenanceWindowOutputReference", version: "4.0.3" };
function containerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        scope: cdktf.stringToTerraform(struct.scope),
    };
}
exports.containerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsToTerraform = containerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsToTerraform;
class ContainerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._scope !== undefined) {
            hasAnyValues = true;
            internalValueResult.scope = this._scope;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._scope = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._scope = value.scope;
        }
    }
    get scope() {
        return this.getStringAttribute('scope');
    }
    set scope(value) {
        this._scope = value;
    }
    // Temporarily expose input value. Use with caution.
    get scopeInput() {
        return this._scope;
    }
}
exports.ContainerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsOutputReference = ContainerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
ContainerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsOutputReference[_2] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsOutputReference", version: "4.0.3" };
function containerClusterMaintenancePolicyMaintenanceExclusionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        end_time: cdktf.stringToTerraform(struct.endTime),
        exclusion_name: cdktf.stringToTerraform(struct.exclusionName),
        start_time: cdktf.stringToTerraform(struct.startTime),
        exclusion_options: containerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsToTerraform(struct.exclusionOptions),
    };
}
exports.containerClusterMaintenancePolicyMaintenanceExclusionToTerraform = containerClusterMaintenancePolicyMaintenanceExclusionToTerraform;
class ContainerClusterMaintenancePolicyMaintenanceExclusionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // exclusion_options - computed: false, optional: true, required: false
        this._exclusionOptions = new ContainerClusterMaintenancePolicyMaintenanceExclusionExclusionOptionsOutputReference(this, "exclusion_options");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.endTime = this._endTime;
        }
        if (this._exclusionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusionName = this._exclusionName;
        }
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        if (this._exclusionOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusionOptions = this._exclusionOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._endTime = undefined;
            this._exclusionName = undefined;
            this._startTime = undefined;
            this._exclusionOptions.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._endTime = value.endTime;
            this._exclusionName = value.exclusionName;
            this._startTime = value.startTime;
            this._exclusionOptions.internalValue = value.exclusionOptions;
        }
    }
    get endTime() {
        return this.getStringAttribute('end_time');
    }
    set endTime(value) {
        this._endTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get endTimeInput() {
        return this._endTime;
    }
    get exclusionName() {
        return this.getStringAttribute('exclusion_name');
    }
    set exclusionName(value) {
        this._exclusionName = value;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionNameInput() {
        return this._exclusionName;
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
    get exclusionOptions() {
        return this._exclusionOptions;
    }
    putExclusionOptions(value) {
        this._exclusionOptions.internalValue = value;
    }
    resetExclusionOptions() {
        this._exclusionOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionOptionsInput() {
        return this._exclusionOptions.internalValue;
    }
}
exports.ContainerClusterMaintenancePolicyMaintenanceExclusionOutputReference = ContainerClusterMaintenancePolicyMaintenanceExclusionOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
ContainerClusterMaintenancePolicyMaintenanceExclusionOutputReference[_3] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMaintenancePolicyMaintenanceExclusionOutputReference", version: "4.0.3" };
class ContainerClusterMaintenancePolicyMaintenanceExclusionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterMaintenancePolicyMaintenanceExclusionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterMaintenancePolicyMaintenanceExclusionList = ContainerClusterMaintenancePolicyMaintenanceExclusionList;
_4 = JSII_RTTI_SYMBOL_1;
ContainerClusterMaintenancePolicyMaintenanceExclusionList[_4] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMaintenancePolicyMaintenanceExclusionList", version: "4.0.3" };
function containerClusterMaintenancePolicyRecurringWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        end_time: cdktf.stringToTerraform(struct.endTime),
        recurrence: cdktf.stringToTerraform(struct.recurrence),
        start_time: cdktf.stringToTerraform(struct.startTime),
    };
}
exports.containerClusterMaintenancePolicyRecurringWindowToTerraform = containerClusterMaintenancePolicyRecurringWindowToTerraform;
class ContainerClusterMaintenancePolicyRecurringWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.endTime = this._endTime;
        }
        if (this._recurrence !== undefined) {
            hasAnyValues = true;
            internalValueResult.recurrence = this._recurrence;
        }
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._endTime = undefined;
            this._recurrence = undefined;
            this._startTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._endTime = value.endTime;
            this._recurrence = value.recurrence;
            this._startTime = value.startTime;
        }
    }
    get endTime() {
        return this.getStringAttribute('end_time');
    }
    set endTime(value) {
        this._endTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get endTimeInput() {
        return this._endTime;
    }
    get recurrence() {
        return this.getStringAttribute('recurrence');
    }
    set recurrence(value) {
        this._recurrence = value;
    }
    // Temporarily expose input value. Use with caution.
    get recurrenceInput() {
        return this._recurrence;
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
}
exports.ContainerClusterMaintenancePolicyRecurringWindowOutputReference = ContainerClusterMaintenancePolicyRecurringWindowOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
ContainerClusterMaintenancePolicyRecurringWindowOutputReference[_5] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMaintenancePolicyRecurringWindowOutputReference", version: "4.0.3" };
function containerClusterMaintenancePolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        daily_maintenance_window: containerClusterMaintenancePolicyDailyMaintenanceWindowToTerraform(struct.dailyMaintenanceWindow),
        maintenance_exclusion: cdktf.listMapper(containerClusterMaintenancePolicyMaintenanceExclusionToTerraform, true)(struct.maintenanceExclusion),
        recurring_window: containerClusterMaintenancePolicyRecurringWindowToTerraform(struct.recurringWindow),
    };
}
exports.containerClusterMaintenancePolicyToTerraform = containerClusterMaintenancePolicyToTerraform;
class ContainerClusterMaintenancePolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // daily_maintenance_window - computed: false, optional: true, required: false
        this._dailyMaintenanceWindow = new ContainerClusterMaintenancePolicyDailyMaintenanceWindowOutputReference(this, "daily_maintenance_window");
        // maintenance_exclusion - computed: false, optional: true, required: false
        this._maintenanceExclusion = new ContainerClusterMaintenancePolicyMaintenanceExclusionList(this, "maintenance_exclusion", true);
        // recurring_window - computed: false, optional: true, required: false
        this._recurringWindow = new ContainerClusterMaintenancePolicyRecurringWindowOutputReference(this, "recurring_window");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dailyMaintenanceWindow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dailyMaintenanceWindow = this._dailyMaintenanceWindow?.internalValue;
        }
        if (this._maintenanceExclusion?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceExclusion = this._maintenanceExclusion?.internalValue;
        }
        if (this._recurringWindow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.recurringWindow = this._recurringWindow?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dailyMaintenanceWindow.internalValue = undefined;
            this._maintenanceExclusion.internalValue = undefined;
            this._recurringWindow.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dailyMaintenanceWindow.internalValue = value.dailyMaintenanceWindow;
            this._maintenanceExclusion.internalValue = value.maintenanceExclusion;
            this._recurringWindow.internalValue = value.recurringWindow;
        }
    }
    get dailyMaintenanceWindow() {
        return this._dailyMaintenanceWindow;
    }
    putDailyMaintenanceWindow(value) {
        this._dailyMaintenanceWindow.internalValue = value;
    }
    resetDailyMaintenanceWindow() {
        this._dailyMaintenanceWindow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dailyMaintenanceWindowInput() {
        return this._dailyMaintenanceWindow.internalValue;
    }
    get maintenanceExclusion() {
        return this._maintenanceExclusion;
    }
    putMaintenanceExclusion(value) {
        this._maintenanceExclusion.internalValue = value;
    }
    resetMaintenanceExclusion() {
        this._maintenanceExclusion.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceExclusionInput() {
        return this._maintenanceExclusion.internalValue;
    }
    get recurringWindow() {
        return this._recurringWindow;
    }
    putRecurringWindow(value) {
        this._recurringWindow.internalValue = value;
    }
    resetRecurringWindow() {
        this._recurringWindow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recurringWindowInput() {
        return this._recurringWindow.internalValue;
    }
}
exports.ContainerClusterMaintenancePolicyOutputReference = ContainerClusterMaintenancePolicyOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
ContainerClusterMaintenancePolicyOutputReference[_6] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMaintenancePolicyOutputReference", version: "4.0.3" };
function containerClusterMasterAuthClientCertificateConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        issue_client_certificate: cdktf.booleanToTerraform(struct.issueClientCertificate),
    };
}
exports.containerClusterMasterAuthClientCertificateConfigToTerraform = containerClusterMasterAuthClientCertificateConfigToTerraform;
class ContainerClusterMasterAuthClientCertificateConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._issueClientCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.issueClientCertificate = this._issueClientCertificate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._issueClientCertificate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._issueClientCertificate = value.issueClientCertificate;
        }
    }
    get issueClientCertificate() {
        return this.getBooleanAttribute('issue_client_certificate');
    }
    set issueClientCertificate(value) {
        this._issueClientCertificate = value;
    }
    // Temporarily expose input value. Use with caution.
    get issueClientCertificateInput() {
        return this._issueClientCertificate;
    }
}
exports.ContainerClusterMasterAuthClientCertificateConfigOutputReference = ContainerClusterMasterAuthClientCertificateConfigOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
ContainerClusterMasterAuthClientCertificateConfigOutputReference[_7] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMasterAuthClientCertificateConfigOutputReference", version: "4.0.3" };
function containerClusterMasterAuthToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_certificate_config: containerClusterMasterAuthClientCertificateConfigToTerraform(struct.clientCertificateConfig),
    };
}
exports.containerClusterMasterAuthToTerraform = containerClusterMasterAuthToTerraform;
class ContainerClusterMasterAuthOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // client_certificate_config - computed: false, optional: false, required: true
        this._clientCertificateConfig = new ContainerClusterMasterAuthClientCertificateConfigOutputReference(this, "client_certificate_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientCertificateConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientCertificateConfig = this._clientCertificateConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientCertificateConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientCertificateConfig.internalValue = value.clientCertificateConfig;
        }
    }
    // client_certificate - computed: true, optional: false, required: false
    get clientCertificate() {
        return this.getStringAttribute('client_certificate');
    }
    // client_key - computed: true, optional: false, required: false
    get clientKey() {
        return this.getStringAttribute('client_key');
    }
    // cluster_ca_certificate - computed: true, optional: false, required: false
    get clusterCaCertificate() {
        return this.getStringAttribute('cluster_ca_certificate');
    }
    get clientCertificateConfig() {
        return this._clientCertificateConfig;
    }
    putClientCertificateConfig(value) {
        this._clientCertificateConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertificateConfigInput() {
        return this._clientCertificateConfig.internalValue;
    }
}
exports.ContainerClusterMasterAuthOutputReference = ContainerClusterMasterAuthOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
ContainerClusterMasterAuthOutputReference[_8] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMasterAuthOutputReference", version: "4.0.3" };
function containerClusterMasterAuthorizedNetworksConfigCidrBlocksToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cidr_block: cdktf.stringToTerraform(struct.cidrBlock),
        display_name: cdktf.stringToTerraform(struct.displayName),
    };
}
exports.containerClusterMasterAuthorizedNetworksConfigCidrBlocksToTerraform = containerClusterMasterAuthorizedNetworksConfigCidrBlocksToTerraform;
class ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.cidrBlock = this._cidrBlock;
        }
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cidrBlock = undefined;
            this._displayName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cidrBlock = value.cidrBlock;
            this._displayName = value.displayName;
        }
    }
    get cidrBlock() {
        return this.getStringAttribute('cidr_block');
    }
    set cidrBlock(value) {
        this._cidrBlock = value;
    }
    // Temporarily expose input value. Use with caution.
    get cidrBlockInput() {
        return this._cidrBlock;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
}
exports.ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksOutputReference = ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksOutputReference[_9] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksOutputReference", version: "4.0.3" };
class ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksList = ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksList;
_10 = JSII_RTTI_SYMBOL_1;
ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksList[_10] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksList", version: "4.0.3" };
function containerClusterMasterAuthorizedNetworksConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gcp_public_cidrs_access_enabled: cdktf.booleanToTerraform(struct.gcpPublicCidrsAccessEnabled),
        cidr_blocks: cdktf.listMapper(containerClusterMasterAuthorizedNetworksConfigCidrBlocksToTerraform, true)(struct.cidrBlocks),
    };
}
exports.containerClusterMasterAuthorizedNetworksConfigToTerraform = containerClusterMasterAuthorizedNetworksConfigToTerraform;
class ContainerClusterMasterAuthorizedNetworksConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cidr_blocks - computed: false, optional: true, required: false
        this._cidrBlocks = new ContainerClusterMasterAuthorizedNetworksConfigCidrBlocksList(this, "cidr_blocks", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gcpPublicCidrsAccessEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcpPublicCidrsAccessEnabled = this._gcpPublicCidrsAccessEnabled;
        }
        if (this._cidrBlocks?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cidrBlocks = this._cidrBlocks?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gcpPublicCidrsAccessEnabled = undefined;
            this._cidrBlocks.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gcpPublicCidrsAccessEnabled = value.gcpPublicCidrsAccessEnabled;
            this._cidrBlocks.internalValue = value.cidrBlocks;
        }
    }
    get gcpPublicCidrsAccessEnabled() {
        return this.getBooleanAttribute('gcp_public_cidrs_access_enabled');
    }
    set gcpPublicCidrsAccessEnabled(value) {
        this._gcpPublicCidrsAccessEnabled = value;
    }
    resetGcpPublicCidrsAccessEnabled() {
        this._gcpPublicCidrsAccessEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcpPublicCidrsAccessEnabledInput() {
        return this._gcpPublicCidrsAccessEnabled;
    }
    get cidrBlocks() {
        return this._cidrBlocks;
    }
    putCidrBlocks(value) {
        this._cidrBlocks.internalValue = value;
    }
    resetCidrBlocks() {
        this._cidrBlocks.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cidrBlocksInput() {
        return this._cidrBlocks.internalValue;
    }
}
exports.ContainerClusterMasterAuthorizedNetworksConfigOutputReference = ContainerClusterMasterAuthorizedNetworksConfigOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
ContainerClusterMasterAuthorizedNetworksConfigOutputReference[_11] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMasterAuthorizedNetworksConfigOutputReference", version: "4.0.3" };
function containerClusterMeshCertificatesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_certificates: cdktf.booleanToTerraform(struct.enableCertificates),
    };
}
exports.containerClusterMeshCertificatesToTerraform = containerClusterMeshCertificatesToTerraform;
class ContainerClusterMeshCertificatesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableCertificates !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableCertificates = this._enableCertificates;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableCertificates = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableCertificates = value.enableCertificates;
        }
    }
    get enableCertificates() {
        return this.getBooleanAttribute('enable_certificates');
    }
    set enableCertificates(value) {
        this._enableCertificates = value;
    }
    // Temporarily expose input value. Use with caution.
    get enableCertificatesInput() {
        return this._enableCertificates;
    }
}
exports.ContainerClusterMeshCertificatesOutputReference = ContainerClusterMeshCertificatesOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
ContainerClusterMeshCertificatesOutputReference[_12] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMeshCertificatesOutputReference", version: "4.0.3" };
function containerClusterMonitoringConfigManagedPrometheusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterMonitoringConfigManagedPrometheusToTerraform = containerClusterMonitoringConfigManagedPrometheusToTerraform;
class ContainerClusterMonitoringConfigManagedPrometheusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterMonitoringConfigManagedPrometheusOutputReference = ContainerClusterMonitoringConfigManagedPrometheusOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
ContainerClusterMonitoringConfigManagedPrometheusOutputReference[_13] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMonitoringConfigManagedPrometheusOutputReference", version: "4.0.3" };
function containerClusterMonitoringConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_components: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.enableComponents),
        managed_prometheus: containerClusterMonitoringConfigManagedPrometheusToTerraform(struct.managedPrometheus),
    };
}
exports.containerClusterMonitoringConfigToTerraform = containerClusterMonitoringConfigToTerraform;
class ContainerClusterMonitoringConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // managed_prometheus - computed: false, optional: true, required: false
        this._managedPrometheus = new ContainerClusterMonitoringConfigManagedPrometheusOutputReference(this, "managed_prometheus");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableComponents !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableComponents = this._enableComponents;
        }
        if (this._managedPrometheus?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.managedPrometheus = this._managedPrometheus?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableComponents = undefined;
            this._managedPrometheus.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableComponents = value.enableComponents;
            this._managedPrometheus.internalValue = value.managedPrometheus;
        }
    }
    get enableComponents() {
        return this.getListAttribute('enable_components');
    }
    set enableComponents(value) {
        this._enableComponents = value;
    }
    // Temporarily expose input value. Use with caution.
    get enableComponentsInput() {
        return this._enableComponents;
    }
    get managedPrometheus() {
        return this._managedPrometheus;
    }
    putManagedPrometheus(value) {
        this._managedPrometheus.internalValue = value;
    }
    resetManagedPrometheus() {
        this._managedPrometheus.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get managedPrometheusInput() {
        return this._managedPrometheus.internalValue;
    }
}
exports.ContainerClusterMonitoringConfigOutputReference = ContainerClusterMonitoringConfigOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
ContainerClusterMonitoringConfigOutputReference[_14] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterMonitoringConfigOutputReference", version: "4.0.3" };
function containerClusterNetworkPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        provider: cdktf.stringToTerraform(struct.provider),
    };
}
exports.containerClusterNetworkPolicyToTerraform = containerClusterNetworkPolicyToTerraform;
class ContainerClusterNetworkPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._provider !== undefined) {
            hasAnyValues = true;
            internalValueResult.provider = this._provider;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._provider = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._provider = value.provider;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get provider() {
        return this.getStringAttribute('provider');
    }
    set provider(value) {
        this._provider = value;
    }
    resetProvider() {
        this._provider = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get providerInput() {
        return this._provider;
    }
}
exports.ContainerClusterNetworkPolicyOutputReference = ContainerClusterNetworkPolicyOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
ContainerClusterNetworkPolicyOutputReference[_15] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNetworkPolicyOutputReference", version: "4.0.3" };
function containerClusterNodeConfigGuestAcceleratorGpuSharingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gpu_sharing_strategy: cdktf.stringToTerraform(struct.gpuSharingStrategy),
        max_shared_clients_per_gpu: cdktf.numberToTerraform(struct.maxSharedClientsPerGpu),
    };
}
exports.containerClusterNodeConfigGuestAcceleratorGpuSharingConfigToTerraform = containerClusterNodeConfigGuestAcceleratorGpuSharingConfigToTerraform;
class ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gpuSharingStrategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.gpuSharingStrategy = this._gpuSharingStrategy;
        }
        if (this._maxSharedClientsPerGpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxSharedClientsPerGpu = this._maxSharedClientsPerGpu;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._gpuSharingStrategy = undefined;
            this._maxSharedClientsPerGpu = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._gpuSharingStrategy = value.gpuSharingStrategy;
            this._maxSharedClientsPerGpu = value.maxSharedClientsPerGpu;
        }
    }
    get gpuSharingStrategy() {
        return this.getStringAttribute('gpu_sharing_strategy');
    }
    set gpuSharingStrategy(value) {
        this._gpuSharingStrategy = value;
    }
    resetGpuSharingStrategy() {
        this._gpuSharingStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gpuSharingStrategyInput() {
        return this._gpuSharingStrategy;
    }
    get maxSharedClientsPerGpu() {
        return this.getNumberAttribute('max_shared_clients_per_gpu');
    }
    set maxSharedClientsPerGpu(value) {
        this._maxSharedClientsPerGpu = value;
    }
    resetMaxSharedClientsPerGpu() {
        this._maxSharedClientsPerGpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxSharedClientsPerGpuInput() {
        return this._maxSharedClientsPerGpu;
    }
}
exports.ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigOutputReference = ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigOutputReference[_16] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigOutputReference", version: "4.0.3" };
class ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigList = ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigList;
_17 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigList[_17] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigList", version: "4.0.3" };
function containerClusterNodeConfigGuestAcceleratorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        gpu_partition_size: cdktf.stringToTerraform(struct.gpuPartitionSize),
        gpu_sharing_config: cdktf.listMapper(containerClusterNodeConfigGuestAcceleratorGpuSharingConfigToTerraform, false)(struct.gpuSharingConfig),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.containerClusterNodeConfigGuestAcceleratorToTerraform = containerClusterNodeConfigGuestAcceleratorToTerraform;
class ContainerClusterNodeConfigGuestAcceleratorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // gpu_sharing_config - computed: true, optional: true, required: false
        this._gpuSharingConfig = new ContainerClusterNodeConfigGuestAcceleratorGpuSharingConfigList(this, "gpu_sharing_config", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._gpuPartitionSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.gpuPartitionSize = this._gpuPartitionSize;
        }
        if (this._gpuSharingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gpuSharingConfig = this._gpuSharingConfig?.internalValue;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._count = undefined;
            this._gpuPartitionSize = undefined;
            this._gpuSharingConfig.internalValue = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._count = value.count;
            this._gpuPartitionSize = value.gpuPartitionSize;
            this._gpuSharingConfig.internalValue = value.gpuSharingConfig;
            this._type = value.type;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get gpuPartitionSize() {
        return this.getStringAttribute('gpu_partition_size');
    }
    set gpuPartitionSize(value) {
        this._gpuPartitionSize = value;
    }
    resetGpuPartitionSize() {
        this._gpuPartitionSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gpuPartitionSizeInput() {
        return this._gpuPartitionSize;
    }
    get gpuSharingConfig() {
        return this._gpuSharingConfig;
    }
    putGpuSharingConfig(value) {
        this._gpuSharingConfig.internalValue = value;
    }
    resetGpuSharingConfig() {
        this._gpuSharingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gpuSharingConfigInput() {
        return this._gpuSharingConfig.internalValue;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.ContainerClusterNodeConfigGuestAcceleratorOutputReference = ContainerClusterNodeConfigGuestAcceleratorOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigGuestAcceleratorOutputReference[_18] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigGuestAcceleratorOutputReference", version: "4.0.3" };
class ContainerClusterNodeConfigGuestAcceleratorList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterNodeConfigGuestAcceleratorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterNodeConfigGuestAcceleratorList = ContainerClusterNodeConfigGuestAcceleratorList;
_19 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigGuestAcceleratorList[_19] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigGuestAcceleratorList", version: "4.0.3" };
function containerClusterNodeConfigTaintToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        effect: cdktf.stringToTerraform(struct.effect),
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.containerClusterNodeConfigTaintToTerraform = containerClusterNodeConfigTaintToTerraform;
class ContainerClusterNodeConfigTaintOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._effect !== undefined) {
            hasAnyValues = true;
            internalValueResult.effect = this._effect;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._effect = undefined;
            this._key = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._effect = value.effect;
            this._key = value.key;
            this._value = value.value;
        }
    }
    get effect() {
        return this.getStringAttribute('effect');
    }
    set effect(value) {
        this._effect = value;
    }
    resetEffect() {
        this._effect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get effectInput() {
        return this._effect;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.ContainerClusterNodeConfigTaintOutputReference = ContainerClusterNodeConfigTaintOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigTaintOutputReference[_20] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigTaintOutputReference", version: "4.0.3" };
class ContainerClusterNodeConfigTaintList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterNodeConfigTaintOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterNodeConfigTaintList = ContainerClusterNodeConfigTaintList;
_21 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigTaintList[_21] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigTaintList", version: "4.0.3" };
function containerClusterNodeConfigGcfsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterNodeConfigGcfsConfigToTerraform = containerClusterNodeConfigGcfsConfigToTerraform;
class ContainerClusterNodeConfigGcfsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterNodeConfigGcfsConfigOutputReference = ContainerClusterNodeConfigGcfsConfigOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigGcfsConfigOutputReference[_22] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigGcfsConfigOutputReference", version: "4.0.3" };
function containerClusterNodeConfigGvnicToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterNodeConfigGvnicToTerraform = containerClusterNodeConfigGvnicToTerraform;
class ContainerClusterNodeConfigGvnicOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterNodeConfigGvnicOutputReference = ContainerClusterNodeConfigGvnicOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigGvnicOutputReference[_23] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigGvnicOutputReference", version: "4.0.3" };
function containerClusterNodeConfigReservationAffinityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        consume_reservation_type: cdktf.stringToTerraform(struct.consumeReservationType),
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.containerClusterNodeConfigReservationAffinityToTerraform = containerClusterNodeConfigReservationAffinityToTerraform;
class ContainerClusterNodeConfigReservationAffinityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._consumeReservationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.consumeReservationType = this._consumeReservationType;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._consumeReservationType = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._consumeReservationType = value.consumeReservationType;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get consumeReservationType() {
        return this.getStringAttribute('consume_reservation_type');
    }
    set consumeReservationType(value) {
        this._consumeReservationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get consumeReservationTypeInput() {
        return this._consumeReservationType;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.ContainerClusterNodeConfigReservationAffinityOutputReference = ContainerClusterNodeConfigReservationAffinityOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigReservationAffinityOutputReference[_24] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigReservationAffinityOutputReference", version: "4.0.3" };
function containerClusterNodeConfigShieldedInstanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_integrity_monitoring: cdktf.booleanToTerraform(struct.enableIntegrityMonitoring),
        enable_secure_boot: cdktf.booleanToTerraform(struct.enableSecureBoot),
    };
}
exports.containerClusterNodeConfigShieldedInstanceConfigToTerraform = containerClusterNodeConfigShieldedInstanceConfigToTerraform;
class ContainerClusterNodeConfigShieldedInstanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableIntegrityMonitoring !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableIntegrityMonitoring = this._enableIntegrityMonitoring;
        }
        if (this._enableSecureBoot !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableSecureBoot = this._enableSecureBoot;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableIntegrityMonitoring = undefined;
            this._enableSecureBoot = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableIntegrityMonitoring = value.enableIntegrityMonitoring;
            this._enableSecureBoot = value.enableSecureBoot;
        }
    }
    get enableIntegrityMonitoring() {
        return this.getBooleanAttribute('enable_integrity_monitoring');
    }
    set enableIntegrityMonitoring(value) {
        this._enableIntegrityMonitoring = value;
    }
    resetEnableIntegrityMonitoring() {
        this._enableIntegrityMonitoring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIntegrityMonitoringInput() {
        return this._enableIntegrityMonitoring;
    }
    get enableSecureBoot() {
        return this.getBooleanAttribute('enable_secure_boot');
    }
    set enableSecureBoot(value) {
        this._enableSecureBoot = value;
    }
    resetEnableSecureBoot() {
        this._enableSecureBoot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableSecureBootInput() {
        return this._enableSecureBoot;
    }
}
exports.ContainerClusterNodeConfigShieldedInstanceConfigOutputReference = ContainerClusterNodeConfigShieldedInstanceConfigOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigShieldedInstanceConfigOutputReference[_25] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigShieldedInstanceConfigOutputReference", version: "4.0.3" };
function containerClusterNodeConfigWorkloadMetadataConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
    };
}
exports.containerClusterNodeConfigWorkloadMetadataConfigToTerraform = containerClusterNodeConfigWorkloadMetadataConfigToTerraform;
class ContainerClusterNodeConfigWorkloadMetadataConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mode = value.mode;
        }
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
}
exports.ContainerClusterNodeConfigWorkloadMetadataConfigOutputReference = ContainerClusterNodeConfigWorkloadMetadataConfigOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigWorkloadMetadataConfigOutputReference[_26] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigWorkloadMetadataConfigOutputReference", version: "4.0.3" };
function containerClusterNodeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_kms_key: cdktf.stringToTerraform(struct.bootDiskKmsKey),
        disk_size_gb: cdktf.numberToTerraform(struct.diskSizeGb),
        disk_type: cdktf.stringToTerraform(struct.diskType),
        guest_accelerator: cdktf.listMapper(containerClusterNodeConfigGuestAcceleratorToTerraform, false)(struct.guestAccelerator),
        image_type: cdktf.stringToTerraform(struct.imageType),
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        local_ssd_count: cdktf.numberToTerraform(struct.localSsdCount),
        logging_variant: cdktf.stringToTerraform(struct.loggingVariant),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        metadata: cdktf.hashMapper(cdktf.stringToTerraform)(struct.metadata),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        node_group: cdktf.stringToTerraform(struct.nodeGroup),
        oauth_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.oauthScopes),
        preemptible: cdktf.booleanToTerraform(struct.preemptible),
        resource_labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.resourceLabels),
        service_account: cdktf.stringToTerraform(struct.serviceAccount),
        spot: cdktf.booleanToTerraform(struct.spot),
        tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.tags),
        taint: cdktf.listMapper(containerClusterNodeConfigTaintToTerraform, false)(struct.taint),
        gcfs_config: containerClusterNodeConfigGcfsConfigToTerraform(struct.gcfsConfig),
        gvnic: containerClusterNodeConfigGvnicToTerraform(struct.gvnic),
        reservation_affinity: containerClusterNodeConfigReservationAffinityToTerraform(struct.reservationAffinity),
        shielded_instance_config: containerClusterNodeConfigShieldedInstanceConfigToTerraform(struct.shieldedInstanceConfig),
        workload_metadata_config: containerClusterNodeConfigWorkloadMetadataConfigToTerraform(struct.workloadMetadataConfig),
    };
}
exports.containerClusterNodeConfigToTerraform = containerClusterNodeConfigToTerraform;
class ContainerClusterNodeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // guest_accelerator - computed: true, optional: true, required: false
        this._guestAccelerator = new ContainerClusterNodeConfigGuestAcceleratorList(this, "guest_accelerator", false);
        // taint - computed: true, optional: true, required: false
        this._taint = new ContainerClusterNodeConfigTaintList(this, "taint", false);
        // gcfs_config - computed: false, optional: true, required: false
        this._gcfsConfig = new ContainerClusterNodeConfigGcfsConfigOutputReference(this, "gcfs_config");
        // gvnic - computed: false, optional: true, required: false
        this._gvnic = new ContainerClusterNodeConfigGvnicOutputReference(this, "gvnic");
        // reservation_affinity - computed: false, optional: true, required: false
        this._reservationAffinity = new ContainerClusterNodeConfigReservationAffinityOutputReference(this, "reservation_affinity");
        // shielded_instance_config - computed: false, optional: true, required: false
        this._shieldedInstanceConfig = new ContainerClusterNodeConfigShieldedInstanceConfigOutputReference(this, "shielded_instance_config");
        // workload_metadata_config - computed: false, optional: true, required: false
        this._workloadMetadataConfig = new ContainerClusterNodeConfigWorkloadMetadataConfigOutputReference(this, "workload_metadata_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskKmsKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskKmsKey = this._bootDiskKmsKey;
        }
        if (this._diskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskSizeGb = this._diskSizeGb;
        }
        if (this._diskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskType = this._diskType;
        }
        if (this._guestAccelerator?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.guestAccelerator = this._guestAccelerator?.internalValue;
        }
        if (this._imageType !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageType = this._imageType;
        }
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._localSsdCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.localSsdCount = this._localSsdCount;
        }
        if (this._loggingVariant !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingVariant = this._loggingVariant;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._nodeGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeGroup = this._nodeGroup;
        }
        if (this._oauthScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthScopes = this._oauthScopes;
        }
        if (this._preemptible !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptible = this._preemptible;
        }
        if (this._resourceLabels !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceLabels = this._resourceLabels;
        }
        if (this._serviceAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccount = this._serviceAccount;
        }
        if (this._spot !== undefined) {
            hasAnyValues = true;
            internalValueResult.spot = this._spot;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        if (this._taint?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.taint = this._taint?.internalValue;
        }
        if (this._gcfsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcfsConfig = this._gcfsConfig?.internalValue;
        }
        if (this._gvnic?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gvnic = this._gvnic?.internalValue;
        }
        if (this._reservationAffinity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.reservationAffinity = this._reservationAffinity?.internalValue;
        }
        if (this._shieldedInstanceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.shieldedInstanceConfig = this._shieldedInstanceConfig?.internalValue;
        }
        if (this._workloadMetadataConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.workloadMetadataConfig = this._workloadMetadataConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskKmsKey = undefined;
            this._diskSizeGb = undefined;
            this._diskType = undefined;
            this._guestAccelerator.internalValue = undefined;
            this._imageType = undefined;
            this._labels = undefined;
            this._localSsdCount = undefined;
            this._loggingVariant = undefined;
            this._machineType = undefined;
            this._metadata = undefined;
            this._minCpuPlatform = undefined;
            this._nodeGroup = undefined;
            this._oauthScopes = undefined;
            this._preemptible = undefined;
            this._resourceLabels = undefined;
            this._serviceAccount = undefined;
            this._spot = undefined;
            this._tags = undefined;
            this._taint.internalValue = undefined;
            this._gcfsConfig.internalValue = undefined;
            this._gvnic.internalValue = undefined;
            this._reservationAffinity.internalValue = undefined;
            this._shieldedInstanceConfig.internalValue = undefined;
            this._workloadMetadataConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskKmsKey = value.bootDiskKmsKey;
            this._diskSizeGb = value.diskSizeGb;
            this._diskType = value.diskType;
            this._guestAccelerator.internalValue = value.guestAccelerator;
            this._imageType = value.imageType;
            this._labels = value.labels;
            this._localSsdCount = value.localSsdCount;
            this._loggingVariant = value.loggingVariant;
            this._machineType = value.machineType;
            this._metadata = value.metadata;
            this._minCpuPlatform = value.minCpuPlatform;
            this._nodeGroup = value.nodeGroup;
            this._oauthScopes = value.oauthScopes;
            this._preemptible = value.preemptible;
            this._resourceLabels = value.resourceLabels;
            this._serviceAccount = value.serviceAccount;
            this._spot = value.spot;
            this._tags = value.tags;
            this._taint.internalValue = value.taint;
            this._gcfsConfig.internalValue = value.gcfsConfig;
            this._gvnic.internalValue = value.gvnic;
            this._reservationAffinity.internalValue = value.reservationAffinity;
            this._shieldedInstanceConfig.internalValue = value.shieldedInstanceConfig;
            this._workloadMetadataConfig.internalValue = value.workloadMetadataConfig;
        }
    }
    get bootDiskKmsKey() {
        return this.getStringAttribute('boot_disk_kms_key');
    }
    set bootDiskKmsKey(value) {
        this._bootDiskKmsKey = value;
    }
    resetBootDiskKmsKey() {
        this._bootDiskKmsKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskKmsKeyInput() {
        return this._bootDiskKmsKey;
    }
    get diskSizeGb() {
        return this.getNumberAttribute('disk_size_gb');
    }
    set diskSizeGb(value) {
        this._diskSizeGb = value;
    }
    resetDiskSizeGb() {
        this._diskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskSizeGbInput() {
        return this._diskSizeGb;
    }
    get diskType() {
        return this.getStringAttribute('disk_type');
    }
    set diskType(value) {
        this._diskType = value;
    }
    resetDiskType() {
        this._diskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskTypeInput() {
        return this._diskType;
    }
    get guestAccelerator() {
        return this._guestAccelerator;
    }
    putGuestAccelerator(value) {
        this._guestAccelerator.internalValue = value;
    }
    resetGuestAccelerator() {
        this._guestAccelerator.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get guestAcceleratorInput() {
        return this._guestAccelerator.internalValue;
    }
    get imageType() {
        return this.getStringAttribute('image_type');
    }
    set imageType(value) {
        this._imageType = value;
    }
    resetImageType() {
        this._imageType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageTypeInput() {
        return this._imageType;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get localSsdCount() {
        return this.getNumberAttribute('local_ssd_count');
    }
    set localSsdCount(value) {
        this._localSsdCount = value;
    }
    resetLocalSsdCount() {
        this._localSsdCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localSsdCountInput() {
        return this._localSsdCount;
    }
    get loggingVariant() {
        return this.getStringAttribute('logging_variant');
    }
    set loggingVariant(value) {
        this._loggingVariant = value;
    }
    resetLoggingVariant() {
        this._loggingVariant = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingVariantInput() {
        return this._loggingVariant;
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get metadata() {
        return this.getStringMapAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get nodeGroup() {
        return this.getStringAttribute('node_group');
    }
    set nodeGroup(value) {
        this._nodeGroup = value;
    }
    resetNodeGroup() {
        this._nodeGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeGroupInput() {
        return this._nodeGroup;
    }
    get oauthScopes() {
        return cdktf.Fn.tolist(this.getListAttribute('oauth_scopes'));
    }
    set oauthScopes(value) {
        this._oauthScopes = value;
    }
    resetOauthScopes() {
        this._oauthScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthScopesInput() {
        return this._oauthScopes;
    }
    get preemptible() {
        return this.getBooleanAttribute('preemptible');
    }
    set preemptible(value) {
        this._preemptible = value;
    }
    resetPreemptible() {
        this._preemptible = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibleInput() {
        return this._preemptible;
    }
    get resourceLabels() {
        return this.getStringMapAttribute('resource_labels');
    }
    set resourceLabels(value) {
        this._resourceLabels = value;
    }
    resetResourceLabels() {
        this._resourceLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceLabelsInput() {
        return this._resourceLabels;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get spot() {
        return this.getBooleanAttribute('spot');
    }
    set spot(value) {
        this._spot = value;
    }
    resetSpot() {
        this._spot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotInput() {
        return this._spot;
    }
    get tags() {
        return this.getListAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get taint() {
        return this._taint;
    }
    putTaint(value) {
        this._taint.internalValue = value;
    }
    resetTaint() {
        this._taint.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get taintInput() {
        return this._taint.internalValue;
    }
    get gcfsConfig() {
        return this._gcfsConfig;
    }
    putGcfsConfig(value) {
        this._gcfsConfig.internalValue = value;
    }
    resetGcfsConfig() {
        this._gcfsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcfsConfigInput() {
        return this._gcfsConfig.internalValue;
    }
    get gvnic() {
        return this._gvnic;
    }
    putGvnic(value) {
        this._gvnic.internalValue = value;
    }
    resetGvnic() {
        this._gvnic.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gvnicInput() {
        return this._gvnic.internalValue;
    }
    get reservationAffinity() {
        return this._reservationAffinity;
    }
    putReservationAffinity(value) {
        this._reservationAffinity.internalValue = value;
    }
    resetReservationAffinity() {
        this._reservationAffinity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reservationAffinityInput() {
        return this._reservationAffinity.internalValue;
    }
    get shieldedInstanceConfig() {
        return this._shieldedInstanceConfig;
    }
    putShieldedInstanceConfig(value) {
        this._shieldedInstanceConfig.internalValue = value;
    }
    resetShieldedInstanceConfig() {
        this._shieldedInstanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shieldedInstanceConfigInput() {
        return this._shieldedInstanceConfig.internalValue;
    }
    get workloadMetadataConfig() {
        return this._workloadMetadataConfig;
    }
    putWorkloadMetadataConfig(value) {
        this._workloadMetadataConfig.internalValue = value;
    }
    resetWorkloadMetadataConfig() {
        this._workloadMetadataConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workloadMetadataConfigInput() {
        return this._workloadMetadataConfig.internalValue;
    }
}
exports.ContainerClusterNodeConfigOutputReference = ContainerClusterNodeConfigOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodeConfigOutputReference[_27] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodeConfigOutputReference", version: "4.0.3" };
function containerClusterNodePoolAutoscalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        location_policy: cdktf.stringToTerraform(struct.locationPolicy),
        max_node_count: cdktf.numberToTerraform(struct.maxNodeCount),
        min_node_count: cdktf.numberToTerraform(struct.minNodeCount),
        total_max_node_count: cdktf.numberToTerraform(struct.totalMaxNodeCount),
        total_min_node_count: cdktf.numberToTerraform(struct.totalMinNodeCount),
    };
}
exports.containerClusterNodePoolAutoscalingToTerraform = containerClusterNodePoolAutoscalingToTerraform;
class ContainerClusterNodePoolAutoscalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._locationPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.locationPolicy = this._locationPolicy;
        }
        if (this._maxNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxNodeCount = this._maxNodeCount;
        }
        if (this._minNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.minNodeCount = this._minNodeCount;
        }
        if (this._totalMaxNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.totalMaxNodeCount = this._totalMaxNodeCount;
        }
        if (this._totalMinNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.totalMinNodeCount = this._totalMinNodeCount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._locationPolicy = undefined;
            this._maxNodeCount = undefined;
            this._minNodeCount = undefined;
            this._totalMaxNodeCount = undefined;
            this._totalMinNodeCount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._locationPolicy = value.locationPolicy;
            this._maxNodeCount = value.maxNodeCount;
            this._minNodeCount = value.minNodeCount;
            this._totalMaxNodeCount = value.totalMaxNodeCount;
            this._totalMinNodeCount = value.totalMinNodeCount;
        }
    }
    get locationPolicy() {
        return this.getStringAttribute('location_policy');
    }
    set locationPolicy(value) {
        this._locationPolicy = value;
    }
    resetLocationPolicy() {
        this._locationPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationPolicyInput() {
        return this._locationPolicy;
    }
    get maxNodeCount() {
        return this.getNumberAttribute('max_node_count');
    }
    set maxNodeCount(value) {
        this._maxNodeCount = value;
    }
    resetMaxNodeCount() {
        this._maxNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxNodeCountInput() {
        return this._maxNodeCount;
    }
    get minNodeCount() {
        return this.getNumberAttribute('min_node_count');
    }
    set minNodeCount(value) {
        this._minNodeCount = value;
    }
    resetMinNodeCount() {
        this._minNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minNodeCountInput() {
        return this._minNodeCount;
    }
    get totalMaxNodeCount() {
        return this.getNumberAttribute('total_max_node_count');
    }
    set totalMaxNodeCount(value) {
        this._totalMaxNodeCount = value;
    }
    resetTotalMaxNodeCount() {
        this._totalMaxNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get totalMaxNodeCountInput() {
        return this._totalMaxNodeCount;
    }
    get totalMinNodeCount() {
        return this.getNumberAttribute('total_min_node_count');
    }
    set totalMinNodeCount(value) {
        this._totalMinNodeCount = value;
    }
    resetTotalMinNodeCount() {
        this._totalMinNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get totalMinNodeCountInput() {
        return this._totalMinNodeCount;
    }
}
exports.ContainerClusterNodePoolAutoscalingOutputReference = ContainerClusterNodePoolAutoscalingOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolAutoscalingOutputReference[_28] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolAutoscalingOutputReference", version: "4.0.3" };
function containerClusterNodePoolManagementToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_repair: cdktf.booleanToTerraform(struct.autoRepair),
        auto_upgrade: cdktf.booleanToTerraform(struct.autoUpgrade),
    };
}
exports.containerClusterNodePoolManagementToTerraform = containerClusterNodePoolManagementToTerraform;
class ContainerClusterNodePoolManagementOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoRepair !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoRepair = this._autoRepair;
        }
        if (this._autoUpgrade !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoUpgrade = this._autoUpgrade;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoRepair = undefined;
            this._autoUpgrade = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoRepair = value.autoRepair;
            this._autoUpgrade = value.autoUpgrade;
        }
    }
    get autoRepair() {
        return this.getBooleanAttribute('auto_repair');
    }
    set autoRepair(value) {
        this._autoRepair = value;
    }
    resetAutoRepair() {
        this._autoRepair = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoRepairInput() {
        return this._autoRepair;
    }
    get autoUpgrade() {
        return this.getBooleanAttribute('auto_upgrade');
    }
    set autoUpgrade(value) {
        this._autoUpgrade = value;
    }
    resetAutoUpgrade() {
        this._autoUpgrade = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoUpgradeInput() {
        return this._autoUpgrade;
    }
}
exports.ContainerClusterNodePoolManagementOutputReference = ContainerClusterNodePoolManagementOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolManagementOutputReference[_29] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolManagementOutputReference", version: "4.0.3" };
function containerClusterNodePoolNetworkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create_pod_range: cdktf.booleanToTerraform(struct.createPodRange),
        enable_private_nodes: cdktf.booleanToTerraform(struct.enablePrivateNodes),
        pod_ipv4_cidr_block: cdktf.stringToTerraform(struct.podIpv4CidrBlock),
        pod_range: cdktf.stringToTerraform(struct.podRange),
    };
}
exports.containerClusterNodePoolNetworkConfigToTerraform = containerClusterNodePoolNetworkConfigToTerraform;
class ContainerClusterNodePoolNetworkConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._createPodRange !== undefined) {
            hasAnyValues = true;
            internalValueResult.createPodRange = this._createPodRange;
        }
        if (this._enablePrivateNodes !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivateNodes = this._enablePrivateNodes;
        }
        if (this._podIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.podIpv4CidrBlock = this._podIpv4CidrBlock;
        }
        if (this._podRange !== undefined) {
            hasAnyValues = true;
            internalValueResult.podRange = this._podRange;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._createPodRange = undefined;
            this._enablePrivateNodes = undefined;
            this._podIpv4CidrBlock = undefined;
            this._podRange = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._createPodRange = value.createPodRange;
            this._enablePrivateNodes = value.enablePrivateNodes;
            this._podIpv4CidrBlock = value.podIpv4CidrBlock;
            this._podRange = value.podRange;
        }
    }
    get createPodRange() {
        return this.getBooleanAttribute('create_pod_range');
    }
    set createPodRange(value) {
        this._createPodRange = value;
    }
    resetCreatePodRange() {
        this._createPodRange = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createPodRangeInput() {
        return this._createPodRange;
    }
    get enablePrivateNodes() {
        return this.getBooleanAttribute('enable_private_nodes');
    }
    set enablePrivateNodes(value) {
        this._enablePrivateNodes = value;
    }
    resetEnablePrivateNodes() {
        this._enablePrivateNodes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivateNodesInput() {
        return this._enablePrivateNodes;
    }
    get podIpv4CidrBlock() {
        return this.getStringAttribute('pod_ipv4_cidr_block');
    }
    set podIpv4CidrBlock(value) {
        this._podIpv4CidrBlock = value;
    }
    resetPodIpv4CidrBlock() {
        this._podIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get podIpv4CidrBlockInput() {
        return this._podIpv4CidrBlock;
    }
    get podRange() {
        return this.getStringAttribute('pod_range');
    }
    set podRange(value) {
        this._podRange = value;
    }
    resetPodRange() {
        this._podRange = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get podRangeInput() {
        return this._podRange;
    }
}
exports.ContainerClusterNodePoolNetworkConfigOutputReference = ContainerClusterNodePoolNetworkConfigOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNetworkConfigOutputReference[_30] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNetworkConfigOutputReference", version: "4.0.3" };
function containerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gpu_sharing_strategy: cdktf.stringToTerraform(struct.gpuSharingStrategy),
        max_shared_clients_per_gpu: cdktf.numberToTerraform(struct.maxSharedClientsPerGpu),
    };
}
exports.containerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigToTerraform = containerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigToTerraform;
class ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gpuSharingStrategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.gpuSharingStrategy = this._gpuSharingStrategy;
        }
        if (this._maxSharedClientsPerGpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxSharedClientsPerGpu = this._maxSharedClientsPerGpu;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._gpuSharingStrategy = undefined;
            this._maxSharedClientsPerGpu = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._gpuSharingStrategy = value.gpuSharingStrategy;
            this._maxSharedClientsPerGpu = value.maxSharedClientsPerGpu;
        }
    }
    get gpuSharingStrategy() {
        return this.getStringAttribute('gpu_sharing_strategy');
    }
    set gpuSharingStrategy(value) {
        this._gpuSharingStrategy = value;
    }
    resetGpuSharingStrategy() {
        this._gpuSharingStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gpuSharingStrategyInput() {
        return this._gpuSharingStrategy;
    }
    get maxSharedClientsPerGpu() {
        return this.getNumberAttribute('max_shared_clients_per_gpu');
    }
    set maxSharedClientsPerGpu(value) {
        this._maxSharedClientsPerGpu = value;
    }
    resetMaxSharedClientsPerGpu() {
        this._maxSharedClientsPerGpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxSharedClientsPerGpuInput() {
        return this._maxSharedClientsPerGpu;
    }
}
exports.ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigOutputReference = ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigOutputReference[_31] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigOutputReference", version: "4.0.3" };
class ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigList = ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigList;
_32 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigList[_32] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigList", version: "4.0.3" };
function containerClusterNodePoolNodeConfigGuestAcceleratorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        gpu_partition_size: cdktf.stringToTerraform(struct.gpuPartitionSize),
        gpu_sharing_config: cdktf.listMapper(containerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigToTerraform, false)(struct.gpuSharingConfig),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.containerClusterNodePoolNodeConfigGuestAcceleratorToTerraform = containerClusterNodePoolNodeConfigGuestAcceleratorToTerraform;
class ContainerClusterNodePoolNodeConfigGuestAcceleratorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // gpu_sharing_config - computed: true, optional: true, required: false
        this._gpuSharingConfig = new ContainerClusterNodePoolNodeConfigGuestAcceleratorGpuSharingConfigList(this, "gpu_sharing_config", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._gpuPartitionSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.gpuPartitionSize = this._gpuPartitionSize;
        }
        if (this._gpuSharingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gpuSharingConfig = this._gpuSharingConfig?.internalValue;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._count = undefined;
            this._gpuPartitionSize = undefined;
            this._gpuSharingConfig.internalValue = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._count = value.count;
            this._gpuPartitionSize = value.gpuPartitionSize;
            this._gpuSharingConfig.internalValue = value.gpuSharingConfig;
            this._type = value.type;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get gpuPartitionSize() {
        return this.getStringAttribute('gpu_partition_size');
    }
    set gpuPartitionSize(value) {
        this._gpuPartitionSize = value;
    }
    resetGpuPartitionSize() {
        this._gpuPartitionSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gpuPartitionSizeInput() {
        return this._gpuPartitionSize;
    }
    get gpuSharingConfig() {
        return this._gpuSharingConfig;
    }
    putGpuSharingConfig(value) {
        this._gpuSharingConfig.internalValue = value;
    }
    resetGpuSharingConfig() {
        this._gpuSharingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gpuSharingConfigInput() {
        return this._gpuSharingConfig.internalValue;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.ContainerClusterNodePoolNodeConfigGuestAcceleratorOutputReference = ContainerClusterNodePoolNodeConfigGuestAcceleratorOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigGuestAcceleratorOutputReference[_33] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigGuestAcceleratorOutputReference", version: "4.0.3" };
class ContainerClusterNodePoolNodeConfigGuestAcceleratorList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterNodePoolNodeConfigGuestAcceleratorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterNodePoolNodeConfigGuestAcceleratorList = ContainerClusterNodePoolNodeConfigGuestAcceleratorList;
_34 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigGuestAcceleratorList[_34] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigGuestAcceleratorList", version: "4.0.3" };
function containerClusterNodePoolNodeConfigTaintToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        effect: cdktf.stringToTerraform(struct.effect),
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.containerClusterNodePoolNodeConfigTaintToTerraform = containerClusterNodePoolNodeConfigTaintToTerraform;
class ContainerClusterNodePoolNodeConfigTaintOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._effect !== undefined) {
            hasAnyValues = true;
            internalValueResult.effect = this._effect;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._effect = undefined;
            this._key = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._effect = value.effect;
            this._key = value.key;
            this._value = value.value;
        }
    }
    get effect() {
        return this.getStringAttribute('effect');
    }
    set effect(value) {
        this._effect = value;
    }
    resetEffect() {
        this._effect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get effectInput() {
        return this._effect;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.ContainerClusterNodePoolNodeConfigTaintOutputReference = ContainerClusterNodePoolNodeConfigTaintOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigTaintOutputReference[_35] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigTaintOutputReference", version: "4.0.3" };
class ContainerClusterNodePoolNodeConfigTaintList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterNodePoolNodeConfigTaintOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterNodePoolNodeConfigTaintList = ContainerClusterNodePoolNodeConfigTaintList;
_36 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigTaintList[_36] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigTaintList", version: "4.0.3" };
function containerClusterNodePoolNodeConfigGcfsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterNodePoolNodeConfigGcfsConfigToTerraform = containerClusterNodePoolNodeConfigGcfsConfigToTerraform;
class ContainerClusterNodePoolNodeConfigGcfsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterNodePoolNodeConfigGcfsConfigOutputReference = ContainerClusterNodePoolNodeConfigGcfsConfigOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigGcfsConfigOutputReference[_37] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigGcfsConfigOutputReference", version: "4.0.3" };
function containerClusterNodePoolNodeConfigGvnicToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterNodePoolNodeConfigGvnicToTerraform = containerClusterNodePoolNodeConfigGvnicToTerraform;
class ContainerClusterNodePoolNodeConfigGvnicOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterNodePoolNodeConfigGvnicOutputReference = ContainerClusterNodePoolNodeConfigGvnicOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigGvnicOutputReference[_38] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigGvnicOutputReference", version: "4.0.3" };
function containerClusterNodePoolNodeConfigReservationAffinityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        consume_reservation_type: cdktf.stringToTerraform(struct.consumeReservationType),
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.containerClusterNodePoolNodeConfigReservationAffinityToTerraform = containerClusterNodePoolNodeConfigReservationAffinityToTerraform;
class ContainerClusterNodePoolNodeConfigReservationAffinityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._consumeReservationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.consumeReservationType = this._consumeReservationType;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._consumeReservationType = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._consumeReservationType = value.consumeReservationType;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get consumeReservationType() {
        return this.getStringAttribute('consume_reservation_type');
    }
    set consumeReservationType(value) {
        this._consumeReservationType = value;
    }
    // Temporarily expose input value. Use with caution.
    get consumeReservationTypeInput() {
        return this._consumeReservationType;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.ContainerClusterNodePoolNodeConfigReservationAffinityOutputReference = ContainerClusterNodePoolNodeConfigReservationAffinityOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigReservationAffinityOutputReference[_39] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigReservationAffinityOutputReference", version: "4.0.3" };
function containerClusterNodePoolNodeConfigShieldedInstanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_integrity_monitoring: cdktf.booleanToTerraform(struct.enableIntegrityMonitoring),
        enable_secure_boot: cdktf.booleanToTerraform(struct.enableSecureBoot),
    };
}
exports.containerClusterNodePoolNodeConfigShieldedInstanceConfigToTerraform = containerClusterNodePoolNodeConfigShieldedInstanceConfigToTerraform;
class ContainerClusterNodePoolNodeConfigShieldedInstanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableIntegrityMonitoring !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableIntegrityMonitoring = this._enableIntegrityMonitoring;
        }
        if (this._enableSecureBoot !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableSecureBoot = this._enableSecureBoot;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableIntegrityMonitoring = undefined;
            this._enableSecureBoot = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableIntegrityMonitoring = value.enableIntegrityMonitoring;
            this._enableSecureBoot = value.enableSecureBoot;
        }
    }
    get enableIntegrityMonitoring() {
        return this.getBooleanAttribute('enable_integrity_monitoring');
    }
    set enableIntegrityMonitoring(value) {
        this._enableIntegrityMonitoring = value;
    }
    resetEnableIntegrityMonitoring() {
        this._enableIntegrityMonitoring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIntegrityMonitoringInput() {
        return this._enableIntegrityMonitoring;
    }
    get enableSecureBoot() {
        return this.getBooleanAttribute('enable_secure_boot');
    }
    set enableSecureBoot(value) {
        this._enableSecureBoot = value;
    }
    resetEnableSecureBoot() {
        this._enableSecureBoot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableSecureBootInput() {
        return this._enableSecureBoot;
    }
}
exports.ContainerClusterNodePoolNodeConfigShieldedInstanceConfigOutputReference = ContainerClusterNodePoolNodeConfigShieldedInstanceConfigOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigShieldedInstanceConfigOutputReference[_40] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigShieldedInstanceConfigOutputReference", version: "4.0.3" };
function containerClusterNodePoolNodeConfigWorkloadMetadataConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
    };
}
exports.containerClusterNodePoolNodeConfigWorkloadMetadataConfigToTerraform = containerClusterNodePoolNodeConfigWorkloadMetadataConfigToTerraform;
class ContainerClusterNodePoolNodeConfigWorkloadMetadataConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mode = value.mode;
        }
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
}
exports.ContainerClusterNodePoolNodeConfigWorkloadMetadataConfigOutputReference = ContainerClusterNodePoolNodeConfigWorkloadMetadataConfigOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigWorkloadMetadataConfigOutputReference[_41] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigWorkloadMetadataConfigOutputReference", version: "4.0.3" };
function containerClusterNodePoolNodeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_kms_key: cdktf.stringToTerraform(struct.bootDiskKmsKey),
        disk_size_gb: cdktf.numberToTerraform(struct.diskSizeGb),
        disk_type: cdktf.stringToTerraform(struct.diskType),
        guest_accelerator: cdktf.listMapper(containerClusterNodePoolNodeConfigGuestAcceleratorToTerraform, false)(struct.guestAccelerator),
        image_type: cdktf.stringToTerraform(struct.imageType),
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        local_ssd_count: cdktf.numberToTerraform(struct.localSsdCount),
        logging_variant: cdktf.stringToTerraform(struct.loggingVariant),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        metadata: cdktf.hashMapper(cdktf.stringToTerraform)(struct.metadata),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        node_group: cdktf.stringToTerraform(struct.nodeGroup),
        oauth_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.oauthScopes),
        preemptible: cdktf.booleanToTerraform(struct.preemptible),
        resource_labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.resourceLabels),
        service_account: cdktf.stringToTerraform(struct.serviceAccount),
        spot: cdktf.booleanToTerraform(struct.spot),
        tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.tags),
        taint: cdktf.listMapper(containerClusterNodePoolNodeConfigTaintToTerraform, false)(struct.taint),
        gcfs_config: containerClusterNodePoolNodeConfigGcfsConfigToTerraform(struct.gcfsConfig),
        gvnic: containerClusterNodePoolNodeConfigGvnicToTerraform(struct.gvnic),
        reservation_affinity: containerClusterNodePoolNodeConfigReservationAffinityToTerraform(struct.reservationAffinity),
        shielded_instance_config: containerClusterNodePoolNodeConfigShieldedInstanceConfigToTerraform(struct.shieldedInstanceConfig),
        workload_metadata_config: containerClusterNodePoolNodeConfigWorkloadMetadataConfigToTerraform(struct.workloadMetadataConfig),
    };
}
exports.containerClusterNodePoolNodeConfigToTerraform = containerClusterNodePoolNodeConfigToTerraform;
class ContainerClusterNodePoolNodeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // guest_accelerator - computed: true, optional: true, required: false
        this._guestAccelerator = new ContainerClusterNodePoolNodeConfigGuestAcceleratorList(this, "guest_accelerator", false);
        // taint - computed: true, optional: true, required: false
        this._taint = new ContainerClusterNodePoolNodeConfigTaintList(this, "taint", false);
        // gcfs_config - computed: false, optional: true, required: false
        this._gcfsConfig = new ContainerClusterNodePoolNodeConfigGcfsConfigOutputReference(this, "gcfs_config");
        // gvnic - computed: false, optional: true, required: false
        this._gvnic = new ContainerClusterNodePoolNodeConfigGvnicOutputReference(this, "gvnic");
        // reservation_affinity - computed: false, optional: true, required: false
        this._reservationAffinity = new ContainerClusterNodePoolNodeConfigReservationAffinityOutputReference(this, "reservation_affinity");
        // shielded_instance_config - computed: false, optional: true, required: false
        this._shieldedInstanceConfig = new ContainerClusterNodePoolNodeConfigShieldedInstanceConfigOutputReference(this, "shielded_instance_config");
        // workload_metadata_config - computed: false, optional: true, required: false
        this._workloadMetadataConfig = new ContainerClusterNodePoolNodeConfigWorkloadMetadataConfigOutputReference(this, "workload_metadata_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskKmsKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskKmsKey = this._bootDiskKmsKey;
        }
        if (this._diskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskSizeGb = this._diskSizeGb;
        }
        if (this._diskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskType = this._diskType;
        }
        if (this._guestAccelerator?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.guestAccelerator = this._guestAccelerator?.internalValue;
        }
        if (this._imageType !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageType = this._imageType;
        }
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._localSsdCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.localSsdCount = this._localSsdCount;
        }
        if (this._loggingVariant !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingVariant = this._loggingVariant;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._nodeGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeGroup = this._nodeGroup;
        }
        if (this._oauthScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthScopes = this._oauthScopes;
        }
        if (this._preemptible !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptible = this._preemptible;
        }
        if (this._resourceLabels !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceLabels = this._resourceLabels;
        }
        if (this._serviceAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccount = this._serviceAccount;
        }
        if (this._spot !== undefined) {
            hasAnyValues = true;
            internalValueResult.spot = this._spot;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        if (this._taint?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.taint = this._taint?.internalValue;
        }
        if (this._gcfsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcfsConfig = this._gcfsConfig?.internalValue;
        }
        if (this._gvnic?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gvnic = this._gvnic?.internalValue;
        }
        if (this._reservationAffinity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.reservationAffinity = this._reservationAffinity?.internalValue;
        }
        if (this._shieldedInstanceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.shieldedInstanceConfig = this._shieldedInstanceConfig?.internalValue;
        }
        if (this._workloadMetadataConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.workloadMetadataConfig = this._workloadMetadataConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskKmsKey = undefined;
            this._diskSizeGb = undefined;
            this._diskType = undefined;
            this._guestAccelerator.internalValue = undefined;
            this._imageType = undefined;
            this._labels = undefined;
            this._localSsdCount = undefined;
            this._loggingVariant = undefined;
            this._machineType = undefined;
            this._metadata = undefined;
            this._minCpuPlatform = undefined;
            this._nodeGroup = undefined;
            this._oauthScopes = undefined;
            this._preemptible = undefined;
            this._resourceLabels = undefined;
            this._serviceAccount = undefined;
            this._spot = undefined;
            this._tags = undefined;
            this._taint.internalValue = undefined;
            this._gcfsConfig.internalValue = undefined;
            this._gvnic.internalValue = undefined;
            this._reservationAffinity.internalValue = undefined;
            this._shieldedInstanceConfig.internalValue = undefined;
            this._workloadMetadataConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskKmsKey = value.bootDiskKmsKey;
            this._diskSizeGb = value.diskSizeGb;
            this._diskType = value.diskType;
            this._guestAccelerator.internalValue = value.guestAccelerator;
            this._imageType = value.imageType;
            this._labels = value.labels;
            this._localSsdCount = value.localSsdCount;
            this._loggingVariant = value.loggingVariant;
            this._machineType = value.machineType;
            this._metadata = value.metadata;
            this._minCpuPlatform = value.minCpuPlatform;
            this._nodeGroup = value.nodeGroup;
            this._oauthScopes = value.oauthScopes;
            this._preemptible = value.preemptible;
            this._resourceLabels = value.resourceLabels;
            this._serviceAccount = value.serviceAccount;
            this._spot = value.spot;
            this._tags = value.tags;
            this._taint.internalValue = value.taint;
            this._gcfsConfig.internalValue = value.gcfsConfig;
            this._gvnic.internalValue = value.gvnic;
            this._reservationAffinity.internalValue = value.reservationAffinity;
            this._shieldedInstanceConfig.internalValue = value.shieldedInstanceConfig;
            this._workloadMetadataConfig.internalValue = value.workloadMetadataConfig;
        }
    }
    get bootDiskKmsKey() {
        return this.getStringAttribute('boot_disk_kms_key');
    }
    set bootDiskKmsKey(value) {
        this._bootDiskKmsKey = value;
    }
    resetBootDiskKmsKey() {
        this._bootDiskKmsKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskKmsKeyInput() {
        return this._bootDiskKmsKey;
    }
    get diskSizeGb() {
        return this.getNumberAttribute('disk_size_gb');
    }
    set diskSizeGb(value) {
        this._diskSizeGb = value;
    }
    resetDiskSizeGb() {
        this._diskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskSizeGbInput() {
        return this._diskSizeGb;
    }
    get diskType() {
        return this.getStringAttribute('disk_type');
    }
    set diskType(value) {
        this._diskType = value;
    }
    resetDiskType() {
        this._diskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskTypeInput() {
        return this._diskType;
    }
    get guestAccelerator() {
        return this._guestAccelerator;
    }
    putGuestAccelerator(value) {
        this._guestAccelerator.internalValue = value;
    }
    resetGuestAccelerator() {
        this._guestAccelerator.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get guestAcceleratorInput() {
        return this._guestAccelerator.internalValue;
    }
    get imageType() {
        return this.getStringAttribute('image_type');
    }
    set imageType(value) {
        this._imageType = value;
    }
    resetImageType() {
        this._imageType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageTypeInput() {
        return this._imageType;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get localSsdCount() {
        return this.getNumberAttribute('local_ssd_count');
    }
    set localSsdCount(value) {
        this._localSsdCount = value;
    }
    resetLocalSsdCount() {
        this._localSsdCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localSsdCountInput() {
        return this._localSsdCount;
    }
    get loggingVariant() {
        return this.getStringAttribute('logging_variant');
    }
    set loggingVariant(value) {
        this._loggingVariant = value;
    }
    resetLoggingVariant() {
        this._loggingVariant = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingVariantInput() {
        return this._loggingVariant;
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get metadata() {
        return this.getStringMapAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get nodeGroup() {
        return this.getStringAttribute('node_group');
    }
    set nodeGroup(value) {
        this._nodeGroup = value;
    }
    resetNodeGroup() {
        this._nodeGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeGroupInput() {
        return this._nodeGroup;
    }
    get oauthScopes() {
        return cdktf.Fn.tolist(this.getListAttribute('oauth_scopes'));
    }
    set oauthScopes(value) {
        this._oauthScopes = value;
    }
    resetOauthScopes() {
        this._oauthScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthScopesInput() {
        return this._oauthScopes;
    }
    get preemptible() {
        return this.getBooleanAttribute('preemptible');
    }
    set preemptible(value) {
        this._preemptible = value;
    }
    resetPreemptible() {
        this._preemptible = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibleInput() {
        return this._preemptible;
    }
    get resourceLabels() {
        return this.getStringMapAttribute('resource_labels');
    }
    set resourceLabels(value) {
        this._resourceLabels = value;
    }
    resetResourceLabels() {
        this._resourceLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceLabelsInput() {
        return this._resourceLabels;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get spot() {
        return this.getBooleanAttribute('spot');
    }
    set spot(value) {
        this._spot = value;
    }
    resetSpot() {
        this._spot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotInput() {
        return this._spot;
    }
    get tags() {
        return this.getListAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get taint() {
        return this._taint;
    }
    putTaint(value) {
        this._taint.internalValue = value;
    }
    resetTaint() {
        this._taint.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get taintInput() {
        return this._taint.internalValue;
    }
    get gcfsConfig() {
        return this._gcfsConfig;
    }
    putGcfsConfig(value) {
        this._gcfsConfig.internalValue = value;
    }
    resetGcfsConfig() {
        this._gcfsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcfsConfigInput() {
        return this._gcfsConfig.internalValue;
    }
    get gvnic() {
        return this._gvnic;
    }
    putGvnic(value) {
        this._gvnic.internalValue = value;
    }
    resetGvnic() {
        this._gvnic.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gvnicInput() {
        return this._gvnic.internalValue;
    }
    get reservationAffinity() {
        return this._reservationAffinity;
    }
    putReservationAffinity(value) {
        this._reservationAffinity.internalValue = value;
    }
    resetReservationAffinity() {
        this._reservationAffinity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reservationAffinityInput() {
        return this._reservationAffinity.internalValue;
    }
    get shieldedInstanceConfig() {
        return this._shieldedInstanceConfig;
    }
    putShieldedInstanceConfig(value) {
        this._shieldedInstanceConfig.internalValue = value;
    }
    resetShieldedInstanceConfig() {
        this._shieldedInstanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shieldedInstanceConfigInput() {
        return this._shieldedInstanceConfig.internalValue;
    }
    get workloadMetadataConfig() {
        return this._workloadMetadataConfig;
    }
    putWorkloadMetadataConfig(value) {
        this._workloadMetadataConfig.internalValue = value;
    }
    resetWorkloadMetadataConfig() {
        this._workloadMetadataConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workloadMetadataConfigInput() {
        return this._workloadMetadataConfig.internalValue;
    }
}
exports.ContainerClusterNodePoolNodeConfigOutputReference = ContainerClusterNodePoolNodeConfigOutputReference;
_42 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolNodeConfigOutputReference[_42] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolNodeConfigOutputReference", version: "4.0.3" };
function containerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        batch_node_count: cdktf.numberToTerraform(struct.batchNodeCount),
        batch_percentage: cdktf.numberToTerraform(struct.batchPercentage),
        batch_soak_duration: cdktf.stringToTerraform(struct.batchSoakDuration),
    };
}
exports.containerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyToTerraform = containerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyToTerraform;
class ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._batchNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.batchNodeCount = this._batchNodeCount;
        }
        if (this._batchPercentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.batchPercentage = this._batchPercentage;
        }
        if (this._batchSoakDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.batchSoakDuration = this._batchSoakDuration;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._batchNodeCount = undefined;
            this._batchPercentage = undefined;
            this._batchSoakDuration = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._batchNodeCount = value.batchNodeCount;
            this._batchPercentage = value.batchPercentage;
            this._batchSoakDuration = value.batchSoakDuration;
        }
    }
    get batchNodeCount() {
        return this.getNumberAttribute('batch_node_count');
    }
    set batchNodeCount(value) {
        this._batchNodeCount = value;
    }
    resetBatchNodeCount() {
        this._batchNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get batchNodeCountInput() {
        return this._batchNodeCount;
    }
    get batchPercentage() {
        return this.getNumberAttribute('batch_percentage');
    }
    set batchPercentage(value) {
        this._batchPercentage = value;
    }
    resetBatchPercentage() {
        this._batchPercentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get batchPercentageInput() {
        return this._batchPercentage;
    }
    get batchSoakDuration() {
        return this.getStringAttribute('batch_soak_duration');
    }
    set batchSoakDuration(value) {
        this._batchSoakDuration = value;
    }
    resetBatchSoakDuration() {
        this._batchSoakDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get batchSoakDurationInput() {
        return this._batchSoakDuration;
    }
}
exports.ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyOutputReference = ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyOutputReference[_43] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyOutputReference", version: "4.0.3" };
function containerClusterNodePoolUpgradeSettingsBlueGreenSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        node_pool_soak_duration: cdktf.stringToTerraform(struct.nodePoolSoakDuration),
        standard_rollout_policy: containerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyToTerraform(struct.standardRolloutPolicy),
    };
}
exports.containerClusterNodePoolUpgradeSettingsBlueGreenSettingsToTerraform = containerClusterNodePoolUpgradeSettingsBlueGreenSettingsToTerraform;
class ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // standard_rollout_policy - computed: false, optional: false, required: true
        this._standardRolloutPolicy = new ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsStandardRolloutPolicyOutputReference(this, "standard_rollout_policy");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nodePoolSoakDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodePoolSoakDuration = this._nodePoolSoakDuration;
        }
        if (this._standardRolloutPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.standardRolloutPolicy = this._standardRolloutPolicy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nodePoolSoakDuration = undefined;
            this._standardRolloutPolicy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nodePoolSoakDuration = value.nodePoolSoakDuration;
            this._standardRolloutPolicy.internalValue = value.standardRolloutPolicy;
        }
    }
    get nodePoolSoakDuration() {
        return this.getStringAttribute('node_pool_soak_duration');
    }
    set nodePoolSoakDuration(value) {
        this._nodePoolSoakDuration = value;
    }
    resetNodePoolSoakDuration() {
        this._nodePoolSoakDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodePoolSoakDurationInput() {
        return this._nodePoolSoakDuration;
    }
    get standardRolloutPolicy() {
        return this._standardRolloutPolicy;
    }
    putStandardRolloutPolicy(value) {
        this._standardRolloutPolicy.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get standardRolloutPolicyInput() {
        return this._standardRolloutPolicy.internalValue;
    }
}
exports.ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsOutputReference = ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsOutputReference;
_44 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsOutputReference[_44] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsOutputReference", version: "4.0.3" };
function containerClusterNodePoolUpgradeSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_surge: cdktf.numberToTerraform(struct.maxSurge),
        max_unavailable: cdktf.numberToTerraform(struct.maxUnavailable),
        strategy: cdktf.stringToTerraform(struct.strategy),
        blue_green_settings: containerClusterNodePoolUpgradeSettingsBlueGreenSettingsToTerraform(struct.blueGreenSettings),
    };
}
exports.containerClusterNodePoolUpgradeSettingsToTerraform = containerClusterNodePoolUpgradeSettingsToTerraform;
class ContainerClusterNodePoolUpgradeSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // blue_green_settings - computed: false, optional: true, required: false
        this._blueGreenSettings = new ContainerClusterNodePoolUpgradeSettingsBlueGreenSettingsOutputReference(this, "blue_green_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxSurge !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxSurge = this._maxSurge;
        }
        if (this._maxUnavailable !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxUnavailable = this._maxUnavailable;
        }
        if (this._strategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.strategy = this._strategy;
        }
        if (this._blueGreenSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.blueGreenSettings = this._blueGreenSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxSurge = undefined;
            this._maxUnavailable = undefined;
            this._strategy = undefined;
            this._blueGreenSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxSurge = value.maxSurge;
            this._maxUnavailable = value.maxUnavailable;
            this._strategy = value.strategy;
            this._blueGreenSettings.internalValue = value.blueGreenSettings;
        }
    }
    get maxSurge() {
        return this.getNumberAttribute('max_surge');
    }
    set maxSurge(value) {
        this._maxSurge = value;
    }
    resetMaxSurge() {
        this._maxSurge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxSurgeInput() {
        return this._maxSurge;
    }
    get maxUnavailable() {
        return this.getNumberAttribute('max_unavailable');
    }
    set maxUnavailable(value) {
        this._maxUnavailable = value;
    }
    resetMaxUnavailable() {
        this._maxUnavailable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxUnavailableInput() {
        return this._maxUnavailable;
    }
    get strategy() {
        return this.getStringAttribute('strategy');
    }
    set strategy(value) {
        this._strategy = value;
    }
    resetStrategy() {
        this._strategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strategyInput() {
        return this._strategy;
    }
    get blueGreenSettings() {
        return this._blueGreenSettings;
    }
    putBlueGreenSettings(value) {
        this._blueGreenSettings.internalValue = value;
    }
    resetBlueGreenSettings() {
        this._blueGreenSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blueGreenSettingsInput() {
        return this._blueGreenSettings.internalValue;
    }
}
exports.ContainerClusterNodePoolUpgradeSettingsOutputReference = ContainerClusterNodePoolUpgradeSettingsOutputReference;
_45 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolUpgradeSettingsOutputReference[_45] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolUpgradeSettingsOutputReference", version: "4.0.3" };
function containerClusterNodePoolToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        initial_node_count: cdktf.numberToTerraform(struct.initialNodeCount),
        max_pods_per_node: cdktf.numberToTerraform(struct.maxPodsPerNode),
        name: cdktf.stringToTerraform(struct.name),
        name_prefix: cdktf.stringToTerraform(struct.namePrefix),
        node_count: cdktf.numberToTerraform(struct.nodeCount),
        node_locations: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.nodeLocations),
        version: cdktf.stringToTerraform(struct.version),
        autoscaling: containerClusterNodePoolAutoscalingToTerraform(struct.autoscaling),
        management: containerClusterNodePoolManagementToTerraform(struct.management),
        network_config: containerClusterNodePoolNetworkConfigToTerraform(struct.networkConfig),
        node_config: containerClusterNodePoolNodeConfigToTerraform(struct.nodeConfig),
        upgrade_settings: containerClusterNodePoolUpgradeSettingsToTerraform(struct.upgradeSettings),
    };
}
exports.containerClusterNodePoolToTerraform = containerClusterNodePoolToTerraform;
class ContainerClusterNodePoolOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // autoscaling - computed: false, optional: true, required: false
        this._autoscaling = new ContainerClusterNodePoolAutoscalingOutputReference(this, "autoscaling");
        // management - computed: false, optional: true, required: false
        this._management = new ContainerClusterNodePoolManagementOutputReference(this, "management");
        // network_config - computed: false, optional: true, required: false
        this._networkConfig = new ContainerClusterNodePoolNetworkConfigOutputReference(this, "network_config");
        // node_config - computed: false, optional: true, required: false
        this._nodeConfig = new ContainerClusterNodePoolNodeConfigOutputReference(this, "node_config");
        // upgrade_settings - computed: false, optional: true, required: false
        this._upgradeSettings = new ContainerClusterNodePoolUpgradeSettingsOutputReference(this, "upgrade_settings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._initialNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.initialNodeCount = this._initialNodeCount;
        }
        if (this._maxPodsPerNode !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxPodsPerNode = this._maxPodsPerNode;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._namePrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.namePrefix = this._namePrefix;
        }
        if (this._nodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeCount = this._nodeCount;
        }
        if (this._nodeLocations !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeLocations = this._nodeLocations;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._autoscaling?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoscaling = this._autoscaling?.internalValue;
        }
        if (this._management?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.management = this._management?.internalValue;
        }
        if (this._networkConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkConfig = this._networkConfig?.internalValue;
        }
        if (this._nodeConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeConfig = this._nodeConfig?.internalValue;
        }
        if (this._upgradeSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.upgradeSettings = this._upgradeSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._initialNodeCount = undefined;
            this._maxPodsPerNode = undefined;
            this._name = undefined;
            this._namePrefix = undefined;
            this._nodeCount = undefined;
            this._nodeLocations = undefined;
            this._version = undefined;
            this._autoscaling.internalValue = undefined;
            this._management.internalValue = undefined;
            this._networkConfig.internalValue = undefined;
            this._nodeConfig.internalValue = undefined;
            this._upgradeSettings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._initialNodeCount = value.initialNodeCount;
            this._maxPodsPerNode = value.maxPodsPerNode;
            this._name = value.name;
            this._namePrefix = value.namePrefix;
            this._nodeCount = value.nodeCount;
            this._nodeLocations = value.nodeLocations;
            this._version = value.version;
            this._autoscaling.internalValue = value.autoscaling;
            this._management.internalValue = value.management;
            this._networkConfig.internalValue = value.networkConfig;
            this._nodeConfig.internalValue = value.nodeConfig;
            this._upgradeSettings.internalValue = value.upgradeSettings;
        }
    }
    get initialNodeCount() {
        return this.getNumberAttribute('initial_node_count');
    }
    set initialNodeCount(value) {
        this._initialNodeCount = value;
    }
    resetInitialNodeCount() {
        this._initialNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialNodeCountInput() {
        return this._initialNodeCount;
    }
    // instance_group_urls - computed: true, optional: false, required: false
    get instanceGroupUrls() {
        return this.getListAttribute('instance_group_urls');
    }
    // managed_instance_group_urls - computed: true, optional: false, required: false
    get managedInstanceGroupUrls() {
        return this.getListAttribute('managed_instance_group_urls');
    }
    get maxPodsPerNode() {
        return this.getNumberAttribute('max_pods_per_node');
    }
    set maxPodsPerNode(value) {
        this._maxPodsPerNode = value;
    }
    resetMaxPodsPerNode() {
        this._maxPodsPerNode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxPodsPerNodeInput() {
        return this._maxPodsPerNode;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get namePrefix() {
        return this.getStringAttribute('name_prefix');
    }
    set namePrefix(value) {
        this._namePrefix = value;
    }
    resetNamePrefix() {
        this._namePrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namePrefixInput() {
        return this._namePrefix;
    }
    get nodeCount() {
        return this.getNumberAttribute('node_count');
    }
    set nodeCount(value) {
        this._nodeCount = value;
    }
    resetNodeCount() {
        this._nodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeCountInput() {
        return this._nodeCount;
    }
    get nodeLocations() {
        return cdktf.Fn.tolist(this.getListAttribute('node_locations'));
    }
    set nodeLocations(value) {
        this._nodeLocations = value;
    }
    resetNodeLocations() {
        this._nodeLocations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeLocationsInput() {
        return this._nodeLocations;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get autoscaling() {
        return this._autoscaling;
    }
    putAutoscaling(value) {
        this._autoscaling.internalValue = value;
    }
    resetAutoscaling() {
        this._autoscaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoscalingInput() {
        return this._autoscaling.internalValue;
    }
    get management() {
        return this._management;
    }
    putManagement(value) {
        this._management.internalValue = value;
    }
    resetManagement() {
        this._management.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get managementInput() {
        return this._management.internalValue;
    }
    get networkConfig() {
        return this._networkConfig;
    }
    putNetworkConfig(value) {
        this._networkConfig.internalValue = value;
    }
    resetNetworkConfig() {
        this._networkConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkConfigInput() {
        return this._networkConfig.internalValue;
    }
    get nodeConfig() {
        return this._nodeConfig;
    }
    putNodeConfig(value) {
        this._nodeConfig.internalValue = value;
    }
    resetNodeConfig() {
        this._nodeConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeConfigInput() {
        return this._nodeConfig.internalValue;
    }
    get upgradeSettings() {
        return this._upgradeSettings;
    }
    putUpgradeSettings(value) {
        this._upgradeSettings.internalValue = value;
    }
    resetUpgradeSettings() {
        this._upgradeSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get upgradeSettingsInput() {
        return this._upgradeSettings.internalValue;
    }
}
exports.ContainerClusterNodePoolOutputReference = ContainerClusterNodePoolOutputReference;
_46 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolOutputReference[_46] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolOutputReference", version: "4.0.3" };
class ContainerClusterNodePoolList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterNodePoolOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterNodePoolList = ContainerClusterNodePoolList;
_47 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolList[_47] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolList", version: "4.0.3" };
function containerClusterNodePoolDefaultsNodeConfigDefaultsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        logging_variant: cdktf.stringToTerraform(struct.loggingVariant),
    };
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsToTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsToTerraform;
class ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._loggingVariant !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingVariant = this._loggingVariant;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._loggingVariant = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._loggingVariant = value.loggingVariant;
        }
    }
    get loggingVariant() {
        return this.getStringAttribute('logging_variant');
    }
    set loggingVariant(value) {
        this._loggingVariant = value;
    }
    resetLoggingVariant() {
        this._loggingVariant = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingVariantInput() {
        return this._loggingVariant;
    }
}
exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference = ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference;
_48 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference[_48] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference", version: "4.0.3" };
function containerClusterNodePoolDefaultsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        node_config_defaults: containerClusterNodePoolDefaultsNodeConfigDefaultsToTerraform(struct.nodeConfigDefaults),
    };
}
exports.containerClusterNodePoolDefaultsToTerraform = containerClusterNodePoolDefaultsToTerraform;
class ContainerClusterNodePoolDefaultsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // node_config_defaults - computed: false, optional: true, required: false
        this._nodeConfigDefaults = new ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference(this, "node_config_defaults");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nodeConfigDefaults?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeConfigDefaults = this._nodeConfigDefaults?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nodeConfigDefaults.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nodeConfigDefaults.internalValue = value.nodeConfigDefaults;
        }
    }
    get nodeConfigDefaults() {
        return this._nodeConfigDefaults;
    }
    putNodeConfigDefaults(value) {
        this._nodeConfigDefaults.internalValue = value;
    }
    resetNodeConfigDefaults() {
        this._nodeConfigDefaults.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeConfigDefaultsInput() {
        return this._nodeConfigDefaults.internalValue;
    }
}
exports.ContainerClusterNodePoolDefaultsOutputReference = ContainerClusterNodePoolDefaultsOutputReference;
_49 = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolDefaultsOutputReference[_49] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolDefaultsOutputReference", version: "4.0.3" };
function containerClusterNotificationConfigPubsubFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_type: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.eventType),
    };
}
exports.containerClusterNotificationConfigPubsubFilterToTerraform = containerClusterNotificationConfigPubsubFilterToTerraform;
class ContainerClusterNotificationConfigPubsubFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventType !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventType = this._eventType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._eventType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._eventType = value.eventType;
        }
    }
    get eventType() {
        return this.getListAttribute('event_type');
    }
    set eventType(value) {
        this._eventType = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventTypeInput() {
        return this._eventType;
    }
}
exports.ContainerClusterNotificationConfigPubsubFilterOutputReference = ContainerClusterNotificationConfigPubsubFilterOutputReference;
_50 = JSII_RTTI_SYMBOL_1;
ContainerClusterNotificationConfigPubsubFilterOutputReference[_50] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNotificationConfigPubsubFilterOutputReference", version: "4.0.3" };
function containerClusterNotificationConfigPubsubToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        topic: cdktf.stringToTerraform(struct.topic),
        filter: containerClusterNotificationConfigPubsubFilterToTerraform(struct.filter),
    };
}
exports.containerClusterNotificationConfigPubsubToTerraform = containerClusterNotificationConfigPubsubToTerraform;
class ContainerClusterNotificationConfigPubsubOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // filter - computed: false, optional: true, required: false
        this._filter = new ContainerClusterNotificationConfigPubsubFilterOutputReference(this, "filter");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._topic !== undefined) {
            hasAnyValues = true;
            internalValueResult.topic = this._topic;
        }
        if (this._filter?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.filter = this._filter?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._topic = undefined;
            this._filter.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._topic = value.topic;
            this._filter.internalValue = value.filter;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get topic() {
        return this.getStringAttribute('topic');
    }
    set topic(value) {
        this._topic = value;
    }
    resetTopic() {
        this._topic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get topicInput() {
        return this._topic;
    }
    get filter() {
        return this._filter;
    }
    putFilter(value) {
        this._filter.internalValue = value;
    }
    resetFilter() {
        this._filter.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter.internalValue;
    }
}
exports.ContainerClusterNotificationConfigPubsubOutputReference = ContainerClusterNotificationConfigPubsubOutputReference;
_51 = JSII_RTTI_SYMBOL_1;
ContainerClusterNotificationConfigPubsubOutputReference[_51] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNotificationConfigPubsubOutputReference", version: "4.0.3" };
function containerClusterNotificationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        pubsub: containerClusterNotificationConfigPubsubToTerraform(struct.pubsub),
    };
}
exports.containerClusterNotificationConfigToTerraform = containerClusterNotificationConfigToTerraform;
class ContainerClusterNotificationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // pubsub - computed: false, optional: false, required: true
        this._pubsub = new ContainerClusterNotificationConfigPubsubOutputReference(this, "pubsub");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pubsub?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pubsub = this._pubsub?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._pubsub.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._pubsub.internalValue = value.pubsub;
        }
    }
    get pubsub() {
        return this._pubsub;
    }
    putPubsub(value) {
        this._pubsub.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get pubsubInput() {
        return this._pubsub.internalValue;
    }
}
exports.ContainerClusterNotificationConfigOutputReference = ContainerClusterNotificationConfigOutputReference;
_52 = JSII_RTTI_SYMBOL_1;
ContainerClusterNotificationConfigOutputReference[_52] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNotificationConfigOutputReference", version: "4.0.3" };
function containerClusterPrivateClusterConfigMasterGlobalAccessConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterPrivateClusterConfigMasterGlobalAccessConfigToTerraform = containerClusterPrivateClusterConfigMasterGlobalAccessConfigToTerraform;
class ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference = ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference;
_53 = JSII_RTTI_SYMBOL_1;
ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference[_53] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference", version: "4.0.3" };
function containerClusterPrivateClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_private_endpoint: cdktf.booleanToTerraform(struct.enablePrivateEndpoint),
        enable_private_nodes: cdktf.booleanToTerraform(struct.enablePrivateNodes),
        master_ipv4_cidr_block: cdktf.stringToTerraform(struct.masterIpv4CidrBlock),
        private_endpoint_subnetwork: cdktf.stringToTerraform(struct.privateEndpointSubnetwork),
        master_global_access_config: containerClusterPrivateClusterConfigMasterGlobalAccessConfigToTerraform(struct.masterGlobalAccessConfig),
    };
}
exports.containerClusterPrivateClusterConfigToTerraform = containerClusterPrivateClusterConfigToTerraform;
class ContainerClusterPrivateClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // master_global_access_config - computed: false, optional: true, required: false
        this._masterGlobalAccessConfig = new ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference(this, "master_global_access_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enablePrivateEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivateEndpoint = this._enablePrivateEndpoint;
        }
        if (this._enablePrivateNodes !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivateNodes = this._enablePrivateNodes;
        }
        if (this._masterIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterIpv4CidrBlock = this._masterIpv4CidrBlock;
        }
        if (this._privateEndpointSubnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateEndpointSubnetwork = this._privateEndpointSubnetwork;
        }
        if (this._masterGlobalAccessConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterGlobalAccessConfig = this._masterGlobalAccessConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enablePrivateEndpoint = undefined;
            this._enablePrivateNodes = undefined;
            this._masterIpv4CidrBlock = undefined;
            this._privateEndpointSubnetwork = undefined;
            this._masterGlobalAccessConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enablePrivateEndpoint = value.enablePrivateEndpoint;
            this._enablePrivateNodes = value.enablePrivateNodes;
            this._masterIpv4CidrBlock = value.masterIpv4CidrBlock;
            this._privateEndpointSubnetwork = value.privateEndpointSubnetwork;
            this._masterGlobalAccessConfig.internalValue = value.masterGlobalAccessConfig;
        }
    }
    get enablePrivateEndpoint() {
        return this.getBooleanAttribute('enable_private_endpoint');
    }
    set enablePrivateEndpoint(value) {
        this._enablePrivateEndpoint = value;
    }
    resetEnablePrivateEndpoint() {
        this._enablePrivateEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivateEndpointInput() {
        return this._enablePrivateEndpoint;
    }
    get enablePrivateNodes() {
        return this.getBooleanAttribute('enable_private_nodes');
    }
    set enablePrivateNodes(value) {
        this._enablePrivateNodes = value;
    }
    resetEnablePrivateNodes() {
        this._enablePrivateNodes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivateNodesInput() {
        return this._enablePrivateNodes;
    }
    get masterIpv4CidrBlock() {
        return this.getStringAttribute('master_ipv4_cidr_block');
    }
    set masterIpv4CidrBlock(value) {
        this._masterIpv4CidrBlock = value;
    }
    resetMasterIpv4CidrBlock() {
        this._masterIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterIpv4CidrBlockInput() {
        return this._masterIpv4CidrBlock;
    }
    // peering_name - computed: true, optional: false, required: false
    get peeringName() {
        return this.getStringAttribute('peering_name');
    }
    // private_endpoint - computed: true, optional: false, required: false
    get privateEndpoint() {
        return this.getStringAttribute('private_endpoint');
    }
    get privateEndpointSubnetwork() {
        return this.getStringAttribute('private_endpoint_subnetwork');
    }
    set privateEndpointSubnetwork(value) {
        this._privateEndpointSubnetwork = value;
    }
    resetPrivateEndpointSubnetwork() {
        this._privateEndpointSubnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateEndpointSubnetworkInput() {
        return this._privateEndpointSubnetwork;
    }
    // public_endpoint - computed: true, optional: false, required: false
    get publicEndpoint() {
        return this.getStringAttribute('public_endpoint');
    }
    get masterGlobalAccessConfig() {
        return this._masterGlobalAccessConfig;
    }
    putMasterGlobalAccessConfig(value) {
        this._masterGlobalAccessConfig.internalValue = value;
    }
    resetMasterGlobalAccessConfig() {
        this._masterGlobalAccessConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterGlobalAccessConfigInput() {
        return this._masterGlobalAccessConfig.internalValue;
    }
}
exports.ContainerClusterPrivateClusterConfigOutputReference = ContainerClusterPrivateClusterConfigOutputReference;
_54 = JSII_RTTI_SYMBOL_1;
ContainerClusterPrivateClusterConfigOutputReference[_54] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterPrivateClusterConfigOutputReference", version: "4.0.3" };
function containerClusterReleaseChannelToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        channel: cdktf.stringToTerraform(struct.channel),
    };
}
exports.containerClusterReleaseChannelToTerraform = containerClusterReleaseChannelToTerraform;
class ContainerClusterReleaseChannelOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._channel !== undefined) {
            hasAnyValues = true;
            internalValueResult.channel = this._channel;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._channel = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._channel = value.channel;
        }
    }
    get channel() {
        return this.getStringAttribute('channel');
    }
    set channel(value) {
        this._channel = value;
    }
    // Temporarily expose input value. Use with caution.
    get channelInput() {
        return this._channel;
    }
}
exports.ContainerClusterReleaseChannelOutputReference = ContainerClusterReleaseChannelOutputReference;
_55 = JSII_RTTI_SYMBOL_1;
ContainerClusterReleaseChannelOutputReference[_55] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterReleaseChannelOutputReference", version: "4.0.3" };
function containerClusterResourceUsageExportConfigBigqueryDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
    };
}
exports.containerClusterResourceUsageExportConfigBigqueryDestinationToTerraform = containerClusterResourceUsageExportConfigBigqueryDestinationToTerraform;
class ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
}
exports.ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference = ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference;
_56 = JSII_RTTI_SYMBOL_1;
ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference[_56] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference", version: "4.0.3" };
function containerClusterResourceUsageExportConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_network_egress_metering: cdktf.booleanToTerraform(struct.enableNetworkEgressMetering),
        enable_resource_consumption_metering: cdktf.booleanToTerraform(struct.enableResourceConsumptionMetering),
        bigquery_destination: containerClusterResourceUsageExportConfigBigqueryDestinationToTerraform(struct.bigqueryDestination),
    };
}
exports.containerClusterResourceUsageExportConfigToTerraform = containerClusterResourceUsageExportConfigToTerraform;
class ContainerClusterResourceUsageExportConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // bigquery_destination - computed: false, optional: false, required: true
        this._bigqueryDestination = new ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference(this, "bigquery_destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableNetworkEgressMetering !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableNetworkEgressMetering = this._enableNetworkEgressMetering;
        }
        if (this._enableResourceConsumptionMetering !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableResourceConsumptionMetering = this._enableResourceConsumptionMetering;
        }
        if (this._bigqueryDestination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bigqueryDestination = this._bigqueryDestination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableNetworkEgressMetering = undefined;
            this._enableResourceConsumptionMetering = undefined;
            this._bigqueryDestination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableNetworkEgressMetering = value.enableNetworkEgressMetering;
            this._enableResourceConsumptionMetering = value.enableResourceConsumptionMetering;
            this._bigqueryDestination.internalValue = value.bigqueryDestination;
        }
    }
    get enableNetworkEgressMetering() {
        return this.getBooleanAttribute('enable_network_egress_metering');
    }
    set enableNetworkEgressMetering(value) {
        this._enableNetworkEgressMetering = value;
    }
    resetEnableNetworkEgressMetering() {
        this._enableNetworkEgressMetering = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableNetworkEgressMeteringInput() {
        return this._enableNetworkEgressMetering;
    }
    get enableResourceConsumptionMetering() {
        return this.getBooleanAttribute('enable_resource_consumption_metering');
    }
    set enableResourceConsumptionMetering(value) {
        this._enableResourceConsumptionMetering = value;
    }
    resetEnableResourceConsumptionMetering() {
        this._enableResourceConsumptionMetering = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableResourceConsumptionMeteringInput() {
        return this._enableResourceConsumptionMetering;
    }
    get bigqueryDestination() {
        return this._bigqueryDestination;
    }
    putBigqueryDestination(value) {
        this._bigqueryDestination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get bigqueryDestinationInput() {
        return this._bigqueryDestination.internalValue;
    }
}
exports.ContainerClusterResourceUsageExportConfigOutputReference = ContainerClusterResourceUsageExportConfigOutputReference;
_57 = JSII_RTTI_SYMBOL_1;
ContainerClusterResourceUsageExportConfigOutputReference[_57] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterResourceUsageExportConfigOutputReference", version: "4.0.3" };
function containerClusterServiceExternalIpsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterServiceExternalIpsConfigToTerraform = containerClusterServiceExternalIpsConfigToTerraform;
class ContainerClusterServiceExternalIpsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterServiceExternalIpsConfigOutputReference = ContainerClusterServiceExternalIpsConfigOutputReference;
_58 = JSII_RTTI_SYMBOL_1;
ContainerClusterServiceExternalIpsConfigOutputReference[_58] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterServiceExternalIpsConfigOutputReference", version: "4.0.3" };
function containerClusterTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        read: cdktf.stringToTerraform(struct.read),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.containerClusterTimeoutsToTerraform = containerClusterTimeoutsToTerraform;
class ContainerClusterTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._read !== undefined) {
            hasAnyValues = true;
            internalValueResult.read = this._read;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._read = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._read = value.read;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get read() {
        return this.getStringAttribute('read');
    }
    set read(value) {
        this._read = value;
    }
    resetRead() {
        this._read = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readInput() {
        return this._read;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ContainerClusterTimeoutsOutputReference = ContainerClusterTimeoutsOutputReference;
_59 = JSII_RTTI_SYMBOL_1;
ContainerClusterTimeoutsOutputReference[_59] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterTimeoutsOutputReference", version: "4.0.3" };
function containerClusterVerticalPodAutoscalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterVerticalPodAutoscalingToTerraform = containerClusterVerticalPodAutoscalingToTerraform;
class ContainerClusterVerticalPodAutoscalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterVerticalPodAutoscalingOutputReference = ContainerClusterVerticalPodAutoscalingOutputReference;
_60 = JSII_RTTI_SYMBOL_1;
ContainerClusterVerticalPodAutoscalingOutputReference[_60] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterVerticalPodAutoscalingOutputReference", version: "4.0.3" };
function containerClusterWorkloadIdentityConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        workload_pool: cdktf.stringToTerraform(struct.workloadPool),
    };
}
exports.containerClusterWorkloadIdentityConfigToTerraform = containerClusterWorkloadIdentityConfigToTerraform;
class ContainerClusterWorkloadIdentityConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._workloadPool !== undefined) {
            hasAnyValues = true;
            internalValueResult.workloadPool = this._workloadPool;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._workloadPool = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._workloadPool = value.workloadPool;
        }
    }
    get workloadPool() {
        return this.getStringAttribute('workload_pool');
    }
    set workloadPool(value) {
        this._workloadPool = value;
    }
    resetWorkloadPool() {
        this._workloadPool = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workloadPoolInput() {
        return this._workloadPool;
    }
}
exports.ContainerClusterWorkloadIdentityConfigOutputReference = ContainerClusterWorkloadIdentityConfigOutputReference;
_61 = JSII_RTTI_SYMBOL_1;
ContainerClusterWorkloadIdentityConfigOutputReference[_61] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterWorkloadIdentityConfigOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/container_cluster google_container_cluster}
*/
class ContainerCluster extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/container_cluster google_container_cluster} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ContainerClusterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_container_cluster',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // addons_config - computed: false, optional: true, required: false
        this._addonsConfig = new ContainerClusterAddonsConfigOutputReference(this, "addons_config");
        // authenticator_groups_config - computed: false, optional: true, required: false
        this._authenticatorGroupsConfig = new ContainerClusterAuthenticatorGroupsConfigOutputReference(this, "authenticator_groups_config");
        // binary_authorization - computed: false, optional: true, required: false
        this._binaryAuthorization = new ContainerClusterBinaryAuthorizationOutputReference(this, "binary_authorization");
        // cluster_autoscaling - computed: false, optional: true, required: false
        this._clusterAutoscaling = new ContainerClusterClusterAutoscalingOutputReference(this, "cluster_autoscaling");
        // confidential_nodes - computed: false, optional: true, required: false
        this._confidentialNodes = new ContainerClusterConfidentialNodesOutputReference(this, "confidential_nodes");
        // cost_management_config - computed: false, optional: true, required: false
        this._costManagementConfig = new ContainerClusterCostManagementConfigOutputReference(this, "cost_management_config");
        // database_encryption - computed: false, optional: true, required: false
        this._databaseEncryption = new ContainerClusterDatabaseEncryptionOutputReference(this, "database_encryption");
        // default_snat_status - computed: false, optional: true, required: false
        this._defaultSnatStatus = new ContainerClusterDefaultSnatStatusOutputReference(this, "default_snat_status");
        // dns_config - computed: false, optional: true, required: false
        this._dnsConfig = new ContainerClusterDnsConfigOutputReference(this, "dns_config");
        // ip_allocation_policy - computed: false, optional: true, required: false
        this._ipAllocationPolicy = new ContainerClusterIpAllocationPolicyOutputReference(this, "ip_allocation_policy");
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new ContainerClusterLoggingConfigOutputReference(this, "logging_config");
        // maintenance_policy - computed: false, optional: true, required: false
        this._maintenancePolicy = new ContainerClusterMaintenancePolicyOutputReference(this, "maintenance_policy");
        // master_auth - computed: false, optional: true, required: false
        this._masterAuth = new ContainerClusterMasterAuthOutputReference(this, "master_auth");
        // master_authorized_networks_config - computed: false, optional: true, required: false
        this._masterAuthorizedNetworksConfig = new ContainerClusterMasterAuthorizedNetworksConfigOutputReference(this, "master_authorized_networks_config");
        // mesh_certificates - computed: false, optional: true, required: false
        this._meshCertificates = new ContainerClusterMeshCertificatesOutputReference(this, "mesh_certificates");
        // monitoring_config - computed: false, optional: true, required: false
        this._monitoringConfig = new ContainerClusterMonitoringConfigOutputReference(this, "monitoring_config");
        // network_policy - computed: false, optional: true, required: false
        this._networkPolicy = new ContainerClusterNetworkPolicyOutputReference(this, "network_policy");
        // node_config - computed: false, optional: true, required: false
        this._nodeConfig = new ContainerClusterNodeConfigOutputReference(this, "node_config");
        // node_pool - computed: false, optional: true, required: false
        this._nodePool = new ContainerClusterNodePoolList(this, "node_pool", false);
        // node_pool_defaults - computed: false, optional: true, required: false
        this._nodePoolDefaults = new ContainerClusterNodePoolDefaultsOutputReference(this, "node_pool_defaults");
        // notification_config - computed: false, optional: true, required: false
        this._notificationConfig = new ContainerClusterNotificationConfigOutputReference(this, "notification_config");
        // private_cluster_config - computed: false, optional: true, required: false
        this._privateClusterConfig = new ContainerClusterPrivateClusterConfigOutputReference(this, "private_cluster_config");
        // release_channel - computed: false, optional: true, required: false
        this._releaseChannel = new ContainerClusterReleaseChannelOutputReference(this, "release_channel");
        // resource_usage_export_config - computed: false, optional: true, required: false
        this._resourceUsageExportConfig = new ContainerClusterResourceUsageExportConfigOutputReference(this, "resource_usage_export_config");
        // service_external_ips_config - computed: false, optional: true, required: false
        this._serviceExternalIpsConfig = new ContainerClusterServiceExternalIpsConfigOutputReference(this, "service_external_ips_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ContainerClusterTimeoutsOutputReference(this, "timeouts");
        // vertical_pod_autoscaling - computed: false, optional: true, required: false
        this._verticalPodAutoscaling = new ContainerClusterVerticalPodAutoscalingOutputReference(this, "vertical_pod_autoscaling");
        // workload_identity_config - computed: false, optional: true, required: false
        this._workloadIdentityConfig = new ContainerClusterWorkloadIdentityConfigOutputReference(this, "workload_identity_config");
        this._clusterIpv4Cidr = config.clusterIpv4Cidr;
        this._datapathProvider = config.datapathProvider;
        this._defaultMaxPodsPerNode = config.defaultMaxPodsPerNode;
        this._description = config.description;
        this._enableAutopilot = config.enableAutopilot;
        this._enableBinaryAuthorization = config.enableBinaryAuthorization;
        this._enableIntranodeVisibility = config.enableIntranodeVisibility;
        this._enableKubernetesAlpha = config.enableKubernetesAlpha;
        this._enableL4IlbSubsetting = config.enableL4IlbSubsetting;
        this._enableLegacyAbac = config.enableLegacyAbac;
        this._enableShieldedNodes = config.enableShieldedNodes;
        this._enableTpu = config.enableTpu;
        this._id = config.id;
        this._initialNodeCount = config.initialNodeCount;
        this._location = config.location;
        this._loggingService = config.loggingService;
        this._minMasterVersion = config.minMasterVersion;
        this._monitoringService = config.monitoringService;
        this._name = config.name;
        this._network = config.network;
        this._networkingMode = config.networkingMode;
        this._nodeLocations = config.nodeLocations;
        this._nodeVersion = config.nodeVersion;
        this._privateIpv6GoogleAccess = config.privateIpv6GoogleAccess;
        this._project = config.project;
        this._removeDefaultNodePool = config.removeDefaultNodePool;
        this._resourceLabels = config.resourceLabels;
        this._subnetwork = config.subnetwork;
        this._addonsConfig.internalValue = config.addonsConfig;
        this._authenticatorGroupsConfig.internalValue = config.authenticatorGroupsConfig;
        this._binaryAuthorization.internalValue = config.binaryAuthorization;
        this._clusterAutoscaling.internalValue = config.clusterAutoscaling;
        this._confidentialNodes.internalValue = config.confidentialNodes;
        this._costManagementConfig.internalValue = config.costManagementConfig;
        this._databaseEncryption.internalValue = config.databaseEncryption;
        this._defaultSnatStatus.internalValue = config.defaultSnatStatus;
        this._dnsConfig.internalValue = config.dnsConfig;
        this._ipAllocationPolicy.internalValue = config.ipAllocationPolicy;
        this._loggingConfig.internalValue = config.loggingConfig;
        this._maintenancePolicy.internalValue = config.maintenancePolicy;
        this._masterAuth.internalValue = config.masterAuth;
        this._masterAuthorizedNetworksConfig.internalValue = config.masterAuthorizedNetworksConfig;
        this._meshCertificates.internalValue = config.meshCertificates;
        this._monitoringConfig.internalValue = config.monitoringConfig;
        this._networkPolicy.internalValue = config.networkPolicy;
        this._nodeConfig.internalValue = config.nodeConfig;
        this._nodePool.internalValue = config.nodePool;
        this._nodePoolDefaults.internalValue = config.nodePoolDefaults;
        this._notificationConfig.internalValue = config.notificationConfig;
        this._privateClusterConfig.internalValue = config.privateClusterConfig;
        this._releaseChannel.internalValue = config.releaseChannel;
        this._resourceUsageExportConfig.internalValue = config.resourceUsageExportConfig;
        this._serviceExternalIpsConfig.internalValue = config.serviceExternalIpsConfig;
        this._timeouts.internalValue = config.timeouts;
        this._verticalPodAutoscaling.internalValue = config.verticalPodAutoscaling;
        this._workloadIdentityConfig.internalValue = config.workloadIdentityConfig;
    }
    get clusterIpv4Cidr() {
        return this.getStringAttribute('cluster_ipv4_cidr');
    }
    set clusterIpv4Cidr(value) {
        this._clusterIpv4Cidr = value;
    }
    resetClusterIpv4Cidr() {
        this._clusterIpv4Cidr = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIpv4CidrInput() {
        return this._clusterIpv4Cidr;
    }
    get datapathProvider() {
        return this.getStringAttribute('datapath_provider');
    }
    set datapathProvider(value) {
        this._datapathProvider = value;
    }
    resetDatapathProvider() {
        this._datapathProvider = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datapathProviderInput() {
        return this._datapathProvider;
    }
    get defaultMaxPodsPerNode() {
        return this.getNumberAttribute('default_max_pods_per_node');
    }
    set defaultMaxPodsPerNode(value) {
        this._defaultMaxPodsPerNode = value;
    }
    resetDefaultMaxPodsPerNode() {
        this._defaultMaxPodsPerNode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultMaxPodsPerNodeInput() {
        return this._defaultMaxPodsPerNode;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get enableAutopilot() {
        return this.getBooleanAttribute('enable_autopilot');
    }
    set enableAutopilot(value) {
        this._enableAutopilot = value;
    }
    resetEnableAutopilot() {
        this._enableAutopilot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableAutopilotInput() {
        return this._enableAutopilot;
    }
    get enableBinaryAuthorization() {
        return this.getBooleanAttribute('enable_binary_authorization');
    }
    set enableBinaryAuthorization(value) {
        this._enableBinaryAuthorization = value;
    }
    resetEnableBinaryAuthorization() {
        this._enableBinaryAuthorization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableBinaryAuthorizationInput() {
        return this._enableBinaryAuthorization;
    }
    get enableIntranodeVisibility() {
        return this.getBooleanAttribute('enable_intranode_visibility');
    }
    set enableIntranodeVisibility(value) {
        this._enableIntranodeVisibility = value;
    }
    resetEnableIntranodeVisibility() {
        this._enableIntranodeVisibility = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIntranodeVisibilityInput() {
        return this._enableIntranodeVisibility;
    }
    get enableKubernetesAlpha() {
        return this.getBooleanAttribute('enable_kubernetes_alpha');
    }
    set enableKubernetesAlpha(value) {
        this._enableKubernetesAlpha = value;
    }
    resetEnableKubernetesAlpha() {
        this._enableKubernetesAlpha = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableKubernetesAlphaInput() {
        return this._enableKubernetesAlpha;
    }
    get enableL4IlbSubsetting() {
        return this.getBooleanAttribute('enable_l4_ilb_subsetting');
    }
    set enableL4IlbSubsetting(value) {
        this._enableL4IlbSubsetting = value;
    }
    resetEnableL4IlbSubsetting() {
        this._enableL4IlbSubsetting = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableL4IlbSubsettingInput() {
        return this._enableL4IlbSubsetting;
    }
    get enableLegacyAbac() {
        return this.getBooleanAttribute('enable_legacy_abac');
    }
    set enableLegacyAbac(value) {
        this._enableLegacyAbac = value;
    }
    resetEnableLegacyAbac() {
        this._enableLegacyAbac = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableLegacyAbacInput() {
        return this._enableLegacyAbac;
    }
    get enableShieldedNodes() {
        return this.getBooleanAttribute('enable_shielded_nodes');
    }
    set enableShieldedNodes(value) {
        this._enableShieldedNodes = value;
    }
    resetEnableShieldedNodes() {
        this._enableShieldedNodes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableShieldedNodesInput() {
        return this._enableShieldedNodes;
    }
    get enableTpu() {
        return this.getBooleanAttribute('enable_tpu');
    }
    set enableTpu(value) {
        this._enableTpu = value;
    }
    resetEnableTpu() {
        this._enableTpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableTpuInput() {
        return this._enableTpu;
    }
    // endpoint - computed: true, optional: false, required: false
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get initialNodeCount() {
        return this.getNumberAttribute('initial_node_count');
    }
    set initialNodeCount(value) {
        this._initialNodeCount = value;
    }
    resetInitialNodeCount() {
        this._initialNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialNodeCountInput() {
        return this._initialNodeCount;
    }
    // label_fingerprint - computed: true, optional: false, required: false
    get labelFingerprint() {
        return this.getStringAttribute('label_fingerprint');
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get loggingService() {
        return this.getStringAttribute('logging_service');
    }
    set loggingService(value) {
        this._loggingService = value;
    }
    resetLoggingService() {
        this._loggingService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingServiceInput() {
        return this._loggingService;
    }
    // master_version - computed: true, optional: false, required: false
    get masterVersion() {
        return this.getStringAttribute('master_version');
    }
    get minMasterVersion() {
        return this.getStringAttribute('min_master_version');
    }
    set minMasterVersion(value) {
        this._minMasterVersion = value;
    }
    resetMinMasterVersion() {
        this._minMasterVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minMasterVersionInput() {
        return this._minMasterVersion;
    }
    get monitoringService() {
        return this.getStringAttribute('monitoring_service');
    }
    set monitoringService(value) {
        this._monitoringService = value;
    }
    resetMonitoringService() {
        this._monitoringService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringServiceInput() {
        return this._monitoringService;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get network() {
        return this.getStringAttribute('network');
    }
    set network(value) {
        this._network = value;
    }
    resetNetwork() {
        this._network = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network;
    }
    get networkingMode() {
        return this.getStringAttribute('networking_mode');
    }
    set networkingMode(value) {
        this._networkingMode = value;
    }
    resetNetworkingMode() {
        this._networkingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkingModeInput() {
        return this._networkingMode;
    }
    get nodeLocations() {
        return cdktf.Fn.tolist(this.getListAttribute('node_locations'));
    }
    set nodeLocations(value) {
        this._nodeLocations = value;
    }
    resetNodeLocations() {
        this._nodeLocations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeLocationsInput() {
        return this._nodeLocations;
    }
    get nodeVersion() {
        return this.getStringAttribute('node_version');
    }
    set nodeVersion(value) {
        this._nodeVersion = value;
    }
    resetNodeVersion() {
        this._nodeVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeVersionInput() {
        return this._nodeVersion;
    }
    // operation - computed: true, optional: false, required: false
    get operation() {
        return this.getStringAttribute('operation');
    }
    get privateIpv6GoogleAccess() {
        return this.getStringAttribute('private_ipv6_google_access');
    }
    set privateIpv6GoogleAccess(value) {
        this._privateIpv6GoogleAccess = value;
    }
    resetPrivateIpv6GoogleAccess() {
        this._privateIpv6GoogleAccess = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateIpv6GoogleAccessInput() {
        return this._privateIpv6GoogleAccess;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get removeDefaultNodePool() {
        return this.getBooleanAttribute('remove_default_node_pool');
    }
    set removeDefaultNodePool(value) {
        this._removeDefaultNodePool = value;
    }
    resetRemoveDefaultNodePool() {
        this._removeDefaultNodePool = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get removeDefaultNodePoolInput() {
        return this._removeDefaultNodePool;
    }
    get resourceLabels() {
        return this.getStringMapAttribute('resource_labels');
    }
    set resourceLabels(value) {
        this._resourceLabels = value;
    }
    resetResourceLabels() {
        this._resourceLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceLabelsInput() {
        return this._resourceLabels;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    // services_ipv4_cidr - computed: true, optional: false, required: false
    get servicesIpv4Cidr() {
        return this.getStringAttribute('services_ipv4_cidr');
    }
    get subnetwork() {
        return this.getStringAttribute('subnetwork');
    }
    set subnetwork(value) {
        this._subnetwork = value;
    }
    resetSubnetwork() {
        this._subnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkInput() {
        return this._subnetwork;
    }
    // tpu_ipv4_cidr_block - computed: true, optional: false, required: false
    get tpuIpv4CidrBlock() {
        return this.getStringAttribute('tpu_ipv4_cidr_block');
    }
    get addonsConfig() {
        return this._addonsConfig;
    }
    putAddonsConfig(value) {
        this._addonsConfig.internalValue = value;
    }
    resetAddonsConfig() {
        this._addonsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get addonsConfigInput() {
        return this._addonsConfig.internalValue;
    }
    get authenticatorGroupsConfig() {
        return this._authenticatorGroupsConfig;
    }
    putAuthenticatorGroupsConfig(value) {
        this._authenticatorGroupsConfig.internalValue = value;
    }
    resetAuthenticatorGroupsConfig() {
        this._authenticatorGroupsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authenticatorGroupsConfigInput() {
        return this._authenticatorGroupsConfig.internalValue;
    }
    get binaryAuthorization() {
        return this._binaryAuthorization;
    }
    putBinaryAuthorization(value) {
        this._binaryAuthorization.internalValue = value;
    }
    resetBinaryAuthorization() {
        this._binaryAuthorization.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get binaryAuthorizationInput() {
        return this._binaryAuthorization.internalValue;
    }
    get clusterAutoscaling() {
        return this._clusterAutoscaling;
    }
    putClusterAutoscaling(value) {
        this._clusterAutoscaling.internalValue = value;
    }
    resetClusterAutoscaling() {
        this._clusterAutoscaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterAutoscalingInput() {
        return this._clusterAutoscaling.internalValue;
    }
    get confidentialNodes() {
        return this._confidentialNodes;
    }
    putConfidentialNodes(value) {
        this._confidentialNodes.internalValue = value;
    }
    resetConfidentialNodes() {
        this._confidentialNodes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confidentialNodesInput() {
        return this._confidentialNodes.internalValue;
    }
    get costManagementConfig() {
        return this._costManagementConfig;
    }
    putCostManagementConfig(value) {
        this._costManagementConfig.internalValue = value;
    }
    resetCostManagementConfig() {
        this._costManagementConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get costManagementConfigInput() {
        return this._costManagementConfig.internalValue;
    }
    get databaseEncryption() {
        return this._databaseEncryption;
    }
    putDatabaseEncryption(value) {
        this._databaseEncryption.internalValue = value;
    }
    resetDatabaseEncryption() {
        this._databaseEncryption.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseEncryptionInput() {
        return this._databaseEncryption.internalValue;
    }
    get defaultSnatStatus() {
        return this._defaultSnatStatus;
    }
    putDefaultSnatStatus(value) {
        this._defaultSnatStatus.internalValue = value;
    }
    resetDefaultSnatStatus() {
        this._defaultSnatStatus.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultSnatStatusInput() {
        return this._defaultSnatStatus.internalValue;
    }
    get dnsConfig() {
        return this._dnsConfig;
    }
    putDnsConfig(value) {
        this._dnsConfig.internalValue = value;
    }
    resetDnsConfig() {
        this._dnsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsConfigInput() {
        return this._dnsConfig.internalValue;
    }
    get ipAllocationPolicy() {
        return this._ipAllocationPolicy;
    }
    putIpAllocationPolicy(value) {
        this._ipAllocationPolicy.internalValue = value;
    }
    resetIpAllocationPolicy() {
        this._ipAllocationPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipAllocationPolicyInput() {
        return this._ipAllocationPolicy.internalValue;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
    get maintenancePolicy() {
        return this._maintenancePolicy;
    }
    putMaintenancePolicy(value) {
        this._maintenancePolicy.internalValue = value;
    }
    resetMaintenancePolicy() {
        this._maintenancePolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenancePolicyInput() {
        return this._maintenancePolicy.internalValue;
    }
    get masterAuth() {
        return this._masterAuth;
    }
    putMasterAuth(value) {
        this._masterAuth.internalValue = value;
    }
    resetMasterAuth() {
        this._masterAuth.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterAuthInput() {
        return this._masterAuth.internalValue;
    }
    get masterAuthorizedNetworksConfig() {
        return this._masterAuthorizedNetworksConfig;
    }
    putMasterAuthorizedNetworksConfig(value) {
        this._masterAuthorizedNetworksConfig.internalValue = value;
    }
    resetMasterAuthorizedNetworksConfig() {
        this._masterAuthorizedNetworksConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterAuthorizedNetworksConfigInput() {
        return this._masterAuthorizedNetworksConfig.internalValue;
    }
    get meshCertificates() {
        return this._meshCertificates;
    }
    putMeshCertificates(value) {
        this._meshCertificates.internalValue = value;
    }
    resetMeshCertificates() {
        this._meshCertificates.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get meshCertificatesInput() {
        return this._meshCertificates.internalValue;
    }
    get monitoringConfig() {
        return this._monitoringConfig;
    }
    putMonitoringConfig(value) {
        this._monitoringConfig.internalValue = value;
    }
    resetMonitoringConfig() {
        this._monitoringConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringConfigInput() {
        return this._monitoringConfig.internalValue;
    }
    get networkPolicy() {
        return this._networkPolicy;
    }
    putNetworkPolicy(value) {
        this._networkPolicy.internalValue = value;
    }
    resetNetworkPolicy() {
        this._networkPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkPolicyInput() {
        return this._networkPolicy.internalValue;
    }
    get nodeConfig() {
        return this._nodeConfig;
    }
    putNodeConfig(value) {
        this._nodeConfig.internalValue = value;
    }
    resetNodeConfig() {
        this._nodeConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeConfigInput() {
        return this._nodeConfig.internalValue;
    }
    get nodePool() {
        return this._nodePool;
    }
    putNodePool(value) {
        this._nodePool.internalValue = value;
    }
    resetNodePool() {
        this._nodePool.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodePoolInput() {
        return this._nodePool.internalValue;
    }
    get nodePoolDefaults() {
        return this._nodePoolDefaults;
    }
    putNodePoolDefaults(value) {
        this._nodePoolDefaults.internalValue = value;
    }
    resetNodePoolDefaults() {
        this._nodePoolDefaults.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodePoolDefaultsInput() {
        return this._nodePoolDefaults.internalValue;
    }
    get notificationConfig() {
        return this._notificationConfig;
    }
    putNotificationConfig(value) {
        this._notificationConfig.internalValue = value;
    }
    resetNotificationConfig() {
        this._notificationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationConfigInput() {
        return this._notificationConfig.internalValue;
    }
    get privateClusterConfig() {
        return this._privateClusterConfig;
    }
    putPrivateClusterConfig(value) {
        this._privateClusterConfig.internalValue = value;
    }
    resetPrivateClusterConfig() {
        this._privateClusterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateClusterConfigInput() {
        return this._privateClusterConfig.internalValue;
    }
    get releaseChannel() {
        return this._releaseChannel;
    }
    putReleaseChannel(value) {
        this._releaseChannel.internalValue = value;
    }
    resetReleaseChannel() {
        this._releaseChannel.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get releaseChannelInput() {
        return this._releaseChannel.internalValue;
    }
    get resourceUsageExportConfig() {
        return this._resourceUsageExportConfig;
    }
    putResourceUsageExportConfig(value) {
        this._resourceUsageExportConfig.internalValue = value;
    }
    resetResourceUsageExportConfig() {
        this._resourceUsageExportConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceUsageExportConfigInput() {
        return this._resourceUsageExportConfig.internalValue;
    }
    get serviceExternalIpsConfig() {
        return this._serviceExternalIpsConfig;
    }
    putServiceExternalIpsConfig(value) {
        this._serviceExternalIpsConfig.internalValue = value;
    }
    resetServiceExternalIpsConfig() {
        this._serviceExternalIpsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceExternalIpsConfigInput() {
        return this._serviceExternalIpsConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get verticalPodAutoscaling() {
        return this._verticalPodAutoscaling;
    }
    putVerticalPodAutoscaling(value) {
        this._verticalPodAutoscaling.internalValue = value;
    }
    resetVerticalPodAutoscaling() {
        this._verticalPodAutoscaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get verticalPodAutoscalingInput() {
        return this._verticalPodAutoscaling.internalValue;
    }
    get workloadIdentityConfig() {
        return this._workloadIdentityConfig;
    }
    putWorkloadIdentityConfig(value) {
        this._workloadIdentityConfig.internalValue = value;
    }
    resetWorkloadIdentityConfig() {
        this._workloadIdentityConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workloadIdentityConfigInput() {
        return this._workloadIdentityConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cluster_ipv4_cidr: cdktf.stringToTerraform(this._clusterIpv4Cidr),
            datapath_provider: cdktf.stringToTerraform(this._datapathProvider),
            default_max_pods_per_node: cdktf.numberToTerraform(this._defaultMaxPodsPerNode),
            description: cdktf.stringToTerraform(this._description),
            enable_autopilot: cdktf.booleanToTerraform(this._enableAutopilot),
            enable_binary_authorization: cdktf.booleanToTerraform(this._enableBinaryAuthorization),
            enable_intranode_visibility: cdktf.booleanToTerraform(this._enableIntranodeVisibility),
            enable_kubernetes_alpha: cdktf.booleanToTerraform(this._enableKubernetesAlpha),
            enable_l4_ilb_subsetting: cdktf.booleanToTerraform(this._enableL4IlbSubsetting),
            enable_legacy_abac: cdktf.booleanToTerraform(this._enableLegacyAbac),
            enable_shielded_nodes: cdktf.booleanToTerraform(this._enableShieldedNodes),
            enable_tpu: cdktf.booleanToTerraform(this._enableTpu),
            id: cdktf.stringToTerraform(this._id),
            initial_node_count: cdktf.numberToTerraform(this._initialNodeCount),
            location: cdktf.stringToTerraform(this._location),
            logging_service: cdktf.stringToTerraform(this._loggingService),
            min_master_version: cdktf.stringToTerraform(this._minMasterVersion),
            monitoring_service: cdktf.stringToTerraform(this._monitoringService),
            name: cdktf.stringToTerraform(this._name),
            network: cdktf.stringToTerraform(this._network),
            networking_mode: cdktf.stringToTerraform(this._networkingMode),
            node_locations: cdktf.listMapper(cdktf.stringToTerraform, false)(this._nodeLocations),
            node_version: cdktf.stringToTerraform(this._nodeVersion),
            private_ipv6_google_access: cdktf.stringToTerraform(this._privateIpv6GoogleAccess),
            project: cdktf.stringToTerraform(this._project),
            remove_default_node_pool: cdktf.booleanToTerraform(this._removeDefaultNodePool),
            resource_labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._resourceLabels),
            subnetwork: cdktf.stringToTerraform(this._subnetwork),
            addons_config: containerClusterAddonsConfigToTerraform(this._addonsConfig.internalValue),
            authenticator_groups_config: containerClusterAuthenticatorGroupsConfigToTerraform(this._authenticatorGroupsConfig.internalValue),
            binary_authorization: containerClusterBinaryAuthorizationToTerraform(this._binaryAuthorization.internalValue),
            cluster_autoscaling: containerClusterClusterAutoscalingToTerraform(this._clusterAutoscaling.internalValue),
            confidential_nodes: containerClusterConfidentialNodesToTerraform(this._confidentialNodes.internalValue),
            cost_management_config: containerClusterCostManagementConfigToTerraform(this._costManagementConfig.internalValue),
            database_encryption: containerClusterDatabaseEncryptionToTerraform(this._databaseEncryption.internalValue),
            default_snat_status: containerClusterDefaultSnatStatusToTerraform(this._defaultSnatStatus.internalValue),
            dns_config: containerClusterDnsConfigToTerraform(this._dnsConfig.internalValue),
            ip_allocation_policy: containerClusterIpAllocationPolicyToTerraform(this._ipAllocationPolicy.internalValue),
            logging_config: containerClusterLoggingConfigToTerraform(this._loggingConfig.internalValue),
            maintenance_policy: containerClusterMaintenancePolicyToTerraform(this._maintenancePolicy.internalValue),
            master_auth: containerClusterMasterAuthToTerraform(this._masterAuth.internalValue),
            master_authorized_networks_config: containerClusterMasterAuthorizedNetworksConfigToTerraform(this._masterAuthorizedNetworksConfig.internalValue),
            mesh_certificates: containerClusterMeshCertificatesToTerraform(this._meshCertificates.internalValue),
            monitoring_config: containerClusterMonitoringConfigToTerraform(this._monitoringConfig.internalValue),
            network_policy: containerClusterNetworkPolicyToTerraform(this._networkPolicy.internalValue),
            node_config: containerClusterNodeConfigToTerraform(this._nodeConfig.internalValue),
            node_pool: cdktf.listMapper(containerClusterNodePoolToTerraform, true)(this._nodePool.internalValue),
            node_pool_defaults: containerClusterNodePoolDefaultsToTerraform(this._nodePoolDefaults.internalValue),
            notification_config: containerClusterNotificationConfigToTerraform(this._notificationConfig.internalValue),
            private_cluster_config: containerClusterPrivateClusterConfigToTerraform(this._privateClusterConfig.internalValue),
            release_channel: containerClusterReleaseChannelToTerraform(this._releaseChannel.internalValue),
            resource_usage_export_config: containerClusterResourceUsageExportConfigToTerraform(this._resourceUsageExportConfig.internalValue),
            service_external_ips_config: containerClusterServiceExternalIpsConfigToTerraform(this._serviceExternalIpsConfig.internalValue),
            timeouts: containerClusterTimeoutsToTerraform(this._timeouts.internalValue),
            vertical_pod_autoscaling: containerClusterVerticalPodAutoscalingToTerraform(this._verticalPodAutoscaling.internalValue),
            workload_identity_config: containerClusterWorkloadIdentityConfigToTerraform(this._workloadIdentityConfig.internalValue),
        };
    }
}
exports.ContainerCluster = ContainerCluster;
_62 = JSII_RTTI_SYMBOL_1;
ContainerCluster[_62] = { fqn: "@cdktf/provider-google.containerCluster.ContainerCluster", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
ContainerCluster.tfResourceType = "google_container_cluster";
//# sourceMappingURL=data:application/json;base64,