"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivatecaCertificateAuthority = exports.PrivatecaCertificateAuthorityTimeoutsOutputReference = exports.privatecaCertificateAuthorityTimeoutsToTerraform = exports.PrivatecaCertificateAuthoritySubordinateConfigOutputReference = exports.privatecaCertificateAuthoritySubordinateConfigToTerraform = exports.PrivatecaCertificateAuthoritySubordinateConfigPemIssuerChainOutputReference = exports.privatecaCertificateAuthoritySubordinateConfigPemIssuerChainToTerraform = exports.PrivatecaCertificateAuthorityKeySpecOutputReference = exports.privatecaCertificateAuthorityKeySpecToTerraform = exports.PrivatecaCertificateAuthorityConfigAOutputReference = exports.privatecaCertificateAuthorityConfigAToTerraform = exports.PrivatecaCertificateAuthorityConfigX509ConfigOutputReference = exports.privatecaCertificateAuthorityConfigX509ConfigToTerraform = exports.PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsList = exports.PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsOutputReference = exports.privatecaCertificateAuthorityConfigX509ConfigPolicyIdsToTerraform = exports.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageOutputReference = exports.privatecaCertificateAuthorityConfigX509ConfigKeyUsageToTerraform = exports.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList = exports.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference = exports.privatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToTerraform = exports.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference = exports.privatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageToTerraform = exports.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageOutputReference = exports.privatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageToTerraform = exports.PrivatecaCertificateAuthorityConfigX509ConfigCaOptionsOutputReference = exports.privatecaCertificateAuthorityConfigX509ConfigCaOptionsToTerraform = exports.PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsList = exports.PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsOutputReference = exports.privatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsToTerraform = exports.PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdOutputReference = exports.privatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdToTerraform = exports.PrivatecaCertificateAuthorityConfigSubjectConfigOutputReference = exports.privatecaCertificateAuthorityConfigSubjectConfigToTerraform = exports.PrivatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameOutputReference = exports.privatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameToTerraform = exports.PrivatecaCertificateAuthorityConfigSubjectConfigSubjectOutputReference = exports.privatecaCertificateAuthorityConfigSubjectConfigSubjectToTerraform = exports.PrivatecaCertificateAuthorityAccessUrlsList = exports.PrivatecaCertificateAuthorityAccessUrlsOutputReference = exports.privatecaCertificateAuthorityAccessUrlsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function privatecaCertificateAuthorityAccessUrlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateAuthorityAccessUrlsToTerraform = privatecaCertificateAuthorityAccessUrlsToTerraform;
class PrivatecaCertificateAuthorityAccessUrlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // ca_certificate_access_url - computed: true, optional: false, required: false
    get caCertificateAccessUrl() {
        return this.getStringAttribute('ca_certificate_access_url');
    }
    // crl_access_urls - computed: true, optional: false, required: false
    get crlAccessUrls() {
        return this.getListAttribute('crl_access_urls');
    }
}
exports.PrivatecaCertificateAuthorityAccessUrlsOutputReference = PrivatecaCertificateAuthorityAccessUrlsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityAccessUrlsOutputReference[_a] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityAccessUrlsOutputReference", version: "5.0.1" };
class PrivatecaCertificateAuthorityAccessUrlsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateAuthorityAccessUrlsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateAuthorityAccessUrlsList = PrivatecaCertificateAuthorityAccessUrlsList;
_b = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityAccessUrlsList[_b] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityAccessUrlsList", version: "5.0.1" };
function privatecaCertificateAuthorityConfigSubjectConfigSubjectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        common_name: cdktf.stringToTerraform(struct.commonName),
        country_code: cdktf.stringToTerraform(struct.countryCode),
        locality: cdktf.stringToTerraform(struct.locality),
        organization: cdktf.stringToTerraform(struct.organization),
        organizational_unit: cdktf.stringToTerraform(struct.organizationalUnit),
        postal_code: cdktf.stringToTerraform(struct.postalCode),
        province: cdktf.stringToTerraform(struct.province),
        street_address: cdktf.stringToTerraform(struct.streetAddress),
    };
}
exports.privatecaCertificateAuthorityConfigSubjectConfigSubjectToTerraform = privatecaCertificateAuthorityConfigSubjectConfigSubjectToTerraform;
class PrivatecaCertificateAuthorityConfigSubjectConfigSubjectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._commonName !== undefined) {
            hasAnyValues = true;
            internalValueResult.commonName = this._commonName;
        }
        if (this._countryCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.countryCode = this._countryCode;
        }
        if (this._locality !== undefined) {
            hasAnyValues = true;
            internalValueResult.locality = this._locality;
        }
        if (this._organization !== undefined) {
            hasAnyValues = true;
            internalValueResult.organization = this._organization;
        }
        if (this._organizationalUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.organizationalUnit = this._organizationalUnit;
        }
        if (this._postalCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.postalCode = this._postalCode;
        }
        if (this._province !== undefined) {
            hasAnyValues = true;
            internalValueResult.province = this._province;
        }
        if (this._streetAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.streetAddress = this._streetAddress;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._commonName = undefined;
            this._countryCode = undefined;
            this._locality = undefined;
            this._organization = undefined;
            this._organizationalUnit = undefined;
            this._postalCode = undefined;
            this._province = undefined;
            this._streetAddress = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._commonName = value.commonName;
            this._countryCode = value.countryCode;
            this._locality = value.locality;
            this._organization = value.organization;
            this._organizationalUnit = value.organizationalUnit;
            this._postalCode = value.postalCode;
            this._province = value.province;
            this._streetAddress = value.streetAddress;
        }
    }
    get commonName() {
        return this.getStringAttribute('common_name');
    }
    set commonName(value) {
        this._commonName = value;
    }
    // Temporarily expose input value. Use with caution.
    get commonNameInput() {
        return this._commonName;
    }
    get countryCode() {
        return this.getStringAttribute('country_code');
    }
    set countryCode(value) {
        this._countryCode = value;
    }
    resetCountryCode() {
        this._countryCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countryCodeInput() {
        return this._countryCode;
    }
    get locality() {
        return this.getStringAttribute('locality');
    }
    set locality(value) {
        this._locality = value;
    }
    resetLocality() {
        this._locality = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localityInput() {
        return this._locality;
    }
    get organization() {
        return this.getStringAttribute('organization');
    }
    set organization(value) {
        this._organization = value;
    }
    // Temporarily expose input value. Use with caution.
    get organizationInput() {
        return this._organization;
    }
    get organizationalUnit() {
        return this.getStringAttribute('organizational_unit');
    }
    set organizationalUnit(value) {
        this._organizationalUnit = value;
    }
    resetOrganizationalUnit() {
        this._organizationalUnit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get organizationalUnitInput() {
        return this._organizationalUnit;
    }
    get postalCode() {
        return this.getStringAttribute('postal_code');
    }
    set postalCode(value) {
        this._postalCode = value;
    }
    resetPostalCode() {
        this._postalCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postalCodeInput() {
        return this._postalCode;
    }
    get province() {
        return this.getStringAttribute('province');
    }
    set province(value) {
        this._province = value;
    }
    resetProvince() {
        this._province = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provinceInput() {
        return this._province;
    }
    get streetAddress() {
        return this.getStringAttribute('street_address');
    }
    set streetAddress(value) {
        this._streetAddress = value;
    }
    resetStreetAddress() {
        this._streetAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streetAddressInput() {
        return this._streetAddress;
    }
}
exports.PrivatecaCertificateAuthorityConfigSubjectConfigSubjectOutputReference = PrivatecaCertificateAuthorityConfigSubjectConfigSubjectOutputReference;
_c = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigSubjectConfigSubjectOutputReference[_c] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigSubjectConfigSubjectOutputReference", version: "5.0.1" };
function privatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dns_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.dnsNames),
        email_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.emailAddresses),
        ip_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.ipAddresses),
        uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.uris),
    };
}
exports.privatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameToTerraform = privatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameToTerraform;
class PrivatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dnsNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.dnsNames = this._dnsNames;
        }
        if (this._emailAddresses !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailAddresses = this._emailAddresses;
        }
        if (this._ipAddresses !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipAddresses = this._ipAddresses;
        }
        if (this._uris !== undefined) {
            hasAnyValues = true;
            internalValueResult.uris = this._uris;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dnsNames = undefined;
            this._emailAddresses = undefined;
            this._ipAddresses = undefined;
            this._uris = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dnsNames = value.dnsNames;
            this._emailAddresses = value.emailAddresses;
            this._ipAddresses = value.ipAddresses;
            this._uris = value.uris;
        }
    }
    get dnsNames() {
        return this.getListAttribute('dns_names');
    }
    set dnsNames(value) {
        this._dnsNames = value;
    }
    resetDnsNames() {
        this._dnsNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsNamesInput() {
        return this._dnsNames;
    }
    get emailAddresses() {
        return this.getListAttribute('email_addresses');
    }
    set emailAddresses(value) {
        this._emailAddresses = value;
    }
    resetEmailAddresses() {
        this._emailAddresses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailAddressesInput() {
        return this._emailAddresses;
    }
    get ipAddresses() {
        return this.getListAttribute('ip_addresses');
    }
    set ipAddresses(value) {
        this._ipAddresses = value;
    }
    resetIpAddresses() {
        this._ipAddresses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipAddressesInput() {
        return this._ipAddresses;
    }
    get uris() {
        return this.getListAttribute('uris');
    }
    set uris(value) {
        this._uris = value;
    }
    resetUris() {
        this._uris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urisInput() {
        return this._uris;
    }
}
exports.PrivatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameOutputReference = PrivatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameOutputReference;
_d = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameOutputReference[_d] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameOutputReference", version: "5.0.1" };
function privatecaCertificateAuthorityConfigSubjectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        subject: privatecaCertificateAuthorityConfigSubjectConfigSubjectToTerraform(struct.subject),
        subject_alt_name: privatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameToTerraform(struct.subjectAltName),
    };
}
exports.privatecaCertificateAuthorityConfigSubjectConfigToTerraform = privatecaCertificateAuthorityConfigSubjectConfigToTerraform;
class PrivatecaCertificateAuthorityConfigSubjectConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // subject - computed: false, optional: false, required: true
        this._subject = new PrivatecaCertificateAuthorityConfigSubjectConfigSubjectOutputReference(this, "subject");
        // subject_alt_name - computed: false, optional: true, required: false
        this._subjectAltName = new PrivatecaCertificateAuthorityConfigSubjectConfigSubjectAltNameOutputReference(this, "subject_alt_name");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._subject?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.subject = this._subject?.internalValue;
        }
        if (this._subjectAltName?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.subjectAltName = this._subjectAltName?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._subject.internalValue = undefined;
            this._subjectAltName.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._subject.internalValue = value.subject;
            this._subjectAltName.internalValue = value.subjectAltName;
        }
    }
    get subject() {
        return this._subject;
    }
    putSubject(value) {
        this._subject.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get subjectInput() {
        return this._subject.internalValue;
    }
    get subjectAltName() {
        return this._subjectAltName;
    }
    putSubjectAltName(value) {
        this._subjectAltName.internalValue = value;
    }
    resetSubjectAltName() {
        this._subjectAltName.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subjectAltNameInput() {
        return this._subjectAltName.internalValue;
    }
}
exports.PrivatecaCertificateAuthorityConfigSubjectConfigOutputReference = PrivatecaCertificateAuthorityConfigSubjectConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigSubjectConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigSubjectConfigOutputReference", version: "5.0.1" };
function privatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdToTerraform = privatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdToTerraform;
class PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._objectIdPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdOutputReference = PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdOutputReference;
_f = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdOutputReference[_f] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdOutputReference", version: "5.0.1" };
function privatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        critical: cdktf.booleanToTerraform(struct.critical),
        value: cdktf.stringToTerraform(struct.value),
        object_id: privatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdToTerraform(struct.objectId),
    };
}
exports.privatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsToTerraform = privatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsToTerraform;
class PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // object_id - computed: false, optional: false, required: true
        this._objectId = new PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsObjectIdOutputReference(this, "object_id");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._critical !== undefined) {
            hasAnyValues = true;
            internalValueResult.critical = this._critical;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        if (this._objectId?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectId = this._objectId?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._critical = undefined;
            this._value = undefined;
            this._objectId.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._critical = value.critical;
            this._value = value.value;
            this._objectId.internalValue = value.objectId;
        }
    }
    get critical() {
        return this.getBooleanAttribute('critical');
    }
    set critical(value) {
        this._critical = value;
    }
    // Temporarily expose input value. Use with caution.
    get criticalInput() {
        return this._critical;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
    get objectId() {
        return this._objectId;
    }
    putObjectId(value) {
        this._objectId.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdInput() {
        return this._objectId.internalValue;
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsOutputReference = PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsOutputReference[_g] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsOutputReference", version: "5.0.1" };
class PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsList = PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsList;
_h = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsList[_h] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsList", version: "5.0.1" };
function privatecaCertificateAuthorityConfigX509ConfigCaOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        is_ca: cdktf.booleanToTerraform(struct.isCa),
        max_issuer_path_length: cdktf.numberToTerraform(struct.maxIssuerPathLength),
        non_ca: cdktf.booleanToTerraform(struct.nonCa),
        zero_max_issuer_path_length: cdktf.booleanToTerraform(struct.zeroMaxIssuerPathLength),
    };
}
exports.privatecaCertificateAuthorityConfigX509ConfigCaOptionsToTerraform = privatecaCertificateAuthorityConfigX509ConfigCaOptionsToTerraform;
class PrivatecaCertificateAuthorityConfigX509ConfigCaOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._isCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.isCa = this._isCa;
        }
        if (this._maxIssuerPathLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxIssuerPathLength = this._maxIssuerPathLength;
        }
        if (this._nonCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.nonCa = this._nonCa;
        }
        if (this._zeroMaxIssuerPathLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.zeroMaxIssuerPathLength = this._zeroMaxIssuerPathLength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._isCa = undefined;
            this._maxIssuerPathLength = undefined;
            this._nonCa = undefined;
            this._zeroMaxIssuerPathLength = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._isCa = value.isCa;
            this._maxIssuerPathLength = value.maxIssuerPathLength;
            this._nonCa = value.nonCa;
            this._zeroMaxIssuerPathLength = value.zeroMaxIssuerPathLength;
        }
    }
    get isCa() {
        return this.getBooleanAttribute('is_ca');
    }
    set isCa(value) {
        this._isCa = value;
    }
    // Temporarily expose input value. Use with caution.
    get isCaInput() {
        return this._isCa;
    }
    get maxIssuerPathLength() {
        return this.getNumberAttribute('max_issuer_path_length');
    }
    set maxIssuerPathLength(value) {
        this._maxIssuerPathLength = value;
    }
    resetMaxIssuerPathLength() {
        this._maxIssuerPathLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxIssuerPathLengthInput() {
        return this._maxIssuerPathLength;
    }
    get nonCa() {
        return this.getBooleanAttribute('non_ca');
    }
    set nonCa(value) {
        this._nonCa = value;
    }
    resetNonCa() {
        this._nonCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nonCaInput() {
        return this._nonCa;
    }
    get zeroMaxIssuerPathLength() {
        return this.getBooleanAttribute('zero_max_issuer_path_length');
    }
    set zeroMaxIssuerPathLength(value) {
        this._zeroMaxIssuerPathLength = value;
    }
    resetZeroMaxIssuerPathLength() {
        this._zeroMaxIssuerPathLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zeroMaxIssuerPathLengthInput() {
        return this._zeroMaxIssuerPathLength;
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigCaOptionsOutputReference = PrivatecaCertificateAuthorityConfigX509ConfigCaOptionsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigCaOptionsOutputReference[_j] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigCaOptionsOutputReference", version: "5.0.1" };
function privatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cert_sign: cdktf.booleanToTerraform(struct.certSign),
        content_commitment: cdktf.booleanToTerraform(struct.contentCommitment),
        crl_sign: cdktf.booleanToTerraform(struct.crlSign),
        data_encipherment: cdktf.booleanToTerraform(struct.dataEncipherment),
        decipher_only: cdktf.booleanToTerraform(struct.decipherOnly),
        digital_signature: cdktf.booleanToTerraform(struct.digitalSignature),
        encipher_only: cdktf.booleanToTerraform(struct.encipherOnly),
        key_agreement: cdktf.booleanToTerraform(struct.keyAgreement),
        key_encipherment: cdktf.booleanToTerraform(struct.keyEncipherment),
    };
}
exports.privatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageToTerraform = privatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageToTerraform;
class PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certSign !== undefined) {
            hasAnyValues = true;
            internalValueResult.certSign = this._certSign;
        }
        if (this._contentCommitment !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentCommitment = this._contentCommitment;
        }
        if (this._crlSign !== undefined) {
            hasAnyValues = true;
            internalValueResult.crlSign = this._crlSign;
        }
        if (this._dataEncipherment !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataEncipherment = this._dataEncipherment;
        }
        if (this._decipherOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.decipherOnly = this._decipherOnly;
        }
        if (this._digitalSignature !== undefined) {
            hasAnyValues = true;
            internalValueResult.digitalSignature = this._digitalSignature;
        }
        if (this._encipherOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.encipherOnly = this._encipherOnly;
        }
        if (this._keyAgreement !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyAgreement = this._keyAgreement;
        }
        if (this._keyEncipherment !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyEncipherment = this._keyEncipherment;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certSign = undefined;
            this._contentCommitment = undefined;
            this._crlSign = undefined;
            this._dataEncipherment = undefined;
            this._decipherOnly = undefined;
            this._digitalSignature = undefined;
            this._encipherOnly = undefined;
            this._keyAgreement = undefined;
            this._keyEncipherment = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certSign = value.certSign;
            this._contentCommitment = value.contentCommitment;
            this._crlSign = value.crlSign;
            this._dataEncipherment = value.dataEncipherment;
            this._decipherOnly = value.decipherOnly;
            this._digitalSignature = value.digitalSignature;
            this._encipherOnly = value.encipherOnly;
            this._keyAgreement = value.keyAgreement;
            this._keyEncipherment = value.keyEncipherment;
        }
    }
    get certSign() {
        return this.getBooleanAttribute('cert_sign');
    }
    set certSign(value) {
        this._certSign = value;
    }
    resetCertSign() {
        this._certSign = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certSignInput() {
        return this._certSign;
    }
    get contentCommitment() {
        return this.getBooleanAttribute('content_commitment');
    }
    set contentCommitment(value) {
        this._contentCommitment = value;
    }
    resetContentCommitment() {
        this._contentCommitment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentCommitmentInput() {
        return this._contentCommitment;
    }
    get crlSign() {
        return this.getBooleanAttribute('crl_sign');
    }
    set crlSign(value) {
        this._crlSign = value;
    }
    resetCrlSign() {
        this._crlSign = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crlSignInput() {
        return this._crlSign;
    }
    get dataEncipherment() {
        return this.getBooleanAttribute('data_encipherment');
    }
    set dataEncipherment(value) {
        this._dataEncipherment = value;
    }
    resetDataEncipherment() {
        this._dataEncipherment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataEnciphermentInput() {
        return this._dataEncipherment;
    }
    get decipherOnly() {
        return this.getBooleanAttribute('decipher_only');
    }
    set decipherOnly(value) {
        this._decipherOnly = value;
    }
    resetDecipherOnly() {
        this._decipherOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get decipherOnlyInput() {
        return this._decipherOnly;
    }
    get digitalSignature() {
        return this.getBooleanAttribute('digital_signature');
    }
    set digitalSignature(value) {
        this._digitalSignature = value;
    }
    resetDigitalSignature() {
        this._digitalSignature = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get digitalSignatureInput() {
        return this._digitalSignature;
    }
    get encipherOnly() {
        return this.getBooleanAttribute('encipher_only');
    }
    set encipherOnly(value) {
        this._encipherOnly = value;
    }
    resetEncipherOnly() {
        this._encipherOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encipherOnlyInput() {
        return this._encipherOnly;
    }
    get keyAgreement() {
        return this.getBooleanAttribute('key_agreement');
    }
    set keyAgreement(value) {
        this._keyAgreement = value;
    }
    resetKeyAgreement() {
        this._keyAgreement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyAgreementInput() {
        return this._keyAgreement;
    }
    get keyEncipherment() {
        return this.getBooleanAttribute('key_encipherment');
    }
    set keyEncipherment(value) {
        this._keyEncipherment = value;
    }
    resetKeyEncipherment() {
        this._keyEncipherment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyEnciphermentInput() {
        return this._keyEncipherment;
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageOutputReference = PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageOutputReference;
_k = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageOutputReference[_k] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageOutputReference", version: "5.0.1" };
function privatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_auth: cdktf.booleanToTerraform(struct.clientAuth),
        code_signing: cdktf.booleanToTerraform(struct.codeSigning),
        email_protection: cdktf.booleanToTerraform(struct.emailProtection),
        ocsp_signing: cdktf.booleanToTerraform(struct.ocspSigning),
        server_auth: cdktf.booleanToTerraform(struct.serverAuth),
        time_stamping: cdktf.booleanToTerraform(struct.timeStamping),
    };
}
exports.privatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageToTerraform = privatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageToTerraform;
class PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientAuth !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientAuth = this._clientAuth;
        }
        if (this._codeSigning !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeSigning = this._codeSigning;
        }
        if (this._emailProtection !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailProtection = this._emailProtection;
        }
        if (this._ocspSigning !== undefined) {
            hasAnyValues = true;
            internalValueResult.ocspSigning = this._ocspSigning;
        }
        if (this._serverAuth !== undefined) {
            hasAnyValues = true;
            internalValueResult.serverAuth = this._serverAuth;
        }
        if (this._timeStamping !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeStamping = this._timeStamping;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientAuth = undefined;
            this._codeSigning = undefined;
            this._emailProtection = undefined;
            this._ocspSigning = undefined;
            this._serverAuth = undefined;
            this._timeStamping = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientAuth = value.clientAuth;
            this._codeSigning = value.codeSigning;
            this._emailProtection = value.emailProtection;
            this._ocspSigning = value.ocspSigning;
            this._serverAuth = value.serverAuth;
            this._timeStamping = value.timeStamping;
        }
    }
    get clientAuth() {
        return this.getBooleanAttribute('client_auth');
    }
    set clientAuth(value) {
        this._clientAuth = value;
    }
    resetClientAuth() {
        this._clientAuth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientAuthInput() {
        return this._clientAuth;
    }
    get codeSigning() {
        return this.getBooleanAttribute('code_signing');
    }
    set codeSigning(value) {
        this._codeSigning = value;
    }
    resetCodeSigning() {
        this._codeSigning = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeSigningInput() {
        return this._codeSigning;
    }
    get emailProtection() {
        return this.getBooleanAttribute('email_protection');
    }
    set emailProtection(value) {
        this._emailProtection = value;
    }
    resetEmailProtection() {
        this._emailProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailProtectionInput() {
        return this._emailProtection;
    }
    get ocspSigning() {
        return this.getBooleanAttribute('ocsp_signing');
    }
    set ocspSigning(value) {
        this._ocspSigning = value;
    }
    resetOcspSigning() {
        this._ocspSigning = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ocspSigningInput() {
        return this._ocspSigning;
    }
    get serverAuth() {
        return this.getBooleanAttribute('server_auth');
    }
    set serverAuth(value) {
        this._serverAuth = value;
    }
    resetServerAuth() {
        this._serverAuth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverAuthInput() {
        return this._serverAuth;
    }
    get timeStamping() {
        return this.getBooleanAttribute('time_stamping');
    }
    set timeStamping(value) {
        this._timeStamping = value;
    }
    resetTimeStamping() {
        this._timeStamping = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeStampingInput() {
        return this._timeStamping;
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference = PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference;
_l = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference[_l] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference", version: "5.0.1" };
function privatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToTerraform = privatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToTerraform;
class PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._objectIdPath = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference = PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference[_m] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference", version: "5.0.1" };
class PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList = PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList;
_o = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList[_o] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList", version: "5.0.1" };
function privatecaCertificateAuthorityConfigX509ConfigKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        base_key_usage: privatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageToTerraform(struct.baseKeyUsage),
        extended_key_usage: privatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageToTerraform(struct.extendedKeyUsage),
        unknown_extended_key_usages: cdktf.listMapper(privatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToTerraform, true)(struct.unknownExtendedKeyUsages),
    };
}
exports.privatecaCertificateAuthorityConfigX509ConfigKeyUsageToTerraform = privatecaCertificateAuthorityConfigX509ConfigKeyUsageToTerraform;
class PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // base_key_usage - computed: false, optional: false, required: true
        this._baseKeyUsage = new PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageBaseKeyUsageOutputReference(this, "base_key_usage");
        // extended_key_usage - computed: false, optional: false, required: true
        this._extendedKeyUsage = new PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference(this, "extended_key_usage");
        // unknown_extended_key_usages - computed: false, optional: true, required: false
        this._unknownExtendedKeyUsages = new PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList(this, "unknown_extended_key_usages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._baseKeyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseKeyUsage = this._baseKeyUsage?.internalValue;
        }
        if (this._extendedKeyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.extendedKeyUsage = this._extendedKeyUsage?.internalValue;
        }
        if (this._unknownExtendedKeyUsages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.unknownExtendedKeyUsages = this._unknownExtendedKeyUsages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._baseKeyUsage.internalValue = undefined;
            this._extendedKeyUsage.internalValue = undefined;
            this._unknownExtendedKeyUsages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._baseKeyUsage.internalValue = value.baseKeyUsage;
            this._extendedKeyUsage.internalValue = value.extendedKeyUsage;
            this._unknownExtendedKeyUsages.internalValue = value.unknownExtendedKeyUsages;
        }
    }
    get baseKeyUsage() {
        return this._baseKeyUsage;
    }
    putBaseKeyUsage(value) {
        this._baseKeyUsage.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get baseKeyUsageInput() {
        return this._baseKeyUsage.internalValue;
    }
    get extendedKeyUsage() {
        return this._extendedKeyUsage;
    }
    putExtendedKeyUsage(value) {
        this._extendedKeyUsage.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get extendedKeyUsageInput() {
        return this._extendedKeyUsage.internalValue;
    }
    get unknownExtendedKeyUsages() {
        return this._unknownExtendedKeyUsages;
    }
    putUnknownExtendedKeyUsages(value) {
        this._unknownExtendedKeyUsages.internalValue = value;
    }
    resetUnknownExtendedKeyUsages() {
        this._unknownExtendedKeyUsages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unknownExtendedKeyUsagesInput() {
        return this._unknownExtendedKeyUsages.internalValue;
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageOutputReference = PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageOutputReference;
_p = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageOutputReference[_p] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageOutputReference", version: "5.0.1" };
function privatecaCertificateAuthorityConfigX509ConfigPolicyIdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCertificateAuthorityConfigX509ConfigPolicyIdsToTerraform = privatecaCertificateAuthorityConfigX509ConfigPolicyIdsToTerraform;
class PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._objectIdPath = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsOutputReference = PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsOutputReference[_q] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsOutputReference", version: "5.0.1" };
class PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsList = PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsList;
_r = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsList[_r] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsList", version: "5.0.1" };
function privatecaCertificateAuthorityConfigX509ConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aia_ocsp_servers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.aiaOcspServers),
        additional_extensions: cdktf.listMapper(privatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsToTerraform, true)(struct.additionalExtensions),
        ca_options: privatecaCertificateAuthorityConfigX509ConfigCaOptionsToTerraform(struct.caOptions),
        key_usage: privatecaCertificateAuthorityConfigX509ConfigKeyUsageToTerraform(struct.keyUsage),
        policy_ids: cdktf.listMapper(privatecaCertificateAuthorityConfigX509ConfigPolicyIdsToTerraform, true)(struct.policyIds),
    };
}
exports.privatecaCertificateAuthorityConfigX509ConfigToTerraform = privatecaCertificateAuthorityConfigX509ConfigToTerraform;
class PrivatecaCertificateAuthorityConfigX509ConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // additional_extensions - computed: false, optional: true, required: false
        this._additionalExtensions = new PrivatecaCertificateAuthorityConfigX509ConfigAdditionalExtensionsList(this, "additional_extensions", false);
        // ca_options - computed: false, optional: false, required: true
        this._caOptions = new PrivatecaCertificateAuthorityConfigX509ConfigCaOptionsOutputReference(this, "ca_options");
        // key_usage - computed: false, optional: false, required: true
        this._keyUsage = new PrivatecaCertificateAuthorityConfigX509ConfigKeyUsageOutputReference(this, "key_usage");
        // policy_ids - computed: false, optional: true, required: false
        this._policyIds = new PrivatecaCertificateAuthorityConfigX509ConfigPolicyIdsList(this, "policy_ids", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._aiaOcspServers !== undefined) {
            hasAnyValues = true;
            internalValueResult.aiaOcspServers = this._aiaOcspServers;
        }
        if (this._additionalExtensions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalExtensions = this._additionalExtensions?.internalValue;
        }
        if (this._caOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.caOptions = this._caOptions?.internalValue;
        }
        if (this._keyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyUsage = this._keyUsage?.internalValue;
        }
        if (this._policyIds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyIds = this._policyIds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._aiaOcspServers = undefined;
            this._additionalExtensions.internalValue = undefined;
            this._caOptions.internalValue = undefined;
            this._keyUsage.internalValue = undefined;
            this._policyIds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._aiaOcspServers = value.aiaOcspServers;
            this._additionalExtensions.internalValue = value.additionalExtensions;
            this._caOptions.internalValue = value.caOptions;
            this._keyUsage.internalValue = value.keyUsage;
            this._policyIds.internalValue = value.policyIds;
        }
    }
    get aiaOcspServers() {
        return this.getListAttribute('aia_ocsp_servers');
    }
    set aiaOcspServers(value) {
        this._aiaOcspServers = value;
    }
    resetAiaOcspServers() {
        this._aiaOcspServers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aiaOcspServersInput() {
        return this._aiaOcspServers;
    }
    get additionalExtensions() {
        return this._additionalExtensions;
    }
    putAdditionalExtensions(value) {
        this._additionalExtensions.internalValue = value;
    }
    resetAdditionalExtensions() {
        this._additionalExtensions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalExtensionsInput() {
        return this._additionalExtensions.internalValue;
    }
    get caOptions() {
        return this._caOptions;
    }
    putCaOptions(value) {
        this._caOptions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get caOptionsInput() {
        return this._caOptions.internalValue;
    }
    get keyUsage() {
        return this._keyUsage;
    }
    putKeyUsage(value) {
        this._keyUsage.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyUsageInput() {
        return this._keyUsage.internalValue;
    }
    get policyIds() {
        return this._policyIds;
    }
    putPolicyIds(value) {
        this._policyIds.internalValue = value;
    }
    resetPolicyIds() {
        this._policyIds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyIdsInput() {
        return this._policyIds.internalValue;
    }
}
exports.PrivatecaCertificateAuthorityConfigX509ConfigOutputReference = PrivatecaCertificateAuthorityConfigX509ConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigX509ConfigOutputReference[_s] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigX509ConfigOutputReference", version: "5.0.1" };
function privatecaCertificateAuthorityConfigAToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        subject_config: privatecaCertificateAuthorityConfigSubjectConfigToTerraform(struct.subjectConfig),
        x509_config: privatecaCertificateAuthorityConfigX509ConfigToTerraform(struct.x509Config),
    };
}
exports.privatecaCertificateAuthorityConfigAToTerraform = privatecaCertificateAuthorityConfigAToTerraform;
class PrivatecaCertificateAuthorityConfigAOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // subject_config - computed: false, optional: false, required: true
        this._subjectConfig = new PrivatecaCertificateAuthorityConfigSubjectConfigOutputReference(this, "subject_config");
        // x509_config - computed: false, optional: false, required: true
        this._x509Config = new PrivatecaCertificateAuthorityConfigX509ConfigOutputReference(this, "x509_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._subjectConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.subjectConfig = this._subjectConfig?.internalValue;
        }
        if (this._x509Config?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.x509Config = this._x509Config?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._subjectConfig.internalValue = undefined;
            this._x509Config.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._subjectConfig.internalValue = value.subjectConfig;
            this._x509Config.internalValue = value.x509Config;
        }
    }
    get subjectConfig() {
        return this._subjectConfig;
    }
    putSubjectConfig(value) {
        this._subjectConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get subjectConfigInput() {
        return this._subjectConfig.internalValue;
    }
    get x509Config() {
        return this._x509Config;
    }
    putX509Config(value) {
        this._x509Config.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get x509ConfigInput() {
        return this._x509Config.internalValue;
    }
}
exports.PrivatecaCertificateAuthorityConfigAOutputReference = PrivatecaCertificateAuthorityConfigAOutputReference;
_t = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityConfigAOutputReference[_t] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityConfigAOutputReference", version: "5.0.1" };
function privatecaCertificateAuthorityKeySpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        algorithm: cdktf.stringToTerraform(struct.algorithm),
        cloud_kms_key_version: cdktf.stringToTerraform(struct.cloudKmsKeyVersion),
    };
}
exports.privatecaCertificateAuthorityKeySpecToTerraform = privatecaCertificateAuthorityKeySpecToTerraform;
class PrivatecaCertificateAuthorityKeySpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._algorithm !== undefined) {
            hasAnyValues = true;
            internalValueResult.algorithm = this._algorithm;
        }
        if (this._cloudKmsKeyVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudKmsKeyVersion = this._cloudKmsKeyVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._algorithm = undefined;
            this._cloudKmsKeyVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._algorithm = value.algorithm;
            this._cloudKmsKeyVersion = value.cloudKmsKeyVersion;
        }
    }
    get algorithm() {
        return this.getStringAttribute('algorithm');
    }
    set algorithm(value) {
        this._algorithm = value;
    }
    resetAlgorithm() {
        this._algorithm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get algorithmInput() {
        return this._algorithm;
    }
    get cloudKmsKeyVersion() {
        return this.getStringAttribute('cloud_kms_key_version');
    }
    set cloudKmsKeyVersion(value) {
        this._cloudKmsKeyVersion = value;
    }
    resetCloudKmsKeyVersion() {
        this._cloudKmsKeyVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudKmsKeyVersionInput() {
        return this._cloudKmsKeyVersion;
    }
}
exports.PrivatecaCertificateAuthorityKeySpecOutputReference = PrivatecaCertificateAuthorityKeySpecOutputReference;
_u = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityKeySpecOutputReference[_u] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityKeySpecOutputReference", version: "5.0.1" };
function privatecaCertificateAuthoritySubordinateConfigPemIssuerChainToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        pem_certificates: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.pemCertificates),
    };
}
exports.privatecaCertificateAuthoritySubordinateConfigPemIssuerChainToTerraform = privatecaCertificateAuthoritySubordinateConfigPemIssuerChainToTerraform;
class PrivatecaCertificateAuthoritySubordinateConfigPemIssuerChainOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pemCertificates !== undefined) {
            hasAnyValues = true;
            internalValueResult.pemCertificates = this._pemCertificates;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._pemCertificates = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._pemCertificates = value.pemCertificates;
        }
    }
    get pemCertificates() {
        return this.getListAttribute('pem_certificates');
    }
    set pemCertificates(value) {
        this._pemCertificates = value;
    }
    resetPemCertificates() {
        this._pemCertificates = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pemCertificatesInput() {
        return this._pemCertificates;
    }
}
exports.PrivatecaCertificateAuthoritySubordinateConfigPemIssuerChainOutputReference = PrivatecaCertificateAuthoritySubordinateConfigPemIssuerChainOutputReference;
_v = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthoritySubordinateConfigPemIssuerChainOutputReference[_v] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthoritySubordinateConfigPemIssuerChainOutputReference", version: "5.0.1" };
function privatecaCertificateAuthoritySubordinateConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_authority: cdktf.stringToTerraform(struct.certificateAuthority),
        pem_issuer_chain: privatecaCertificateAuthoritySubordinateConfigPemIssuerChainToTerraform(struct.pemIssuerChain),
    };
}
exports.privatecaCertificateAuthoritySubordinateConfigToTerraform = privatecaCertificateAuthoritySubordinateConfigToTerraform;
class PrivatecaCertificateAuthoritySubordinateConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // pem_issuer_chain - computed: false, optional: true, required: false
        this._pemIssuerChain = new PrivatecaCertificateAuthoritySubordinateConfigPemIssuerChainOutputReference(this, "pem_issuer_chain");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateAuthority !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateAuthority = this._certificateAuthority;
        }
        if (this._pemIssuerChain?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pemIssuerChain = this._pemIssuerChain?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateAuthority = undefined;
            this._pemIssuerChain.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateAuthority = value.certificateAuthority;
            this._pemIssuerChain.internalValue = value.pemIssuerChain;
        }
    }
    get certificateAuthority() {
        return this.getStringAttribute('certificate_authority');
    }
    set certificateAuthority(value) {
        this._certificateAuthority = value;
    }
    resetCertificateAuthority() {
        this._certificateAuthority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateAuthorityInput() {
        return this._certificateAuthority;
    }
    get pemIssuerChain() {
        return this._pemIssuerChain;
    }
    putPemIssuerChain(value) {
        this._pemIssuerChain.internalValue = value;
    }
    resetPemIssuerChain() {
        this._pemIssuerChain.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pemIssuerChainInput() {
        return this._pemIssuerChain.internalValue;
    }
}
exports.PrivatecaCertificateAuthoritySubordinateConfigOutputReference = PrivatecaCertificateAuthoritySubordinateConfigOutputReference;
_w = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthoritySubordinateConfigOutputReference[_w] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthoritySubordinateConfigOutputReference", version: "5.0.1" };
function privatecaCertificateAuthorityTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.privatecaCertificateAuthorityTimeoutsToTerraform = privatecaCertificateAuthorityTimeoutsToTerraform;
class PrivatecaCertificateAuthorityTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.PrivatecaCertificateAuthorityTimeoutsOutputReference = PrivatecaCertificateAuthorityTimeoutsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthorityTimeoutsOutputReference[_x] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthorityTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/privateca_certificate_authority google_privateca_certificate_authority}
*/
class PrivatecaCertificateAuthority extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/privateca_certificate_authority google_privateca_certificate_authority} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options PrivatecaCertificateAuthorityConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_privateca_certificate_authority',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ==========
        // ATTRIBUTES
        // ==========
        // access_urls - computed: true, optional: false, required: false
        this._accessUrls = new PrivatecaCertificateAuthorityAccessUrlsList(this, "access_urls", false);
        // config - computed: false, optional: false, required: true
        this._config = new PrivatecaCertificateAuthorityConfigAOutputReference(this, "config");
        // key_spec - computed: false, optional: false, required: true
        this._keySpec = new PrivatecaCertificateAuthorityKeySpecOutputReference(this, "key_spec");
        // subordinate_config - computed: false, optional: true, required: false
        this._subordinateConfig = new PrivatecaCertificateAuthoritySubordinateConfigOutputReference(this, "subordinate_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new PrivatecaCertificateAuthorityTimeoutsOutputReference(this, "timeouts");
        this._certificateAuthorityId = config.certificateAuthorityId;
        this._deletionProtection = config.deletionProtection;
        this._desiredState = config.desiredState;
        this._gcsBucket = config.gcsBucket;
        this._id = config.id;
        this._ignoreActiveCertificatesOnDeletion = config.ignoreActiveCertificatesOnDeletion;
        this._labels = config.labels;
        this._lifetime = config.lifetime;
        this._location = config.location;
        this._pemCaCertificate = config.pemCaCertificate;
        this._pool = config.pool;
        this._project = config.project;
        this._skipGracePeriod = config.skipGracePeriod;
        this._type = config.type;
        this._config.internalValue = config.config;
        this._keySpec.internalValue = config.keySpec;
        this._subordinateConfig.internalValue = config.subordinateConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get accessUrls() {
        return this._accessUrls;
    }
    get certificateAuthorityId() {
        return this.getStringAttribute('certificate_authority_id');
    }
    set certificateAuthorityId(value) {
        this._certificateAuthorityId = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateAuthorityIdInput() {
        return this._certificateAuthorityId;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get deletionProtection() {
        return this.getBooleanAttribute('deletion_protection');
    }
    set deletionProtection(value) {
        this._deletionProtection = value;
    }
    resetDeletionProtection() {
        this._deletionProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectionInput() {
        return this._deletionProtection;
    }
    get desiredState() {
        return this.getStringAttribute('desired_state');
    }
    set desiredState(value) {
        this._desiredState = value;
    }
    resetDesiredState() {
        this._desiredState = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get desiredStateInput() {
        return this._desiredState;
    }
    get gcsBucket() {
        return this.getStringAttribute('gcs_bucket');
    }
    set gcsBucket(value) {
        this._gcsBucket = value;
    }
    resetGcsBucket() {
        this._gcsBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsBucketInput() {
        return this._gcsBucket;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get ignoreActiveCertificatesOnDeletion() {
        return this.getBooleanAttribute('ignore_active_certificates_on_deletion');
    }
    set ignoreActiveCertificatesOnDeletion(value) {
        this._ignoreActiveCertificatesOnDeletion = value;
    }
    resetIgnoreActiveCertificatesOnDeletion() {
        this._ignoreActiveCertificatesOnDeletion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreActiveCertificatesOnDeletionInput() {
        return this._ignoreActiveCertificatesOnDeletion;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get lifetime() {
        return this.getStringAttribute('lifetime');
    }
    set lifetime(value) {
        this._lifetime = value;
    }
    resetLifetime() {
        this._lifetime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifetimeInput() {
        return this._lifetime;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get pemCaCertificate() {
        return this.getStringAttribute('pem_ca_certificate');
    }
    set pemCaCertificate(value) {
        this._pemCaCertificate = value;
    }
    resetPemCaCertificate() {
        this._pemCaCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pemCaCertificateInput() {
        return this._pemCaCertificate;
    }
    // pem_ca_certificates - computed: true, optional: false, required: false
    get pemCaCertificates() {
        return this.getListAttribute('pem_ca_certificates');
    }
    get pool() {
        return this.getStringAttribute('pool');
    }
    set pool(value) {
        this._pool = value;
    }
    // Temporarily expose input value. Use with caution.
    get poolInput() {
        return this._pool;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get skipGracePeriod() {
        return this.getBooleanAttribute('skip_grace_period');
    }
    set skipGracePeriod(value) {
        this._skipGracePeriod = value;
    }
    resetSkipGracePeriod() {
        this._skipGracePeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipGracePeriodInput() {
        return this._skipGracePeriod;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get config() {
        return this._config;
    }
    putConfig(value) {
        this._config.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get configInput() {
        return this._config.internalValue;
    }
    get keySpec() {
        return this._keySpec;
    }
    putKeySpec(value) {
        this._keySpec.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get keySpecInput() {
        return this._keySpec.internalValue;
    }
    get subordinateConfig() {
        return this._subordinateConfig;
    }
    putSubordinateConfig(value) {
        this._subordinateConfig.internalValue = value;
    }
    resetSubordinateConfig() {
        this._subordinateConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subordinateConfigInput() {
        return this._subordinateConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            certificate_authority_id: cdktf.stringToTerraform(this._certificateAuthorityId),
            deletion_protection: cdktf.booleanToTerraform(this._deletionProtection),
            desired_state: cdktf.stringToTerraform(this._desiredState),
            gcs_bucket: cdktf.stringToTerraform(this._gcsBucket),
            id: cdktf.stringToTerraform(this._id),
            ignore_active_certificates_on_deletion: cdktf.booleanToTerraform(this._ignoreActiveCertificatesOnDeletion),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            lifetime: cdktf.stringToTerraform(this._lifetime),
            location: cdktf.stringToTerraform(this._location),
            pem_ca_certificate: cdktf.stringToTerraform(this._pemCaCertificate),
            pool: cdktf.stringToTerraform(this._pool),
            project: cdktf.stringToTerraform(this._project),
            skip_grace_period: cdktf.booleanToTerraform(this._skipGracePeriod),
            type: cdktf.stringToTerraform(this._type),
            config: privatecaCertificateAuthorityConfigAToTerraform(this._config.internalValue),
            key_spec: privatecaCertificateAuthorityKeySpecToTerraform(this._keySpec.internalValue),
            subordinate_config: privatecaCertificateAuthoritySubordinateConfigToTerraform(this._subordinateConfig.internalValue),
            timeouts: privatecaCertificateAuthorityTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.PrivatecaCertificateAuthority = PrivatecaCertificateAuthority;
_y = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateAuthority[_y] = { fqn: "@cdktf/provider-google.privatecaCertificateAuthority.PrivatecaCertificateAuthority", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
PrivatecaCertificateAuthority.tfResourceType = "google_privateca_certificate_authority";
//# sourceMappingURL=data:application/json;base64,