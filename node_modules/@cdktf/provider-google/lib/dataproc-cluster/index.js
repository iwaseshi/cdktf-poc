"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataprocCluster = exports.DataprocClusterVirtualClusterConfigOutputReference = exports.dataprocClusterVirtualClusterConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToTerraform = exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference = exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToTerraform = exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference = exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToTerraform = exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference = exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToTerraform = exports.DataprocClusterTimeoutsOutputReference = exports.dataprocClusterTimeoutsToTerraform = exports.DataprocClusterClusterConfigOutputReference = exports.dataprocClusterClusterConfigToTerraform = exports.DataprocClusterClusterConfigWorkerConfigOutputReference = exports.dataprocClusterClusterConfigWorkerConfigToTerraform = exports.DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference = exports.dataprocClusterClusterConfigWorkerConfigDiskConfigToTerraform = exports.DataprocClusterClusterConfigWorkerConfigAcceleratorsList = exports.DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference = exports.dataprocClusterClusterConfigWorkerConfigAcceleratorsToTerraform = exports.DataprocClusterClusterConfigSoftwareConfigOutputReference = exports.dataprocClusterClusterConfigSoftwareConfigToTerraform = exports.DataprocClusterClusterConfigSecurityConfigOutputReference = exports.dataprocClusterClusterConfigSecurityConfigToTerraform = exports.DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference = exports.dataprocClusterClusterConfigSecurityConfigKerberosConfigToTerraform = exports.DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigToTerraform = exports.DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToTerraform = exports.DataprocClusterClusterConfigMetastoreConfigOutputReference = exports.dataprocClusterClusterConfigMetastoreConfigToTerraform = exports.DataprocClusterClusterConfigMasterConfigOutputReference = exports.dataprocClusterClusterConfigMasterConfigToTerraform = exports.DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference = exports.dataprocClusterClusterConfigMasterConfigDiskConfigToTerraform = exports.DataprocClusterClusterConfigMasterConfigAcceleratorsList = exports.DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference = exports.dataprocClusterClusterConfigMasterConfigAcceleratorsToTerraform = exports.DataprocClusterClusterConfigLifecycleConfigOutputReference = exports.dataprocClusterClusterConfigLifecycleConfigToTerraform = exports.DataprocClusterClusterConfigInitializationActionList = exports.DataprocClusterClusterConfigInitializationActionOutputReference = exports.dataprocClusterClusterConfigInitializationActionToTerraform = exports.DataprocClusterClusterConfigGceClusterConfigOutputReference = exports.dataprocClusterClusterConfigGceClusterConfigToTerraform = exports.DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference = exports.dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform = exports.DataprocClusterClusterConfigEndpointConfigOutputReference = exports.dataprocClusterClusterConfigEndpointConfigToTerraform = exports.DataprocClusterClusterConfigEncryptionConfigOutputReference = exports.dataprocClusterClusterConfigEncryptionConfigToTerraform = exports.DataprocClusterClusterConfigAutoscalingConfigOutputReference = exports.dataprocClusterClusterConfigAutoscalingConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataprocClusterClusterConfigAutoscalingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        policy_uri: cdktf.stringToTerraform(struct.policyUri),
    };
}
exports.dataprocClusterClusterConfigAutoscalingConfigToTerraform = dataprocClusterClusterConfigAutoscalingConfigToTerraform;
class DataprocClusterClusterConfigAutoscalingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._policyUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyUri = this._policyUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._policyUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._policyUri = value.policyUri;
        }
    }
    get policyUri() {
        return this.getStringAttribute('policy_uri');
    }
    set policyUri(value) {
        this._policyUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get policyUriInput() {
        return this._policyUri;
    }
}
exports.DataprocClusterClusterConfigAutoscalingConfigOutputReference = DataprocClusterClusterConfigAutoscalingConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigAutoscalingConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigAutoscalingConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.dataprocClusterClusterConfigEncryptionConfigToTerraform = dataprocClusterClusterConfigEncryptionConfigToTerraform;
class DataprocClusterClusterConfigEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
}
exports.DataprocClusterClusterConfigEncryptionConfigOutputReference = DataprocClusterClusterConfigEncryptionConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigEncryptionConfigOutputReference[_b] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigEncryptionConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigEndpointConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_http_port_access: cdktf.booleanToTerraform(struct.enableHttpPortAccess),
    };
}
exports.dataprocClusterClusterConfigEndpointConfigToTerraform = dataprocClusterClusterConfigEndpointConfigToTerraform;
class DataprocClusterClusterConfigEndpointConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // http_ports - computed: true, optional: false, required: false
        this._httpPorts = new cdktf.StringMap(this, "http_ports");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableHttpPortAccess !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableHttpPortAccess = this._enableHttpPortAccess;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableHttpPortAccess = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableHttpPortAccess = value.enableHttpPortAccess;
        }
    }
    get enableHttpPortAccess() {
        return this.getBooleanAttribute('enable_http_port_access');
    }
    set enableHttpPortAccess(value) {
        this._enableHttpPortAccess = value;
    }
    // Temporarily expose input value. Use with caution.
    get enableHttpPortAccessInput() {
        return this._enableHttpPortAccess;
    }
    get httpPorts() {
        return this._httpPorts;
    }
}
exports.DataprocClusterClusterConfigEndpointConfigOutputReference = DataprocClusterClusterConfigEndpointConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigEndpointConfigOutputReference[_c] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigEndpointConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_integrity_monitoring: cdktf.booleanToTerraform(struct.enableIntegrityMonitoring),
        enable_secure_boot: cdktf.booleanToTerraform(struct.enableSecureBoot),
        enable_vtpm: cdktf.booleanToTerraform(struct.enableVtpm),
    };
}
exports.dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform = dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform;
class DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableIntegrityMonitoring !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableIntegrityMonitoring = this._enableIntegrityMonitoring;
        }
        if (this._enableSecureBoot !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableSecureBoot = this._enableSecureBoot;
        }
        if (this._enableVtpm !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableVtpm = this._enableVtpm;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableIntegrityMonitoring = undefined;
            this._enableSecureBoot = undefined;
            this._enableVtpm = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableIntegrityMonitoring = value.enableIntegrityMonitoring;
            this._enableSecureBoot = value.enableSecureBoot;
            this._enableVtpm = value.enableVtpm;
        }
    }
    get enableIntegrityMonitoring() {
        return this.getBooleanAttribute('enable_integrity_monitoring');
    }
    set enableIntegrityMonitoring(value) {
        this._enableIntegrityMonitoring = value;
    }
    resetEnableIntegrityMonitoring() {
        this._enableIntegrityMonitoring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIntegrityMonitoringInput() {
        return this._enableIntegrityMonitoring;
    }
    get enableSecureBoot() {
        return this.getBooleanAttribute('enable_secure_boot');
    }
    set enableSecureBoot(value) {
        this._enableSecureBoot = value;
    }
    resetEnableSecureBoot() {
        this._enableSecureBoot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableSecureBootInput() {
        return this._enableSecureBoot;
    }
    get enableVtpm() {
        return this.getBooleanAttribute('enable_vtpm');
    }
    set enableVtpm(value) {
        this._enableVtpm = value;
    }
    resetEnableVtpm() {
        this._enableVtpm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableVtpmInput() {
        return this._enableVtpm;
    }
}
exports.DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference = DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigGceClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        internal_ip_only: cdktf.booleanToTerraform(struct.internalIpOnly),
        metadata: cdktf.hashMapper(cdktf.stringToTerraform)(struct.metadata),
        network: cdktf.stringToTerraform(struct.network),
        service_account: cdktf.stringToTerraform(struct.serviceAccount),
        service_account_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.serviceAccountScopes),
        subnetwork: cdktf.stringToTerraform(struct.subnetwork),
        tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.tags),
        zone: cdktf.stringToTerraform(struct.zone),
        shielded_instance_config: dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform(struct.shieldedInstanceConfig),
    };
}
exports.dataprocClusterClusterConfigGceClusterConfigToTerraform = dataprocClusterClusterConfigGceClusterConfigToTerraform;
class DataprocClusterClusterConfigGceClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // shielded_instance_config - computed: false, optional: true, required: false
        this._shieldedInstanceConfig = new DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference(this, "shielded_instance_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._internalIpOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.internalIpOnly = this._internalIpOnly;
        }
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        if (this._network !== undefined) {
            hasAnyValues = true;
            internalValueResult.network = this._network;
        }
        if (this._serviceAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccount = this._serviceAccount;
        }
        if (this._serviceAccountScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccountScopes = this._serviceAccountScopes;
        }
        if (this._subnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetwork = this._subnetwork;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        if (this._shieldedInstanceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.shieldedInstanceConfig = this._shieldedInstanceConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._internalIpOnly = undefined;
            this._metadata = undefined;
            this._network = undefined;
            this._serviceAccount = undefined;
            this._serviceAccountScopes = undefined;
            this._subnetwork = undefined;
            this._tags = undefined;
            this._zone = undefined;
            this._shieldedInstanceConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._internalIpOnly = value.internalIpOnly;
            this._metadata = value.metadata;
            this._network = value.network;
            this._serviceAccount = value.serviceAccount;
            this._serviceAccountScopes = value.serviceAccountScopes;
            this._subnetwork = value.subnetwork;
            this._tags = value.tags;
            this._zone = value.zone;
            this._shieldedInstanceConfig.internalValue = value.shieldedInstanceConfig;
        }
    }
    get internalIpOnly() {
        return this.getBooleanAttribute('internal_ip_only');
    }
    set internalIpOnly(value) {
        this._internalIpOnly = value;
    }
    resetInternalIpOnly() {
        this._internalIpOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get internalIpOnlyInput() {
        return this._internalIpOnly;
    }
    get metadata() {
        return this.getStringMapAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
    get network() {
        return this.getStringAttribute('network');
    }
    set network(value) {
        this._network = value;
    }
    resetNetwork() {
        this._network = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get serviceAccountScopes() {
        return cdktf.Fn.tolist(this.getListAttribute('service_account_scopes'));
    }
    set serviceAccountScopes(value) {
        this._serviceAccountScopes = value;
    }
    resetServiceAccountScopes() {
        this._serviceAccountScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountScopesInput() {
        return this._serviceAccountScopes;
    }
    get subnetwork() {
        return this.getStringAttribute('subnetwork');
    }
    set subnetwork(value) {
        this._subnetwork = value;
    }
    resetSubnetwork() {
        this._subnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkInput() {
        return this._subnetwork;
    }
    get tags() {
        return cdktf.Fn.tolist(this.getListAttribute('tags'));
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
    get shieldedInstanceConfig() {
        return this._shieldedInstanceConfig;
    }
    putShieldedInstanceConfig(value) {
        this._shieldedInstanceConfig.internalValue = value;
    }
    resetShieldedInstanceConfig() {
        this._shieldedInstanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shieldedInstanceConfigInput() {
        return this._shieldedInstanceConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigGceClusterConfigOutputReference = DataprocClusterClusterConfigGceClusterConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigGceClusterConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigGceClusterConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigInitializationActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        script: cdktf.stringToTerraform(struct.script),
        timeout_sec: cdktf.numberToTerraform(struct.timeoutSec),
    };
}
exports.dataprocClusterClusterConfigInitializationActionToTerraform = dataprocClusterClusterConfigInitializationActionToTerraform;
class DataprocClusterClusterConfigInitializationActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._script !== undefined) {
            hasAnyValues = true;
            internalValueResult.script = this._script;
        }
        if (this._timeoutSec !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeoutSec = this._timeoutSec;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._script = undefined;
            this._timeoutSec = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._script = value.script;
            this._timeoutSec = value.timeoutSec;
        }
    }
    get script() {
        return this.getStringAttribute('script');
    }
    set script(value) {
        this._script = value;
    }
    // Temporarily expose input value. Use with caution.
    get scriptInput() {
        return this._script;
    }
    get timeoutSec() {
        return this.getNumberAttribute('timeout_sec');
    }
    set timeoutSec(value) {
        this._timeoutSec = value;
    }
    resetTimeoutSec() {
        this._timeoutSec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutSecInput() {
        return this._timeoutSec;
    }
}
exports.DataprocClusterClusterConfigInitializationActionOutputReference = DataprocClusterClusterConfigInitializationActionOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigInitializationActionOutputReference[_f] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigInitializationActionOutputReference", version: "4.0.3" };
class DataprocClusterClusterConfigInitializationActionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigInitializationActionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigInitializationActionList = DataprocClusterClusterConfigInitializationActionList;
_g = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigInitializationActionList[_g] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigInitializationActionList", version: "4.0.3" };
function dataprocClusterClusterConfigLifecycleConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_delete_time: cdktf.stringToTerraform(struct.autoDeleteTime),
        idle_delete_ttl: cdktf.stringToTerraform(struct.idleDeleteTtl),
    };
}
exports.dataprocClusterClusterConfigLifecycleConfigToTerraform = dataprocClusterClusterConfigLifecycleConfigToTerraform;
class DataprocClusterClusterConfigLifecycleConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoDeleteTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoDeleteTime = this._autoDeleteTime;
        }
        if (this._idleDeleteTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.idleDeleteTtl = this._idleDeleteTtl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoDeleteTime = undefined;
            this._idleDeleteTtl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoDeleteTime = value.autoDeleteTime;
            this._idleDeleteTtl = value.idleDeleteTtl;
        }
    }
    get autoDeleteTime() {
        return this.getStringAttribute('auto_delete_time');
    }
    set autoDeleteTime(value) {
        this._autoDeleteTime = value;
    }
    resetAutoDeleteTime() {
        this._autoDeleteTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoDeleteTimeInput() {
        return this._autoDeleteTime;
    }
    get idleDeleteTtl() {
        return this.getStringAttribute('idle_delete_ttl');
    }
    set idleDeleteTtl(value) {
        this._idleDeleteTtl = value;
    }
    resetIdleDeleteTtl() {
        this._idleDeleteTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleDeleteTtlInput() {
        return this._idleDeleteTtl;
    }
    // idle_start_time - computed: true, optional: false, required: false
    get idleStartTime() {
        return this.getStringAttribute('idle_start_time');
    }
}
exports.DataprocClusterClusterConfigLifecycleConfigOutputReference = DataprocClusterClusterConfigLifecycleConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigLifecycleConfigOutputReference[_h] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigLifecycleConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigMasterConfigAcceleratorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_count: cdktf.numberToTerraform(struct.acceleratorCount),
        accelerator_type: cdktf.stringToTerraform(struct.acceleratorType),
    };
}
exports.dataprocClusterClusterConfigMasterConfigAcceleratorsToTerraform = dataprocClusterClusterConfigMasterConfigAcceleratorsToTerraform;
class DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorCount = this._acceleratorCount;
        }
        if (this._acceleratorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorType = this._acceleratorType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._acceleratorCount = undefined;
            this._acceleratorType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._acceleratorCount = value.acceleratorCount;
            this._acceleratorType = value.acceleratorType;
        }
    }
    get acceleratorCount() {
        return this.getNumberAttribute('accelerator_count');
    }
    set acceleratorCount(value) {
        this._acceleratorCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorCountInput() {
        return this._acceleratorCount;
    }
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    set acceleratorType(value) {
        this._acceleratorType = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypeInput() {
        return this._acceleratorType;
    }
}
exports.DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference = DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference[_j] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference", version: "4.0.3" };
class DataprocClusterClusterConfigMasterConfigAcceleratorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigMasterConfigAcceleratorsList = DataprocClusterClusterConfigMasterConfigAcceleratorsList;
_k = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigMasterConfigAcceleratorsList[_k] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigMasterConfigAcceleratorsList", version: "4.0.3" };
function dataprocClusterClusterConfigMasterConfigDiskConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_size_gb: cdktf.numberToTerraform(struct.bootDiskSizeGb),
        boot_disk_type: cdktf.stringToTerraform(struct.bootDiskType),
        num_local_ssds: cdktf.numberToTerraform(struct.numLocalSsds),
    };
}
exports.dataprocClusterClusterConfigMasterConfigDiskConfigToTerraform = dataprocClusterClusterConfigMasterConfigDiskConfigToTerraform;
class DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskSizeGb = this._bootDiskSizeGb;
        }
        if (this._bootDiskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskType = this._bootDiskType;
        }
        if (this._numLocalSsds !== undefined) {
            hasAnyValues = true;
            internalValueResult.numLocalSsds = this._numLocalSsds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskSizeGb = undefined;
            this._bootDiskType = undefined;
            this._numLocalSsds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskSizeGb = value.bootDiskSizeGb;
            this._bootDiskType = value.bootDiskType;
            this._numLocalSsds = value.numLocalSsds;
        }
    }
    get bootDiskSizeGb() {
        return this.getNumberAttribute('boot_disk_size_gb');
    }
    set bootDiskSizeGb(value) {
        this._bootDiskSizeGb = value;
    }
    resetBootDiskSizeGb() {
        this._bootDiskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskSizeGbInput() {
        return this._bootDiskSizeGb;
    }
    get bootDiskType() {
        return this.getStringAttribute('boot_disk_type');
    }
    set bootDiskType(value) {
        this._bootDiskType = value;
    }
    resetBootDiskType() {
        this._bootDiskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskTypeInput() {
        return this._bootDiskType;
    }
    get numLocalSsds() {
        return this.getNumberAttribute('num_local_ssds');
    }
    set numLocalSsds(value) {
        this._numLocalSsds = value;
    }
    resetNumLocalSsds() {
        this._numLocalSsds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numLocalSsdsInput() {
        return this._numLocalSsds;
    }
}
exports.DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference = DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference[_l] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigMasterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_uri: cdktf.stringToTerraform(struct.imageUri),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        num_instances: cdktf.numberToTerraform(struct.numInstances),
        accelerators: cdktf.listMapper(dataprocClusterClusterConfigMasterConfigAcceleratorsToTerraform, true)(struct.accelerators),
        disk_config: dataprocClusterClusterConfigMasterConfigDiskConfigToTerraform(struct.diskConfig),
    };
}
exports.dataprocClusterClusterConfigMasterConfigToTerraform = dataprocClusterClusterConfigMasterConfigToTerraform;
class DataprocClusterClusterConfigMasterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // accelerators - computed: false, optional: true, required: false
        this._accelerators = new DataprocClusterClusterConfigMasterConfigAcceleratorsList(this, "accelerators", true);
        // disk_config - computed: false, optional: true, required: false
        this._diskConfig = new DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference(this, "disk_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUri = this._imageUri;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._numInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.numInstances = this._numInstances;
        }
        if (this._accelerators?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accelerators = this._accelerators?.internalValue;
        }
        if (this._diskConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskConfig = this._diskConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._imageUri = undefined;
            this._machineType = undefined;
            this._minCpuPlatform = undefined;
            this._numInstances = undefined;
            this._accelerators.internalValue = undefined;
            this._diskConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._imageUri = value.imageUri;
            this._machineType = value.machineType;
            this._minCpuPlatform = value.minCpuPlatform;
            this._numInstances = value.numInstances;
            this._accelerators.internalValue = value.accelerators;
            this._diskConfig.internalValue = value.diskConfig;
        }
    }
    get imageUri() {
        return this.getStringAttribute('image_uri');
    }
    set imageUri(value) {
        this._imageUri = value;
    }
    resetImageUri() {
        this._imageUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUriInput() {
        return this._imageUri;
    }
    // instance_names - computed: true, optional: false, required: false
    get instanceNames() {
        return this.getListAttribute('instance_names');
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get numInstances() {
        return this.getNumberAttribute('num_instances');
    }
    set numInstances(value) {
        this._numInstances = value;
    }
    resetNumInstances() {
        this._numInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numInstancesInput() {
        return this._numInstances;
    }
    get accelerators() {
        return this._accelerators;
    }
    putAccelerators(value) {
        this._accelerators.internalValue = value;
    }
    resetAccelerators() {
        this._accelerators.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorsInput() {
        return this._accelerators.internalValue;
    }
    get diskConfig() {
        return this._diskConfig;
    }
    putDiskConfig(value) {
        this._diskConfig.internalValue = value;
    }
    resetDiskConfig() {
        this._diskConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskConfigInput() {
        return this._diskConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigMasterConfigOutputReference = DataprocClusterClusterConfigMasterConfigOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigMasterConfigOutputReference[_m] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigMasterConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigMetastoreConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataproc_metastore_service: cdktf.stringToTerraform(struct.dataprocMetastoreService),
    };
}
exports.dataprocClusterClusterConfigMetastoreConfigToTerraform = dataprocClusterClusterConfigMetastoreConfigToTerraform;
class DataprocClusterClusterConfigMetastoreConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataprocMetastoreService !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataprocMetastoreService = this._dataprocMetastoreService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataprocMetastoreService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataprocMetastoreService = value.dataprocMetastoreService;
        }
    }
    get dataprocMetastoreService() {
        return this.getStringAttribute('dataproc_metastore_service');
    }
    set dataprocMetastoreService(value) {
        this._dataprocMetastoreService = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataprocMetastoreServiceInput() {
        return this._dataprocMetastoreService;
    }
}
exports.DataprocClusterClusterConfigMetastoreConfigOutputReference = DataprocClusterClusterConfigMetastoreConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigMetastoreConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigMetastoreConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_size_gb: cdktf.numberToTerraform(struct.bootDiskSizeGb),
        boot_disk_type: cdktf.stringToTerraform(struct.bootDiskType),
        num_local_ssds: cdktf.numberToTerraform(struct.numLocalSsds),
    };
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToTerraform;
class DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskSizeGb = this._bootDiskSizeGb;
        }
        if (this._bootDiskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskType = this._bootDiskType;
        }
        if (this._numLocalSsds !== undefined) {
            hasAnyValues = true;
            internalValueResult.numLocalSsds = this._numLocalSsds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskSizeGb = undefined;
            this._bootDiskType = undefined;
            this._numLocalSsds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskSizeGb = value.bootDiskSizeGb;
            this._bootDiskType = value.bootDiskType;
            this._numLocalSsds = value.numLocalSsds;
        }
    }
    get bootDiskSizeGb() {
        return this.getNumberAttribute('boot_disk_size_gb');
    }
    set bootDiskSizeGb(value) {
        this._bootDiskSizeGb = value;
    }
    resetBootDiskSizeGb() {
        this._bootDiskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskSizeGbInput() {
        return this._bootDiskSizeGb;
    }
    get bootDiskType() {
        return this.getStringAttribute('boot_disk_type');
    }
    set bootDiskType(value) {
        this._bootDiskType = value;
    }
    resetBootDiskType() {
        this._bootDiskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskTypeInput() {
        return this._bootDiskType;
    }
    get numLocalSsds() {
        return this.getNumberAttribute('num_local_ssds');
    }
    set numLocalSsds(value) {
        this._numLocalSsds = value;
    }
    resetNumLocalSsds() {
        this._numLocalSsds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numLocalSsdsInput() {
        return this._numLocalSsds;
    }
}
exports.DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference = DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference[_p] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigPreemptibleWorkerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        num_instances: cdktf.numberToTerraform(struct.numInstances),
        preemptibility: cdktf.stringToTerraform(struct.preemptibility),
        disk_config: dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToTerraform(struct.diskConfig),
    };
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigToTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigToTerraform;
class DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disk_config - computed: false, optional: true, required: false
        this._diskConfig = new DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference(this, "disk_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._numInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.numInstances = this._numInstances;
        }
        if (this._preemptibility !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptibility = this._preemptibility;
        }
        if (this._diskConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskConfig = this._diskConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._numInstances = undefined;
            this._preemptibility = undefined;
            this._diskConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._numInstances = value.numInstances;
            this._preemptibility = value.preemptibility;
            this._diskConfig.internalValue = value.diskConfig;
        }
    }
    // instance_names - computed: true, optional: false, required: false
    get instanceNames() {
        return this.getListAttribute('instance_names');
    }
    get numInstances() {
        return this.getNumberAttribute('num_instances');
    }
    set numInstances(value) {
        this._numInstances = value;
    }
    resetNumInstances() {
        this._numInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numInstancesInput() {
        return this._numInstances;
    }
    get preemptibility() {
        return this.getStringAttribute('preemptibility');
    }
    set preemptibility(value) {
        this._preemptibility = value;
    }
    resetPreemptibility() {
        this._preemptibility = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibilityInput() {
        return this._preemptibility;
    }
    get diskConfig() {
        return this._diskConfig;
    }
    putDiskConfig(value) {
        this._diskConfig.internalValue = value;
    }
    resetDiskConfig() {
        this._diskConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskConfigInput() {
        return this._diskConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference = DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference[_q] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigSecurityConfigKerberosConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cross_realm_trust_admin_server: cdktf.stringToTerraform(struct.crossRealmTrustAdminServer),
        cross_realm_trust_kdc: cdktf.stringToTerraform(struct.crossRealmTrustKdc),
        cross_realm_trust_realm: cdktf.stringToTerraform(struct.crossRealmTrustRealm),
        cross_realm_trust_shared_password_uri: cdktf.stringToTerraform(struct.crossRealmTrustSharedPasswordUri),
        enable_kerberos: cdktf.booleanToTerraform(struct.enableKerberos),
        kdc_db_key_uri: cdktf.stringToTerraform(struct.kdcDbKeyUri),
        key_password_uri: cdktf.stringToTerraform(struct.keyPasswordUri),
        keystore_password_uri: cdktf.stringToTerraform(struct.keystorePasswordUri),
        keystore_uri: cdktf.stringToTerraform(struct.keystoreUri),
        kms_key_uri: cdktf.stringToTerraform(struct.kmsKeyUri),
        realm: cdktf.stringToTerraform(struct.realm),
        root_principal_password_uri: cdktf.stringToTerraform(struct.rootPrincipalPasswordUri),
        tgt_lifetime_hours: cdktf.numberToTerraform(struct.tgtLifetimeHours),
        truststore_password_uri: cdktf.stringToTerraform(struct.truststorePasswordUri),
        truststore_uri: cdktf.stringToTerraform(struct.truststoreUri),
    };
}
exports.dataprocClusterClusterConfigSecurityConfigKerberosConfigToTerraform = dataprocClusterClusterConfigSecurityConfigKerberosConfigToTerraform;
class DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._crossRealmTrustAdminServer !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustAdminServer = this._crossRealmTrustAdminServer;
        }
        if (this._crossRealmTrustKdc !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustKdc = this._crossRealmTrustKdc;
        }
        if (this._crossRealmTrustRealm !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustRealm = this._crossRealmTrustRealm;
        }
        if (this._crossRealmTrustSharedPasswordUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustSharedPasswordUri = this._crossRealmTrustSharedPasswordUri;
        }
        if (this._enableKerberos !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableKerberos = this._enableKerberos;
        }
        if (this._kdcDbKeyUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.kdcDbKeyUri = this._kdcDbKeyUri;
        }
        if (this._keyPasswordUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyPasswordUri = this._keyPasswordUri;
        }
        if (this._keystorePasswordUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.keystorePasswordUri = this._keystorePasswordUri;
        }
        if (this._keystoreUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.keystoreUri = this._keystoreUri;
        }
        if (this._kmsKeyUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyUri = this._kmsKeyUri;
        }
        if (this._realm !== undefined) {
            hasAnyValues = true;
            internalValueResult.realm = this._realm;
        }
        if (this._rootPrincipalPasswordUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.rootPrincipalPasswordUri = this._rootPrincipalPasswordUri;
        }
        if (this._tgtLifetimeHours !== undefined) {
            hasAnyValues = true;
            internalValueResult.tgtLifetimeHours = this._tgtLifetimeHours;
        }
        if (this._truststorePasswordUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.truststorePasswordUri = this._truststorePasswordUri;
        }
        if (this._truststoreUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.truststoreUri = this._truststoreUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._crossRealmTrustAdminServer = undefined;
            this._crossRealmTrustKdc = undefined;
            this._crossRealmTrustRealm = undefined;
            this._crossRealmTrustSharedPasswordUri = undefined;
            this._enableKerberos = undefined;
            this._kdcDbKeyUri = undefined;
            this._keyPasswordUri = undefined;
            this._keystorePasswordUri = undefined;
            this._keystoreUri = undefined;
            this._kmsKeyUri = undefined;
            this._realm = undefined;
            this._rootPrincipalPasswordUri = undefined;
            this._tgtLifetimeHours = undefined;
            this._truststorePasswordUri = undefined;
            this._truststoreUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._crossRealmTrustAdminServer = value.crossRealmTrustAdminServer;
            this._crossRealmTrustKdc = value.crossRealmTrustKdc;
            this._crossRealmTrustRealm = value.crossRealmTrustRealm;
            this._crossRealmTrustSharedPasswordUri = value.crossRealmTrustSharedPasswordUri;
            this._enableKerberos = value.enableKerberos;
            this._kdcDbKeyUri = value.kdcDbKeyUri;
            this._keyPasswordUri = value.keyPasswordUri;
            this._keystorePasswordUri = value.keystorePasswordUri;
            this._keystoreUri = value.keystoreUri;
            this._kmsKeyUri = value.kmsKeyUri;
            this._realm = value.realm;
            this._rootPrincipalPasswordUri = value.rootPrincipalPasswordUri;
            this._tgtLifetimeHours = value.tgtLifetimeHours;
            this._truststorePasswordUri = value.truststorePasswordUri;
            this._truststoreUri = value.truststoreUri;
        }
    }
    get crossRealmTrustAdminServer() {
        return this.getStringAttribute('cross_realm_trust_admin_server');
    }
    set crossRealmTrustAdminServer(value) {
        this._crossRealmTrustAdminServer = value;
    }
    resetCrossRealmTrustAdminServer() {
        this._crossRealmTrustAdminServer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustAdminServerInput() {
        return this._crossRealmTrustAdminServer;
    }
    get crossRealmTrustKdc() {
        return this.getStringAttribute('cross_realm_trust_kdc');
    }
    set crossRealmTrustKdc(value) {
        this._crossRealmTrustKdc = value;
    }
    resetCrossRealmTrustKdc() {
        this._crossRealmTrustKdc = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustKdcInput() {
        return this._crossRealmTrustKdc;
    }
    get crossRealmTrustRealm() {
        return this.getStringAttribute('cross_realm_trust_realm');
    }
    set crossRealmTrustRealm(value) {
        this._crossRealmTrustRealm = value;
    }
    resetCrossRealmTrustRealm() {
        this._crossRealmTrustRealm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustRealmInput() {
        return this._crossRealmTrustRealm;
    }
    get crossRealmTrustSharedPasswordUri() {
        return this.getStringAttribute('cross_realm_trust_shared_password_uri');
    }
    set crossRealmTrustSharedPasswordUri(value) {
        this._crossRealmTrustSharedPasswordUri = value;
    }
    resetCrossRealmTrustSharedPasswordUri() {
        this._crossRealmTrustSharedPasswordUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustSharedPasswordUriInput() {
        return this._crossRealmTrustSharedPasswordUri;
    }
    get enableKerberos() {
        return this.getBooleanAttribute('enable_kerberos');
    }
    set enableKerberos(value) {
        this._enableKerberos = value;
    }
    resetEnableKerberos() {
        this._enableKerberos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableKerberosInput() {
        return this._enableKerberos;
    }
    get kdcDbKeyUri() {
        return this.getStringAttribute('kdc_db_key_uri');
    }
    set kdcDbKeyUri(value) {
        this._kdcDbKeyUri = value;
    }
    resetKdcDbKeyUri() {
        this._kdcDbKeyUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kdcDbKeyUriInput() {
        return this._kdcDbKeyUri;
    }
    get keyPasswordUri() {
        return this.getStringAttribute('key_password_uri');
    }
    set keyPasswordUri(value) {
        this._keyPasswordUri = value;
    }
    resetKeyPasswordUri() {
        this._keyPasswordUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyPasswordUriInput() {
        return this._keyPasswordUri;
    }
    get keystorePasswordUri() {
        return this.getStringAttribute('keystore_password_uri');
    }
    set keystorePasswordUri(value) {
        this._keystorePasswordUri = value;
    }
    resetKeystorePasswordUri() {
        this._keystorePasswordUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keystorePasswordUriInput() {
        return this._keystorePasswordUri;
    }
    get keystoreUri() {
        return this.getStringAttribute('keystore_uri');
    }
    set keystoreUri(value) {
        this._keystoreUri = value;
    }
    resetKeystoreUri() {
        this._keystoreUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keystoreUriInput() {
        return this._keystoreUri;
    }
    get kmsKeyUri() {
        return this.getStringAttribute('kms_key_uri');
    }
    set kmsKeyUri(value) {
        this._kmsKeyUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyUriInput() {
        return this._kmsKeyUri;
    }
    get realm() {
        return this.getStringAttribute('realm');
    }
    set realm(value) {
        this._realm = value;
    }
    resetRealm() {
        this._realm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get realmInput() {
        return this._realm;
    }
    get rootPrincipalPasswordUri() {
        return this.getStringAttribute('root_principal_password_uri');
    }
    set rootPrincipalPasswordUri(value) {
        this._rootPrincipalPasswordUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get rootPrincipalPasswordUriInput() {
        return this._rootPrincipalPasswordUri;
    }
    get tgtLifetimeHours() {
        return this.getNumberAttribute('tgt_lifetime_hours');
    }
    set tgtLifetimeHours(value) {
        this._tgtLifetimeHours = value;
    }
    resetTgtLifetimeHours() {
        this._tgtLifetimeHours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tgtLifetimeHoursInput() {
        return this._tgtLifetimeHours;
    }
    get truststorePasswordUri() {
        return this.getStringAttribute('truststore_password_uri');
    }
    set truststorePasswordUri(value) {
        this._truststorePasswordUri = value;
    }
    resetTruststorePasswordUri() {
        this._truststorePasswordUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get truststorePasswordUriInput() {
        return this._truststorePasswordUri;
    }
    get truststoreUri() {
        return this.getStringAttribute('truststore_uri');
    }
    set truststoreUri(value) {
        this._truststoreUri = value;
    }
    resetTruststoreUri() {
        this._truststoreUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get truststoreUriInput() {
        return this._truststoreUri;
    }
}
exports.DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference = DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference[_r] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigSecurityConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kerberos_config: dataprocClusterClusterConfigSecurityConfigKerberosConfigToTerraform(struct.kerberosConfig),
    };
}
exports.dataprocClusterClusterConfigSecurityConfigToTerraform = dataprocClusterClusterConfigSecurityConfigToTerraform;
class DataprocClusterClusterConfigSecurityConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kerberos_config - computed: false, optional: false, required: true
        this._kerberosConfig = new DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference(this, "kerberos_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kerberosConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kerberosConfig = this._kerberosConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kerberosConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kerberosConfig.internalValue = value.kerberosConfig;
        }
    }
    get kerberosConfig() {
        return this._kerberosConfig;
    }
    putKerberosConfig(value) {
        this._kerberosConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get kerberosConfigInput() {
        return this._kerberosConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigSecurityConfigOutputReference = DataprocClusterClusterConfigSecurityConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigSecurityConfigOutputReference[_s] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigSecurityConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigSoftwareConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_version: cdktf.stringToTerraform(struct.imageVersion),
        optional_components: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.optionalComponents),
        override_properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.overrideProperties),
    };
}
exports.dataprocClusterClusterConfigSoftwareConfigToTerraform = dataprocClusterClusterConfigSoftwareConfigToTerraform;
class DataprocClusterClusterConfigSoftwareConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // properties - computed: true, optional: false, required: false
        this._properties = new cdktf.StringMap(this, "properties");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersion = this._imageVersion;
        }
        if (this._optionalComponents !== undefined) {
            hasAnyValues = true;
            internalValueResult.optionalComponents = this._optionalComponents;
        }
        if (this._overrideProperties !== undefined) {
            hasAnyValues = true;
            internalValueResult.overrideProperties = this._overrideProperties;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._imageVersion = undefined;
            this._optionalComponents = undefined;
            this._overrideProperties = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._imageVersion = value.imageVersion;
            this._optionalComponents = value.optionalComponents;
            this._overrideProperties = value.overrideProperties;
        }
    }
    get imageVersion() {
        return this.getStringAttribute('image_version');
    }
    set imageVersion(value) {
        this._imageVersion = value;
    }
    resetImageVersion() {
        this._imageVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionInput() {
        return this._imageVersion;
    }
    get optionalComponents() {
        return cdktf.Fn.tolist(this.getListAttribute('optional_components'));
    }
    set optionalComponents(value) {
        this._optionalComponents = value;
    }
    resetOptionalComponents() {
        this._optionalComponents = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get optionalComponentsInput() {
        return this._optionalComponents;
    }
    get overrideProperties() {
        return this.getStringMapAttribute('override_properties');
    }
    set overrideProperties(value) {
        this._overrideProperties = value;
    }
    resetOverrideProperties() {
        this._overrideProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get overridePropertiesInput() {
        return this._overrideProperties;
    }
    get properties() {
        return this._properties;
    }
}
exports.DataprocClusterClusterConfigSoftwareConfigOutputReference = DataprocClusterClusterConfigSoftwareConfigOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigSoftwareConfigOutputReference[_t] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigSoftwareConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigWorkerConfigAcceleratorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_count: cdktf.numberToTerraform(struct.acceleratorCount),
        accelerator_type: cdktf.stringToTerraform(struct.acceleratorType),
    };
}
exports.dataprocClusterClusterConfigWorkerConfigAcceleratorsToTerraform = dataprocClusterClusterConfigWorkerConfigAcceleratorsToTerraform;
class DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorCount = this._acceleratorCount;
        }
        if (this._acceleratorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorType = this._acceleratorType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._acceleratorCount = undefined;
            this._acceleratorType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._acceleratorCount = value.acceleratorCount;
            this._acceleratorType = value.acceleratorType;
        }
    }
    get acceleratorCount() {
        return this.getNumberAttribute('accelerator_count');
    }
    set acceleratorCount(value) {
        this._acceleratorCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorCountInput() {
        return this._acceleratorCount;
    }
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    set acceleratorType(value) {
        this._acceleratorType = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypeInput() {
        return this._acceleratorType;
    }
}
exports.DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference = DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference[_u] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference", version: "4.0.3" };
class DataprocClusterClusterConfigWorkerConfigAcceleratorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigWorkerConfigAcceleratorsList = DataprocClusterClusterConfigWorkerConfigAcceleratorsList;
_v = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigWorkerConfigAcceleratorsList[_v] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigWorkerConfigAcceleratorsList", version: "4.0.3" };
function dataprocClusterClusterConfigWorkerConfigDiskConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_size_gb: cdktf.numberToTerraform(struct.bootDiskSizeGb),
        boot_disk_type: cdktf.stringToTerraform(struct.bootDiskType),
        num_local_ssds: cdktf.numberToTerraform(struct.numLocalSsds),
    };
}
exports.dataprocClusterClusterConfigWorkerConfigDiskConfigToTerraform = dataprocClusterClusterConfigWorkerConfigDiskConfigToTerraform;
class DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskSizeGb = this._bootDiskSizeGb;
        }
        if (this._bootDiskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskType = this._bootDiskType;
        }
        if (this._numLocalSsds !== undefined) {
            hasAnyValues = true;
            internalValueResult.numLocalSsds = this._numLocalSsds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskSizeGb = undefined;
            this._bootDiskType = undefined;
            this._numLocalSsds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskSizeGb = value.bootDiskSizeGb;
            this._bootDiskType = value.bootDiskType;
            this._numLocalSsds = value.numLocalSsds;
        }
    }
    get bootDiskSizeGb() {
        return this.getNumberAttribute('boot_disk_size_gb');
    }
    set bootDiskSizeGb(value) {
        this._bootDiskSizeGb = value;
    }
    resetBootDiskSizeGb() {
        this._bootDiskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskSizeGbInput() {
        return this._bootDiskSizeGb;
    }
    get bootDiskType() {
        return this.getStringAttribute('boot_disk_type');
    }
    set bootDiskType(value) {
        this._bootDiskType = value;
    }
    resetBootDiskType() {
        this._bootDiskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskTypeInput() {
        return this._bootDiskType;
    }
    get numLocalSsds() {
        return this.getNumberAttribute('num_local_ssds');
    }
    set numLocalSsds(value) {
        this._numLocalSsds = value;
    }
    resetNumLocalSsds() {
        this._numLocalSsds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numLocalSsdsInput() {
        return this._numLocalSsds;
    }
}
exports.DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference = DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference[_w] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigWorkerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_uri: cdktf.stringToTerraform(struct.imageUri),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        num_instances: cdktf.numberToTerraform(struct.numInstances),
        accelerators: cdktf.listMapper(dataprocClusterClusterConfigWorkerConfigAcceleratorsToTerraform, true)(struct.accelerators),
        disk_config: dataprocClusterClusterConfigWorkerConfigDiskConfigToTerraform(struct.diskConfig),
    };
}
exports.dataprocClusterClusterConfigWorkerConfigToTerraform = dataprocClusterClusterConfigWorkerConfigToTerraform;
class DataprocClusterClusterConfigWorkerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // accelerators - computed: false, optional: true, required: false
        this._accelerators = new DataprocClusterClusterConfigWorkerConfigAcceleratorsList(this, "accelerators", true);
        // disk_config - computed: false, optional: true, required: false
        this._diskConfig = new DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference(this, "disk_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUri = this._imageUri;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._numInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.numInstances = this._numInstances;
        }
        if (this._accelerators?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accelerators = this._accelerators?.internalValue;
        }
        if (this._diskConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskConfig = this._diskConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._imageUri = undefined;
            this._machineType = undefined;
            this._minCpuPlatform = undefined;
            this._numInstances = undefined;
            this._accelerators.internalValue = undefined;
            this._diskConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._imageUri = value.imageUri;
            this._machineType = value.machineType;
            this._minCpuPlatform = value.minCpuPlatform;
            this._numInstances = value.numInstances;
            this._accelerators.internalValue = value.accelerators;
            this._diskConfig.internalValue = value.diskConfig;
        }
    }
    get imageUri() {
        return this.getStringAttribute('image_uri');
    }
    set imageUri(value) {
        this._imageUri = value;
    }
    resetImageUri() {
        this._imageUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUriInput() {
        return this._imageUri;
    }
    // instance_names - computed: true, optional: false, required: false
    get instanceNames() {
        return this.getListAttribute('instance_names');
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get numInstances() {
        return this.getNumberAttribute('num_instances');
    }
    set numInstances(value) {
        this._numInstances = value;
    }
    resetNumInstances() {
        this._numInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numInstancesInput() {
        return this._numInstances;
    }
    get accelerators() {
        return this._accelerators;
    }
    putAccelerators(value) {
        this._accelerators.internalValue = value;
    }
    resetAccelerators() {
        this._accelerators.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorsInput() {
        return this._accelerators.internalValue;
    }
    get diskConfig() {
        return this._diskConfig;
    }
    putDiskConfig(value) {
        this._diskConfig.internalValue = value;
    }
    resetDiskConfig() {
        this._diskConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskConfigInput() {
        return this._diskConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigWorkerConfigOutputReference = DataprocClusterClusterConfigWorkerConfigOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigWorkerConfigOutputReference[_x] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigWorkerConfigOutputReference", version: "4.0.3" };
function dataprocClusterClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        staging_bucket: cdktf.stringToTerraform(struct.stagingBucket),
        temp_bucket: cdktf.stringToTerraform(struct.tempBucket),
        autoscaling_config: dataprocClusterClusterConfigAutoscalingConfigToTerraform(struct.autoscalingConfig),
        encryption_config: dataprocClusterClusterConfigEncryptionConfigToTerraform(struct.encryptionConfig),
        endpoint_config: dataprocClusterClusterConfigEndpointConfigToTerraform(struct.endpointConfig),
        gce_cluster_config: dataprocClusterClusterConfigGceClusterConfigToTerraform(struct.gceClusterConfig),
        initialization_action: cdktf.listMapper(dataprocClusterClusterConfigInitializationActionToTerraform, true)(struct.initializationAction),
        lifecycle_config: dataprocClusterClusterConfigLifecycleConfigToTerraform(struct.lifecycleConfig),
        master_config: dataprocClusterClusterConfigMasterConfigToTerraform(struct.masterConfig),
        metastore_config: dataprocClusterClusterConfigMetastoreConfigToTerraform(struct.metastoreConfig),
        preemptible_worker_config: dataprocClusterClusterConfigPreemptibleWorkerConfigToTerraform(struct.preemptibleWorkerConfig),
        security_config: dataprocClusterClusterConfigSecurityConfigToTerraform(struct.securityConfig),
        software_config: dataprocClusterClusterConfigSoftwareConfigToTerraform(struct.softwareConfig),
        worker_config: dataprocClusterClusterConfigWorkerConfigToTerraform(struct.workerConfig),
    };
}
exports.dataprocClusterClusterConfigToTerraform = dataprocClusterClusterConfigToTerraform;
class DataprocClusterClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // autoscaling_config - computed: false, optional: true, required: false
        this._autoscalingConfig = new DataprocClusterClusterConfigAutoscalingConfigOutputReference(this, "autoscaling_config");
        // encryption_config - computed: false, optional: true, required: false
        this._encryptionConfig = new DataprocClusterClusterConfigEncryptionConfigOutputReference(this, "encryption_config");
        // endpoint_config - computed: false, optional: true, required: false
        this._endpointConfig = new DataprocClusterClusterConfigEndpointConfigOutputReference(this, "endpoint_config");
        // gce_cluster_config - computed: false, optional: true, required: false
        this._gceClusterConfig = new DataprocClusterClusterConfigGceClusterConfigOutputReference(this, "gce_cluster_config");
        // initialization_action - computed: false, optional: true, required: false
        this._initializationAction = new DataprocClusterClusterConfigInitializationActionList(this, "initialization_action", false);
        // lifecycle_config - computed: false, optional: true, required: false
        this._lifecycleConfig = new DataprocClusterClusterConfigLifecycleConfigOutputReference(this, "lifecycle_config");
        // master_config - computed: false, optional: true, required: false
        this._masterConfig = new DataprocClusterClusterConfigMasterConfigOutputReference(this, "master_config");
        // metastore_config - computed: false, optional: true, required: false
        this._metastoreConfig = new DataprocClusterClusterConfigMetastoreConfigOutputReference(this, "metastore_config");
        // preemptible_worker_config - computed: false, optional: true, required: false
        this._preemptibleWorkerConfig = new DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference(this, "preemptible_worker_config");
        // security_config - computed: false, optional: true, required: false
        this._securityConfig = new DataprocClusterClusterConfigSecurityConfigOutputReference(this, "security_config");
        // software_config - computed: false, optional: true, required: false
        this._softwareConfig = new DataprocClusterClusterConfigSoftwareConfigOutputReference(this, "software_config");
        // worker_config - computed: false, optional: true, required: false
        this._workerConfig = new DataprocClusterClusterConfigWorkerConfigOutputReference(this, "worker_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._stagingBucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.stagingBucket = this._stagingBucket;
        }
        if (this._tempBucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.tempBucket = this._tempBucket;
        }
        if (this._autoscalingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoscalingConfig = this._autoscalingConfig?.internalValue;
        }
        if (this._encryptionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionConfig = this._encryptionConfig?.internalValue;
        }
        if (this._endpointConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.endpointConfig = this._endpointConfig?.internalValue;
        }
        if (this._gceClusterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gceClusterConfig = this._gceClusterConfig?.internalValue;
        }
        if (this._initializationAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.initializationAction = this._initializationAction?.internalValue;
        }
        if (this._lifecycleConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfig = this._lifecycleConfig?.internalValue;
        }
        if (this._masterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterConfig = this._masterConfig?.internalValue;
        }
        if (this._metastoreConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.metastoreConfig = this._metastoreConfig?.internalValue;
        }
        if (this._preemptibleWorkerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptibleWorkerConfig = this._preemptibleWorkerConfig?.internalValue;
        }
        if (this._securityConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityConfig = this._securityConfig?.internalValue;
        }
        if (this._softwareConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.softwareConfig = this._softwareConfig?.internalValue;
        }
        if (this._workerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.workerConfig = this._workerConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._stagingBucket = undefined;
            this._tempBucket = undefined;
            this._autoscalingConfig.internalValue = undefined;
            this._encryptionConfig.internalValue = undefined;
            this._endpointConfig.internalValue = undefined;
            this._gceClusterConfig.internalValue = undefined;
            this._initializationAction.internalValue = undefined;
            this._lifecycleConfig.internalValue = undefined;
            this._masterConfig.internalValue = undefined;
            this._metastoreConfig.internalValue = undefined;
            this._preemptibleWorkerConfig.internalValue = undefined;
            this._securityConfig.internalValue = undefined;
            this._softwareConfig.internalValue = undefined;
            this._workerConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._stagingBucket = value.stagingBucket;
            this._tempBucket = value.tempBucket;
            this._autoscalingConfig.internalValue = value.autoscalingConfig;
            this._encryptionConfig.internalValue = value.encryptionConfig;
            this._endpointConfig.internalValue = value.endpointConfig;
            this._gceClusterConfig.internalValue = value.gceClusterConfig;
            this._initializationAction.internalValue = value.initializationAction;
            this._lifecycleConfig.internalValue = value.lifecycleConfig;
            this._masterConfig.internalValue = value.masterConfig;
            this._metastoreConfig.internalValue = value.metastoreConfig;
            this._preemptibleWorkerConfig.internalValue = value.preemptibleWorkerConfig;
            this._securityConfig.internalValue = value.securityConfig;
            this._softwareConfig.internalValue = value.softwareConfig;
            this._workerConfig.internalValue = value.workerConfig;
        }
    }
    // bucket - computed: true, optional: false, required: false
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    get stagingBucket() {
        return this.getStringAttribute('staging_bucket');
    }
    set stagingBucket(value) {
        this._stagingBucket = value;
    }
    resetStagingBucket() {
        this._stagingBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stagingBucketInput() {
        return this._stagingBucket;
    }
    get tempBucket() {
        return this.getStringAttribute('temp_bucket');
    }
    set tempBucket(value) {
        this._tempBucket = value;
    }
    resetTempBucket() {
        this._tempBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tempBucketInput() {
        return this._tempBucket;
    }
    get autoscalingConfig() {
        return this._autoscalingConfig;
    }
    putAutoscalingConfig(value) {
        this._autoscalingConfig.internalValue = value;
    }
    resetAutoscalingConfig() {
        this._autoscalingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoscalingConfigInput() {
        return this._autoscalingConfig.internalValue;
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    resetEncryptionConfig() {
        this._encryptionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
    get endpointConfig() {
        return this._endpointConfig;
    }
    putEndpointConfig(value) {
        this._endpointConfig.internalValue = value;
    }
    resetEndpointConfig() {
        this._endpointConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointConfigInput() {
        return this._endpointConfig.internalValue;
    }
    get gceClusterConfig() {
        return this._gceClusterConfig;
    }
    putGceClusterConfig(value) {
        this._gceClusterConfig.internalValue = value;
    }
    resetGceClusterConfig() {
        this._gceClusterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gceClusterConfigInput() {
        return this._gceClusterConfig.internalValue;
    }
    get initializationAction() {
        return this._initializationAction;
    }
    putInitializationAction(value) {
        this._initializationAction.internalValue = value;
    }
    resetInitializationAction() {
        this._initializationAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initializationActionInput() {
        return this._initializationAction.internalValue;
    }
    get lifecycleConfig() {
        return this._lifecycleConfig;
    }
    putLifecycleConfig(value) {
        this._lifecycleConfig.internalValue = value;
    }
    resetLifecycleConfig() {
        this._lifecycleConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigInput() {
        return this._lifecycleConfig.internalValue;
    }
    get masterConfig() {
        return this._masterConfig;
    }
    putMasterConfig(value) {
        this._masterConfig.internalValue = value;
    }
    resetMasterConfig() {
        this._masterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterConfigInput() {
        return this._masterConfig.internalValue;
    }
    get metastoreConfig() {
        return this._metastoreConfig;
    }
    putMetastoreConfig(value) {
        this._metastoreConfig.internalValue = value;
    }
    resetMetastoreConfig() {
        this._metastoreConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metastoreConfigInput() {
        return this._metastoreConfig.internalValue;
    }
    get preemptibleWorkerConfig() {
        return this._preemptibleWorkerConfig;
    }
    putPreemptibleWorkerConfig(value) {
        this._preemptibleWorkerConfig.internalValue = value;
    }
    resetPreemptibleWorkerConfig() {
        this._preemptibleWorkerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibleWorkerConfigInput() {
        return this._preemptibleWorkerConfig.internalValue;
    }
    get securityConfig() {
        return this._securityConfig;
    }
    putSecurityConfig(value) {
        this._securityConfig.internalValue = value;
    }
    resetSecurityConfig() {
        this._securityConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityConfigInput() {
        return this._securityConfig.internalValue;
    }
    get softwareConfig() {
        return this._softwareConfig;
    }
    putSoftwareConfig(value) {
        this._softwareConfig.internalValue = value;
    }
    resetSoftwareConfig() {
        this._softwareConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get softwareConfigInput() {
        return this._softwareConfig.internalValue;
    }
    get workerConfig() {
        return this._workerConfig;
    }
    putWorkerConfig(value) {
        this._workerConfig.internalValue = value;
    }
    resetWorkerConfig() {
        this._workerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workerConfigInput() {
        return this._workerConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigOutputReference = DataprocClusterClusterConfigOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigOutputReference[_y] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigOutputReference", version: "4.0.3" };
function dataprocClusterTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dataprocClusterTimeoutsToTerraform = dataprocClusterTimeoutsToTerraform;
class DataprocClusterTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DataprocClusterTimeoutsOutputReference = DataprocClusterTimeoutsOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DataprocClusterTimeoutsOutputReference[_z] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterTimeoutsOutputReference", version: "4.0.3" };
function dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataproc_metastore_service: cdktf.stringToTerraform(struct.dataprocMetastoreService),
    };
}
exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToTerraform = dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToTerraform;
class DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataprocMetastoreService !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataprocMetastoreService = this._dataprocMetastoreService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataprocMetastoreService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataprocMetastoreService = value.dataprocMetastoreService;
        }
    }
    get dataprocMetastoreService() {
        return this.getStringAttribute('dataproc_metastore_service');
    }
    set dataprocMetastoreService(value) {
        this._dataprocMetastoreService = value;
    }
    resetDataprocMetastoreService() {
        this._dataprocMetastoreService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataprocMetastoreServiceInput() {
        return this._dataprocMetastoreService;
    }
}
exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference = DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference[_0] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference", version: "4.0.3" };
function dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataproc_cluster: cdktf.stringToTerraform(struct.dataprocCluster),
    };
}
exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToTerraform = dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToTerraform;
class DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataprocCluster !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataprocCluster = this._dataprocCluster;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataprocCluster = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataprocCluster = value.dataprocCluster;
        }
    }
    get dataprocCluster() {
        return this.getStringAttribute('dataproc_cluster');
    }
    set dataprocCluster(value) {
        this._dataprocCluster = value;
    }
    resetDataprocCluster() {
        this._dataprocCluster = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataprocClusterInput() {
        return this._dataprocCluster;
    }
}
exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference = DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference[_1] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference", version: "4.0.3" };
function dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metastore_config: dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToTerraform(struct.metastoreConfig),
        spark_history_server_config: dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToTerraform(struct.sparkHistoryServerConfig),
    };
}
exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToTerraform = dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToTerraform;
class DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // metastore_config - computed: false, optional: true, required: false
        this._metastoreConfig = new DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference(this, "metastore_config");
        // spark_history_server_config - computed: false, optional: true, required: false
        this._sparkHistoryServerConfig = new DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference(this, "spark_history_server_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metastoreConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.metastoreConfig = this._metastoreConfig?.internalValue;
        }
        if (this._sparkHistoryServerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparkHistoryServerConfig = this._sparkHistoryServerConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metastoreConfig.internalValue = undefined;
            this._sparkHistoryServerConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metastoreConfig.internalValue = value.metastoreConfig;
            this._sparkHistoryServerConfig.internalValue = value.sparkHistoryServerConfig;
        }
    }
    get metastoreConfig() {
        return this._metastoreConfig;
    }
    putMetastoreConfig(value) {
        this._metastoreConfig.internalValue = value;
    }
    resetMetastoreConfig() {
        this._metastoreConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metastoreConfigInput() {
        return this._metastoreConfig.internalValue;
    }
    get sparkHistoryServerConfig() {
        return this._sparkHistoryServerConfig;
    }
    putSparkHistoryServerConfig(value) {
        this._sparkHistoryServerConfig.internalValue = value;
    }
    resetSparkHistoryServerConfig() {
        this._sparkHistoryServerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkHistoryServerConfigInput() {
        return this._sparkHistoryServerConfig.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference = DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference[_2] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference", version: "4.0.3" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_node_count: cdktf.numberToTerraform(struct.maxNodeCount),
        min_node_count: cdktf.numberToTerraform(struct.minNodeCount),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxNodeCount = this._maxNodeCount;
        }
        if (this._minNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.minNodeCount = this._minNodeCount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxNodeCount = undefined;
            this._minNodeCount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxNodeCount = value.maxNodeCount;
            this._minNodeCount = value.minNodeCount;
        }
    }
    get maxNodeCount() {
        return this.getNumberAttribute('max_node_count');
    }
    set maxNodeCount(value) {
        this._maxNodeCount = value;
    }
    resetMaxNodeCount() {
        this._maxNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxNodeCountInput() {
        return this._maxNodeCount;
    }
    get minNodeCount() {
        return this.getNumberAttribute('min_node_count');
    }
    set minNodeCount(value) {
        this._minNodeCount = value;
    }
    resetMinNodeCount() {
        this._minNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minNodeCountInput() {
        return this._minNodeCount;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference[_3] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference", version: "4.0.3" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        local_ssd_count: cdktf.numberToTerraform(struct.localSsdCount),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        preemptible: cdktf.booleanToTerraform(struct.preemptible),
        spot: cdktf.booleanToTerraform(struct.spot),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._localSsdCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.localSsdCount = this._localSsdCount;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._preemptible !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptible = this._preemptible;
        }
        if (this._spot !== undefined) {
            hasAnyValues = true;
            internalValueResult.spot = this._spot;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._localSsdCount = undefined;
            this._machineType = undefined;
            this._minCpuPlatform = undefined;
            this._preemptible = undefined;
            this._spot = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._localSsdCount = value.localSsdCount;
            this._machineType = value.machineType;
            this._minCpuPlatform = value.minCpuPlatform;
            this._preemptible = value.preemptible;
            this._spot = value.spot;
        }
    }
    get localSsdCount() {
        return this.getNumberAttribute('local_ssd_count');
    }
    set localSsdCount(value) {
        this._localSsdCount = value;
    }
    resetLocalSsdCount() {
        this._localSsdCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localSsdCountInput() {
        return this._localSsdCount;
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get preemptible() {
        return this.getBooleanAttribute('preemptible');
    }
    set preemptible(value) {
        this._preemptible = value;
    }
    resetPreemptible() {
        this._preemptible = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibleInput() {
        return this._preemptible;
    }
    get spot() {
        return this.getBooleanAttribute('spot');
    }
    set spot(value) {
        this._spot = value;
    }
    resetSpot() {
        this._spot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotInput() {
        return this._spot;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference[_4] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference", version: "4.0.3" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        locations: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.locations),
        autoscaling: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToTerraform(struct.autoscaling),
        config: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToTerraform(struct.config),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // autoscaling - computed: false, optional: true, required: false
        this._autoscaling = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference(this, "autoscaling");
        // config - computed: false, optional: true, required: false
        this._config = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference(this, "config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._locations !== undefined) {
            hasAnyValues = true;
            internalValueResult.locations = this._locations;
        }
        if (this._autoscaling?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoscaling = this._autoscaling?.internalValue;
        }
        if (this._config?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.config = this._config?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._locations = undefined;
            this._autoscaling.internalValue = undefined;
            this._config.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._locations = value.locations;
            this._autoscaling.internalValue = value.autoscaling;
            this._config.internalValue = value.config;
        }
    }
    get locations() {
        return cdktf.Fn.tolist(this.getListAttribute('locations'));
    }
    set locations(value) {
        this._locations = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationsInput() {
        return this._locations;
    }
    get autoscaling() {
        return this._autoscaling;
    }
    putAutoscaling(value) {
        this._autoscaling.internalValue = value;
    }
    resetAutoscaling() {
        this._autoscaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoscalingInput() {
        return this._autoscaling.internalValue;
    }
    get config() {
        return this._config;
    }
    putConfig(value) {
        this._config.internalValue = value;
    }
    resetConfig() {
        this._config.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configInput() {
        return this._config.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference[_5] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference", version: "4.0.3" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        node_pool: cdktf.stringToTerraform(struct.nodePool),
        roles: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.roles),
        node_pool_config: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToTerraform(struct.nodePoolConfig),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // node_pool_config - computed: false, optional: true, required: false
        this._nodePoolConfig = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference(this, "node_pool_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nodePool !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodePool = this._nodePool;
        }
        if (this._roles !== undefined) {
            hasAnyValues = true;
            internalValueResult.roles = this._roles;
        }
        if (this._nodePoolConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodePoolConfig = this._nodePoolConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._nodePool = undefined;
            this._roles = undefined;
            this._nodePoolConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._nodePool = value.nodePool;
            this._roles = value.roles;
            this._nodePoolConfig.internalValue = value.nodePoolConfig;
        }
    }
    get nodePool() {
        return this.getStringAttribute('node_pool');
    }
    set nodePool(value) {
        this._nodePool = value;
    }
    // Temporarily expose input value. Use with caution.
    get nodePoolInput() {
        return this._nodePool;
    }
    get roles() {
        return cdktf.Fn.tolist(this.getListAttribute('roles'));
    }
    set roles(value) {
        this._roles = value;
    }
    // Temporarily expose input value. Use with caution.
    get rolesInput() {
        return this._roles;
    }
    get nodePoolConfig() {
        return this._nodePoolConfig;
    }
    putNodePoolConfig(value) {
        this._nodePoolConfig.internalValue = value;
    }
    resetNodePoolConfig() {
        this._nodePoolConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodePoolConfigInput() {
        return this._nodePoolConfig.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference[_6] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference", version: "4.0.3" };
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList;
_7 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList[_7] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList", version: "4.0.3" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gke_cluster_target: cdktf.stringToTerraform(struct.gkeClusterTarget),
        node_pool_target: cdktf.listMapper(dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToTerraform, true)(struct.nodePoolTarget),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // node_pool_target - computed: false, optional: true, required: false
        this._nodePoolTarget = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList(this, "node_pool_target", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gkeClusterTarget !== undefined) {
            hasAnyValues = true;
            internalValueResult.gkeClusterTarget = this._gkeClusterTarget;
        }
        if (this._nodePoolTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodePoolTarget = this._nodePoolTarget?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gkeClusterTarget = undefined;
            this._nodePoolTarget.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gkeClusterTarget = value.gkeClusterTarget;
            this._nodePoolTarget.internalValue = value.nodePoolTarget;
        }
    }
    get gkeClusterTarget() {
        return this.getStringAttribute('gke_cluster_target');
    }
    set gkeClusterTarget(value) {
        this._gkeClusterTarget = value;
    }
    resetGkeClusterTarget() {
        this._gkeClusterTarget = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gkeClusterTargetInput() {
        return this._gkeClusterTarget;
    }
    get nodePoolTarget() {
        return this._nodePoolTarget;
    }
    putNodePoolTarget(value) {
        this._nodePoolTarget.internalValue = value;
    }
    resetNodePoolTarget() {
        this._nodePoolTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodePoolTargetInput() {
        return this._nodePoolTarget.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference[_8] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference", version: "4.0.3" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        component_version: cdktf.hashMapper(cdktf.stringToTerraform)(struct.componentVersion),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._componentVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.componentVersion = this._componentVersion;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._componentVersion = undefined;
            this._properties = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._componentVersion = value.componentVersion;
            this._properties = value.properties;
        }
    }
    get componentVersion() {
        return this.getStringMapAttribute('component_version');
    }
    set componentVersion(value) {
        this._componentVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get componentVersionInput() {
        return this._componentVersion;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference[_9] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference", version: "4.0.3" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kubernetes_namespace: cdktf.stringToTerraform(struct.kubernetesNamespace),
        gke_cluster_config: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToTerraform(struct.gkeClusterConfig),
        kubernetes_software_config: dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToTerraform(struct.kubernetesSoftwareConfig),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigToTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gke_cluster_config - computed: false, optional: false, required: true
        this._gkeClusterConfig = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference(this, "gke_cluster_config");
        // kubernetes_software_config - computed: false, optional: false, required: true
        this._kubernetesSoftwareConfig = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference(this, "kubernetes_software_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kubernetesNamespace !== undefined) {
            hasAnyValues = true;
            internalValueResult.kubernetesNamespace = this._kubernetesNamespace;
        }
        if (this._gkeClusterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gkeClusterConfig = this._gkeClusterConfig?.internalValue;
        }
        if (this._kubernetesSoftwareConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kubernetesSoftwareConfig = this._kubernetesSoftwareConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kubernetesNamespace = undefined;
            this._gkeClusterConfig.internalValue = undefined;
            this._kubernetesSoftwareConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kubernetesNamespace = value.kubernetesNamespace;
            this._gkeClusterConfig.internalValue = value.gkeClusterConfig;
            this._kubernetesSoftwareConfig.internalValue = value.kubernetesSoftwareConfig;
        }
    }
    get kubernetesNamespace() {
        return this.getStringAttribute('kubernetes_namespace');
    }
    set kubernetesNamespace(value) {
        this._kubernetesNamespace = value;
    }
    resetKubernetesNamespace() {
        this._kubernetesNamespace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kubernetesNamespaceInput() {
        return this._kubernetesNamespace;
    }
    get gkeClusterConfig() {
        return this._gkeClusterConfig;
    }
    putGkeClusterConfig(value) {
        this._gkeClusterConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get gkeClusterConfigInput() {
        return this._gkeClusterConfig.internalValue;
    }
    get kubernetesSoftwareConfig() {
        return this._kubernetesSoftwareConfig;
    }
    putKubernetesSoftwareConfig(value) {
        this._kubernetesSoftwareConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get kubernetesSoftwareConfigInput() {
        return this._kubernetesSoftwareConfig.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference[_10] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference", version: "4.0.3" };
function dataprocClusterVirtualClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        staging_bucket: cdktf.stringToTerraform(struct.stagingBucket),
        auxiliary_services_config: dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToTerraform(struct.auxiliaryServicesConfig),
        kubernetes_cluster_config: dataprocClusterVirtualClusterConfigKubernetesClusterConfigToTerraform(struct.kubernetesClusterConfig),
    };
}
exports.dataprocClusterVirtualClusterConfigToTerraform = dataprocClusterVirtualClusterConfigToTerraform;
class DataprocClusterVirtualClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // auxiliary_services_config - computed: false, optional: true, required: false
        this._auxiliaryServicesConfig = new DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference(this, "auxiliary_services_config");
        // kubernetes_cluster_config - computed: false, optional: true, required: false
        this._kubernetesClusterConfig = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference(this, "kubernetes_cluster_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._stagingBucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.stagingBucket = this._stagingBucket;
        }
        if (this._auxiliaryServicesConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.auxiliaryServicesConfig = this._auxiliaryServicesConfig?.internalValue;
        }
        if (this._kubernetesClusterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kubernetesClusterConfig = this._kubernetesClusterConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._stagingBucket = undefined;
            this._auxiliaryServicesConfig.internalValue = undefined;
            this._kubernetesClusterConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._stagingBucket = value.stagingBucket;
            this._auxiliaryServicesConfig.internalValue = value.auxiliaryServicesConfig;
            this._kubernetesClusterConfig.internalValue = value.kubernetesClusterConfig;
        }
    }
    get stagingBucket() {
        return this.getStringAttribute('staging_bucket');
    }
    set stagingBucket(value) {
        this._stagingBucket = value;
    }
    resetStagingBucket() {
        this._stagingBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stagingBucketInput() {
        return this._stagingBucket;
    }
    get auxiliaryServicesConfig() {
        return this._auxiliaryServicesConfig;
    }
    putAuxiliaryServicesConfig(value) {
        this._auxiliaryServicesConfig.internalValue = value;
    }
    resetAuxiliaryServicesConfig() {
        this._auxiliaryServicesConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get auxiliaryServicesConfigInput() {
        return this._auxiliaryServicesConfig.internalValue;
    }
    get kubernetesClusterConfig() {
        return this._kubernetesClusterConfig;
    }
    putKubernetesClusterConfig(value) {
        this._kubernetesClusterConfig.internalValue = value;
    }
    resetKubernetesClusterConfig() {
        this._kubernetesClusterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kubernetesClusterConfigInput() {
        return this._kubernetesClusterConfig.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigOutputReference = DataprocClusterVirtualClusterConfigOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigOutputReference[_11] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/dataproc_cluster google_dataproc_cluster}
*/
class DataprocCluster extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/dataproc_cluster google_dataproc_cluster} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataprocClusterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_dataproc_cluster',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // cluster_config - computed: false, optional: true, required: false
        this._clusterConfig = new DataprocClusterClusterConfigOutputReference(this, "cluster_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DataprocClusterTimeoutsOutputReference(this, "timeouts");
        // virtual_cluster_config - computed: false, optional: true, required: false
        this._virtualClusterConfig = new DataprocClusterVirtualClusterConfigOutputReference(this, "virtual_cluster_config");
        this._gracefulDecommissionTimeout = config.gracefulDecommissionTimeout;
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._project = config.project;
        this._region = config.region;
        this._clusterConfig.internalValue = config.clusterConfig;
        this._timeouts.internalValue = config.timeouts;
        this._virtualClusterConfig.internalValue = config.virtualClusterConfig;
    }
    get gracefulDecommissionTimeout() {
        return this.getStringAttribute('graceful_decommission_timeout');
    }
    set gracefulDecommissionTimeout(value) {
        this._gracefulDecommissionTimeout = value;
    }
    resetGracefulDecommissionTimeout() {
        this._gracefulDecommissionTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gracefulDecommissionTimeoutInput() {
        return this._gracefulDecommissionTimeout;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get clusterConfig() {
        return this._clusterConfig;
    }
    putClusterConfig(value) {
        this._clusterConfig.internalValue = value;
    }
    resetClusterConfig() {
        this._clusterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterConfigInput() {
        return this._clusterConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get virtualClusterConfig() {
        return this._virtualClusterConfig;
    }
    putVirtualClusterConfig(value) {
        this._virtualClusterConfig.internalValue = value;
    }
    resetVirtualClusterConfig() {
        this._virtualClusterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get virtualClusterConfigInput() {
        return this._virtualClusterConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            graceful_decommission_timeout: cdktf.stringToTerraform(this._gracefulDecommissionTimeout),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            cluster_config: dataprocClusterClusterConfigToTerraform(this._clusterConfig.internalValue),
            timeouts: dataprocClusterTimeoutsToTerraform(this._timeouts.internalValue),
            virtual_cluster_config: dataprocClusterVirtualClusterConfigToTerraform(this._virtualClusterConfig.internalValue),
        };
    }
}
exports.DataprocCluster = DataprocCluster;
_12 = JSII_RTTI_SYMBOL_1;
DataprocCluster[_12] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocCluster", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
DataprocCluster.tfResourceType = "google_dataproc_cluster";
//# sourceMappingURL=data:application/json;base64,