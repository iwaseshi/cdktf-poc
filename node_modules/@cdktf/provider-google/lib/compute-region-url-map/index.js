"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeRegionUrlMap = exports.ComputeRegionUrlMapTimeoutsOutputReference = exports.computeRegionUrlMapTimeoutsToTerraform = exports.ComputeRegionUrlMapTestList = exports.ComputeRegionUrlMapTestOutputReference = exports.computeRegionUrlMapTestToTerraform = exports.ComputeRegionUrlMapPathMatcherList = exports.ComputeRegionUrlMapPathMatcherOutputReference = exports.computeRegionUrlMapPathMatcherToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesList = exports.ComputeRegionUrlMapPathMatcherRouteRulesOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesUrlRedirectOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesUrlRedirectToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesList = exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList = exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList = exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList = exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList = exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesHeaderActionToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList = exports.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddToTerraform = exports.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList = exports.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference = exports.computeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleList = exports.ComputeRegionUrlMapPathMatcherPathRuleOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleUrlRedirectOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleUrlRedirectToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortToTerraform = exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference = exports.computeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyToTerraform = exports.ComputeRegionUrlMapPathMatcherDefaultUrlRedirectOutputReference = exports.computeRegionUrlMapPathMatcherDefaultUrlRedirectToTerraform = exports.ComputeRegionUrlMapHostRuleList = exports.ComputeRegionUrlMapHostRuleOutputReference = exports.computeRegionUrlMapHostRuleToTerraform = exports.ComputeRegionUrlMapDefaultUrlRedirectOutputReference = exports.computeRegionUrlMapDefaultUrlRedirectToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionOutputReference = exports.computeRegionUrlMapDefaultRouteActionToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesList = exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesOutputReference = exports.computeRegionUrlMapDefaultRouteActionWeightedBackendServicesToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference = exports.computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = exports.computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = exports.computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionUrlRewriteOutputReference = exports.computeRegionUrlMapDefaultRouteActionUrlRewriteToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionTimeoutOutputReference = exports.computeRegionUrlMapDefaultRouteActionTimeoutToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionRetryPolicyOutputReference = exports.computeRegionUrlMapDefaultRouteActionRetryPolicyToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference = exports.computeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference = exports.computeRegionUrlMapDefaultRouteActionRequestMirrorPolicyToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference = exports.computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference = exports.computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = exports.computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference = exports.computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortToTerraform = exports.ComputeRegionUrlMapDefaultRouteActionCorsPolicyOutputReference = exports.computeRegionUrlMapDefaultRouteActionCorsPolicyToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function computeRegionUrlMapDefaultRouteActionCorsPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_credentials: cdktf.booleanToTerraform(struct.allowCredentials),
        allow_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowHeaders),
        allow_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowMethods),
        allow_origin_regexes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOriginRegexes),
        allow_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOrigins),
        disabled: cdktf.booleanToTerraform(struct.disabled),
        expose_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exposeHeaders),
        max_age: cdktf.numberToTerraform(struct.maxAge),
    };
}
exports.computeRegionUrlMapDefaultRouteActionCorsPolicyToTerraform = computeRegionUrlMapDefaultRouteActionCorsPolicyToTerraform;
class ComputeRegionUrlMapDefaultRouteActionCorsPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowCredentials = this._allowCredentials;
        }
        if (this._allowHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowHeaders = this._allowHeaders;
        }
        if (this._allowMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowMethods = this._allowMethods;
        }
        if (this._allowOriginRegexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOriginRegexes = this._allowOriginRegexes;
        }
        if (this._allowOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOrigins = this._allowOrigins;
        }
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        if (this._exposeHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.exposeHeaders = this._exposeHeaders;
        }
        if (this._maxAge !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAge = this._maxAge;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowCredentials = undefined;
            this._allowHeaders = undefined;
            this._allowMethods = undefined;
            this._allowOriginRegexes = undefined;
            this._allowOrigins = undefined;
            this._disabled = undefined;
            this._exposeHeaders = undefined;
            this._maxAge = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowCredentials = value.allowCredentials;
            this._allowHeaders = value.allowHeaders;
            this._allowMethods = value.allowMethods;
            this._allowOriginRegexes = value.allowOriginRegexes;
            this._allowOrigins = value.allowOrigins;
            this._disabled = value.disabled;
            this._exposeHeaders = value.exposeHeaders;
            this._maxAge = value.maxAge;
        }
    }
    get allowCredentials() {
        return this.getBooleanAttribute('allow_credentials');
    }
    set allowCredentials(value) {
        this._allowCredentials = value;
    }
    resetAllowCredentials() {
        this._allowCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowCredentialsInput() {
        return this._allowCredentials;
    }
    get allowHeaders() {
        return this.getListAttribute('allow_headers');
    }
    set allowHeaders(value) {
        this._allowHeaders = value;
    }
    resetAllowHeaders() {
        this._allowHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowHeadersInput() {
        return this._allowHeaders;
    }
    get allowMethods() {
        return this.getListAttribute('allow_methods');
    }
    set allowMethods(value) {
        this._allowMethods = value;
    }
    resetAllowMethods() {
        this._allowMethods = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowMethodsInput() {
        return this._allowMethods;
    }
    get allowOriginRegexes() {
        return this.getListAttribute('allow_origin_regexes');
    }
    set allowOriginRegexes(value) {
        this._allowOriginRegexes = value;
    }
    resetAllowOriginRegexes() {
        this._allowOriginRegexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginRegexesInput() {
        return this._allowOriginRegexes;
    }
    get allowOrigins() {
        return this.getListAttribute('allow_origins');
    }
    set allowOrigins(value) {
        this._allowOrigins = value;
    }
    resetAllowOrigins() {
        this._allowOrigins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginsInput() {
        return this._allowOrigins;
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    resetDisabled() {
        this._disabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get exposeHeaders() {
        return this.getListAttribute('expose_headers');
    }
    set exposeHeaders(value) {
        this._exposeHeaders = value;
    }
    resetExposeHeaders() {
        this._exposeHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exposeHeadersInput() {
        return this._exposeHeaders;
    }
    get maxAge() {
        return this.getNumberAttribute('max_age');
    }
    set maxAge(value) {
        this._maxAge = value;
    }
    resetMaxAge() {
        this._maxAge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAgeInput() {
        return this._maxAge;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionCorsPolicyOutputReference = ComputeRegionUrlMapDefaultRouteActionCorsPolicyOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionCorsPolicyOutputReference[_a] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionCorsPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_status: cdktf.numberToTerraform(struct.httpStatus),
        percentage: cdktf.numberToTerraform(struct.percentage),
    };
}
exports.computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortToTerraform = computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortToTerraform;
class ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpStatus = this._httpStatus;
        }
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpStatus = undefined;
            this._percentage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpStatus = value.httpStatus;
            this._percentage = value.percentage;
        }
    }
    get httpStatus() {
        return this.getNumberAttribute('http_status');
    }
    set httpStatus(value) {
        this._httpStatus = value;
    }
    resetHttpStatus() {
        this._httpStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpStatusInput() {
        return this._httpStatus;
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    resetPercentage() {
        this._percentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference = ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference[_b] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform;
class ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference[_c] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        percentage: cdktf.numberToTerraform(struct.percentage),
        fixed_delay: computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct.fixedDelay),
    };
}
exports.computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayToTerraform = computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayToTerraform;
class ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // fixed_delay - computed: false, optional: true, required: false
        this._fixedDelay = new ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference(this, "fixed_delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        if (this._fixedDelay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedDelay = this._fixedDelay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._percentage = undefined;
            this._fixedDelay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._percentage = value.percentage;
            this._fixedDelay.internalValue = value.fixedDelay;
        }
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    resetPercentage() {
        this._percentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
    get fixedDelay() {
        return this._fixedDelay;
    }
    putFixedDelay(value) {
        this._fixedDelay.internalValue = value;
    }
    resetFixedDelay() {
        this._fixedDelay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedDelayInput() {
        return this._fixedDelay.internalValue;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference = ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference[_d] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        abort: computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortToTerraform(struct.abort),
        delay: computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayToTerraform(struct.delay),
    };
}
exports.computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyToTerraform = computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyToTerraform;
class ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // abort - computed: false, optional: true, required: false
        this._abort = new ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference(this, "abort");
        // delay - computed: false, optional: true, required: false
        this._delay = new ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference(this, "delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._abort?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.abort = this._abort?.internalValue;
        }
        if (this._delay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.delay = this._delay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._abort.internalValue = undefined;
            this._delay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._abort.internalValue = value.abort;
            this._delay.internalValue = value.delay;
        }
    }
    get abort() {
        return this._abort;
    }
    putAbort(value) {
        this._abort.internalValue = value;
    }
    resetAbort() {
        this._abort.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get abortInput() {
        return this._abort.internalValue;
    }
    get delay() {
        return this._delay;
    }
    putDelay(value) {
        this._delay.internalValue = value;
    }
    resetDelay() {
        this._delay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get delayInput() {
        return this._delay.internalValue;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference = ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference[_e] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionRequestMirrorPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
    };
}
exports.computeRegionUrlMapDefaultRouteActionRequestMirrorPolicyToTerraform = computeRegionUrlMapDefaultRouteActionRequestMirrorPolicyToTerraform;
class ComputeRegionUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backendService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backendService = value.backendService;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    resetBackendService() {
        this._backendService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference = ComputeRegionUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference[_f] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform = computeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform;
class ComputeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference = ComputeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference[_g] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionRetryPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        retry_conditions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.retryConditions),
        per_try_timeout: computeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform(struct.perTryTimeout),
    };
}
exports.computeRegionUrlMapDefaultRouteActionRetryPolicyToTerraform = computeRegionUrlMapDefaultRouteActionRetryPolicyToTerraform;
class ComputeRegionUrlMapDefaultRouteActionRetryPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // per_try_timeout - computed: false, optional: true, required: false
        this._perTryTimeout = new ComputeRegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference(this, "per_try_timeout");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._retryConditions !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryConditions = this._retryConditions;
        }
        if (this._perTryTimeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.perTryTimeout = this._perTryTimeout?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._numRetries = undefined;
            this._retryConditions = undefined;
            this._perTryTimeout.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._numRetries = value.numRetries;
            this._retryConditions = value.retryConditions;
            this._perTryTimeout.internalValue = value.perTryTimeout;
        }
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get retryConditions() {
        return this.getListAttribute('retry_conditions');
    }
    set retryConditions(value) {
        this._retryConditions = value;
    }
    resetRetryConditions() {
        this._retryConditions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryConditionsInput() {
        return this._retryConditions;
    }
    get perTryTimeout() {
        return this._perTryTimeout;
    }
    putPerTryTimeout(value) {
        this._perTryTimeout.internalValue = value;
    }
    resetPerTryTimeout() {
        this._perTryTimeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perTryTimeoutInput() {
        return this._perTryTimeout.internalValue;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionRetryPolicyOutputReference = ComputeRegionUrlMapDefaultRouteActionRetryPolicyOutputReference;
_h = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionRetryPolicyOutputReference[_h] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionRetryPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeRegionUrlMapDefaultRouteActionTimeoutToTerraform = computeRegionUrlMapDefaultRouteActionTimeoutToTerraform;
class ComputeRegionUrlMapDefaultRouteActionTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionTimeoutOutputReference = ComputeRegionUrlMapDefaultRouteActionTimeoutOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionTimeoutOutputReference[_j] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionTimeoutOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionUrlRewriteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_rewrite: cdktf.stringToTerraform(struct.hostRewrite),
        path_prefix_rewrite: cdktf.stringToTerraform(struct.pathPrefixRewrite),
    };
}
exports.computeRegionUrlMapDefaultRouteActionUrlRewriteToTerraform = computeRegionUrlMapDefaultRouteActionUrlRewriteToTerraform;
class ComputeRegionUrlMapDefaultRouteActionUrlRewriteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRewrite = this._hostRewrite;
        }
        if (this._pathPrefixRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathPrefixRewrite = this._pathPrefixRewrite;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRewrite = undefined;
            this._pathPrefixRewrite = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRewrite = value.hostRewrite;
            this._pathPrefixRewrite = value.pathPrefixRewrite;
        }
    }
    get hostRewrite() {
        return this.getStringAttribute('host_rewrite');
    }
    set hostRewrite(value) {
        this._hostRewrite = value;
    }
    resetHostRewrite() {
        this._hostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRewriteInput() {
        return this._hostRewrite;
    }
    get pathPrefixRewrite() {
        return this.getStringAttribute('path_prefix_rewrite');
    }
    set pathPrefixRewrite(value) {
        this._pathPrefixRewrite = value;
    }
    resetPathPrefixRewrite() {
        this._pathPrefixRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathPrefixRewriteInput() {
        return this._pathPrefixRewrite;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionUrlRewriteOutputReference = ComputeRegionUrlMapDefaultRouteActionUrlRewriteOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionUrlRewriteOutputReference[_k] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionUrlRewriteOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform;
class ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    resetHeaderName() {
        this._headerName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    resetHeaderValue() {
        this._headerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    resetReplace() {
        this._replace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference[_l] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList;
_m = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList[_m] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform;
class ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    resetHeaderName() {
        this._headerName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    resetHeaderValue() {
        this._headerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    resetReplace() {
        this._replace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference[_o] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList;
_p = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList[_p] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requestHeadersToRemove),
        response_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.responseHeadersToRemove),
        request_headers_to_add: cdktf.listMapper(computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform, true)(struct.requestHeadersToAdd),
        response_headers_to_add: cdktf.listMapper(computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform, true)(struct.responseHeadersToAdd),
    };
}
exports.computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform = computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform;
class ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_headers_to_add - computed: false, optional: true, required: false
        this._requestHeadersToAdd = new ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList(this, "request_headers_to_add", false);
        // response_headers_to_add - computed: false, optional: true, required: false
        this._responseHeadersToAdd = new ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList(this, "response_headers_to_add", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToRemove = this._requestHeadersToRemove;
        }
        if (this._responseHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToRemove = this._responseHeadersToRemove;
        }
        if (this._requestHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToAdd = this._requestHeadersToAdd?.internalValue;
        }
        if (this._responseHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToAdd = this._responseHeadersToAdd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeadersToRemove = undefined;
            this._responseHeadersToRemove = undefined;
            this._requestHeadersToAdd.internalValue = undefined;
            this._responseHeadersToAdd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeadersToRemove = value.requestHeadersToRemove;
            this._responseHeadersToRemove = value.responseHeadersToRemove;
            this._requestHeadersToAdd.internalValue = value.requestHeadersToAdd;
            this._responseHeadersToAdd.internalValue = value.responseHeadersToAdd;
        }
    }
    get requestHeadersToRemove() {
        return this.getListAttribute('request_headers_to_remove');
    }
    set requestHeadersToRemove(value) {
        this._requestHeadersToRemove = value;
    }
    resetRequestHeadersToRemove() {
        this._requestHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToRemoveInput() {
        return this._requestHeadersToRemove;
    }
    get responseHeadersToRemove() {
        return this.getListAttribute('response_headers_to_remove');
    }
    set responseHeadersToRemove(value) {
        this._responseHeadersToRemove = value;
    }
    resetResponseHeadersToRemove() {
        this._responseHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToRemoveInput() {
        return this._responseHeadersToRemove;
    }
    get requestHeadersToAdd() {
        return this._requestHeadersToAdd;
    }
    putRequestHeadersToAdd(value) {
        this._requestHeadersToAdd.internalValue = value;
    }
    resetRequestHeadersToAdd() {
        this._requestHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToAddInput() {
        return this._requestHeadersToAdd.internalValue;
    }
    get responseHeadersToAdd() {
        return this._responseHeadersToAdd;
    }
    putResponseHeadersToAdd(value) {
        this._responseHeadersToAdd.internalValue = value;
    }
    resetResponseHeadersToAdd() {
        this._responseHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToAddInput() {
        return this._responseHeadersToAdd.internalValue;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference = ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference[_q] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionWeightedBackendServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
        weight: cdktf.numberToTerraform(struct.weight),
        header_action: computeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform(struct.headerAction),
    };
}
exports.computeRegionUrlMapDefaultRouteActionWeightedBackendServicesToTerraform = computeRegionUrlMapDefaultRouteActionWeightedBackendServicesToTerraform;
class ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference(this, "header_action");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        if (this._headerAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerAction = this._headerAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._backendService = undefined;
            this._weight = undefined;
            this._headerAction.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._backendService = value.backendService;
            this._weight = value.weight;
            this._headerAction.internalValue = value.headerAction;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    resetBackendService() {
        this._backendService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    resetWeight() {
        this._weight = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesOutputReference = ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesOutputReference[_r] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesList = ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesList;
_s = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesList[_s] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesList", version: "4.0.3" };
function computeRegionUrlMapDefaultRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cors_policy: computeRegionUrlMapDefaultRouteActionCorsPolicyToTerraform(struct.corsPolicy),
        fault_injection_policy: computeRegionUrlMapDefaultRouteActionFaultInjectionPolicyToTerraform(struct.faultInjectionPolicy),
        request_mirror_policy: computeRegionUrlMapDefaultRouteActionRequestMirrorPolicyToTerraform(struct.requestMirrorPolicy),
        retry_policy: computeRegionUrlMapDefaultRouteActionRetryPolicyToTerraform(struct.retryPolicy),
        timeout: computeRegionUrlMapDefaultRouteActionTimeoutToTerraform(struct.timeout),
        url_rewrite: computeRegionUrlMapDefaultRouteActionUrlRewriteToTerraform(struct.urlRewrite),
        weighted_backend_services: cdktf.listMapper(computeRegionUrlMapDefaultRouteActionWeightedBackendServicesToTerraform, true)(struct.weightedBackendServices),
    };
}
exports.computeRegionUrlMapDefaultRouteActionToTerraform = computeRegionUrlMapDefaultRouteActionToTerraform;
class ComputeRegionUrlMapDefaultRouteActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cors_policy - computed: false, optional: true, required: false
        this._corsPolicy = new ComputeRegionUrlMapDefaultRouteActionCorsPolicyOutputReference(this, "cors_policy");
        // fault_injection_policy - computed: false, optional: true, required: false
        this._faultInjectionPolicy = new ComputeRegionUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference(this, "fault_injection_policy");
        // request_mirror_policy - computed: false, optional: true, required: false
        this._requestMirrorPolicy = new ComputeRegionUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference(this, "request_mirror_policy");
        // retry_policy - computed: false, optional: true, required: false
        this._retryPolicy = new ComputeRegionUrlMapDefaultRouteActionRetryPolicyOutputReference(this, "retry_policy");
        // timeout - computed: false, optional: true, required: false
        this._timeout = new ComputeRegionUrlMapDefaultRouteActionTimeoutOutputReference(this, "timeout");
        // url_rewrite - computed: false, optional: true, required: false
        this._urlRewrite = new ComputeRegionUrlMapDefaultRouteActionUrlRewriteOutputReference(this, "url_rewrite");
        // weighted_backend_services - computed: false, optional: true, required: false
        this._weightedBackendServices = new ComputeRegionUrlMapDefaultRouteActionWeightedBackendServicesList(this, "weighted_backend_services", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._corsPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.corsPolicy = this._corsPolicy?.internalValue;
        }
        if (this._faultInjectionPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.faultInjectionPolicy = this._faultInjectionPolicy?.internalValue;
        }
        if (this._requestMirrorPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestMirrorPolicy = this._requestMirrorPolicy?.internalValue;
        }
        if (this._retryPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryPolicy = this._retryPolicy?.internalValue;
        }
        if (this._timeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout?.internalValue;
        }
        if (this._urlRewrite?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRewrite = this._urlRewrite?.internalValue;
        }
        if (this._weightedBackendServices?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.weightedBackendServices = this._weightedBackendServices?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._corsPolicy.internalValue = undefined;
            this._faultInjectionPolicy.internalValue = undefined;
            this._requestMirrorPolicy.internalValue = undefined;
            this._retryPolicy.internalValue = undefined;
            this._timeout.internalValue = undefined;
            this._urlRewrite.internalValue = undefined;
            this._weightedBackendServices.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._corsPolicy.internalValue = value.corsPolicy;
            this._faultInjectionPolicy.internalValue = value.faultInjectionPolicy;
            this._requestMirrorPolicy.internalValue = value.requestMirrorPolicy;
            this._retryPolicy.internalValue = value.retryPolicy;
            this._timeout.internalValue = value.timeout;
            this._urlRewrite.internalValue = value.urlRewrite;
            this._weightedBackendServices.internalValue = value.weightedBackendServices;
        }
    }
    get corsPolicy() {
        return this._corsPolicy;
    }
    putCorsPolicy(value) {
        this._corsPolicy.internalValue = value;
    }
    resetCorsPolicy() {
        this._corsPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsPolicyInput() {
        return this._corsPolicy.internalValue;
    }
    get faultInjectionPolicy() {
        return this._faultInjectionPolicy;
    }
    putFaultInjectionPolicy(value) {
        this._faultInjectionPolicy.internalValue = value;
    }
    resetFaultInjectionPolicy() {
        this._faultInjectionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get faultInjectionPolicyInput() {
        return this._faultInjectionPolicy.internalValue;
    }
    get requestMirrorPolicy() {
        return this._requestMirrorPolicy;
    }
    putRequestMirrorPolicy(value) {
        this._requestMirrorPolicy.internalValue = value;
    }
    resetRequestMirrorPolicy() {
        this._requestMirrorPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestMirrorPolicyInput() {
        return this._requestMirrorPolicy.internalValue;
    }
    get retryPolicy() {
        return this._retryPolicy;
    }
    putRetryPolicy(value) {
        this._retryPolicy.internalValue = value;
    }
    resetRetryPolicy() {
        this._retryPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryPolicyInput() {
        return this._retryPolicy.internalValue;
    }
    get timeout() {
        return this._timeout;
    }
    putTimeout(value) {
        this._timeout.internalValue = value;
    }
    resetTimeout() {
        this._timeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout.internalValue;
    }
    get urlRewrite() {
        return this._urlRewrite;
    }
    putUrlRewrite(value) {
        this._urlRewrite.internalValue = value;
    }
    resetUrlRewrite() {
        this._urlRewrite.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRewriteInput() {
        return this._urlRewrite.internalValue;
    }
    get weightedBackendServices() {
        return this._weightedBackendServices;
    }
    putWeightedBackendServices(value) {
        this._weightedBackendServices.internalValue = value;
    }
    resetWeightedBackendServices() {
        this._weightedBackendServices.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightedBackendServicesInput() {
        return this._weightedBackendServices.internalValue;
    }
}
exports.ComputeRegionUrlMapDefaultRouteActionOutputReference = ComputeRegionUrlMapDefaultRouteActionOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultRouteActionOutputReference[_t] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultRouteActionOutputReference", version: "4.0.3" };
function computeRegionUrlMapDefaultUrlRedirectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_redirect: cdktf.stringToTerraform(struct.hostRedirect),
        https_redirect: cdktf.booleanToTerraform(struct.httpsRedirect),
        path_redirect: cdktf.stringToTerraform(struct.pathRedirect),
        prefix_redirect: cdktf.stringToTerraform(struct.prefixRedirect),
        redirect_response_code: cdktf.stringToTerraform(struct.redirectResponseCode),
        strip_query: cdktf.booleanToTerraform(struct.stripQuery),
    };
}
exports.computeRegionUrlMapDefaultUrlRedirectToTerraform = computeRegionUrlMapDefaultUrlRedirectToTerraform;
class ComputeRegionUrlMapDefaultUrlRedirectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRedirect = this._hostRedirect;
        }
        if (this._httpsRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsRedirect = this._httpsRedirect;
        }
        if (this._pathRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathRedirect = this._pathRedirect;
        }
        if (this._prefixRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixRedirect = this._prefixRedirect;
        }
        if (this._redirectResponseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectResponseCode = this._redirectResponseCode;
        }
        if (this._stripQuery !== undefined) {
            hasAnyValues = true;
            internalValueResult.stripQuery = this._stripQuery;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRedirect = undefined;
            this._httpsRedirect = undefined;
            this._pathRedirect = undefined;
            this._prefixRedirect = undefined;
            this._redirectResponseCode = undefined;
            this._stripQuery = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRedirect = value.hostRedirect;
            this._httpsRedirect = value.httpsRedirect;
            this._pathRedirect = value.pathRedirect;
            this._prefixRedirect = value.prefixRedirect;
            this._redirectResponseCode = value.redirectResponseCode;
            this._stripQuery = value.stripQuery;
        }
    }
    get hostRedirect() {
        return this.getStringAttribute('host_redirect');
    }
    set hostRedirect(value) {
        this._hostRedirect = value;
    }
    resetHostRedirect() {
        this._hostRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRedirectInput() {
        return this._hostRedirect;
    }
    get httpsRedirect() {
        return this.getBooleanAttribute('https_redirect');
    }
    set httpsRedirect(value) {
        this._httpsRedirect = value;
    }
    resetHttpsRedirect() {
        this._httpsRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsRedirectInput() {
        return this._httpsRedirect;
    }
    get pathRedirect() {
        return this.getStringAttribute('path_redirect');
    }
    set pathRedirect(value) {
        this._pathRedirect = value;
    }
    resetPathRedirect() {
        this._pathRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathRedirectInput() {
        return this._pathRedirect;
    }
    get prefixRedirect() {
        return this.getStringAttribute('prefix_redirect');
    }
    set prefixRedirect(value) {
        this._prefixRedirect = value;
    }
    resetPrefixRedirect() {
        this._prefixRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixRedirectInput() {
        return this._prefixRedirect;
    }
    get redirectResponseCode() {
        return this.getStringAttribute('redirect_response_code');
    }
    set redirectResponseCode(value) {
        this._redirectResponseCode = value;
    }
    resetRedirectResponseCode() {
        this._redirectResponseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectResponseCodeInput() {
        return this._redirectResponseCode;
    }
    get stripQuery() {
        return this.getBooleanAttribute('strip_query');
    }
    set stripQuery(value) {
        this._stripQuery = value;
    }
    // Temporarily expose input value. Use with caution.
    get stripQueryInput() {
        return this._stripQuery;
    }
}
exports.ComputeRegionUrlMapDefaultUrlRedirectOutputReference = ComputeRegionUrlMapDefaultUrlRedirectOutputReference;
_u = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapDefaultUrlRedirectOutputReference[_u] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapDefaultUrlRedirectOutputReference", version: "4.0.3" };
function computeRegionUrlMapHostRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        hosts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.hosts),
        path_matcher: cdktf.stringToTerraform(struct.pathMatcher),
    };
}
exports.computeRegionUrlMapHostRuleToTerraform = computeRegionUrlMapHostRuleToTerraform;
class ComputeRegionUrlMapHostRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._hosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.hosts = this._hosts;
        }
        if (this._pathMatcher !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathMatcher = this._pathMatcher;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._hosts = undefined;
            this._pathMatcher = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._hosts = value.hosts;
            this._pathMatcher = value.pathMatcher;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get hosts() {
        return cdktf.Fn.tolist(this.getListAttribute('hosts'));
    }
    set hosts(value) {
        this._hosts = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostsInput() {
        return this._hosts;
    }
    get pathMatcher() {
        return this.getStringAttribute('path_matcher');
    }
    set pathMatcher(value) {
        this._pathMatcher = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathMatcherInput() {
        return this._pathMatcher;
    }
}
exports.ComputeRegionUrlMapHostRuleOutputReference = ComputeRegionUrlMapHostRuleOutputReference;
_v = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapHostRuleOutputReference[_v] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapHostRuleOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapHostRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapHostRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapHostRuleList = ComputeRegionUrlMapHostRuleList;
_w = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapHostRuleList[_w] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapHostRuleList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherDefaultUrlRedirectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_redirect: cdktf.stringToTerraform(struct.hostRedirect),
        https_redirect: cdktf.booleanToTerraform(struct.httpsRedirect),
        path_redirect: cdktf.stringToTerraform(struct.pathRedirect),
        prefix_redirect: cdktf.stringToTerraform(struct.prefixRedirect),
        redirect_response_code: cdktf.stringToTerraform(struct.redirectResponseCode),
        strip_query: cdktf.booleanToTerraform(struct.stripQuery),
    };
}
exports.computeRegionUrlMapPathMatcherDefaultUrlRedirectToTerraform = computeRegionUrlMapPathMatcherDefaultUrlRedirectToTerraform;
class ComputeRegionUrlMapPathMatcherDefaultUrlRedirectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRedirect = this._hostRedirect;
        }
        if (this._httpsRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsRedirect = this._httpsRedirect;
        }
        if (this._pathRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathRedirect = this._pathRedirect;
        }
        if (this._prefixRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixRedirect = this._prefixRedirect;
        }
        if (this._redirectResponseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectResponseCode = this._redirectResponseCode;
        }
        if (this._stripQuery !== undefined) {
            hasAnyValues = true;
            internalValueResult.stripQuery = this._stripQuery;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRedirect = undefined;
            this._httpsRedirect = undefined;
            this._pathRedirect = undefined;
            this._prefixRedirect = undefined;
            this._redirectResponseCode = undefined;
            this._stripQuery = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRedirect = value.hostRedirect;
            this._httpsRedirect = value.httpsRedirect;
            this._pathRedirect = value.pathRedirect;
            this._prefixRedirect = value.prefixRedirect;
            this._redirectResponseCode = value.redirectResponseCode;
            this._stripQuery = value.stripQuery;
        }
    }
    get hostRedirect() {
        return this.getStringAttribute('host_redirect');
    }
    set hostRedirect(value) {
        this._hostRedirect = value;
    }
    resetHostRedirect() {
        this._hostRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRedirectInput() {
        return this._hostRedirect;
    }
    get httpsRedirect() {
        return this.getBooleanAttribute('https_redirect');
    }
    set httpsRedirect(value) {
        this._httpsRedirect = value;
    }
    resetHttpsRedirect() {
        this._httpsRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsRedirectInput() {
        return this._httpsRedirect;
    }
    get pathRedirect() {
        return this.getStringAttribute('path_redirect');
    }
    set pathRedirect(value) {
        this._pathRedirect = value;
    }
    resetPathRedirect() {
        this._pathRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathRedirectInput() {
        return this._pathRedirect;
    }
    get prefixRedirect() {
        return this.getStringAttribute('prefix_redirect');
    }
    set prefixRedirect(value) {
        this._prefixRedirect = value;
    }
    resetPrefixRedirect() {
        this._prefixRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixRedirectInput() {
        return this._prefixRedirect;
    }
    get redirectResponseCode() {
        return this.getStringAttribute('redirect_response_code');
    }
    set redirectResponseCode(value) {
        this._redirectResponseCode = value;
    }
    resetRedirectResponseCode() {
        this._redirectResponseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectResponseCodeInput() {
        return this._redirectResponseCode;
    }
    get stripQuery() {
        return this.getBooleanAttribute('strip_query');
    }
    set stripQuery(value) {
        this._stripQuery = value;
    }
    // Temporarily expose input value. Use with caution.
    get stripQueryInput() {
        return this._stripQuery;
    }
}
exports.ComputeRegionUrlMapPathMatcherDefaultUrlRedirectOutputReference = ComputeRegionUrlMapPathMatcherDefaultUrlRedirectOutputReference;
_x = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherDefaultUrlRedirectOutputReference[_x] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherDefaultUrlRedirectOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_credentials: cdktf.booleanToTerraform(struct.allowCredentials),
        allow_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowHeaders),
        allow_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowMethods),
        allow_origin_regexes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOriginRegexes),
        allow_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOrigins),
        disabled: cdktf.booleanToTerraform(struct.disabled),
        expose_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exposeHeaders),
        max_age: cdktf.numberToTerraform(struct.maxAge),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowCredentials = this._allowCredentials;
        }
        if (this._allowHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowHeaders = this._allowHeaders;
        }
        if (this._allowMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowMethods = this._allowMethods;
        }
        if (this._allowOriginRegexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOriginRegexes = this._allowOriginRegexes;
        }
        if (this._allowOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOrigins = this._allowOrigins;
        }
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        if (this._exposeHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.exposeHeaders = this._exposeHeaders;
        }
        if (this._maxAge !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAge = this._maxAge;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowCredentials = undefined;
            this._allowHeaders = undefined;
            this._allowMethods = undefined;
            this._allowOriginRegexes = undefined;
            this._allowOrigins = undefined;
            this._disabled = undefined;
            this._exposeHeaders = undefined;
            this._maxAge = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowCredentials = value.allowCredentials;
            this._allowHeaders = value.allowHeaders;
            this._allowMethods = value.allowMethods;
            this._allowOriginRegexes = value.allowOriginRegexes;
            this._allowOrigins = value.allowOrigins;
            this._disabled = value.disabled;
            this._exposeHeaders = value.exposeHeaders;
            this._maxAge = value.maxAge;
        }
    }
    get allowCredentials() {
        return this.getBooleanAttribute('allow_credentials');
    }
    set allowCredentials(value) {
        this._allowCredentials = value;
    }
    resetAllowCredentials() {
        this._allowCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowCredentialsInput() {
        return this._allowCredentials;
    }
    get allowHeaders() {
        return this.getListAttribute('allow_headers');
    }
    set allowHeaders(value) {
        this._allowHeaders = value;
    }
    resetAllowHeaders() {
        this._allowHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowHeadersInput() {
        return this._allowHeaders;
    }
    get allowMethods() {
        return this.getListAttribute('allow_methods');
    }
    set allowMethods(value) {
        this._allowMethods = value;
    }
    resetAllowMethods() {
        this._allowMethods = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowMethodsInput() {
        return this._allowMethods;
    }
    get allowOriginRegexes() {
        return this.getListAttribute('allow_origin_regexes');
    }
    set allowOriginRegexes(value) {
        this._allowOriginRegexes = value;
    }
    resetAllowOriginRegexes() {
        this._allowOriginRegexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginRegexesInput() {
        return this._allowOriginRegexes;
    }
    get allowOrigins() {
        return this.getListAttribute('allow_origins');
    }
    set allowOrigins(value) {
        this._allowOrigins = value;
    }
    resetAllowOrigins() {
        this._allowOrigins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginsInput() {
        return this._allowOrigins;
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get exposeHeaders() {
        return this.getListAttribute('expose_headers');
    }
    set exposeHeaders(value) {
        this._exposeHeaders = value;
    }
    resetExposeHeaders() {
        this._exposeHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exposeHeadersInput() {
        return this._exposeHeaders;
    }
    get maxAge() {
        return this.getNumberAttribute('max_age');
    }
    set maxAge(value) {
        this._maxAge = value;
    }
    resetMaxAge() {
        this._maxAge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAgeInput() {
        return this._maxAge;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference;
_y = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference[_y] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_status: cdktf.numberToTerraform(struct.httpStatus),
        percentage: cdktf.numberToTerraform(struct.percentage),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpStatus = this._httpStatus;
        }
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpStatus = undefined;
            this._percentage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpStatus = value.httpStatus;
            this._percentage = value.percentage;
        }
    }
    get httpStatus() {
        return this.getNumberAttribute('http_status');
    }
    set httpStatus(value) {
        this._httpStatus = value;
    }
    // Temporarily expose input value. Use with caution.
    get httpStatusInput() {
        return this._httpStatus;
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference;
_z = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference[_z] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference[_0] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        percentage: cdktf.numberToTerraform(struct.percentage),
        fixed_delay: computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct.fixedDelay),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // fixed_delay - computed: false, optional: false, required: true
        this._fixedDelay = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference(this, "fixed_delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        if (this._fixedDelay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedDelay = this._fixedDelay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._percentage = undefined;
            this._fixedDelay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._percentage = value.percentage;
            this._fixedDelay.internalValue = value.fixedDelay;
        }
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
    get fixedDelay() {
        return this._fixedDelay;
    }
    putFixedDelay(value) {
        this._fixedDelay.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get fixedDelayInput() {
        return this._fixedDelay.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference[_1] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        abort: computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortToTerraform(struct.abort),
        delay: computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayToTerraform(struct.delay),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // abort - computed: false, optional: true, required: false
        this._abort = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference(this, "abort");
        // delay - computed: false, optional: true, required: false
        this._delay = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference(this, "delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._abort?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.abort = this._abort?.internalValue;
        }
        if (this._delay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.delay = this._delay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._abort.internalValue = undefined;
            this._delay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._abort.internalValue = value.abort;
            this._delay.internalValue = value.delay;
        }
    }
    get abort() {
        return this._abort;
    }
    putAbort(value) {
        this._abort.internalValue = value;
    }
    resetAbort() {
        this._abort.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get abortInput() {
        return this._abort.internalValue;
    }
    get delay() {
        return this._delay;
    }
    putDelay(value) {
        this._delay.internalValue = value;
    }
    resetDelay() {
        this._delay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get delayInput() {
        return this._delay.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference[_2] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backendService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backendService = value.backendService;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference[_3] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference[_4] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        retry_conditions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.retryConditions),
        per_try_timeout: computeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutToTerraform(struct.perTryTimeout),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // per_try_timeout - computed: false, optional: true, required: false
        this._perTryTimeout = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference(this, "per_try_timeout");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._retryConditions !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryConditions = this._retryConditions;
        }
        if (this._perTryTimeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.perTryTimeout = this._perTryTimeout?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._numRetries = undefined;
            this._retryConditions = undefined;
            this._perTryTimeout.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._numRetries = value.numRetries;
            this._retryConditions = value.retryConditions;
            this._perTryTimeout.internalValue = value.perTryTimeout;
        }
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get retryConditions() {
        return this.getListAttribute('retry_conditions');
    }
    set retryConditions(value) {
        this._retryConditions = value;
    }
    resetRetryConditions() {
        this._retryConditions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryConditionsInput() {
        return this._retryConditions;
    }
    get perTryTimeout() {
        return this._perTryTimeout;
    }
    putPerTryTimeout(value) {
        this._perTryTimeout.internalValue = value;
    }
    resetPerTryTimeout() {
        this._perTryTimeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perTryTimeoutInput() {
        return this._perTryTimeout.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference[_5] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference[_6] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_rewrite: cdktf.stringToTerraform(struct.hostRewrite),
        path_prefix_rewrite: cdktf.stringToTerraform(struct.pathPrefixRewrite),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRewrite = this._hostRewrite;
        }
        if (this._pathPrefixRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathPrefixRewrite = this._pathPrefixRewrite;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRewrite = undefined;
            this._pathPrefixRewrite = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRewrite = value.hostRewrite;
            this._pathPrefixRewrite = value.pathPrefixRewrite;
        }
    }
    get hostRewrite() {
        return this.getStringAttribute('host_rewrite');
    }
    set hostRewrite(value) {
        this._hostRewrite = value;
    }
    resetHostRewrite() {
        this._hostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRewriteInput() {
        return this._hostRewrite;
    }
    get pathPrefixRewrite() {
        return this.getStringAttribute('path_prefix_rewrite');
    }
    set pathPrefixRewrite(value) {
        this._pathPrefixRewrite = value;
    }
    resetPathPrefixRewrite() {
        this._pathPrefixRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathPrefixRewriteInput() {
        return this._pathPrefixRewrite;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference[_7] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference[_8] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList;
_9 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList[_9] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference[_10] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList;
_11 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList[_11] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requestHeadersToRemove),
        response_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.responseHeadersToRemove),
        request_headers_to_add: cdktf.listMapper(computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform, true)(struct.requestHeadersToAdd),
        response_headers_to_add: cdktf.listMapper(computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform, true)(struct.responseHeadersToAdd),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_headers_to_add - computed: false, optional: true, required: false
        this._requestHeadersToAdd = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList(this, "request_headers_to_add", false);
        // response_headers_to_add - computed: false, optional: true, required: false
        this._responseHeadersToAdd = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList(this, "response_headers_to_add", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToRemove = this._requestHeadersToRemove;
        }
        if (this._responseHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToRemove = this._responseHeadersToRemove;
        }
        if (this._requestHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToAdd = this._requestHeadersToAdd?.internalValue;
        }
        if (this._responseHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToAdd = this._responseHeadersToAdd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeadersToRemove = undefined;
            this._responseHeadersToRemove = undefined;
            this._requestHeadersToAdd.internalValue = undefined;
            this._responseHeadersToAdd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeadersToRemove = value.requestHeadersToRemove;
            this._responseHeadersToRemove = value.responseHeadersToRemove;
            this._requestHeadersToAdd.internalValue = value.requestHeadersToAdd;
            this._responseHeadersToAdd.internalValue = value.responseHeadersToAdd;
        }
    }
    get requestHeadersToRemove() {
        return this.getListAttribute('request_headers_to_remove');
    }
    set requestHeadersToRemove(value) {
        this._requestHeadersToRemove = value;
    }
    resetRequestHeadersToRemove() {
        this._requestHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToRemoveInput() {
        return this._requestHeadersToRemove;
    }
    get responseHeadersToRemove() {
        return this.getListAttribute('response_headers_to_remove');
    }
    set responseHeadersToRemove(value) {
        this._responseHeadersToRemove = value;
    }
    resetResponseHeadersToRemove() {
        this._responseHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToRemoveInput() {
        return this._responseHeadersToRemove;
    }
    get requestHeadersToAdd() {
        return this._requestHeadersToAdd;
    }
    putRequestHeadersToAdd(value) {
        this._requestHeadersToAdd.internalValue = value;
    }
    resetRequestHeadersToAdd() {
        this._requestHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToAddInput() {
        return this._requestHeadersToAdd.internalValue;
    }
    get responseHeadersToAdd() {
        return this._responseHeadersToAdd;
    }
    putResponseHeadersToAdd(value) {
        this._responseHeadersToAdd.internalValue = value;
    }
    resetResponseHeadersToAdd() {
        this._responseHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToAddInput() {
        return this._responseHeadersToAdd.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference[_12] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
        weight: cdktf.numberToTerraform(struct.weight),
        header_action: computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionToTerraform(struct.headerAction),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference(this, "header_action");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        if (this._headerAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerAction = this._headerAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._backendService = undefined;
            this._weight = undefined;
            this._headerAction.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._backendService = value.backendService;
            this._weight = value.weight;
            this._headerAction.internalValue = value.headerAction;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference[_13] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList = ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList;
_14 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList[_14] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cors_policy: computeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyToTerraform(struct.corsPolicy),
        fault_injection_policy: computeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyToTerraform(struct.faultInjectionPolicy),
        request_mirror_policy: computeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyToTerraform(struct.requestMirrorPolicy),
        retry_policy: computeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyToTerraform(struct.retryPolicy),
        timeout: computeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutToTerraform(struct.timeout),
        url_rewrite: computeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteToTerraform(struct.urlRewrite),
        weighted_backend_services: cdktf.listMapper(computeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesToTerraform, true)(struct.weightedBackendServices),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleRouteActionToTerraform = computeRegionUrlMapPathMatcherPathRuleRouteActionToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleRouteActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cors_policy - computed: false, optional: true, required: false
        this._corsPolicy = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference(this, "cors_policy");
        // fault_injection_policy - computed: false, optional: true, required: false
        this._faultInjectionPolicy = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference(this, "fault_injection_policy");
        // request_mirror_policy - computed: false, optional: true, required: false
        this._requestMirrorPolicy = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference(this, "request_mirror_policy");
        // retry_policy - computed: false, optional: true, required: false
        this._retryPolicy = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference(this, "retry_policy");
        // timeout - computed: false, optional: true, required: false
        this._timeout = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference(this, "timeout");
        // url_rewrite - computed: false, optional: true, required: false
        this._urlRewrite = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference(this, "url_rewrite");
        // weighted_backend_services - computed: false, optional: true, required: false
        this._weightedBackendServices = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList(this, "weighted_backend_services", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._corsPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.corsPolicy = this._corsPolicy?.internalValue;
        }
        if (this._faultInjectionPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.faultInjectionPolicy = this._faultInjectionPolicy?.internalValue;
        }
        if (this._requestMirrorPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestMirrorPolicy = this._requestMirrorPolicy?.internalValue;
        }
        if (this._retryPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryPolicy = this._retryPolicy?.internalValue;
        }
        if (this._timeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout?.internalValue;
        }
        if (this._urlRewrite?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRewrite = this._urlRewrite?.internalValue;
        }
        if (this._weightedBackendServices?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.weightedBackendServices = this._weightedBackendServices?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._corsPolicy.internalValue = undefined;
            this._faultInjectionPolicy.internalValue = undefined;
            this._requestMirrorPolicy.internalValue = undefined;
            this._retryPolicy.internalValue = undefined;
            this._timeout.internalValue = undefined;
            this._urlRewrite.internalValue = undefined;
            this._weightedBackendServices.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._corsPolicy.internalValue = value.corsPolicy;
            this._faultInjectionPolicy.internalValue = value.faultInjectionPolicy;
            this._requestMirrorPolicy.internalValue = value.requestMirrorPolicy;
            this._retryPolicy.internalValue = value.retryPolicy;
            this._timeout.internalValue = value.timeout;
            this._urlRewrite.internalValue = value.urlRewrite;
            this._weightedBackendServices.internalValue = value.weightedBackendServices;
        }
    }
    get corsPolicy() {
        return this._corsPolicy;
    }
    putCorsPolicy(value) {
        this._corsPolicy.internalValue = value;
    }
    resetCorsPolicy() {
        this._corsPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsPolicyInput() {
        return this._corsPolicy.internalValue;
    }
    get faultInjectionPolicy() {
        return this._faultInjectionPolicy;
    }
    putFaultInjectionPolicy(value) {
        this._faultInjectionPolicy.internalValue = value;
    }
    resetFaultInjectionPolicy() {
        this._faultInjectionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get faultInjectionPolicyInput() {
        return this._faultInjectionPolicy.internalValue;
    }
    get requestMirrorPolicy() {
        return this._requestMirrorPolicy;
    }
    putRequestMirrorPolicy(value) {
        this._requestMirrorPolicy.internalValue = value;
    }
    resetRequestMirrorPolicy() {
        this._requestMirrorPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestMirrorPolicyInput() {
        return this._requestMirrorPolicy.internalValue;
    }
    get retryPolicy() {
        return this._retryPolicy;
    }
    putRetryPolicy(value) {
        this._retryPolicy.internalValue = value;
    }
    resetRetryPolicy() {
        this._retryPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryPolicyInput() {
        return this._retryPolicy.internalValue;
    }
    get timeout() {
        return this._timeout;
    }
    putTimeout(value) {
        this._timeout.internalValue = value;
    }
    resetTimeout() {
        this._timeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout.internalValue;
    }
    get urlRewrite() {
        return this._urlRewrite;
    }
    putUrlRewrite(value) {
        this._urlRewrite.internalValue = value;
    }
    resetUrlRewrite() {
        this._urlRewrite.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRewriteInput() {
        return this._urlRewrite.internalValue;
    }
    get weightedBackendServices() {
        return this._weightedBackendServices;
    }
    putWeightedBackendServices(value) {
        this._weightedBackendServices.internalValue = value;
    }
    resetWeightedBackendServices() {
        this._weightedBackendServices.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightedBackendServicesInput() {
        return this._weightedBackendServices.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleRouteActionOutputReference = ComputeRegionUrlMapPathMatcherPathRuleRouteActionOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleRouteActionOutputReference[_15] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleRouteActionOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleUrlRedirectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_redirect: cdktf.stringToTerraform(struct.hostRedirect),
        https_redirect: cdktf.booleanToTerraform(struct.httpsRedirect),
        path_redirect: cdktf.stringToTerraform(struct.pathRedirect),
        prefix_redirect: cdktf.stringToTerraform(struct.prefixRedirect),
        redirect_response_code: cdktf.stringToTerraform(struct.redirectResponseCode),
        strip_query: cdktf.booleanToTerraform(struct.stripQuery),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleUrlRedirectToTerraform = computeRegionUrlMapPathMatcherPathRuleUrlRedirectToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleUrlRedirectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRedirect = this._hostRedirect;
        }
        if (this._httpsRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsRedirect = this._httpsRedirect;
        }
        if (this._pathRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathRedirect = this._pathRedirect;
        }
        if (this._prefixRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixRedirect = this._prefixRedirect;
        }
        if (this._redirectResponseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectResponseCode = this._redirectResponseCode;
        }
        if (this._stripQuery !== undefined) {
            hasAnyValues = true;
            internalValueResult.stripQuery = this._stripQuery;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRedirect = undefined;
            this._httpsRedirect = undefined;
            this._pathRedirect = undefined;
            this._prefixRedirect = undefined;
            this._redirectResponseCode = undefined;
            this._stripQuery = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRedirect = value.hostRedirect;
            this._httpsRedirect = value.httpsRedirect;
            this._pathRedirect = value.pathRedirect;
            this._prefixRedirect = value.prefixRedirect;
            this._redirectResponseCode = value.redirectResponseCode;
            this._stripQuery = value.stripQuery;
        }
    }
    get hostRedirect() {
        return this.getStringAttribute('host_redirect');
    }
    set hostRedirect(value) {
        this._hostRedirect = value;
    }
    resetHostRedirect() {
        this._hostRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRedirectInput() {
        return this._hostRedirect;
    }
    get httpsRedirect() {
        return this.getBooleanAttribute('https_redirect');
    }
    set httpsRedirect(value) {
        this._httpsRedirect = value;
    }
    resetHttpsRedirect() {
        this._httpsRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsRedirectInput() {
        return this._httpsRedirect;
    }
    get pathRedirect() {
        return this.getStringAttribute('path_redirect');
    }
    set pathRedirect(value) {
        this._pathRedirect = value;
    }
    resetPathRedirect() {
        this._pathRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathRedirectInput() {
        return this._pathRedirect;
    }
    get prefixRedirect() {
        return this.getStringAttribute('prefix_redirect');
    }
    set prefixRedirect(value) {
        this._prefixRedirect = value;
    }
    resetPrefixRedirect() {
        this._prefixRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixRedirectInput() {
        return this._prefixRedirect;
    }
    get redirectResponseCode() {
        return this.getStringAttribute('redirect_response_code');
    }
    set redirectResponseCode(value) {
        this._redirectResponseCode = value;
    }
    resetRedirectResponseCode() {
        this._redirectResponseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectResponseCodeInput() {
        return this._redirectResponseCode;
    }
    get stripQuery() {
        return this.getBooleanAttribute('strip_query');
    }
    set stripQuery(value) {
        this._stripQuery = value;
    }
    // Temporarily expose input value. Use with caution.
    get stripQueryInput() {
        return this._stripQuery;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleUrlRedirectOutputReference = ComputeRegionUrlMapPathMatcherPathRuleUrlRedirectOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleUrlRedirectOutputReference[_16] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleUrlRedirectOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherPathRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        paths: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.paths),
        service: cdktf.stringToTerraform(struct.service),
        route_action: computeRegionUrlMapPathMatcherPathRuleRouteActionToTerraform(struct.routeAction),
        url_redirect: computeRegionUrlMapPathMatcherPathRuleUrlRedirectToTerraform(struct.urlRedirect),
    };
}
exports.computeRegionUrlMapPathMatcherPathRuleToTerraform = computeRegionUrlMapPathMatcherPathRuleToTerraform;
class ComputeRegionUrlMapPathMatcherPathRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // route_action - computed: false, optional: true, required: false
        this._routeAction = new ComputeRegionUrlMapPathMatcherPathRuleRouteActionOutputReference(this, "route_action");
        // url_redirect - computed: false, optional: true, required: false
        this._urlRedirect = new ComputeRegionUrlMapPathMatcherPathRuleUrlRedirectOutputReference(this, "url_redirect");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._paths !== undefined) {
            hasAnyValues = true;
            internalValueResult.paths = this._paths;
        }
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        if (this._routeAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.routeAction = this._routeAction?.internalValue;
        }
        if (this._urlRedirect?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRedirect = this._urlRedirect?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._paths = undefined;
            this._service = undefined;
            this._routeAction.internalValue = undefined;
            this._urlRedirect.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._paths = value.paths;
            this._service = value.service;
            this._routeAction.internalValue = value.routeAction;
            this._urlRedirect.internalValue = value.urlRedirect;
        }
    }
    get paths() {
        return cdktf.Fn.tolist(this.getListAttribute('paths'));
    }
    set paths(value) {
        this._paths = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathsInput() {
        return this._paths;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    resetService() {
        this._service = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
    get routeAction() {
        return this._routeAction;
    }
    putRouteAction(value) {
        this._routeAction.internalValue = value;
    }
    resetRouteAction() {
        this._routeAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeActionInput() {
        return this._routeAction.internalValue;
    }
    get urlRedirect() {
        return this._urlRedirect;
    }
    putUrlRedirect(value) {
        this._urlRedirect.internalValue = value;
    }
    resetUrlRedirect() {
        this._urlRedirect.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRedirectInput() {
        return this._urlRedirect.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleOutputReference = ComputeRegionUrlMapPathMatcherPathRuleOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleOutputReference[_17] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherPathRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherPathRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherPathRuleList = ComputeRegionUrlMapPathMatcherPathRuleList;
_18 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherPathRuleList[_18] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherPathRuleList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddToTerraform = computeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference[_19] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList = ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList;
_20 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList[_20] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddToTerraform = computeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference[_21] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList = ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList;
_22 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList[_22] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requestHeadersToRemove),
        response_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.responseHeadersToRemove),
        request_headers_to_add: cdktf.listMapper(computeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddToTerraform, true)(struct.requestHeadersToAdd),
        response_headers_to_add: cdktf.listMapper(computeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddToTerraform, true)(struct.responseHeadersToAdd),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesHeaderActionToTerraform = computeRegionUrlMapPathMatcherRouteRulesHeaderActionToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_headers_to_add - computed: false, optional: true, required: false
        this._requestHeadersToAdd = new ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList(this, "request_headers_to_add", false);
        // response_headers_to_add - computed: false, optional: true, required: false
        this._responseHeadersToAdd = new ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList(this, "response_headers_to_add", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToRemove = this._requestHeadersToRemove;
        }
        if (this._responseHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToRemove = this._responseHeadersToRemove;
        }
        if (this._requestHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToAdd = this._requestHeadersToAdd?.internalValue;
        }
        if (this._responseHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToAdd = this._responseHeadersToAdd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeadersToRemove = undefined;
            this._responseHeadersToRemove = undefined;
            this._requestHeadersToAdd.internalValue = undefined;
            this._responseHeadersToAdd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeadersToRemove = value.requestHeadersToRemove;
            this._responseHeadersToRemove = value.responseHeadersToRemove;
            this._requestHeadersToAdd.internalValue = value.requestHeadersToAdd;
            this._responseHeadersToAdd.internalValue = value.responseHeadersToAdd;
        }
    }
    get requestHeadersToRemove() {
        return this.getListAttribute('request_headers_to_remove');
    }
    set requestHeadersToRemove(value) {
        this._requestHeadersToRemove = value;
    }
    resetRequestHeadersToRemove() {
        this._requestHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToRemoveInput() {
        return this._requestHeadersToRemove;
    }
    get responseHeadersToRemove() {
        return this.getListAttribute('response_headers_to_remove');
    }
    set responseHeadersToRemove(value) {
        this._responseHeadersToRemove = value;
    }
    resetResponseHeadersToRemove() {
        this._responseHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToRemoveInput() {
        return this._responseHeadersToRemove;
    }
    get requestHeadersToAdd() {
        return this._requestHeadersToAdd;
    }
    putRequestHeadersToAdd(value) {
        this._requestHeadersToAdd.internalValue = value;
    }
    resetRequestHeadersToAdd() {
        this._requestHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToAddInput() {
        return this._requestHeadersToAdd.internalValue;
    }
    get responseHeadersToAdd() {
        return this._responseHeadersToAdd;
    }
    putResponseHeadersToAdd(value) {
        this._responseHeadersToAdd.internalValue = value;
    }
    resetResponseHeadersToAdd() {
        this._responseHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToAddInput() {
        return this._responseHeadersToAdd.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionOutputReference[_23] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        range_end: cdktf.numberToTerraform(struct.rangeEnd),
        range_start: cdktf.numberToTerraform(struct.rangeStart),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchToTerraform = computeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._rangeEnd !== undefined) {
            hasAnyValues = true;
            internalValueResult.rangeEnd = this._rangeEnd;
        }
        if (this._rangeStart !== undefined) {
            hasAnyValues = true;
            internalValueResult.rangeStart = this._rangeStart;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._rangeEnd = undefined;
            this._rangeStart = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._rangeEnd = value.rangeEnd;
            this._rangeStart = value.rangeStart;
        }
    }
    get rangeEnd() {
        return this.getNumberAttribute('range_end');
    }
    set rangeEnd(value) {
        this._rangeEnd = value;
    }
    // Temporarily expose input value. Use with caution.
    get rangeEndInput() {
        return this._rangeEnd;
    }
    get rangeStart() {
        return this.getNumberAttribute('range_start');
    }
    set rangeStart(value) {
        this._rangeStart = value;
    }
    // Temporarily expose input value. Use with caution.
    get rangeStartInput() {
        return this._rangeStart;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference[_24] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exact_match: cdktf.stringToTerraform(struct.exactMatch),
        header_name: cdktf.stringToTerraform(struct.headerName),
        invert_match: cdktf.booleanToTerraform(struct.invertMatch),
        prefix_match: cdktf.stringToTerraform(struct.prefixMatch),
        present_match: cdktf.booleanToTerraform(struct.presentMatch),
        regex_match: cdktf.stringToTerraform(struct.regexMatch),
        suffix_match: cdktf.stringToTerraform(struct.suffixMatch),
        range_match: computeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchToTerraform(struct.rangeMatch),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesToTerraform = computeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // range_match - computed: false, optional: true, required: false
        this._rangeMatch = new ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference(this, "range_match");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exactMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.exactMatch = this._exactMatch;
        }
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._invertMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertMatch = this._invertMatch;
        }
        if (this._prefixMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixMatch = this._prefixMatch;
        }
        if (this._presentMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.presentMatch = this._presentMatch;
        }
        if (this._regexMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.regexMatch = this._regexMatch;
        }
        if (this._suffixMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.suffixMatch = this._suffixMatch;
        }
        if (this._rangeMatch?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rangeMatch = this._rangeMatch?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exactMatch = undefined;
            this._headerName = undefined;
            this._invertMatch = undefined;
            this._prefixMatch = undefined;
            this._presentMatch = undefined;
            this._regexMatch = undefined;
            this._suffixMatch = undefined;
            this._rangeMatch.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exactMatch = value.exactMatch;
            this._headerName = value.headerName;
            this._invertMatch = value.invertMatch;
            this._prefixMatch = value.prefixMatch;
            this._presentMatch = value.presentMatch;
            this._regexMatch = value.regexMatch;
            this._suffixMatch = value.suffixMatch;
            this._rangeMatch.internalValue = value.rangeMatch;
        }
    }
    get exactMatch() {
        return this.getStringAttribute('exact_match');
    }
    set exactMatch(value) {
        this._exactMatch = value;
    }
    resetExactMatch() {
        this._exactMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exactMatchInput() {
        return this._exactMatch;
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get invertMatch() {
        return this.getBooleanAttribute('invert_match');
    }
    set invertMatch(value) {
        this._invertMatch = value;
    }
    resetInvertMatch() {
        this._invertMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertMatchInput() {
        return this._invertMatch;
    }
    get prefixMatch() {
        return this.getStringAttribute('prefix_match');
    }
    set prefixMatch(value) {
        this._prefixMatch = value;
    }
    resetPrefixMatch() {
        this._prefixMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixMatchInput() {
        return this._prefixMatch;
    }
    get presentMatch() {
        return this.getBooleanAttribute('present_match');
    }
    set presentMatch(value) {
        this._presentMatch = value;
    }
    resetPresentMatch() {
        this._presentMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get presentMatchInput() {
        return this._presentMatch;
    }
    get regexMatch() {
        return this.getStringAttribute('regex_match');
    }
    set regexMatch(value) {
        this._regexMatch = value;
    }
    resetRegexMatch() {
        this._regexMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexMatchInput() {
        return this._regexMatch;
    }
    get suffixMatch() {
        return this.getStringAttribute('suffix_match');
    }
    set suffixMatch(value) {
        this._suffixMatch = value;
    }
    resetSuffixMatch() {
        this._suffixMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get suffixMatchInput() {
        return this._suffixMatch;
    }
    get rangeMatch() {
        return this._rangeMatch;
    }
    putRangeMatch(value) {
        this._rangeMatch.internalValue = value;
    }
    resetRangeMatch() {
        this._rangeMatch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rangeMatchInput() {
        return this._rangeMatch.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference[_25] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList = ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList;
_26 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList[_26] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsToTerraform = computeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._value = value.value;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference[_27] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList = ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList;
_28 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList[_28] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        filter_match_criteria: cdktf.stringToTerraform(struct.filterMatchCriteria),
        filter_labels: cdktf.listMapper(computeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsToTerraform, true)(struct.filterLabels),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersToTerraform = computeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // filter_labels - computed: false, optional: false, required: true
        this._filterLabels = new ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList(this, "filter_labels", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._filterMatchCriteria !== undefined) {
            hasAnyValues = true;
            internalValueResult.filterMatchCriteria = this._filterMatchCriteria;
        }
        if (this._filterLabels?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.filterLabels = this._filterLabels?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._filterMatchCriteria = undefined;
            this._filterLabels.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._filterMatchCriteria = value.filterMatchCriteria;
            this._filterLabels.internalValue = value.filterLabels;
        }
    }
    get filterMatchCriteria() {
        return this.getStringAttribute('filter_match_criteria');
    }
    set filterMatchCriteria(value) {
        this._filterMatchCriteria = value;
    }
    // Temporarily expose input value. Use with caution.
    get filterMatchCriteriaInput() {
        return this._filterMatchCriteria;
    }
    get filterLabels() {
        return this._filterLabels;
    }
    putFilterLabels(value) {
        this._filterLabels.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get filterLabelsInput() {
        return this._filterLabels.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference[_29] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList = ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList;
_30 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList[_30] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exact_match: cdktf.stringToTerraform(struct.exactMatch),
        name: cdktf.stringToTerraform(struct.name),
        present_match: cdktf.booleanToTerraform(struct.presentMatch),
        regex_match: cdktf.stringToTerraform(struct.regexMatch),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesToTerraform = computeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exactMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.exactMatch = this._exactMatch;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._presentMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.presentMatch = this._presentMatch;
        }
        if (this._regexMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.regexMatch = this._regexMatch;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exactMatch = undefined;
            this._name = undefined;
            this._presentMatch = undefined;
            this._regexMatch = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exactMatch = value.exactMatch;
            this._name = value.name;
            this._presentMatch = value.presentMatch;
            this._regexMatch = value.regexMatch;
        }
    }
    get exactMatch() {
        return this.getStringAttribute('exact_match');
    }
    set exactMatch(value) {
        this._exactMatch = value;
    }
    resetExactMatch() {
        this._exactMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exactMatchInput() {
        return this._exactMatch;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get presentMatch() {
        return this.getBooleanAttribute('present_match');
    }
    set presentMatch(value) {
        this._presentMatch = value;
    }
    resetPresentMatch() {
        this._presentMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get presentMatchInput() {
        return this._presentMatch;
    }
    get regexMatch() {
        return this.getStringAttribute('regex_match');
    }
    set regexMatch(value) {
        this._regexMatch = value;
    }
    resetRegexMatch() {
        this._regexMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexMatchInput() {
        return this._regexMatch;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference[_31] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList = ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList;
_32 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList[_32] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesMatchRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        full_path_match: cdktf.stringToTerraform(struct.fullPathMatch),
        ignore_case: cdktf.booleanToTerraform(struct.ignoreCase),
        prefix_match: cdktf.stringToTerraform(struct.prefixMatch),
        regex_match: cdktf.stringToTerraform(struct.regexMatch),
        header_matches: cdktf.listMapper(computeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesToTerraform, true)(struct.headerMatches),
        metadata_filters: cdktf.listMapper(computeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersToTerraform, true)(struct.metadataFilters),
        query_parameter_matches: cdktf.listMapper(computeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesToTerraform, true)(struct.queryParameterMatches),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesMatchRulesToTerraform = computeRegionUrlMapPathMatcherRouteRulesMatchRulesToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_matches - computed: false, optional: true, required: false
        this._headerMatches = new ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList(this, "header_matches", false);
        // metadata_filters - computed: false, optional: true, required: false
        this._metadataFilters = new ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList(this, "metadata_filters", false);
        // query_parameter_matches - computed: false, optional: true, required: false
        this._queryParameterMatches = new ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList(this, "query_parameter_matches", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fullPathMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.fullPathMatch = this._fullPathMatch;
        }
        if (this._ignoreCase !== undefined) {
            hasAnyValues = true;
            internalValueResult.ignoreCase = this._ignoreCase;
        }
        if (this._prefixMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixMatch = this._prefixMatch;
        }
        if (this._regexMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.regexMatch = this._regexMatch;
        }
        if (this._headerMatches?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerMatches = this._headerMatches?.internalValue;
        }
        if (this._metadataFilters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadataFilters = this._metadataFilters?.internalValue;
        }
        if (this._queryParameterMatches?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryParameterMatches = this._queryParameterMatches?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._fullPathMatch = undefined;
            this._ignoreCase = undefined;
            this._prefixMatch = undefined;
            this._regexMatch = undefined;
            this._headerMatches.internalValue = undefined;
            this._metadataFilters.internalValue = undefined;
            this._queryParameterMatches.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._fullPathMatch = value.fullPathMatch;
            this._ignoreCase = value.ignoreCase;
            this._prefixMatch = value.prefixMatch;
            this._regexMatch = value.regexMatch;
            this._headerMatches.internalValue = value.headerMatches;
            this._metadataFilters.internalValue = value.metadataFilters;
            this._queryParameterMatches.internalValue = value.queryParameterMatches;
        }
    }
    get fullPathMatch() {
        return this.getStringAttribute('full_path_match');
    }
    set fullPathMatch(value) {
        this._fullPathMatch = value;
    }
    resetFullPathMatch() {
        this._fullPathMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fullPathMatchInput() {
        return this._fullPathMatch;
    }
    get ignoreCase() {
        return this.getBooleanAttribute('ignore_case');
    }
    set ignoreCase(value) {
        this._ignoreCase = value;
    }
    resetIgnoreCase() {
        this._ignoreCase = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreCaseInput() {
        return this._ignoreCase;
    }
    get prefixMatch() {
        return this.getStringAttribute('prefix_match');
    }
    set prefixMatch(value) {
        this._prefixMatch = value;
    }
    resetPrefixMatch() {
        this._prefixMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixMatchInput() {
        return this._prefixMatch;
    }
    get regexMatch() {
        return this.getStringAttribute('regex_match');
    }
    set regexMatch(value) {
        this._regexMatch = value;
    }
    resetRegexMatch() {
        this._regexMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexMatchInput() {
        return this._regexMatch;
    }
    get headerMatches() {
        return this._headerMatches;
    }
    putHeaderMatches(value) {
        this._headerMatches.internalValue = value;
    }
    resetHeaderMatches() {
        this._headerMatches.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerMatchesInput() {
        return this._headerMatches.internalValue;
    }
    get metadataFilters() {
        return this._metadataFilters;
    }
    putMetadataFilters(value) {
        this._metadataFilters.internalValue = value;
    }
    resetMetadataFilters() {
        this._metadataFilters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataFiltersInput() {
        return this._metadataFilters.internalValue;
    }
    get queryParameterMatches() {
        return this._queryParameterMatches;
    }
    putQueryParameterMatches(value) {
        this._queryParameterMatches.internalValue = value;
    }
    resetQueryParameterMatches() {
        this._queryParameterMatches.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryParameterMatchesInput() {
        return this._queryParameterMatches.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesOutputReference[_33] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesList = ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesList;
_34 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesList[_34] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_credentials: cdktf.booleanToTerraform(struct.allowCredentials),
        allow_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowHeaders),
        allow_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowMethods),
        allow_origin_regexes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOriginRegexes),
        allow_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOrigins),
        disabled: cdktf.booleanToTerraform(struct.disabled),
        expose_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exposeHeaders),
        max_age: cdktf.numberToTerraform(struct.maxAge),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowCredentials = this._allowCredentials;
        }
        if (this._allowHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowHeaders = this._allowHeaders;
        }
        if (this._allowMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowMethods = this._allowMethods;
        }
        if (this._allowOriginRegexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOriginRegexes = this._allowOriginRegexes;
        }
        if (this._allowOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOrigins = this._allowOrigins;
        }
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        if (this._exposeHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.exposeHeaders = this._exposeHeaders;
        }
        if (this._maxAge !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAge = this._maxAge;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowCredentials = undefined;
            this._allowHeaders = undefined;
            this._allowMethods = undefined;
            this._allowOriginRegexes = undefined;
            this._allowOrigins = undefined;
            this._disabled = undefined;
            this._exposeHeaders = undefined;
            this._maxAge = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowCredentials = value.allowCredentials;
            this._allowHeaders = value.allowHeaders;
            this._allowMethods = value.allowMethods;
            this._allowOriginRegexes = value.allowOriginRegexes;
            this._allowOrigins = value.allowOrigins;
            this._disabled = value.disabled;
            this._exposeHeaders = value.exposeHeaders;
            this._maxAge = value.maxAge;
        }
    }
    get allowCredentials() {
        return this.getBooleanAttribute('allow_credentials');
    }
    set allowCredentials(value) {
        this._allowCredentials = value;
    }
    resetAllowCredentials() {
        this._allowCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowCredentialsInput() {
        return this._allowCredentials;
    }
    get allowHeaders() {
        return this.getListAttribute('allow_headers');
    }
    set allowHeaders(value) {
        this._allowHeaders = value;
    }
    resetAllowHeaders() {
        this._allowHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowHeadersInput() {
        return this._allowHeaders;
    }
    get allowMethods() {
        return this.getListAttribute('allow_methods');
    }
    set allowMethods(value) {
        this._allowMethods = value;
    }
    resetAllowMethods() {
        this._allowMethods = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowMethodsInput() {
        return this._allowMethods;
    }
    get allowOriginRegexes() {
        return this.getListAttribute('allow_origin_regexes');
    }
    set allowOriginRegexes(value) {
        this._allowOriginRegexes = value;
    }
    resetAllowOriginRegexes() {
        this._allowOriginRegexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginRegexesInput() {
        return this._allowOriginRegexes;
    }
    get allowOrigins() {
        return this.getListAttribute('allow_origins');
    }
    set allowOrigins(value) {
        this._allowOrigins = value;
    }
    resetAllowOrigins() {
        this._allowOrigins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginsInput() {
        return this._allowOrigins;
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    resetDisabled() {
        this._disabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get exposeHeaders() {
        return this.getListAttribute('expose_headers');
    }
    set exposeHeaders(value) {
        this._exposeHeaders = value;
    }
    resetExposeHeaders() {
        this._exposeHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exposeHeadersInput() {
        return this._exposeHeaders;
    }
    get maxAge() {
        return this.getNumberAttribute('max_age');
    }
    set maxAge(value) {
        this._maxAge = value;
    }
    resetMaxAge() {
        this._maxAge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAgeInput() {
        return this._maxAge;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference[_35] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_status: cdktf.numberToTerraform(struct.httpStatus),
        percentage: cdktf.numberToTerraform(struct.percentage),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpStatus = this._httpStatus;
        }
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpStatus = undefined;
            this._percentage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpStatus = value.httpStatus;
            this._percentage = value.percentage;
        }
    }
    get httpStatus() {
        return this.getNumberAttribute('http_status');
    }
    set httpStatus(value) {
        this._httpStatus = value;
    }
    resetHttpStatus() {
        this._httpStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpStatusInput() {
        return this._httpStatus;
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    resetPercentage() {
        this._percentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference[_36] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference[_37] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        percentage: cdktf.numberToTerraform(struct.percentage),
        fixed_delay: computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct.fixedDelay),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // fixed_delay - computed: false, optional: true, required: false
        this._fixedDelay = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference(this, "fixed_delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        if (this._fixedDelay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedDelay = this._fixedDelay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._percentage = undefined;
            this._fixedDelay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._percentage = value.percentage;
            this._fixedDelay.internalValue = value.fixedDelay;
        }
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    resetPercentage() {
        this._percentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
    get fixedDelay() {
        return this._fixedDelay;
    }
    putFixedDelay(value) {
        this._fixedDelay.internalValue = value;
    }
    resetFixedDelay() {
        this._fixedDelay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedDelayInput() {
        return this._fixedDelay.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference[_38] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        abort: computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortToTerraform(struct.abort),
        delay: computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayToTerraform(struct.delay),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // abort - computed: false, optional: true, required: false
        this._abort = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference(this, "abort");
        // delay - computed: false, optional: true, required: false
        this._delay = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference(this, "delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._abort?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.abort = this._abort?.internalValue;
        }
        if (this._delay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.delay = this._delay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._abort.internalValue = undefined;
            this._delay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._abort.internalValue = value.abort;
            this._delay.internalValue = value.delay;
        }
    }
    get abort() {
        return this._abort;
    }
    putAbort(value) {
        this._abort.internalValue = value;
    }
    resetAbort() {
        this._abort.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get abortInput() {
        return this._abort.internalValue;
    }
    get delay() {
        return this._delay;
    }
    putDelay(value) {
        this._delay.internalValue = value;
    }
    resetDelay() {
        this._delay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get delayInput() {
        return this._delay.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference[_39] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backendService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backendService = value.backendService;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference[_40] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference[_41] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        retry_conditions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.retryConditions),
        per_try_timeout: computeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutToTerraform(struct.perTryTimeout),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // per_try_timeout - computed: false, optional: true, required: false
        this._perTryTimeout = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference(this, "per_try_timeout");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._retryConditions !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryConditions = this._retryConditions;
        }
        if (this._perTryTimeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.perTryTimeout = this._perTryTimeout?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._numRetries = undefined;
            this._retryConditions = undefined;
            this._perTryTimeout.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._numRetries = value.numRetries;
            this._retryConditions = value.retryConditions;
            this._perTryTimeout.internalValue = value.perTryTimeout;
        }
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get retryConditions() {
        return this.getListAttribute('retry_conditions');
    }
    set retryConditions(value) {
        this._retryConditions = value;
    }
    resetRetryConditions() {
        this._retryConditions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryConditionsInput() {
        return this._retryConditions;
    }
    get perTryTimeout() {
        return this._perTryTimeout;
    }
    putPerTryTimeout(value) {
        this._perTryTimeout.internalValue = value;
    }
    resetPerTryTimeout() {
        this._perTryTimeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perTryTimeoutInput() {
        return this._perTryTimeout.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference;
_42 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference[_42] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference[_43] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_rewrite: cdktf.stringToTerraform(struct.hostRewrite),
        path_prefix_rewrite: cdktf.stringToTerraform(struct.pathPrefixRewrite),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRewrite = this._hostRewrite;
        }
        if (this._pathPrefixRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathPrefixRewrite = this._pathPrefixRewrite;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRewrite = undefined;
            this._pathPrefixRewrite = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRewrite = value.hostRewrite;
            this._pathPrefixRewrite = value.pathPrefixRewrite;
        }
    }
    get hostRewrite() {
        return this.getStringAttribute('host_rewrite');
    }
    set hostRewrite(value) {
        this._hostRewrite = value;
    }
    resetHostRewrite() {
        this._hostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRewriteInput() {
        return this._hostRewrite;
    }
    get pathPrefixRewrite() {
        return this.getStringAttribute('path_prefix_rewrite');
    }
    set pathPrefixRewrite(value) {
        this._pathPrefixRewrite = value;
    }
    resetPathPrefixRewrite() {
        this._pathPrefixRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathPrefixRewriteInput() {
        return this._pathPrefixRewrite;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference;
_44 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference[_44] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference;
_45 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference[_45] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList;
_46 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList[_46] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference;
_47 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference[_47] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList;
_48 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList[_48] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requestHeadersToRemove),
        response_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.responseHeadersToRemove),
        request_headers_to_add: cdktf.listMapper(computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform, true)(struct.requestHeadersToAdd),
        response_headers_to_add: cdktf.listMapper(computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform, true)(struct.responseHeadersToAdd),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_headers_to_add - computed: false, optional: true, required: false
        this._requestHeadersToAdd = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList(this, "request_headers_to_add", false);
        // response_headers_to_add - computed: false, optional: true, required: false
        this._responseHeadersToAdd = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList(this, "response_headers_to_add", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToRemove = this._requestHeadersToRemove;
        }
        if (this._responseHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToRemove = this._responseHeadersToRemove;
        }
        if (this._requestHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToAdd = this._requestHeadersToAdd?.internalValue;
        }
        if (this._responseHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToAdd = this._responseHeadersToAdd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeadersToRemove = undefined;
            this._responseHeadersToRemove = undefined;
            this._requestHeadersToAdd.internalValue = undefined;
            this._responseHeadersToAdd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeadersToRemove = value.requestHeadersToRemove;
            this._responseHeadersToRemove = value.responseHeadersToRemove;
            this._requestHeadersToAdd.internalValue = value.requestHeadersToAdd;
            this._responseHeadersToAdd.internalValue = value.responseHeadersToAdd;
        }
    }
    get requestHeadersToRemove() {
        return this.getListAttribute('request_headers_to_remove');
    }
    set requestHeadersToRemove(value) {
        this._requestHeadersToRemove = value;
    }
    resetRequestHeadersToRemove() {
        this._requestHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToRemoveInput() {
        return this._requestHeadersToRemove;
    }
    get responseHeadersToRemove() {
        return this.getListAttribute('response_headers_to_remove');
    }
    set responseHeadersToRemove(value) {
        this._responseHeadersToRemove = value;
    }
    resetResponseHeadersToRemove() {
        this._responseHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToRemoveInput() {
        return this._responseHeadersToRemove;
    }
    get requestHeadersToAdd() {
        return this._requestHeadersToAdd;
    }
    putRequestHeadersToAdd(value) {
        this._requestHeadersToAdd.internalValue = value;
    }
    resetRequestHeadersToAdd() {
        this._requestHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToAddInput() {
        return this._requestHeadersToAdd.internalValue;
    }
    get responseHeadersToAdd() {
        return this._responseHeadersToAdd;
    }
    putResponseHeadersToAdd(value) {
        this._responseHeadersToAdd.internalValue = value;
    }
    resetResponseHeadersToAdd() {
        this._responseHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToAddInput() {
        return this._responseHeadersToAdd.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference;
_49 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference[_49] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
        weight: cdktf.numberToTerraform(struct.weight),
        header_action: computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionToTerraform(struct.headerAction),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference(this, "header_action");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        if (this._headerAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerAction = this._headerAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._backendService = undefined;
            this._weight = undefined;
            this._headerAction.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._backendService = value.backendService;
            this._weight = value.weight;
            this._headerAction.internalValue = value.headerAction;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference;
_50 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference[_50] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList;
_51 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList[_51] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cors_policy: computeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyToTerraform(struct.corsPolicy),
        fault_injection_policy: computeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyToTerraform(struct.faultInjectionPolicy),
        request_mirror_policy: computeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyToTerraform(struct.requestMirrorPolicy),
        retry_policy: computeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyToTerraform(struct.retryPolicy),
        timeout: computeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutToTerraform(struct.timeout),
        url_rewrite: computeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteToTerraform(struct.urlRewrite),
        weighted_backend_services: cdktf.listMapper(computeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesToTerraform, true)(struct.weightedBackendServices),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesRouteActionToTerraform = computeRegionUrlMapPathMatcherRouteRulesRouteActionToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesRouteActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cors_policy - computed: false, optional: true, required: false
        this._corsPolicy = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference(this, "cors_policy");
        // fault_injection_policy - computed: false, optional: true, required: false
        this._faultInjectionPolicy = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference(this, "fault_injection_policy");
        // request_mirror_policy - computed: false, optional: true, required: false
        this._requestMirrorPolicy = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference(this, "request_mirror_policy");
        // retry_policy - computed: false, optional: true, required: false
        this._retryPolicy = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference(this, "retry_policy");
        // timeout - computed: false, optional: true, required: false
        this._timeout = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference(this, "timeout");
        // url_rewrite - computed: false, optional: true, required: false
        this._urlRewrite = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference(this, "url_rewrite");
        // weighted_backend_services - computed: false, optional: true, required: false
        this._weightedBackendServices = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList(this, "weighted_backend_services", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._corsPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.corsPolicy = this._corsPolicy?.internalValue;
        }
        if (this._faultInjectionPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.faultInjectionPolicy = this._faultInjectionPolicy?.internalValue;
        }
        if (this._requestMirrorPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestMirrorPolicy = this._requestMirrorPolicy?.internalValue;
        }
        if (this._retryPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryPolicy = this._retryPolicy?.internalValue;
        }
        if (this._timeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout?.internalValue;
        }
        if (this._urlRewrite?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRewrite = this._urlRewrite?.internalValue;
        }
        if (this._weightedBackendServices?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.weightedBackendServices = this._weightedBackendServices?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._corsPolicy.internalValue = undefined;
            this._faultInjectionPolicy.internalValue = undefined;
            this._requestMirrorPolicy.internalValue = undefined;
            this._retryPolicy.internalValue = undefined;
            this._timeout.internalValue = undefined;
            this._urlRewrite.internalValue = undefined;
            this._weightedBackendServices.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._corsPolicy.internalValue = value.corsPolicy;
            this._faultInjectionPolicy.internalValue = value.faultInjectionPolicy;
            this._requestMirrorPolicy.internalValue = value.requestMirrorPolicy;
            this._retryPolicy.internalValue = value.retryPolicy;
            this._timeout.internalValue = value.timeout;
            this._urlRewrite.internalValue = value.urlRewrite;
            this._weightedBackendServices.internalValue = value.weightedBackendServices;
        }
    }
    get corsPolicy() {
        return this._corsPolicy;
    }
    putCorsPolicy(value) {
        this._corsPolicy.internalValue = value;
    }
    resetCorsPolicy() {
        this._corsPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsPolicyInput() {
        return this._corsPolicy.internalValue;
    }
    get faultInjectionPolicy() {
        return this._faultInjectionPolicy;
    }
    putFaultInjectionPolicy(value) {
        this._faultInjectionPolicy.internalValue = value;
    }
    resetFaultInjectionPolicy() {
        this._faultInjectionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get faultInjectionPolicyInput() {
        return this._faultInjectionPolicy.internalValue;
    }
    get requestMirrorPolicy() {
        return this._requestMirrorPolicy;
    }
    putRequestMirrorPolicy(value) {
        this._requestMirrorPolicy.internalValue = value;
    }
    resetRequestMirrorPolicy() {
        this._requestMirrorPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestMirrorPolicyInput() {
        return this._requestMirrorPolicy.internalValue;
    }
    get retryPolicy() {
        return this._retryPolicy;
    }
    putRetryPolicy(value) {
        this._retryPolicy.internalValue = value;
    }
    resetRetryPolicy() {
        this._retryPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryPolicyInput() {
        return this._retryPolicy.internalValue;
    }
    get timeout() {
        return this._timeout;
    }
    putTimeout(value) {
        this._timeout.internalValue = value;
    }
    resetTimeout() {
        this._timeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout.internalValue;
    }
    get urlRewrite() {
        return this._urlRewrite;
    }
    putUrlRewrite(value) {
        this._urlRewrite.internalValue = value;
    }
    resetUrlRewrite() {
        this._urlRewrite.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRewriteInput() {
        return this._urlRewrite.internalValue;
    }
    get weightedBackendServices() {
        return this._weightedBackendServices;
    }
    putWeightedBackendServices(value) {
        this._weightedBackendServices.internalValue = value;
    }
    resetWeightedBackendServices() {
        this._weightedBackendServices.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightedBackendServicesInput() {
        return this._weightedBackendServices.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesRouteActionOutputReference;
_52 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesRouteActionOutputReference[_52] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesRouteActionOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesUrlRedirectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_redirect: cdktf.stringToTerraform(struct.hostRedirect),
        https_redirect: cdktf.booleanToTerraform(struct.httpsRedirect),
        path_redirect: cdktf.stringToTerraform(struct.pathRedirect),
        prefix_redirect: cdktf.stringToTerraform(struct.prefixRedirect),
        redirect_response_code: cdktf.stringToTerraform(struct.redirectResponseCode),
        strip_query: cdktf.booleanToTerraform(struct.stripQuery),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesUrlRedirectToTerraform = computeRegionUrlMapPathMatcherRouteRulesUrlRedirectToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesUrlRedirectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRedirect = this._hostRedirect;
        }
        if (this._httpsRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsRedirect = this._httpsRedirect;
        }
        if (this._pathRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathRedirect = this._pathRedirect;
        }
        if (this._prefixRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixRedirect = this._prefixRedirect;
        }
        if (this._redirectResponseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectResponseCode = this._redirectResponseCode;
        }
        if (this._stripQuery !== undefined) {
            hasAnyValues = true;
            internalValueResult.stripQuery = this._stripQuery;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRedirect = undefined;
            this._httpsRedirect = undefined;
            this._pathRedirect = undefined;
            this._prefixRedirect = undefined;
            this._redirectResponseCode = undefined;
            this._stripQuery = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRedirect = value.hostRedirect;
            this._httpsRedirect = value.httpsRedirect;
            this._pathRedirect = value.pathRedirect;
            this._prefixRedirect = value.prefixRedirect;
            this._redirectResponseCode = value.redirectResponseCode;
            this._stripQuery = value.stripQuery;
        }
    }
    get hostRedirect() {
        return this.getStringAttribute('host_redirect');
    }
    set hostRedirect(value) {
        this._hostRedirect = value;
    }
    resetHostRedirect() {
        this._hostRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRedirectInput() {
        return this._hostRedirect;
    }
    get httpsRedirect() {
        return this.getBooleanAttribute('https_redirect');
    }
    set httpsRedirect(value) {
        this._httpsRedirect = value;
    }
    resetHttpsRedirect() {
        this._httpsRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsRedirectInput() {
        return this._httpsRedirect;
    }
    get pathRedirect() {
        return this.getStringAttribute('path_redirect');
    }
    set pathRedirect(value) {
        this._pathRedirect = value;
    }
    resetPathRedirect() {
        this._pathRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathRedirectInput() {
        return this._pathRedirect;
    }
    get prefixRedirect() {
        return this.getStringAttribute('prefix_redirect');
    }
    set prefixRedirect(value) {
        this._prefixRedirect = value;
    }
    resetPrefixRedirect() {
        this._prefixRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixRedirectInput() {
        return this._prefixRedirect;
    }
    get redirectResponseCode() {
        return this.getStringAttribute('redirect_response_code');
    }
    set redirectResponseCode(value) {
        this._redirectResponseCode = value;
    }
    resetRedirectResponseCode() {
        this._redirectResponseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectResponseCodeInput() {
        return this._redirectResponseCode;
    }
    get stripQuery() {
        return this.getBooleanAttribute('strip_query');
    }
    set stripQuery(value) {
        this._stripQuery = value;
    }
    resetStripQuery() {
        this._stripQuery = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stripQueryInput() {
        return this._stripQuery;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesUrlRedirectOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesUrlRedirectOutputReference;
_53 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesUrlRedirectOutputReference[_53] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesUrlRedirectOutputReference", version: "4.0.3" };
function computeRegionUrlMapPathMatcherRouteRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        priority: cdktf.numberToTerraform(struct.priority),
        service: cdktf.stringToTerraform(struct.service),
        header_action: computeRegionUrlMapPathMatcherRouteRulesHeaderActionToTerraform(struct.headerAction),
        match_rules: cdktf.listMapper(computeRegionUrlMapPathMatcherRouteRulesMatchRulesToTerraform, true)(struct.matchRules),
        route_action: computeRegionUrlMapPathMatcherRouteRulesRouteActionToTerraform(struct.routeAction),
        url_redirect: computeRegionUrlMapPathMatcherRouteRulesUrlRedirectToTerraform(struct.urlRedirect),
    };
}
exports.computeRegionUrlMapPathMatcherRouteRulesToTerraform = computeRegionUrlMapPathMatcherRouteRulesToTerraform;
class ComputeRegionUrlMapPathMatcherRouteRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new ComputeRegionUrlMapPathMatcherRouteRulesHeaderActionOutputReference(this, "header_action");
        // match_rules - computed: false, optional: true, required: false
        this._matchRules = new ComputeRegionUrlMapPathMatcherRouteRulesMatchRulesList(this, "match_rules", false);
        // route_action - computed: false, optional: true, required: false
        this._routeAction = new ComputeRegionUrlMapPathMatcherRouteRulesRouteActionOutputReference(this, "route_action");
        // url_redirect - computed: false, optional: true, required: false
        this._urlRedirect = new ComputeRegionUrlMapPathMatcherRouteRulesUrlRedirectOutputReference(this, "url_redirect");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        if (this._headerAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerAction = this._headerAction?.internalValue;
        }
        if (this._matchRules?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchRules = this._matchRules?.internalValue;
        }
        if (this._routeAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.routeAction = this._routeAction?.internalValue;
        }
        if (this._urlRedirect?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRedirect = this._urlRedirect?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._priority = undefined;
            this._service = undefined;
            this._headerAction.internalValue = undefined;
            this._matchRules.internalValue = undefined;
            this._routeAction.internalValue = undefined;
            this._urlRedirect.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._priority = value.priority;
            this._service = value.service;
            this._headerAction.internalValue = value.headerAction;
            this._matchRules.internalValue = value.matchRules;
            this._routeAction.internalValue = value.routeAction;
            this._urlRedirect.internalValue = value.urlRedirect;
        }
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    resetService() {
        this._service = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
    get matchRules() {
        return this._matchRules;
    }
    putMatchRules(value) {
        this._matchRules.internalValue = value;
    }
    resetMatchRules() {
        this._matchRules.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchRulesInput() {
        return this._matchRules.internalValue;
    }
    get routeAction() {
        return this._routeAction;
    }
    putRouteAction(value) {
        this._routeAction.internalValue = value;
    }
    resetRouteAction() {
        this._routeAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeActionInput() {
        return this._routeAction.internalValue;
    }
    get urlRedirect() {
        return this._urlRedirect;
    }
    putUrlRedirect(value) {
        this._urlRedirect.internalValue = value;
    }
    resetUrlRedirect() {
        this._urlRedirect.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRedirectInput() {
        return this._urlRedirect.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesOutputReference = ComputeRegionUrlMapPathMatcherRouteRulesOutputReference;
_54 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesOutputReference[_54] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherRouteRulesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherRouteRulesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherRouteRulesList = ComputeRegionUrlMapPathMatcherRouteRulesList;
_55 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherRouteRulesList[_55] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherRouteRulesList", version: "4.0.3" };
function computeRegionUrlMapPathMatcherToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_service: cdktf.stringToTerraform(struct.defaultService),
        description: cdktf.stringToTerraform(struct.description),
        name: cdktf.stringToTerraform(struct.name),
        default_url_redirect: computeRegionUrlMapPathMatcherDefaultUrlRedirectToTerraform(struct.defaultUrlRedirect),
        path_rule: cdktf.listMapper(computeRegionUrlMapPathMatcherPathRuleToTerraform, true)(struct.pathRule),
        route_rules: cdktf.listMapper(computeRegionUrlMapPathMatcherRouteRulesToTerraform, true)(struct.routeRules),
    };
}
exports.computeRegionUrlMapPathMatcherToTerraform = computeRegionUrlMapPathMatcherToTerraform;
class ComputeRegionUrlMapPathMatcherOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // default_url_redirect - computed: false, optional: true, required: false
        this._defaultUrlRedirect = new ComputeRegionUrlMapPathMatcherDefaultUrlRedirectOutputReference(this, "default_url_redirect");
        // path_rule - computed: false, optional: true, required: false
        this._pathRule = new ComputeRegionUrlMapPathMatcherPathRuleList(this, "path_rule", false);
        // route_rules - computed: false, optional: true, required: false
        this._routeRules = new ComputeRegionUrlMapPathMatcherRouteRulesList(this, "route_rules", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultService !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultService = this._defaultService;
        }
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._defaultUrlRedirect?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultUrlRedirect = this._defaultUrlRedirect?.internalValue;
        }
        if (this._pathRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathRule = this._pathRule?.internalValue;
        }
        if (this._routeRules?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.routeRules = this._routeRules?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._defaultService = undefined;
            this._description = undefined;
            this._name = undefined;
            this._defaultUrlRedirect.internalValue = undefined;
            this._pathRule.internalValue = undefined;
            this._routeRules.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._defaultService = value.defaultService;
            this._description = value.description;
            this._name = value.name;
            this._defaultUrlRedirect.internalValue = value.defaultUrlRedirect;
            this._pathRule.internalValue = value.pathRule;
            this._routeRules.internalValue = value.routeRules;
        }
    }
    get defaultService() {
        return this.getStringAttribute('default_service');
    }
    set defaultService(value) {
        this._defaultService = value;
    }
    resetDefaultService() {
        this._defaultService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultServiceInput() {
        return this._defaultService;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get defaultUrlRedirect() {
        return this._defaultUrlRedirect;
    }
    putDefaultUrlRedirect(value) {
        this._defaultUrlRedirect.internalValue = value;
    }
    resetDefaultUrlRedirect() {
        this._defaultUrlRedirect.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultUrlRedirectInput() {
        return this._defaultUrlRedirect.internalValue;
    }
    get pathRule() {
        return this._pathRule;
    }
    putPathRule(value) {
        this._pathRule.internalValue = value;
    }
    resetPathRule() {
        this._pathRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathRuleInput() {
        return this._pathRule.internalValue;
    }
    get routeRules() {
        return this._routeRules;
    }
    putRouteRules(value) {
        this._routeRules.internalValue = value;
    }
    resetRouteRules() {
        this._routeRules.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeRulesInput() {
        return this._routeRules.internalValue;
    }
}
exports.ComputeRegionUrlMapPathMatcherOutputReference = ComputeRegionUrlMapPathMatcherOutputReference;
_56 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherOutputReference[_56] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapPathMatcherList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapPathMatcherOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapPathMatcherList = ComputeRegionUrlMapPathMatcherList;
_57 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapPathMatcherList[_57] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapPathMatcherList", version: "4.0.3" };
function computeRegionUrlMapTestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        host: cdktf.stringToTerraform(struct.host),
        path: cdktf.stringToTerraform(struct.path),
        service: cdktf.stringToTerraform(struct.service),
    };
}
exports.computeRegionUrlMapTestToTerraform = computeRegionUrlMapTestToTerraform;
class ComputeRegionUrlMapTestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._host = undefined;
            this._path = undefined;
            this._service = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._host = value.host;
            this._path = value.path;
            this._service = value.service;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
}
exports.ComputeRegionUrlMapTestOutputReference = ComputeRegionUrlMapTestOutputReference;
_58 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapTestOutputReference[_58] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapTestOutputReference", version: "4.0.3" };
class ComputeRegionUrlMapTestList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionUrlMapTestOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionUrlMapTestList = ComputeRegionUrlMapTestList;
_59 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapTestList[_59] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapTestList", version: "4.0.3" };
function computeRegionUrlMapTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.computeRegionUrlMapTimeoutsToTerraform = computeRegionUrlMapTimeoutsToTerraform;
class ComputeRegionUrlMapTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ComputeRegionUrlMapTimeoutsOutputReference = ComputeRegionUrlMapTimeoutsOutputReference;
_60 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMapTimeoutsOutputReference[_60] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMapTimeoutsOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/compute_region_url_map google_compute_region_url_map}
*/
class ComputeRegionUrlMap extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/compute_region_url_map google_compute_region_url_map} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ComputeRegionUrlMapConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_compute_region_url_map',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // default_route_action - computed: false, optional: true, required: false
        this._defaultRouteAction = new ComputeRegionUrlMapDefaultRouteActionOutputReference(this, "default_route_action");
        // default_url_redirect - computed: false, optional: true, required: false
        this._defaultUrlRedirect = new ComputeRegionUrlMapDefaultUrlRedirectOutputReference(this, "default_url_redirect");
        // host_rule - computed: false, optional: true, required: false
        this._hostRule = new ComputeRegionUrlMapHostRuleList(this, "host_rule", true);
        // path_matcher - computed: false, optional: true, required: false
        this._pathMatcher = new ComputeRegionUrlMapPathMatcherList(this, "path_matcher", false);
        // test - computed: false, optional: true, required: false
        this._test = new ComputeRegionUrlMapTestList(this, "test", false);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ComputeRegionUrlMapTimeoutsOutputReference(this, "timeouts");
        this._defaultService = config.defaultService;
        this._description = config.description;
        this._id = config.id;
        this._name = config.name;
        this._project = config.project;
        this._region = config.region;
        this._defaultRouteAction.internalValue = config.defaultRouteAction;
        this._defaultUrlRedirect.internalValue = config.defaultUrlRedirect;
        this._hostRule.internalValue = config.hostRule;
        this._pathMatcher.internalValue = config.pathMatcher;
        this._test.internalValue = config.test;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_timestamp - computed: true, optional: false, required: false
    get creationTimestamp() {
        return this.getStringAttribute('creation_timestamp');
    }
    get defaultService() {
        return this.getStringAttribute('default_service');
    }
    set defaultService(value) {
        this._defaultService = value;
    }
    resetDefaultService() {
        this._defaultService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultServiceInput() {
        return this._defaultService;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // fingerprint - computed: true, optional: false, required: false
    get fingerprint() {
        return this.getStringAttribute('fingerprint');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // map_id - computed: true, optional: false, required: false
    get mapId() {
        return this.getNumberAttribute('map_id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    get defaultRouteAction() {
        return this._defaultRouteAction;
    }
    putDefaultRouteAction(value) {
        this._defaultRouteAction.internalValue = value;
    }
    resetDefaultRouteAction() {
        this._defaultRouteAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultRouteActionInput() {
        return this._defaultRouteAction.internalValue;
    }
    get defaultUrlRedirect() {
        return this._defaultUrlRedirect;
    }
    putDefaultUrlRedirect(value) {
        this._defaultUrlRedirect.internalValue = value;
    }
    resetDefaultUrlRedirect() {
        this._defaultUrlRedirect.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultUrlRedirectInput() {
        return this._defaultUrlRedirect.internalValue;
    }
    get hostRule() {
        return this._hostRule;
    }
    putHostRule(value) {
        this._hostRule.internalValue = value;
    }
    resetHostRule() {
        this._hostRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRuleInput() {
        return this._hostRule.internalValue;
    }
    get pathMatcher() {
        return this._pathMatcher;
    }
    putPathMatcher(value) {
        this._pathMatcher.internalValue = value;
    }
    resetPathMatcher() {
        this._pathMatcher.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathMatcherInput() {
        return this._pathMatcher.internalValue;
    }
    get test() {
        return this._test;
    }
    putTest(value) {
        this._test.internalValue = value;
    }
    resetTest() {
        this._test.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get testInput() {
        return this._test.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            default_service: cdktf.stringToTerraform(this._defaultService),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            default_route_action: computeRegionUrlMapDefaultRouteActionToTerraform(this._defaultRouteAction.internalValue),
            default_url_redirect: computeRegionUrlMapDefaultUrlRedirectToTerraform(this._defaultUrlRedirect.internalValue),
            host_rule: cdktf.listMapper(computeRegionUrlMapHostRuleToTerraform, true)(this._hostRule.internalValue),
            path_matcher: cdktf.listMapper(computeRegionUrlMapPathMatcherToTerraform, true)(this._pathMatcher.internalValue),
            test: cdktf.listMapper(computeRegionUrlMapTestToTerraform, true)(this._test.internalValue),
            timeouts: computeRegionUrlMapTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.ComputeRegionUrlMap = ComputeRegionUrlMap;
_61 = JSII_RTTI_SYMBOL_1;
ComputeRegionUrlMap[_61] = { fqn: "@cdktf/provider-google.computeRegionUrlMap.ComputeRegionUrlMap", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
ComputeRegionUrlMap.tfResourceType = "google_compute_region_url_map";
//# sourceMappingURL=data:application/json;base64,