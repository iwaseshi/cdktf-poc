"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OsConfigPatchDeployment = exports.OsConfigPatchDeploymentTimeoutsOutputReference = exports.osConfigPatchDeploymentTimeoutsToTerraform = exports.OsConfigPatchDeploymentRolloutOutputReference = exports.osConfigPatchDeploymentRolloutToTerraform = exports.OsConfigPatchDeploymentRolloutDisruptionBudgetOutputReference = exports.osConfigPatchDeploymentRolloutDisruptionBudgetToTerraform = exports.OsConfigPatchDeploymentRecurringScheduleOutputReference = exports.osConfigPatchDeploymentRecurringScheduleToTerraform = exports.OsConfigPatchDeploymentRecurringScheduleWeeklyOutputReference = exports.osConfigPatchDeploymentRecurringScheduleWeeklyToTerraform = exports.OsConfigPatchDeploymentRecurringScheduleTimeZoneOutputReference = exports.osConfigPatchDeploymentRecurringScheduleTimeZoneToTerraform = exports.OsConfigPatchDeploymentRecurringScheduleTimeOfDayOutputReference = exports.osConfigPatchDeploymentRecurringScheduleTimeOfDayToTerraform = exports.OsConfigPatchDeploymentRecurringScheduleMonthlyOutputReference = exports.osConfigPatchDeploymentRecurringScheduleMonthlyToTerraform = exports.OsConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthOutputReference = exports.osConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthToTerraform = exports.OsConfigPatchDeploymentPatchConfigOutputReference = exports.osConfigPatchDeploymentPatchConfigToTerraform = exports.OsConfigPatchDeploymentPatchConfigZypperOutputReference = exports.osConfigPatchDeploymentPatchConfigZypperToTerraform = exports.OsConfigPatchDeploymentPatchConfigYumOutputReference = exports.osConfigPatchDeploymentPatchConfigYumToTerraform = exports.OsConfigPatchDeploymentPatchConfigWindowsUpdateOutputReference = exports.osConfigPatchDeploymentPatchConfigWindowsUpdateToTerraform = exports.OsConfigPatchDeploymentPatchConfigPreStepOutputReference = exports.osConfigPatchDeploymentPatchConfigPreStepToTerraform = exports.OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigOutputReference = exports.osConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigToTerraform = exports.OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectOutputReference = exports.osConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectToTerraform = exports.OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigOutputReference = exports.osConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigToTerraform = exports.OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectOutputReference = exports.osConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectToTerraform = exports.OsConfigPatchDeploymentPatchConfigPostStepOutputReference = exports.osConfigPatchDeploymentPatchConfigPostStepToTerraform = exports.OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigOutputReference = exports.osConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigToTerraform = exports.OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectOutputReference = exports.osConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectToTerraform = exports.OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigOutputReference = exports.osConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigToTerraform = exports.OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectOutputReference = exports.osConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectToTerraform = exports.OsConfigPatchDeploymentPatchConfigGooOutputReference = exports.osConfigPatchDeploymentPatchConfigGooToTerraform = exports.OsConfigPatchDeploymentPatchConfigAptOutputReference = exports.osConfigPatchDeploymentPatchConfigAptToTerraform = exports.OsConfigPatchDeploymentOneTimeScheduleOutputReference = exports.osConfigPatchDeploymentOneTimeScheduleToTerraform = exports.OsConfigPatchDeploymentInstanceFilterOutputReference = exports.osConfigPatchDeploymentInstanceFilterToTerraform = exports.OsConfigPatchDeploymentInstanceFilterGroupLabelsList = exports.OsConfigPatchDeploymentInstanceFilterGroupLabelsOutputReference = exports.osConfigPatchDeploymentInstanceFilterGroupLabelsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function osConfigPatchDeploymentInstanceFilterGroupLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
    };
}
exports.osConfigPatchDeploymentInstanceFilterGroupLabelsToTerraform = osConfigPatchDeploymentInstanceFilterGroupLabelsToTerraform;
class OsConfigPatchDeploymentInstanceFilterGroupLabelsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._labels = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._labels = value.labels;
        }
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
}
exports.OsConfigPatchDeploymentInstanceFilterGroupLabelsOutputReference = OsConfigPatchDeploymentInstanceFilterGroupLabelsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentInstanceFilterGroupLabelsOutputReference[_a] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentInstanceFilterGroupLabelsOutputReference", version: "5.0.1" };
class OsConfigPatchDeploymentInstanceFilterGroupLabelsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OsConfigPatchDeploymentInstanceFilterGroupLabelsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OsConfigPatchDeploymentInstanceFilterGroupLabelsList = OsConfigPatchDeploymentInstanceFilterGroupLabelsList;
_b = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentInstanceFilterGroupLabelsList[_b] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentInstanceFilterGroupLabelsList", version: "5.0.1" };
function osConfigPatchDeploymentInstanceFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        all: cdktf.booleanToTerraform(struct.all),
        instance_name_prefixes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.instanceNamePrefixes),
        instances: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.instances),
        zones: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.zones),
        group_labels: cdktf.listMapper(osConfigPatchDeploymentInstanceFilterGroupLabelsToTerraform, true)(struct.groupLabels),
    };
}
exports.osConfigPatchDeploymentInstanceFilterToTerraform = osConfigPatchDeploymentInstanceFilterToTerraform;
class OsConfigPatchDeploymentInstanceFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // group_labels - computed: false, optional: true, required: false
        this._groupLabels = new OsConfigPatchDeploymentInstanceFilterGroupLabelsList(this, "group_labels", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._all !== undefined) {
            hasAnyValues = true;
            internalValueResult.all = this._all;
        }
        if (this._instanceNamePrefixes !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceNamePrefixes = this._instanceNamePrefixes;
        }
        if (this._instances !== undefined) {
            hasAnyValues = true;
            internalValueResult.instances = this._instances;
        }
        if (this._zones !== undefined) {
            hasAnyValues = true;
            internalValueResult.zones = this._zones;
        }
        if (this._groupLabels?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupLabels = this._groupLabels?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._all = undefined;
            this._instanceNamePrefixes = undefined;
            this._instances = undefined;
            this._zones = undefined;
            this._groupLabels.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._all = value.all;
            this._instanceNamePrefixes = value.instanceNamePrefixes;
            this._instances = value.instances;
            this._zones = value.zones;
            this._groupLabels.internalValue = value.groupLabels;
        }
    }
    get all() {
        return this.getBooleanAttribute('all');
    }
    set all(value) {
        this._all = value;
    }
    resetAll() {
        this._all = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allInput() {
        return this._all;
    }
    get instanceNamePrefixes() {
        return this.getListAttribute('instance_name_prefixes');
    }
    set instanceNamePrefixes(value) {
        this._instanceNamePrefixes = value;
    }
    resetInstanceNamePrefixes() {
        this._instanceNamePrefixes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceNamePrefixesInput() {
        return this._instanceNamePrefixes;
    }
    get instances() {
        return this.getListAttribute('instances');
    }
    set instances(value) {
        this._instances = value;
    }
    resetInstances() {
        this._instances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instancesInput() {
        return this._instances;
    }
    get zones() {
        return this.getListAttribute('zones');
    }
    set zones(value) {
        this._zones = value;
    }
    resetZones() {
        this._zones = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zonesInput() {
        return this._zones;
    }
    get groupLabels() {
        return this._groupLabels;
    }
    putGroupLabels(value) {
        this._groupLabels.internalValue = value;
    }
    resetGroupLabels() {
        this._groupLabels.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupLabelsInput() {
        return this._groupLabels.internalValue;
    }
}
exports.OsConfigPatchDeploymentInstanceFilterOutputReference = OsConfigPatchDeploymentInstanceFilterOutputReference;
_c = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentInstanceFilterOutputReference[_c] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentInstanceFilterOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentOneTimeScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        execute_time: cdktf.stringToTerraform(struct.executeTime),
    };
}
exports.osConfigPatchDeploymentOneTimeScheduleToTerraform = osConfigPatchDeploymentOneTimeScheduleToTerraform;
class OsConfigPatchDeploymentOneTimeScheduleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._executeTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.executeTime = this._executeTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._executeTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._executeTime = value.executeTime;
        }
    }
    get executeTime() {
        return this.getStringAttribute('execute_time');
    }
    set executeTime(value) {
        this._executeTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get executeTimeInput() {
        return this._executeTime;
    }
}
exports.OsConfigPatchDeploymentOneTimeScheduleOutputReference = OsConfigPatchDeploymentOneTimeScheduleOutputReference;
_d = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentOneTimeScheduleOutputReference[_d] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentOneTimeScheduleOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigAptToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        excludes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludes),
        exclusive_packages: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exclusivePackages),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.osConfigPatchDeploymentPatchConfigAptToTerraform = osConfigPatchDeploymentPatchConfigAptToTerraform;
class OsConfigPatchDeploymentPatchConfigAptOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._excludes !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludes = this._excludes;
        }
        if (this._exclusivePackages !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusivePackages = this._exclusivePackages;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._excludes = undefined;
            this._exclusivePackages = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._excludes = value.excludes;
            this._exclusivePackages = value.exclusivePackages;
            this._type = value.type;
        }
    }
    get excludes() {
        return this.getListAttribute('excludes');
    }
    set excludes(value) {
        this._excludes = value;
    }
    resetExcludes() {
        this._excludes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludesInput() {
        return this._excludes;
    }
    get exclusivePackages() {
        return this.getListAttribute('exclusive_packages');
    }
    set exclusivePackages(value) {
        this._exclusivePackages = value;
    }
    resetExclusivePackages() {
        this._exclusivePackages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusivePackagesInput() {
        return this._exclusivePackages;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.OsConfigPatchDeploymentPatchConfigAptOutputReference = OsConfigPatchDeploymentPatchConfigAptOutputReference;
_e = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigAptOutputReference[_e] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigAptOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigGooToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.osConfigPatchDeploymentPatchConfigGooToTerraform = osConfigPatchDeploymentPatchConfigGooToTerraform;
class OsConfigPatchDeploymentPatchConfigGooOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.OsConfigPatchDeploymentPatchConfigGooOutputReference = OsConfigPatchDeploymentPatchConfigGooOutputReference;
_f = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigGooOutputReference[_f] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigGooOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation_number: cdktf.stringToTerraform(struct.generationNumber),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.osConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectToTerraform = osConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectToTerraform;
class OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generationNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.generationNumber = this._generationNumber;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generationNumber = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generationNumber = value.generationNumber;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generationNumber() {
        return this.getStringAttribute('generation_number');
    }
    set generationNumber(value) {
        this._generationNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get generationNumberInput() {
        return this._generationNumber;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectOutputReference = OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectOutputReference;
_g = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectOutputReference[_g] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_success_codes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.allowedSuccessCodes),
        interpreter: cdktf.stringToTerraform(struct.interpreter),
        local_path: cdktf.stringToTerraform(struct.localPath),
        gcs_object: osConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectToTerraform(struct.gcsObject),
    };
}
exports.osConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigToTerraform = osConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigToTerraform;
class OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gcs_object - computed: false, optional: true, required: false
        this._gcsObject = new OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigGcsObjectOutputReference(this, "gcs_object");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedSuccessCodes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedSuccessCodes = this._allowedSuccessCodes;
        }
        if (this._interpreter !== undefined) {
            hasAnyValues = true;
            internalValueResult.interpreter = this._interpreter;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._gcsObject?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcsObject = this._gcsObject?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedSuccessCodes = undefined;
            this._interpreter = undefined;
            this._localPath = undefined;
            this._gcsObject.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedSuccessCodes = value.allowedSuccessCodes;
            this._interpreter = value.interpreter;
            this._localPath = value.localPath;
            this._gcsObject.internalValue = value.gcsObject;
        }
    }
    get allowedSuccessCodes() {
        return this.getNumberListAttribute('allowed_success_codes');
    }
    set allowedSuccessCodes(value) {
        this._allowedSuccessCodes = value;
    }
    resetAllowedSuccessCodes() {
        this._allowedSuccessCodes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedSuccessCodesInput() {
        return this._allowedSuccessCodes;
    }
    get interpreter() {
        return this.getStringAttribute('interpreter');
    }
    set interpreter(value) {
        this._interpreter = value;
    }
    resetInterpreter() {
        this._interpreter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get interpreterInput() {
        return this._interpreter;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get gcsObject() {
        return this._gcsObject;
    }
    putGcsObject(value) {
        this._gcsObject.internalValue = value;
    }
    resetGcsObject() {
        this._gcsObject.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsObjectInput() {
        return this._gcsObject.internalValue;
    }
}
exports.OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigOutputReference = OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigOutputReference[_h] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation_number: cdktf.stringToTerraform(struct.generationNumber),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.osConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectToTerraform = osConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectToTerraform;
class OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generationNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.generationNumber = this._generationNumber;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generationNumber = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generationNumber = value.generationNumber;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generationNumber() {
        return this.getStringAttribute('generation_number');
    }
    set generationNumber(value) {
        this._generationNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get generationNumberInput() {
        return this._generationNumber;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectOutputReference = OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectOutputReference;
_j = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectOutputReference[_j] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_success_codes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.allowedSuccessCodes),
        interpreter: cdktf.stringToTerraform(struct.interpreter),
        local_path: cdktf.stringToTerraform(struct.localPath),
        gcs_object: osConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectToTerraform(struct.gcsObject),
    };
}
exports.osConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigToTerraform = osConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigToTerraform;
class OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gcs_object - computed: false, optional: true, required: false
        this._gcsObject = new OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigGcsObjectOutputReference(this, "gcs_object");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedSuccessCodes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedSuccessCodes = this._allowedSuccessCodes;
        }
        if (this._interpreter !== undefined) {
            hasAnyValues = true;
            internalValueResult.interpreter = this._interpreter;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._gcsObject?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcsObject = this._gcsObject?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedSuccessCodes = undefined;
            this._interpreter = undefined;
            this._localPath = undefined;
            this._gcsObject.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedSuccessCodes = value.allowedSuccessCodes;
            this._interpreter = value.interpreter;
            this._localPath = value.localPath;
            this._gcsObject.internalValue = value.gcsObject;
        }
    }
    get allowedSuccessCodes() {
        return this.getNumberListAttribute('allowed_success_codes');
    }
    set allowedSuccessCodes(value) {
        this._allowedSuccessCodes = value;
    }
    resetAllowedSuccessCodes() {
        this._allowedSuccessCodes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedSuccessCodesInput() {
        return this._allowedSuccessCodes;
    }
    get interpreter() {
        return this.getStringAttribute('interpreter');
    }
    set interpreter(value) {
        this._interpreter = value;
    }
    resetInterpreter() {
        this._interpreter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get interpreterInput() {
        return this._interpreter;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get gcsObject() {
        return this._gcsObject;
    }
    putGcsObject(value) {
        this._gcsObject.internalValue = value;
    }
    resetGcsObject() {
        this._gcsObject.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsObjectInput() {
        return this._gcsObject.internalValue;
    }
}
exports.OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigOutputReference = OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigOutputReference;
_k = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigOutputReference[_k] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigPostStepToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        linux_exec_step_config: osConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigToTerraform(struct.linuxExecStepConfig),
        windows_exec_step_config: osConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigToTerraform(struct.windowsExecStepConfig),
    };
}
exports.osConfigPatchDeploymentPatchConfigPostStepToTerraform = osConfigPatchDeploymentPatchConfigPostStepToTerraform;
class OsConfigPatchDeploymentPatchConfigPostStepOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // linux_exec_step_config - computed: false, optional: true, required: false
        this._linuxExecStepConfig = new OsConfigPatchDeploymentPatchConfigPostStepLinuxExecStepConfigOutputReference(this, "linux_exec_step_config");
        // windows_exec_step_config - computed: false, optional: true, required: false
        this._windowsExecStepConfig = new OsConfigPatchDeploymentPatchConfigPostStepWindowsExecStepConfigOutputReference(this, "windows_exec_step_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._linuxExecStepConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.linuxExecStepConfig = this._linuxExecStepConfig?.internalValue;
        }
        if (this._windowsExecStepConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowsExecStepConfig = this._windowsExecStepConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._linuxExecStepConfig.internalValue = undefined;
            this._windowsExecStepConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._linuxExecStepConfig.internalValue = value.linuxExecStepConfig;
            this._windowsExecStepConfig.internalValue = value.windowsExecStepConfig;
        }
    }
    get linuxExecStepConfig() {
        return this._linuxExecStepConfig;
    }
    putLinuxExecStepConfig(value) {
        this._linuxExecStepConfig.internalValue = value;
    }
    resetLinuxExecStepConfig() {
        this._linuxExecStepConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get linuxExecStepConfigInput() {
        return this._linuxExecStepConfig.internalValue;
    }
    get windowsExecStepConfig() {
        return this._windowsExecStepConfig;
    }
    putWindowsExecStepConfig(value) {
        this._windowsExecStepConfig.internalValue = value;
    }
    resetWindowsExecStepConfig() {
        this._windowsExecStepConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowsExecStepConfigInput() {
        return this._windowsExecStepConfig.internalValue;
    }
}
exports.OsConfigPatchDeploymentPatchConfigPostStepOutputReference = OsConfigPatchDeploymentPatchConfigPostStepOutputReference;
_l = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigPostStepOutputReference[_l] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigPostStepOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation_number: cdktf.stringToTerraform(struct.generationNumber),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.osConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectToTerraform = osConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectToTerraform;
class OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generationNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.generationNumber = this._generationNumber;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generationNumber = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generationNumber = value.generationNumber;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generationNumber() {
        return this.getStringAttribute('generation_number');
    }
    set generationNumber(value) {
        this._generationNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get generationNumberInput() {
        return this._generationNumber;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectOutputReference = OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectOutputReference;
_m = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectOutputReference[_m] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_success_codes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.allowedSuccessCodes),
        interpreter: cdktf.stringToTerraform(struct.interpreter),
        local_path: cdktf.stringToTerraform(struct.localPath),
        gcs_object: osConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectToTerraform(struct.gcsObject),
    };
}
exports.osConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigToTerraform = osConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigToTerraform;
class OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gcs_object - computed: false, optional: true, required: false
        this._gcsObject = new OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigGcsObjectOutputReference(this, "gcs_object");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedSuccessCodes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedSuccessCodes = this._allowedSuccessCodes;
        }
        if (this._interpreter !== undefined) {
            hasAnyValues = true;
            internalValueResult.interpreter = this._interpreter;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._gcsObject?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcsObject = this._gcsObject?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedSuccessCodes = undefined;
            this._interpreter = undefined;
            this._localPath = undefined;
            this._gcsObject.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedSuccessCodes = value.allowedSuccessCodes;
            this._interpreter = value.interpreter;
            this._localPath = value.localPath;
            this._gcsObject.internalValue = value.gcsObject;
        }
    }
    get allowedSuccessCodes() {
        return this.getNumberListAttribute('allowed_success_codes');
    }
    set allowedSuccessCodes(value) {
        this._allowedSuccessCodes = value;
    }
    resetAllowedSuccessCodes() {
        this._allowedSuccessCodes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedSuccessCodesInput() {
        return this._allowedSuccessCodes;
    }
    get interpreter() {
        return this.getStringAttribute('interpreter');
    }
    set interpreter(value) {
        this._interpreter = value;
    }
    resetInterpreter() {
        this._interpreter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get interpreterInput() {
        return this._interpreter;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get gcsObject() {
        return this._gcsObject;
    }
    putGcsObject(value) {
        this._gcsObject.internalValue = value;
    }
    resetGcsObject() {
        this._gcsObject.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsObjectInput() {
        return this._gcsObject.internalValue;
    }
}
exports.OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigOutputReference = OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation_number: cdktf.stringToTerraform(struct.generationNumber),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.osConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectToTerraform = osConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectToTerraform;
class OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generationNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.generationNumber = this._generationNumber;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generationNumber = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generationNumber = value.generationNumber;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generationNumber() {
        return this.getStringAttribute('generation_number');
    }
    set generationNumber(value) {
        this._generationNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get generationNumberInput() {
        return this._generationNumber;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectOutputReference = OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectOutputReference;
_p = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectOutputReference[_p] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_success_codes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.allowedSuccessCodes),
        interpreter: cdktf.stringToTerraform(struct.interpreter),
        local_path: cdktf.stringToTerraform(struct.localPath),
        gcs_object: osConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectToTerraform(struct.gcsObject),
    };
}
exports.osConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigToTerraform = osConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigToTerraform;
class OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gcs_object - computed: false, optional: true, required: false
        this._gcsObject = new OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigGcsObjectOutputReference(this, "gcs_object");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedSuccessCodes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedSuccessCodes = this._allowedSuccessCodes;
        }
        if (this._interpreter !== undefined) {
            hasAnyValues = true;
            internalValueResult.interpreter = this._interpreter;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._gcsObject?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcsObject = this._gcsObject?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedSuccessCodes = undefined;
            this._interpreter = undefined;
            this._localPath = undefined;
            this._gcsObject.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedSuccessCodes = value.allowedSuccessCodes;
            this._interpreter = value.interpreter;
            this._localPath = value.localPath;
            this._gcsObject.internalValue = value.gcsObject;
        }
    }
    get allowedSuccessCodes() {
        return this.getNumberListAttribute('allowed_success_codes');
    }
    set allowedSuccessCodes(value) {
        this._allowedSuccessCodes = value;
    }
    resetAllowedSuccessCodes() {
        this._allowedSuccessCodes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedSuccessCodesInput() {
        return this._allowedSuccessCodes;
    }
    get interpreter() {
        return this.getStringAttribute('interpreter');
    }
    set interpreter(value) {
        this._interpreter = value;
    }
    resetInterpreter() {
        this._interpreter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get interpreterInput() {
        return this._interpreter;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get gcsObject() {
        return this._gcsObject;
    }
    putGcsObject(value) {
        this._gcsObject.internalValue = value;
    }
    resetGcsObject() {
        this._gcsObject.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsObjectInput() {
        return this._gcsObject.internalValue;
    }
}
exports.OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigOutputReference = OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigOutputReference[_q] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigPreStepToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        linux_exec_step_config: osConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigToTerraform(struct.linuxExecStepConfig),
        windows_exec_step_config: osConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigToTerraform(struct.windowsExecStepConfig),
    };
}
exports.osConfigPatchDeploymentPatchConfigPreStepToTerraform = osConfigPatchDeploymentPatchConfigPreStepToTerraform;
class OsConfigPatchDeploymentPatchConfigPreStepOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // linux_exec_step_config - computed: false, optional: true, required: false
        this._linuxExecStepConfig = new OsConfigPatchDeploymentPatchConfigPreStepLinuxExecStepConfigOutputReference(this, "linux_exec_step_config");
        // windows_exec_step_config - computed: false, optional: true, required: false
        this._windowsExecStepConfig = new OsConfigPatchDeploymentPatchConfigPreStepWindowsExecStepConfigOutputReference(this, "windows_exec_step_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._linuxExecStepConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.linuxExecStepConfig = this._linuxExecStepConfig?.internalValue;
        }
        if (this._windowsExecStepConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowsExecStepConfig = this._windowsExecStepConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._linuxExecStepConfig.internalValue = undefined;
            this._windowsExecStepConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._linuxExecStepConfig.internalValue = value.linuxExecStepConfig;
            this._windowsExecStepConfig.internalValue = value.windowsExecStepConfig;
        }
    }
    get linuxExecStepConfig() {
        return this._linuxExecStepConfig;
    }
    putLinuxExecStepConfig(value) {
        this._linuxExecStepConfig.internalValue = value;
    }
    resetLinuxExecStepConfig() {
        this._linuxExecStepConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get linuxExecStepConfigInput() {
        return this._linuxExecStepConfig.internalValue;
    }
    get windowsExecStepConfig() {
        return this._windowsExecStepConfig;
    }
    putWindowsExecStepConfig(value) {
        this._windowsExecStepConfig.internalValue = value;
    }
    resetWindowsExecStepConfig() {
        this._windowsExecStepConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowsExecStepConfigInput() {
        return this._windowsExecStepConfig.internalValue;
    }
}
exports.OsConfigPatchDeploymentPatchConfigPreStepOutputReference = OsConfigPatchDeploymentPatchConfigPreStepOutputReference;
_r = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigPreStepOutputReference[_r] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigPreStepOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigWindowsUpdateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        classifications: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.classifications),
        excludes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludes),
        exclusive_patches: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exclusivePatches),
    };
}
exports.osConfigPatchDeploymentPatchConfigWindowsUpdateToTerraform = osConfigPatchDeploymentPatchConfigWindowsUpdateToTerraform;
class OsConfigPatchDeploymentPatchConfigWindowsUpdateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._classifications !== undefined) {
            hasAnyValues = true;
            internalValueResult.classifications = this._classifications;
        }
        if (this._excludes !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludes = this._excludes;
        }
        if (this._exclusivePatches !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusivePatches = this._exclusivePatches;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._classifications = undefined;
            this._excludes = undefined;
            this._exclusivePatches = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._classifications = value.classifications;
            this._excludes = value.excludes;
            this._exclusivePatches = value.exclusivePatches;
        }
    }
    get classifications() {
        return this.getListAttribute('classifications');
    }
    set classifications(value) {
        this._classifications = value;
    }
    resetClassifications() {
        this._classifications = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get classificationsInput() {
        return this._classifications;
    }
    get excludes() {
        return this.getListAttribute('excludes');
    }
    set excludes(value) {
        this._excludes = value;
    }
    resetExcludes() {
        this._excludes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludesInput() {
        return this._excludes;
    }
    get exclusivePatches() {
        return this.getListAttribute('exclusive_patches');
    }
    set exclusivePatches(value) {
        this._exclusivePatches = value;
    }
    resetExclusivePatches() {
        this._exclusivePatches = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusivePatchesInput() {
        return this._exclusivePatches;
    }
}
exports.OsConfigPatchDeploymentPatchConfigWindowsUpdateOutputReference = OsConfigPatchDeploymentPatchConfigWindowsUpdateOutputReference;
_s = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigWindowsUpdateOutputReference[_s] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigWindowsUpdateOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigYumToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        excludes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludes),
        exclusive_packages: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exclusivePackages),
        minimal: cdktf.booleanToTerraform(struct.minimal),
        security: cdktf.booleanToTerraform(struct.security),
    };
}
exports.osConfigPatchDeploymentPatchConfigYumToTerraform = osConfigPatchDeploymentPatchConfigYumToTerraform;
class OsConfigPatchDeploymentPatchConfigYumOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._excludes !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludes = this._excludes;
        }
        if (this._exclusivePackages !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusivePackages = this._exclusivePackages;
        }
        if (this._minimal !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimal = this._minimal;
        }
        if (this._security !== undefined) {
            hasAnyValues = true;
            internalValueResult.security = this._security;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._excludes = undefined;
            this._exclusivePackages = undefined;
            this._minimal = undefined;
            this._security = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._excludes = value.excludes;
            this._exclusivePackages = value.exclusivePackages;
            this._minimal = value.minimal;
            this._security = value.security;
        }
    }
    get excludes() {
        return this.getListAttribute('excludes');
    }
    set excludes(value) {
        this._excludes = value;
    }
    resetExcludes() {
        this._excludes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludesInput() {
        return this._excludes;
    }
    get exclusivePackages() {
        return this.getListAttribute('exclusive_packages');
    }
    set exclusivePackages(value) {
        this._exclusivePackages = value;
    }
    resetExclusivePackages() {
        this._exclusivePackages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusivePackagesInput() {
        return this._exclusivePackages;
    }
    get minimal() {
        return this.getBooleanAttribute('minimal');
    }
    set minimal(value) {
        this._minimal = value;
    }
    resetMinimal() {
        this._minimal = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimalInput() {
        return this._minimal;
    }
    get security() {
        return this.getBooleanAttribute('security');
    }
    set security(value) {
        this._security = value;
    }
    resetSecurity() {
        this._security = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityInput() {
        return this._security;
    }
}
exports.OsConfigPatchDeploymentPatchConfigYumOutputReference = OsConfigPatchDeploymentPatchConfigYumOutputReference;
_t = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigYumOutputReference[_t] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigYumOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigZypperToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        categories: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.categories),
        excludes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludes),
        exclusive_patches: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exclusivePatches),
        severities: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.severities),
        with_optional: cdktf.booleanToTerraform(struct.withOptional),
        with_update: cdktf.booleanToTerraform(struct.withUpdate),
    };
}
exports.osConfigPatchDeploymentPatchConfigZypperToTerraform = osConfigPatchDeploymentPatchConfigZypperToTerraform;
class OsConfigPatchDeploymentPatchConfigZypperOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._categories !== undefined) {
            hasAnyValues = true;
            internalValueResult.categories = this._categories;
        }
        if (this._excludes !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludes = this._excludes;
        }
        if (this._exclusivePatches !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusivePatches = this._exclusivePatches;
        }
        if (this._severities !== undefined) {
            hasAnyValues = true;
            internalValueResult.severities = this._severities;
        }
        if (this._withOptional !== undefined) {
            hasAnyValues = true;
            internalValueResult.withOptional = this._withOptional;
        }
        if (this._withUpdate !== undefined) {
            hasAnyValues = true;
            internalValueResult.withUpdate = this._withUpdate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._categories = undefined;
            this._excludes = undefined;
            this._exclusivePatches = undefined;
            this._severities = undefined;
            this._withOptional = undefined;
            this._withUpdate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._categories = value.categories;
            this._excludes = value.excludes;
            this._exclusivePatches = value.exclusivePatches;
            this._severities = value.severities;
            this._withOptional = value.withOptional;
            this._withUpdate = value.withUpdate;
        }
    }
    get categories() {
        return this.getListAttribute('categories');
    }
    set categories(value) {
        this._categories = value;
    }
    resetCategories() {
        this._categories = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get categoriesInput() {
        return this._categories;
    }
    get excludes() {
        return this.getListAttribute('excludes');
    }
    set excludes(value) {
        this._excludes = value;
    }
    resetExcludes() {
        this._excludes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludesInput() {
        return this._excludes;
    }
    get exclusivePatches() {
        return this.getListAttribute('exclusive_patches');
    }
    set exclusivePatches(value) {
        this._exclusivePatches = value;
    }
    resetExclusivePatches() {
        this._exclusivePatches = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusivePatchesInput() {
        return this._exclusivePatches;
    }
    get severities() {
        return this.getListAttribute('severities');
    }
    set severities(value) {
        this._severities = value;
    }
    resetSeverities() {
        this._severities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get severitiesInput() {
        return this._severities;
    }
    get withOptional() {
        return this.getBooleanAttribute('with_optional');
    }
    set withOptional(value) {
        this._withOptional = value;
    }
    resetWithOptional() {
        this._withOptional = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get withOptionalInput() {
        return this._withOptional;
    }
    get withUpdate() {
        return this.getBooleanAttribute('with_update');
    }
    set withUpdate(value) {
        this._withUpdate = value;
    }
    resetWithUpdate() {
        this._withUpdate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get withUpdateInput() {
        return this._withUpdate;
    }
}
exports.OsConfigPatchDeploymentPatchConfigZypperOutputReference = OsConfigPatchDeploymentPatchConfigZypperOutputReference;
_u = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigZypperOutputReference[_u] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigZypperOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentPatchConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mig_instances_allowed: cdktf.booleanToTerraform(struct.migInstancesAllowed),
        reboot_config: cdktf.stringToTerraform(struct.rebootConfig),
        apt: osConfigPatchDeploymentPatchConfigAptToTerraform(struct.apt),
        goo: osConfigPatchDeploymentPatchConfigGooToTerraform(struct.goo),
        post_step: osConfigPatchDeploymentPatchConfigPostStepToTerraform(struct.postStep),
        pre_step: osConfigPatchDeploymentPatchConfigPreStepToTerraform(struct.preStep),
        windows_update: osConfigPatchDeploymentPatchConfigWindowsUpdateToTerraform(struct.windowsUpdate),
        yum: osConfigPatchDeploymentPatchConfigYumToTerraform(struct.yum),
        zypper: osConfigPatchDeploymentPatchConfigZypperToTerraform(struct.zypper),
    };
}
exports.osConfigPatchDeploymentPatchConfigToTerraform = osConfigPatchDeploymentPatchConfigToTerraform;
class OsConfigPatchDeploymentPatchConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // apt - computed: false, optional: true, required: false
        this._apt = new OsConfigPatchDeploymentPatchConfigAptOutputReference(this, "apt");
        // goo - computed: false, optional: true, required: false
        this._goo = new OsConfigPatchDeploymentPatchConfigGooOutputReference(this, "goo");
        // post_step - computed: false, optional: true, required: false
        this._postStep = new OsConfigPatchDeploymentPatchConfigPostStepOutputReference(this, "post_step");
        // pre_step - computed: false, optional: true, required: false
        this._preStep = new OsConfigPatchDeploymentPatchConfigPreStepOutputReference(this, "pre_step");
        // windows_update - computed: false, optional: true, required: false
        this._windowsUpdate = new OsConfigPatchDeploymentPatchConfigWindowsUpdateOutputReference(this, "windows_update");
        // yum - computed: false, optional: true, required: false
        this._yum = new OsConfigPatchDeploymentPatchConfigYumOutputReference(this, "yum");
        // zypper - computed: false, optional: true, required: false
        this._zypper = new OsConfigPatchDeploymentPatchConfigZypperOutputReference(this, "zypper");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._migInstancesAllowed !== undefined) {
            hasAnyValues = true;
            internalValueResult.migInstancesAllowed = this._migInstancesAllowed;
        }
        if (this._rebootConfig !== undefined) {
            hasAnyValues = true;
            internalValueResult.rebootConfig = this._rebootConfig;
        }
        if (this._apt?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.apt = this._apt?.internalValue;
        }
        if (this._goo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.goo = this._goo?.internalValue;
        }
        if (this._postStep?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postStep = this._postStep?.internalValue;
        }
        if (this._preStep?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.preStep = this._preStep?.internalValue;
        }
        if (this._windowsUpdate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowsUpdate = this._windowsUpdate?.internalValue;
        }
        if (this._yum?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.yum = this._yum?.internalValue;
        }
        if (this._zypper?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.zypper = this._zypper?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._migInstancesAllowed = undefined;
            this._rebootConfig = undefined;
            this._apt.internalValue = undefined;
            this._goo.internalValue = undefined;
            this._postStep.internalValue = undefined;
            this._preStep.internalValue = undefined;
            this._windowsUpdate.internalValue = undefined;
            this._yum.internalValue = undefined;
            this._zypper.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._migInstancesAllowed = value.migInstancesAllowed;
            this._rebootConfig = value.rebootConfig;
            this._apt.internalValue = value.apt;
            this._goo.internalValue = value.goo;
            this._postStep.internalValue = value.postStep;
            this._preStep.internalValue = value.preStep;
            this._windowsUpdate.internalValue = value.windowsUpdate;
            this._yum.internalValue = value.yum;
            this._zypper.internalValue = value.zypper;
        }
    }
    get migInstancesAllowed() {
        return this.getBooleanAttribute('mig_instances_allowed');
    }
    set migInstancesAllowed(value) {
        this._migInstancesAllowed = value;
    }
    resetMigInstancesAllowed() {
        this._migInstancesAllowed = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get migInstancesAllowedInput() {
        return this._migInstancesAllowed;
    }
    get rebootConfig() {
        return this.getStringAttribute('reboot_config');
    }
    set rebootConfig(value) {
        this._rebootConfig = value;
    }
    resetRebootConfig() {
        this._rebootConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rebootConfigInput() {
        return this._rebootConfig;
    }
    get apt() {
        return this._apt;
    }
    putApt(value) {
        this._apt.internalValue = value;
    }
    resetApt() {
        this._apt.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aptInput() {
        return this._apt.internalValue;
    }
    get goo() {
        return this._goo;
    }
    putGoo(value) {
        this._goo.internalValue = value;
    }
    resetGoo() {
        this._goo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gooInput() {
        return this._goo.internalValue;
    }
    get postStep() {
        return this._postStep;
    }
    putPostStep(value) {
        this._postStep.internalValue = value;
    }
    resetPostStep() {
        this._postStep.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postStepInput() {
        return this._postStep.internalValue;
    }
    get preStep() {
        return this._preStep;
    }
    putPreStep(value) {
        this._preStep.internalValue = value;
    }
    resetPreStep() {
        this._preStep.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preStepInput() {
        return this._preStep.internalValue;
    }
    get windowsUpdate() {
        return this._windowsUpdate;
    }
    putWindowsUpdate(value) {
        this._windowsUpdate.internalValue = value;
    }
    resetWindowsUpdate() {
        this._windowsUpdate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowsUpdateInput() {
        return this._windowsUpdate.internalValue;
    }
    get yum() {
        return this._yum;
    }
    putYum(value) {
        this._yum.internalValue = value;
    }
    resetYum() {
        this._yum.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yumInput() {
        return this._yum.internalValue;
    }
    get zypper() {
        return this._zypper;
    }
    putZypper(value) {
        this._zypper.internalValue = value;
    }
    resetZypper() {
        this._zypper.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zypperInput() {
        return this._zypper.internalValue;
    }
}
exports.OsConfigPatchDeploymentPatchConfigOutputReference = OsConfigPatchDeploymentPatchConfigOutputReference;
_v = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentPatchConfigOutputReference[_v] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentPatchConfigOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day_of_week: cdktf.stringToTerraform(struct.dayOfWeek),
        week_ordinal: cdktf.numberToTerraform(struct.weekOrdinal),
    };
}
exports.osConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthToTerraform = osConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthToTerraform;
class OsConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dayOfWeek !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfWeek = this._dayOfWeek;
        }
        if (this._weekOrdinal !== undefined) {
            hasAnyValues = true;
            internalValueResult.weekOrdinal = this._weekOrdinal;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dayOfWeek = undefined;
            this._weekOrdinal = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dayOfWeek = value.dayOfWeek;
            this._weekOrdinal = value.weekOrdinal;
        }
    }
    get dayOfWeek() {
        return this.getStringAttribute('day_of_week');
    }
    set dayOfWeek(value) {
        this._dayOfWeek = value;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekInput() {
        return this._dayOfWeek;
    }
    get weekOrdinal() {
        return this.getNumberAttribute('week_ordinal');
    }
    set weekOrdinal(value) {
        this._weekOrdinal = value;
    }
    // Temporarily expose input value. Use with caution.
    get weekOrdinalInput() {
        return this._weekOrdinal;
    }
}
exports.OsConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthOutputReference = OsConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthOutputReference;
_w = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthOutputReference[_w] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentRecurringScheduleMonthlyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        month_day: cdktf.numberToTerraform(struct.monthDay),
        week_day_of_month: osConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthToTerraform(struct.weekDayOfMonth),
    };
}
exports.osConfigPatchDeploymentRecurringScheduleMonthlyToTerraform = osConfigPatchDeploymentRecurringScheduleMonthlyToTerraform;
class OsConfigPatchDeploymentRecurringScheduleMonthlyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // week_day_of_month - computed: false, optional: true, required: false
        this._weekDayOfMonth = new OsConfigPatchDeploymentRecurringScheduleMonthlyWeekDayOfMonthOutputReference(this, "week_day_of_month");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._monthDay !== undefined) {
            hasAnyValues = true;
            internalValueResult.monthDay = this._monthDay;
        }
        if (this._weekDayOfMonth?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.weekDayOfMonth = this._weekDayOfMonth?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._monthDay = undefined;
            this._weekDayOfMonth.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._monthDay = value.monthDay;
            this._weekDayOfMonth.internalValue = value.weekDayOfMonth;
        }
    }
    get monthDay() {
        return this.getNumberAttribute('month_day');
    }
    set monthDay(value) {
        this._monthDay = value;
    }
    resetMonthDay() {
        this._monthDay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthDayInput() {
        return this._monthDay;
    }
    get weekDayOfMonth() {
        return this._weekDayOfMonth;
    }
    putWeekDayOfMonth(value) {
        this._weekDayOfMonth.internalValue = value;
    }
    resetWeekDayOfMonth() {
        this._weekDayOfMonth.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weekDayOfMonthInput() {
        return this._weekDayOfMonth.internalValue;
    }
}
exports.OsConfigPatchDeploymentRecurringScheduleMonthlyOutputReference = OsConfigPatchDeploymentRecurringScheduleMonthlyOutputReference;
_x = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentRecurringScheduleMonthlyOutputReference[_x] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentRecurringScheduleMonthlyOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentRecurringScheduleTimeOfDayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.osConfigPatchDeploymentRecurringScheduleTimeOfDayToTerraform = osConfigPatchDeploymentRecurringScheduleTimeOfDayToTerraform;
class OsConfigPatchDeploymentRecurringScheduleTimeOfDayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.OsConfigPatchDeploymentRecurringScheduleTimeOfDayOutputReference = OsConfigPatchDeploymentRecurringScheduleTimeOfDayOutputReference;
_y = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentRecurringScheduleTimeOfDayOutputReference[_y] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentRecurringScheduleTimeOfDayOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentRecurringScheduleTimeZoneToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.osConfigPatchDeploymentRecurringScheduleTimeZoneToTerraform = osConfigPatchDeploymentRecurringScheduleTimeZoneToTerraform;
class OsConfigPatchDeploymentRecurringScheduleTimeZoneOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._id = undefined;
            this._version = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._id = value.id;
            this._version = value.version;
        }
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
}
exports.OsConfigPatchDeploymentRecurringScheduleTimeZoneOutputReference = OsConfigPatchDeploymentRecurringScheduleTimeZoneOutputReference;
_z = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentRecurringScheduleTimeZoneOutputReference[_z] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentRecurringScheduleTimeZoneOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentRecurringScheduleWeeklyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day_of_week: cdktf.stringToTerraform(struct.dayOfWeek),
    };
}
exports.osConfigPatchDeploymentRecurringScheduleWeeklyToTerraform = osConfigPatchDeploymentRecurringScheduleWeeklyToTerraform;
class OsConfigPatchDeploymentRecurringScheduleWeeklyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dayOfWeek !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfWeek = this._dayOfWeek;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dayOfWeek = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dayOfWeek = value.dayOfWeek;
        }
    }
    get dayOfWeek() {
        return this.getStringAttribute('day_of_week');
    }
    set dayOfWeek(value) {
        this._dayOfWeek = value;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekInput() {
        return this._dayOfWeek;
    }
}
exports.OsConfigPatchDeploymentRecurringScheduleWeeklyOutputReference = OsConfigPatchDeploymentRecurringScheduleWeeklyOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentRecurringScheduleWeeklyOutputReference[_0] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentRecurringScheduleWeeklyOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentRecurringScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        end_time: cdktf.stringToTerraform(struct.endTime),
        start_time: cdktf.stringToTerraform(struct.startTime),
        monthly: osConfigPatchDeploymentRecurringScheduleMonthlyToTerraform(struct.monthly),
        time_of_day: osConfigPatchDeploymentRecurringScheduleTimeOfDayToTerraform(struct.timeOfDay),
        time_zone: osConfigPatchDeploymentRecurringScheduleTimeZoneToTerraform(struct.timeZone),
        weekly: osConfigPatchDeploymentRecurringScheduleWeeklyToTerraform(struct.weekly),
    };
}
exports.osConfigPatchDeploymentRecurringScheduleToTerraform = osConfigPatchDeploymentRecurringScheduleToTerraform;
class OsConfigPatchDeploymentRecurringScheduleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // monthly - computed: false, optional: true, required: false
        this._monthly = new OsConfigPatchDeploymentRecurringScheduleMonthlyOutputReference(this, "monthly");
        // time_of_day - computed: false, optional: false, required: true
        this._timeOfDay = new OsConfigPatchDeploymentRecurringScheduleTimeOfDayOutputReference(this, "time_of_day");
        // time_zone - computed: false, optional: false, required: true
        this._timeZone = new OsConfigPatchDeploymentRecurringScheduleTimeZoneOutputReference(this, "time_zone");
        // weekly - computed: false, optional: true, required: false
        this._weekly = new OsConfigPatchDeploymentRecurringScheduleWeeklyOutputReference(this, "weekly");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.endTime = this._endTime;
        }
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        if (this._monthly?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.monthly = this._monthly?.internalValue;
        }
        if (this._timeOfDay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeOfDay = this._timeOfDay?.internalValue;
        }
        if (this._timeZone?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeZone = this._timeZone?.internalValue;
        }
        if (this._weekly?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.weekly = this._weekly?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._endTime = undefined;
            this._startTime = undefined;
            this._monthly.internalValue = undefined;
            this._timeOfDay.internalValue = undefined;
            this._timeZone.internalValue = undefined;
            this._weekly.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._endTime = value.endTime;
            this._startTime = value.startTime;
            this._monthly.internalValue = value.monthly;
            this._timeOfDay.internalValue = value.timeOfDay;
            this._timeZone.internalValue = value.timeZone;
            this._weekly.internalValue = value.weekly;
        }
    }
    get endTime() {
        return this.getStringAttribute('end_time');
    }
    set endTime(value) {
        this._endTime = value;
    }
    resetEndTime() {
        this._endTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endTimeInput() {
        return this._endTime;
    }
    // last_execute_time - computed: true, optional: false, required: false
    get lastExecuteTime() {
        return this.getStringAttribute('last_execute_time');
    }
    // next_execute_time - computed: true, optional: false, required: false
    get nextExecuteTime() {
        return this.getStringAttribute('next_execute_time');
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    resetStartTime() {
        this._startTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
    get monthly() {
        return this._monthly;
    }
    putMonthly(value) {
        this._monthly.internalValue = value;
    }
    resetMonthly() {
        this._monthly.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthlyInput() {
        return this._monthly.internalValue;
    }
    get timeOfDay() {
        return this._timeOfDay;
    }
    putTimeOfDay(value) {
        this._timeOfDay.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeOfDayInput() {
        return this._timeOfDay.internalValue;
    }
    get timeZone() {
        return this._timeZone;
    }
    putTimeZone(value) {
        this._timeZone.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeZoneInput() {
        return this._timeZone.internalValue;
    }
    get weekly() {
        return this._weekly;
    }
    putWeekly(value) {
        this._weekly.internalValue = value;
    }
    resetWeekly() {
        this._weekly.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weeklyInput() {
        return this._weekly.internalValue;
    }
}
exports.OsConfigPatchDeploymentRecurringScheduleOutputReference = OsConfigPatchDeploymentRecurringScheduleOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentRecurringScheduleOutputReference[_1] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentRecurringScheduleOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentRolloutDisruptionBudgetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        fixed: cdktf.numberToTerraform(struct.fixed),
        percentage: cdktf.numberToTerraform(struct.percentage),
    };
}
exports.osConfigPatchDeploymentRolloutDisruptionBudgetToTerraform = osConfigPatchDeploymentRolloutDisruptionBudgetToTerraform;
class OsConfigPatchDeploymentRolloutDisruptionBudgetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fixed !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixed = this._fixed;
        }
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fixed = undefined;
            this._percentage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fixed = value.fixed;
            this._percentage = value.percentage;
        }
    }
    get fixed() {
        return this.getNumberAttribute('fixed');
    }
    set fixed(value) {
        this._fixed = value;
    }
    resetFixed() {
        this._fixed = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedInput() {
        return this._fixed;
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    resetPercentage() {
        this._percentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
}
exports.OsConfigPatchDeploymentRolloutDisruptionBudgetOutputReference = OsConfigPatchDeploymentRolloutDisruptionBudgetOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentRolloutDisruptionBudgetOutputReference[_2] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentRolloutDisruptionBudgetOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentRolloutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
        disruption_budget: osConfigPatchDeploymentRolloutDisruptionBudgetToTerraform(struct.disruptionBudget),
    };
}
exports.osConfigPatchDeploymentRolloutToTerraform = osConfigPatchDeploymentRolloutToTerraform;
class OsConfigPatchDeploymentRolloutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disruption_budget - computed: false, optional: false, required: true
        this._disruptionBudget = new OsConfigPatchDeploymentRolloutDisruptionBudgetOutputReference(this, "disruption_budget");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._disruptionBudget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disruptionBudget = this._disruptionBudget?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mode = undefined;
            this._disruptionBudget.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mode = value.mode;
            this._disruptionBudget.internalValue = value.disruptionBudget;
        }
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get disruptionBudget() {
        return this._disruptionBudget;
    }
    putDisruptionBudget(value) {
        this._disruptionBudget.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get disruptionBudgetInput() {
        return this._disruptionBudget.internalValue;
    }
}
exports.OsConfigPatchDeploymentRolloutOutputReference = OsConfigPatchDeploymentRolloutOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentRolloutOutputReference[_3] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentRolloutOutputReference", version: "5.0.1" };
function osConfigPatchDeploymentTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.osConfigPatchDeploymentTimeoutsToTerraform = osConfigPatchDeploymentTimeoutsToTerraform;
class OsConfigPatchDeploymentTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.OsConfigPatchDeploymentTimeoutsOutputReference = OsConfigPatchDeploymentTimeoutsOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeploymentTimeoutsOutputReference[_4] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeploymentTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/os_config_patch_deployment google_os_config_patch_deployment}
*/
class OsConfigPatchDeployment extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/os_config_patch_deployment google_os_config_patch_deployment} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options OsConfigPatchDeploymentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_os_config_patch_deployment',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // instance_filter - computed: false, optional: false, required: true
        this._instanceFilter = new OsConfigPatchDeploymentInstanceFilterOutputReference(this, "instance_filter");
        // one_time_schedule - computed: false, optional: true, required: false
        this._oneTimeSchedule = new OsConfigPatchDeploymentOneTimeScheduleOutputReference(this, "one_time_schedule");
        // patch_config - computed: false, optional: true, required: false
        this._patchConfig = new OsConfigPatchDeploymentPatchConfigOutputReference(this, "patch_config");
        // recurring_schedule - computed: false, optional: true, required: false
        this._recurringSchedule = new OsConfigPatchDeploymentRecurringScheduleOutputReference(this, "recurring_schedule");
        // rollout - computed: false, optional: true, required: false
        this._rollout = new OsConfigPatchDeploymentRolloutOutputReference(this, "rollout");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new OsConfigPatchDeploymentTimeoutsOutputReference(this, "timeouts");
        this._description = config.description;
        this._duration = config.duration;
        this._id = config.id;
        this._patchDeploymentId = config.patchDeploymentId;
        this._project = config.project;
        this._instanceFilter.internalValue = config.instanceFilter;
        this._oneTimeSchedule.internalValue = config.oneTimeSchedule;
        this._patchConfig.internalValue = config.patchConfig;
        this._recurringSchedule.internalValue = config.recurringSchedule;
        this._rollout.internalValue = config.rollout;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get duration() {
        return this.getStringAttribute('duration');
    }
    set duration(value) {
        this._duration = value;
    }
    resetDuration() {
        this._duration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get durationInput() {
        return this._duration;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // last_execute_time - computed: true, optional: false, required: false
    get lastExecuteTime() {
        return this.getStringAttribute('last_execute_time');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get patchDeploymentId() {
        return this.getStringAttribute('patch_deployment_id');
    }
    set patchDeploymentId(value) {
        this._patchDeploymentId = value;
    }
    // Temporarily expose input value. Use with caution.
    get patchDeploymentIdInput() {
        return this._patchDeploymentId;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get instanceFilter() {
        return this._instanceFilter;
    }
    putInstanceFilter(value) {
        this._instanceFilter.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceFilterInput() {
        return this._instanceFilter.internalValue;
    }
    get oneTimeSchedule() {
        return this._oneTimeSchedule;
    }
    putOneTimeSchedule(value) {
        this._oneTimeSchedule.internalValue = value;
    }
    resetOneTimeSchedule() {
        this._oneTimeSchedule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oneTimeScheduleInput() {
        return this._oneTimeSchedule.internalValue;
    }
    get patchConfig() {
        return this._patchConfig;
    }
    putPatchConfig(value) {
        this._patchConfig.internalValue = value;
    }
    resetPatchConfig() {
        this._patchConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patchConfigInput() {
        return this._patchConfig.internalValue;
    }
    get recurringSchedule() {
        return this._recurringSchedule;
    }
    putRecurringSchedule(value) {
        this._recurringSchedule.internalValue = value;
    }
    resetRecurringSchedule() {
        this._recurringSchedule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recurringScheduleInput() {
        return this._recurringSchedule.internalValue;
    }
    get rollout() {
        return this._rollout;
    }
    putRollout(value) {
        this._rollout.internalValue = value;
    }
    resetRollout() {
        this._rollout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rolloutInput() {
        return this._rollout.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            duration: cdktf.stringToTerraform(this._duration),
            id: cdktf.stringToTerraform(this._id),
            patch_deployment_id: cdktf.stringToTerraform(this._patchDeploymentId),
            project: cdktf.stringToTerraform(this._project),
            instance_filter: osConfigPatchDeploymentInstanceFilterToTerraform(this._instanceFilter.internalValue),
            one_time_schedule: osConfigPatchDeploymentOneTimeScheduleToTerraform(this._oneTimeSchedule.internalValue),
            patch_config: osConfigPatchDeploymentPatchConfigToTerraform(this._patchConfig.internalValue),
            recurring_schedule: osConfigPatchDeploymentRecurringScheduleToTerraform(this._recurringSchedule.internalValue),
            rollout: osConfigPatchDeploymentRolloutToTerraform(this._rollout.internalValue),
            timeouts: osConfigPatchDeploymentTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.OsConfigPatchDeployment = OsConfigPatchDeployment;
_5 = JSII_RTTI_SYMBOL_1;
OsConfigPatchDeployment[_5] = { fqn: "@cdktf/provider-google.osConfigPatchDeployment.OsConfigPatchDeployment", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
OsConfigPatchDeployment.tfResourceType = "google_os_config_patch_deployment";
//# sourceMappingURL=data:application/json;base64,