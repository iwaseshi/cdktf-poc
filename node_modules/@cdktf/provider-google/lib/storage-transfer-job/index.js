"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageTransferJob = exports.StorageTransferJobTransferSpecOutputReference = exports.storageTransferJobTransferSpecToTerraform = exports.StorageTransferJobTransferSpecTransferOptionsOutputReference = exports.storageTransferJobTransferSpecTransferOptionsToTerraform = exports.StorageTransferJobTransferSpecPosixDataSourceOutputReference = exports.storageTransferJobTransferSpecPosixDataSourceToTerraform = exports.StorageTransferJobTransferSpecPosixDataSinkOutputReference = exports.storageTransferJobTransferSpecPosixDataSinkToTerraform = exports.StorageTransferJobTransferSpecObjectConditionsOutputReference = exports.storageTransferJobTransferSpecObjectConditionsToTerraform = exports.StorageTransferJobTransferSpecHttpDataSourceOutputReference = exports.storageTransferJobTransferSpecHttpDataSourceToTerraform = exports.StorageTransferJobTransferSpecGcsDataSourceOutputReference = exports.storageTransferJobTransferSpecGcsDataSourceToTerraform = exports.StorageTransferJobTransferSpecGcsDataSinkOutputReference = exports.storageTransferJobTransferSpecGcsDataSinkToTerraform = exports.StorageTransferJobTransferSpecAzureBlobStorageDataSourceOutputReference = exports.storageTransferJobTransferSpecAzureBlobStorageDataSourceToTerraform = exports.StorageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsOutputReference = exports.storageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsToTerraform = exports.StorageTransferJobTransferSpecAwsS3DataSourceOutputReference = exports.storageTransferJobTransferSpecAwsS3DataSourceToTerraform = exports.StorageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyOutputReference = exports.storageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyToTerraform = exports.StorageTransferJobScheduleOutputReference = exports.storageTransferJobScheduleToTerraform = exports.StorageTransferJobScheduleStartTimeOfDayOutputReference = exports.storageTransferJobScheduleStartTimeOfDayToTerraform = exports.StorageTransferJobScheduleScheduleStartDateOutputReference = exports.storageTransferJobScheduleScheduleStartDateToTerraform = exports.StorageTransferJobScheduleScheduleEndDateOutputReference = exports.storageTransferJobScheduleScheduleEndDateToTerraform = exports.StorageTransferJobNotificationConfigOutputReference = exports.storageTransferJobNotificationConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function storageTransferJobNotificationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.eventTypes),
        payload_format: cdktf.stringToTerraform(struct.payloadFormat),
        pubsub_topic: cdktf.stringToTerraform(struct.pubsubTopic),
    };
}
exports.storageTransferJobNotificationConfigToTerraform = storageTransferJobNotificationConfigToTerraform;
class StorageTransferJobNotificationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventTypes = this._eventTypes;
        }
        if (this._payloadFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.payloadFormat = this._payloadFormat;
        }
        if (this._pubsubTopic !== undefined) {
            hasAnyValues = true;
            internalValueResult.pubsubTopic = this._pubsubTopic;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._eventTypes = undefined;
            this._payloadFormat = undefined;
            this._pubsubTopic = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._eventTypes = value.eventTypes;
            this._payloadFormat = value.payloadFormat;
            this._pubsubTopic = value.pubsubTopic;
        }
    }
    get eventTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('event_types'));
    }
    set eventTypes(value) {
        this._eventTypes = value;
    }
    resetEventTypes() {
        this._eventTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventTypesInput() {
        return this._eventTypes;
    }
    get payloadFormat() {
        return this.getStringAttribute('payload_format');
    }
    set payloadFormat(value) {
        this._payloadFormat = value;
    }
    // Temporarily expose input value. Use with caution.
    get payloadFormatInput() {
        return this._payloadFormat;
    }
    get pubsubTopic() {
        return this.getStringAttribute('pubsub_topic');
    }
    set pubsubTopic(value) {
        this._pubsubTopic = value;
    }
    // Temporarily expose input value. Use with caution.
    get pubsubTopicInput() {
        return this._pubsubTopic;
    }
}
exports.StorageTransferJobNotificationConfigOutputReference = StorageTransferJobNotificationConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
StorageTransferJobNotificationConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobNotificationConfigOutputReference", version: "5.0.1" };
function storageTransferJobScheduleScheduleEndDateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        month: cdktf.numberToTerraform(struct.month),
        year: cdktf.numberToTerraform(struct.year),
    };
}
exports.storageTransferJobScheduleScheduleEndDateToTerraform = storageTransferJobScheduleScheduleEndDateToTerraform;
class StorageTransferJobScheduleScheduleEndDateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._month !== undefined) {
            hasAnyValues = true;
            internalValueResult.month = this._month;
        }
        if (this._year !== undefined) {
            hasAnyValues = true;
            internalValueResult.year = this._year;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._month = undefined;
            this._year = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._month = value.month;
            this._year = value.year;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get month() {
        return this.getNumberAttribute('month');
    }
    set month(value) {
        this._month = value;
    }
    // Temporarily expose input value. Use with caution.
    get monthInput() {
        return this._month;
    }
    get year() {
        return this.getNumberAttribute('year');
    }
    set year(value) {
        this._year = value;
    }
    // Temporarily expose input value. Use with caution.
    get yearInput() {
        return this._year;
    }
}
exports.StorageTransferJobScheduleScheduleEndDateOutputReference = StorageTransferJobScheduleScheduleEndDateOutputReference;
_b = JSII_RTTI_SYMBOL_1;
StorageTransferJobScheduleScheduleEndDateOutputReference[_b] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobScheduleScheduleEndDateOutputReference", version: "5.0.1" };
function storageTransferJobScheduleScheduleStartDateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        month: cdktf.numberToTerraform(struct.month),
        year: cdktf.numberToTerraform(struct.year),
    };
}
exports.storageTransferJobScheduleScheduleStartDateToTerraform = storageTransferJobScheduleScheduleStartDateToTerraform;
class StorageTransferJobScheduleScheduleStartDateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._month !== undefined) {
            hasAnyValues = true;
            internalValueResult.month = this._month;
        }
        if (this._year !== undefined) {
            hasAnyValues = true;
            internalValueResult.year = this._year;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._month = undefined;
            this._year = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._month = value.month;
            this._year = value.year;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get month() {
        return this.getNumberAttribute('month');
    }
    set month(value) {
        this._month = value;
    }
    // Temporarily expose input value. Use with caution.
    get monthInput() {
        return this._month;
    }
    get year() {
        return this.getNumberAttribute('year');
    }
    set year(value) {
        this._year = value;
    }
    // Temporarily expose input value. Use with caution.
    get yearInput() {
        return this._year;
    }
}
exports.StorageTransferJobScheduleScheduleStartDateOutputReference = StorageTransferJobScheduleScheduleStartDateOutputReference;
_c = JSII_RTTI_SYMBOL_1;
StorageTransferJobScheduleScheduleStartDateOutputReference[_c] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobScheduleScheduleStartDateOutputReference", version: "5.0.1" };
function storageTransferJobScheduleStartTimeOfDayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.storageTransferJobScheduleStartTimeOfDayToTerraform = storageTransferJobScheduleStartTimeOfDayToTerraform;
class StorageTransferJobScheduleStartTimeOfDayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.StorageTransferJobScheduleStartTimeOfDayOutputReference = StorageTransferJobScheduleStartTimeOfDayOutputReference;
_d = JSII_RTTI_SYMBOL_1;
StorageTransferJobScheduleStartTimeOfDayOutputReference[_d] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobScheduleStartTimeOfDayOutputReference", version: "5.0.1" };
function storageTransferJobScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repeat_interval: cdktf.stringToTerraform(struct.repeatInterval),
        schedule_end_date: storageTransferJobScheduleScheduleEndDateToTerraform(struct.scheduleEndDate),
        schedule_start_date: storageTransferJobScheduleScheduleStartDateToTerraform(struct.scheduleStartDate),
        start_time_of_day: storageTransferJobScheduleStartTimeOfDayToTerraform(struct.startTimeOfDay),
    };
}
exports.storageTransferJobScheduleToTerraform = storageTransferJobScheduleToTerraform;
class StorageTransferJobScheduleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // schedule_end_date - computed: false, optional: true, required: false
        this._scheduleEndDate = new StorageTransferJobScheduleScheduleEndDateOutputReference(this, "schedule_end_date");
        // schedule_start_date - computed: false, optional: false, required: true
        this._scheduleStartDate = new StorageTransferJobScheduleScheduleStartDateOutputReference(this, "schedule_start_date");
        // start_time_of_day - computed: false, optional: true, required: false
        this._startTimeOfDay = new StorageTransferJobScheduleStartTimeOfDayOutputReference(this, "start_time_of_day");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repeatInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.repeatInterval = this._repeatInterval;
        }
        if (this._scheduleEndDate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduleEndDate = this._scheduleEndDate?.internalValue;
        }
        if (this._scheduleStartDate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduleStartDate = this._scheduleStartDate?.internalValue;
        }
        if (this._startTimeOfDay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTimeOfDay = this._startTimeOfDay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repeatInterval = undefined;
            this._scheduleEndDate.internalValue = undefined;
            this._scheduleStartDate.internalValue = undefined;
            this._startTimeOfDay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repeatInterval = value.repeatInterval;
            this._scheduleEndDate.internalValue = value.scheduleEndDate;
            this._scheduleStartDate.internalValue = value.scheduleStartDate;
            this._startTimeOfDay.internalValue = value.startTimeOfDay;
        }
    }
    get repeatInterval() {
        return this.getStringAttribute('repeat_interval');
    }
    set repeatInterval(value) {
        this._repeatInterval = value;
    }
    resetRepeatInterval() {
        this._repeatInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repeatIntervalInput() {
        return this._repeatInterval;
    }
    get scheduleEndDate() {
        return this._scheduleEndDate;
    }
    putScheduleEndDate(value) {
        this._scheduleEndDate.internalValue = value;
    }
    resetScheduleEndDate() {
        this._scheduleEndDate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleEndDateInput() {
        return this._scheduleEndDate.internalValue;
    }
    get scheduleStartDate() {
        return this._scheduleStartDate;
    }
    putScheduleStartDate(value) {
        this._scheduleStartDate.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleStartDateInput() {
        return this._scheduleStartDate.internalValue;
    }
    get startTimeOfDay() {
        return this._startTimeOfDay;
    }
    putStartTimeOfDay(value) {
        this._startTimeOfDay.internalValue = value;
    }
    resetStartTimeOfDay() {
        this._startTimeOfDay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeOfDayInput() {
        return this._startTimeOfDay.internalValue;
    }
}
exports.StorageTransferJobScheduleOutputReference = StorageTransferJobScheduleOutputReference;
_e = JSII_RTTI_SYMBOL_1;
StorageTransferJobScheduleOutputReference[_e] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobScheduleOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_key_id: cdktf.stringToTerraform(struct.accessKeyId),
        secret_access_key: cdktf.stringToTerraform(struct.secretAccessKey),
    };
}
exports.storageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyToTerraform = storageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyToTerraform;
class StorageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessKeyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessKeyId = this._accessKeyId;
        }
        if (this._secretAccessKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretAccessKey = this._secretAccessKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessKeyId = undefined;
            this._secretAccessKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessKeyId = value.accessKeyId;
            this._secretAccessKey = value.secretAccessKey;
        }
    }
    get accessKeyId() {
        return this.getStringAttribute('access_key_id');
    }
    set accessKeyId(value) {
        this._accessKeyId = value;
    }
    // Temporarily expose input value. Use with caution.
    get accessKeyIdInput() {
        return this._accessKeyId;
    }
    get secretAccessKey() {
        return this.getStringAttribute('secret_access_key');
    }
    set secretAccessKey(value) {
        this._secretAccessKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretAccessKeyInput() {
        return this._secretAccessKey;
    }
}
exports.StorageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyOutputReference = StorageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyOutputReference;
_f = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyOutputReference[_f] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecAwsS3DataSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        aws_access_key: storageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyToTerraform(struct.awsAccessKey),
    };
}
exports.storageTransferJobTransferSpecAwsS3DataSourceToTerraform = storageTransferJobTransferSpecAwsS3DataSourceToTerraform;
class StorageTransferJobTransferSpecAwsS3DataSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aws_access_key - computed: false, optional: true, required: false
        this._awsAccessKey = new StorageTransferJobTransferSpecAwsS3DataSourceAwsAccessKeyOutputReference(this, "aws_access_key");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._awsAccessKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsAccessKey = this._awsAccessKey?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._roleArn = undefined;
            this._awsAccessKey.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._roleArn = value.roleArn;
            this._awsAccessKey.internalValue = value.awsAccessKey;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    resetRoleArn() {
        this._roleArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get awsAccessKey() {
        return this._awsAccessKey;
    }
    putAwsAccessKey(value) {
        this._awsAccessKey.internalValue = value;
    }
    resetAwsAccessKey() {
        this._awsAccessKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsAccessKeyInput() {
        return this._awsAccessKey.internalValue;
    }
}
exports.StorageTransferJobTransferSpecAwsS3DataSourceOutputReference = StorageTransferJobTransferSpecAwsS3DataSourceOutputReference;
_g = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecAwsS3DataSourceOutputReference[_g] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecAwsS3DataSourceOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sas_token: cdktf.stringToTerraform(struct.sasToken),
    };
}
exports.storageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsToTerraform = storageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsToTerraform;
class StorageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sasToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.sasToken = this._sasToken;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sasToken = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sasToken = value.sasToken;
        }
    }
    get sasToken() {
        return this.getStringAttribute('sas_token');
    }
    set sasToken(value) {
        this._sasToken = value;
    }
    // Temporarily expose input value. Use with caution.
    get sasTokenInput() {
        return this._sasToken;
    }
}
exports.StorageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsOutputReference = StorageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsOutputReference[_h] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecAzureBlobStorageDataSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        container: cdktf.stringToTerraform(struct.container),
        path: cdktf.stringToTerraform(struct.path),
        storage_account: cdktf.stringToTerraform(struct.storageAccount),
        azure_credentials: storageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsToTerraform(struct.azureCredentials),
    };
}
exports.storageTransferJobTransferSpecAzureBlobStorageDataSourceToTerraform = storageTransferJobTransferSpecAzureBlobStorageDataSourceToTerraform;
class StorageTransferJobTransferSpecAzureBlobStorageDataSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // azure_credentials - computed: false, optional: false, required: true
        this._azureCredentials = new StorageTransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsOutputReference(this, "azure_credentials");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._container !== undefined) {
            hasAnyValues = true;
            internalValueResult.container = this._container;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._storageAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageAccount = this._storageAccount;
        }
        if (this._azureCredentials?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.azureCredentials = this._azureCredentials?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._container = undefined;
            this._path = undefined;
            this._storageAccount = undefined;
            this._azureCredentials.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._container = value.container;
            this._path = value.path;
            this._storageAccount = value.storageAccount;
            this._azureCredentials.internalValue = value.azureCredentials;
        }
    }
    get container() {
        return this.getStringAttribute('container');
    }
    set container(value) {
        this._container = value;
    }
    // Temporarily expose input value. Use with caution.
    get containerInput() {
        return this._container;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get storageAccount() {
        return this.getStringAttribute('storage_account');
    }
    set storageAccount(value) {
        this._storageAccount = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageAccountInput() {
        return this._storageAccount;
    }
    get azureCredentials() {
        return this._azureCredentials;
    }
    putAzureCredentials(value) {
        this._azureCredentials.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get azureCredentialsInput() {
        return this._azureCredentials.internalValue;
    }
}
exports.StorageTransferJobTransferSpecAzureBlobStorageDataSourceOutputReference = StorageTransferJobTransferSpecAzureBlobStorageDataSourceOutputReference;
_j = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecAzureBlobStorageDataSourceOutputReference[_j] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecAzureBlobStorageDataSourceOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecGcsDataSinkToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.storageTransferJobTransferSpecGcsDataSinkToTerraform = storageTransferJobTransferSpecGcsDataSinkToTerraform;
class StorageTransferJobTransferSpecGcsDataSinkOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._path = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._path = value.path;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.StorageTransferJobTransferSpecGcsDataSinkOutputReference = StorageTransferJobTransferSpecGcsDataSinkOutputReference;
_k = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecGcsDataSinkOutputReference[_k] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecGcsDataSinkOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecGcsDataSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.storageTransferJobTransferSpecGcsDataSourceToTerraform = storageTransferJobTransferSpecGcsDataSourceToTerraform;
class StorageTransferJobTransferSpecGcsDataSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._path = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._path = value.path;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.StorageTransferJobTransferSpecGcsDataSourceOutputReference = StorageTransferJobTransferSpecGcsDataSourceOutputReference;
_l = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecGcsDataSourceOutputReference[_l] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecGcsDataSourceOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecHttpDataSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        list_url: cdktf.stringToTerraform(struct.listUrl),
    };
}
exports.storageTransferJobTransferSpecHttpDataSourceToTerraform = storageTransferJobTransferSpecHttpDataSourceToTerraform;
class StorageTransferJobTransferSpecHttpDataSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._listUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.listUrl = this._listUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._listUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._listUrl = value.listUrl;
        }
    }
    get listUrl() {
        return this.getStringAttribute('list_url');
    }
    set listUrl(value) {
        this._listUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get listUrlInput() {
        return this._listUrl;
    }
}
exports.StorageTransferJobTransferSpecHttpDataSourceOutputReference = StorageTransferJobTransferSpecHttpDataSourceOutputReference;
_m = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecHttpDataSourceOutputReference[_m] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecHttpDataSourceOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecObjectConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclude_prefixes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludePrefixes),
        include_prefixes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includePrefixes),
        max_time_elapsed_since_last_modification: cdktf.stringToTerraform(struct.maxTimeElapsedSinceLastModification),
        min_time_elapsed_since_last_modification: cdktf.stringToTerraform(struct.minTimeElapsedSinceLastModification),
    };
}
exports.storageTransferJobTransferSpecObjectConditionsToTerraform = storageTransferJobTransferSpecObjectConditionsToTerraform;
class StorageTransferJobTransferSpecObjectConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._excludePrefixes !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludePrefixes = this._excludePrefixes;
        }
        if (this._includePrefixes !== undefined) {
            hasAnyValues = true;
            internalValueResult.includePrefixes = this._includePrefixes;
        }
        if (this._maxTimeElapsedSinceLastModification !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxTimeElapsedSinceLastModification = this._maxTimeElapsedSinceLastModification;
        }
        if (this._minTimeElapsedSinceLastModification !== undefined) {
            hasAnyValues = true;
            internalValueResult.minTimeElapsedSinceLastModification = this._minTimeElapsedSinceLastModification;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._excludePrefixes = undefined;
            this._includePrefixes = undefined;
            this._maxTimeElapsedSinceLastModification = undefined;
            this._minTimeElapsedSinceLastModification = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._excludePrefixes = value.excludePrefixes;
            this._includePrefixes = value.includePrefixes;
            this._maxTimeElapsedSinceLastModification = value.maxTimeElapsedSinceLastModification;
            this._minTimeElapsedSinceLastModification = value.minTimeElapsedSinceLastModification;
        }
    }
    get excludePrefixes() {
        return this.getListAttribute('exclude_prefixes');
    }
    set excludePrefixes(value) {
        this._excludePrefixes = value;
    }
    resetExcludePrefixes() {
        this._excludePrefixes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludePrefixesInput() {
        return this._excludePrefixes;
    }
    get includePrefixes() {
        return this.getListAttribute('include_prefixes');
    }
    set includePrefixes(value) {
        this._includePrefixes = value;
    }
    resetIncludePrefixes() {
        this._includePrefixes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includePrefixesInput() {
        return this._includePrefixes;
    }
    get maxTimeElapsedSinceLastModification() {
        return this.getStringAttribute('max_time_elapsed_since_last_modification');
    }
    set maxTimeElapsedSinceLastModification(value) {
        this._maxTimeElapsedSinceLastModification = value;
    }
    resetMaxTimeElapsedSinceLastModification() {
        this._maxTimeElapsedSinceLastModification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxTimeElapsedSinceLastModificationInput() {
        return this._maxTimeElapsedSinceLastModification;
    }
    get minTimeElapsedSinceLastModification() {
        return this.getStringAttribute('min_time_elapsed_since_last_modification');
    }
    set minTimeElapsedSinceLastModification(value) {
        this._minTimeElapsedSinceLastModification = value;
    }
    resetMinTimeElapsedSinceLastModification() {
        this._minTimeElapsedSinceLastModification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minTimeElapsedSinceLastModificationInput() {
        return this._minTimeElapsedSinceLastModification;
    }
}
exports.StorageTransferJobTransferSpecObjectConditionsOutputReference = StorageTransferJobTransferSpecObjectConditionsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecObjectConditionsOutputReference[_o] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecObjectConditionsOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecPosixDataSinkToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        root_directory: cdktf.stringToTerraform(struct.rootDirectory),
    };
}
exports.storageTransferJobTransferSpecPosixDataSinkToTerraform = storageTransferJobTransferSpecPosixDataSinkToTerraform;
class StorageTransferJobTransferSpecPosixDataSinkOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._rootDirectory !== undefined) {
            hasAnyValues = true;
            internalValueResult.rootDirectory = this._rootDirectory;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._rootDirectory = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._rootDirectory = value.rootDirectory;
        }
    }
    get rootDirectory() {
        return this.getStringAttribute('root_directory');
    }
    set rootDirectory(value) {
        this._rootDirectory = value;
    }
    // Temporarily expose input value. Use with caution.
    get rootDirectoryInput() {
        return this._rootDirectory;
    }
}
exports.StorageTransferJobTransferSpecPosixDataSinkOutputReference = StorageTransferJobTransferSpecPosixDataSinkOutputReference;
_p = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecPosixDataSinkOutputReference[_p] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecPosixDataSinkOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecPosixDataSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        root_directory: cdktf.stringToTerraform(struct.rootDirectory),
    };
}
exports.storageTransferJobTransferSpecPosixDataSourceToTerraform = storageTransferJobTransferSpecPosixDataSourceToTerraform;
class StorageTransferJobTransferSpecPosixDataSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._rootDirectory !== undefined) {
            hasAnyValues = true;
            internalValueResult.rootDirectory = this._rootDirectory;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._rootDirectory = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._rootDirectory = value.rootDirectory;
        }
    }
    get rootDirectory() {
        return this.getStringAttribute('root_directory');
    }
    set rootDirectory(value) {
        this._rootDirectory = value;
    }
    // Temporarily expose input value. Use with caution.
    get rootDirectoryInput() {
        return this._rootDirectory;
    }
}
exports.StorageTransferJobTransferSpecPosixDataSourceOutputReference = StorageTransferJobTransferSpecPosixDataSourceOutputReference;
_q = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecPosixDataSourceOutputReference[_q] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecPosixDataSourceOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecTransferOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete_objects_from_source_after_transfer: cdktf.booleanToTerraform(struct.deleteObjectsFromSourceAfterTransfer),
        delete_objects_unique_in_sink: cdktf.booleanToTerraform(struct.deleteObjectsUniqueInSink),
        overwrite_objects_already_existing_in_sink: cdktf.booleanToTerraform(struct.overwriteObjectsAlreadyExistingInSink),
        overwrite_when: cdktf.stringToTerraform(struct.overwriteWhen),
    };
}
exports.storageTransferJobTransferSpecTransferOptionsToTerraform = storageTransferJobTransferSpecTransferOptionsToTerraform;
class StorageTransferJobTransferSpecTransferOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deleteObjectsFromSourceAfterTransfer !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteObjectsFromSourceAfterTransfer = this._deleteObjectsFromSourceAfterTransfer;
        }
        if (this._deleteObjectsUniqueInSink !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteObjectsUniqueInSink = this._deleteObjectsUniqueInSink;
        }
        if (this._overwriteObjectsAlreadyExistingInSink !== undefined) {
            hasAnyValues = true;
            internalValueResult.overwriteObjectsAlreadyExistingInSink = this._overwriteObjectsAlreadyExistingInSink;
        }
        if (this._overwriteWhen !== undefined) {
            hasAnyValues = true;
            internalValueResult.overwriteWhen = this._overwriteWhen;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._deleteObjectsFromSourceAfterTransfer = undefined;
            this._deleteObjectsUniqueInSink = undefined;
            this._overwriteObjectsAlreadyExistingInSink = undefined;
            this._overwriteWhen = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._deleteObjectsFromSourceAfterTransfer = value.deleteObjectsFromSourceAfterTransfer;
            this._deleteObjectsUniqueInSink = value.deleteObjectsUniqueInSink;
            this._overwriteObjectsAlreadyExistingInSink = value.overwriteObjectsAlreadyExistingInSink;
            this._overwriteWhen = value.overwriteWhen;
        }
    }
    get deleteObjectsFromSourceAfterTransfer() {
        return this.getBooleanAttribute('delete_objects_from_source_after_transfer');
    }
    set deleteObjectsFromSourceAfterTransfer(value) {
        this._deleteObjectsFromSourceAfterTransfer = value;
    }
    resetDeleteObjectsFromSourceAfterTransfer() {
        this._deleteObjectsFromSourceAfterTransfer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteObjectsFromSourceAfterTransferInput() {
        return this._deleteObjectsFromSourceAfterTransfer;
    }
    get deleteObjectsUniqueInSink() {
        return this.getBooleanAttribute('delete_objects_unique_in_sink');
    }
    set deleteObjectsUniqueInSink(value) {
        this._deleteObjectsUniqueInSink = value;
    }
    resetDeleteObjectsUniqueInSink() {
        this._deleteObjectsUniqueInSink = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteObjectsUniqueInSinkInput() {
        return this._deleteObjectsUniqueInSink;
    }
    get overwriteObjectsAlreadyExistingInSink() {
        return this.getBooleanAttribute('overwrite_objects_already_existing_in_sink');
    }
    set overwriteObjectsAlreadyExistingInSink(value) {
        this._overwriteObjectsAlreadyExistingInSink = value;
    }
    resetOverwriteObjectsAlreadyExistingInSink() {
        this._overwriteObjectsAlreadyExistingInSink = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get overwriteObjectsAlreadyExistingInSinkInput() {
        return this._overwriteObjectsAlreadyExistingInSink;
    }
    get overwriteWhen() {
        return this.getStringAttribute('overwrite_when');
    }
    set overwriteWhen(value) {
        this._overwriteWhen = value;
    }
    resetOverwriteWhen() {
        this._overwriteWhen = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get overwriteWhenInput() {
        return this._overwriteWhen;
    }
}
exports.StorageTransferJobTransferSpecTransferOptionsOutputReference = StorageTransferJobTransferSpecTransferOptionsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecTransferOptionsOutputReference[_r] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecTransferOptionsOutputReference", version: "5.0.1" };
function storageTransferJobTransferSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aws_s3_data_source: storageTransferJobTransferSpecAwsS3DataSourceToTerraform(struct.awsS3DataSource),
        azure_blob_storage_data_source: storageTransferJobTransferSpecAzureBlobStorageDataSourceToTerraform(struct.azureBlobStorageDataSource),
        gcs_data_sink: storageTransferJobTransferSpecGcsDataSinkToTerraform(struct.gcsDataSink),
        gcs_data_source: storageTransferJobTransferSpecGcsDataSourceToTerraform(struct.gcsDataSource),
        http_data_source: storageTransferJobTransferSpecHttpDataSourceToTerraform(struct.httpDataSource),
        object_conditions: storageTransferJobTransferSpecObjectConditionsToTerraform(struct.objectConditions),
        posix_data_sink: storageTransferJobTransferSpecPosixDataSinkToTerraform(struct.posixDataSink),
        posix_data_source: storageTransferJobTransferSpecPosixDataSourceToTerraform(struct.posixDataSource),
        transfer_options: storageTransferJobTransferSpecTransferOptionsToTerraform(struct.transferOptions),
    };
}
exports.storageTransferJobTransferSpecToTerraform = storageTransferJobTransferSpecToTerraform;
class StorageTransferJobTransferSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aws_s3_data_source - computed: false, optional: true, required: false
        this._awsS3DataSource = new StorageTransferJobTransferSpecAwsS3DataSourceOutputReference(this, "aws_s3_data_source");
        // azure_blob_storage_data_source - computed: false, optional: true, required: false
        this._azureBlobStorageDataSource = new StorageTransferJobTransferSpecAzureBlobStorageDataSourceOutputReference(this, "azure_blob_storage_data_source");
        // gcs_data_sink - computed: false, optional: true, required: false
        this._gcsDataSink = new StorageTransferJobTransferSpecGcsDataSinkOutputReference(this, "gcs_data_sink");
        // gcs_data_source - computed: false, optional: true, required: false
        this._gcsDataSource = new StorageTransferJobTransferSpecGcsDataSourceOutputReference(this, "gcs_data_source");
        // http_data_source - computed: false, optional: true, required: false
        this._httpDataSource = new StorageTransferJobTransferSpecHttpDataSourceOutputReference(this, "http_data_source");
        // object_conditions - computed: false, optional: true, required: false
        this._objectConditions = new StorageTransferJobTransferSpecObjectConditionsOutputReference(this, "object_conditions");
        // posix_data_sink - computed: false, optional: true, required: false
        this._posixDataSink = new StorageTransferJobTransferSpecPosixDataSinkOutputReference(this, "posix_data_sink");
        // posix_data_source - computed: false, optional: true, required: false
        this._posixDataSource = new StorageTransferJobTransferSpecPosixDataSourceOutputReference(this, "posix_data_source");
        // transfer_options - computed: false, optional: true, required: false
        this._transferOptions = new StorageTransferJobTransferSpecTransferOptionsOutputReference(this, "transfer_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._awsS3DataSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsS3DataSource = this._awsS3DataSource?.internalValue;
        }
        if (this._azureBlobStorageDataSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.azureBlobStorageDataSource = this._azureBlobStorageDataSource?.internalValue;
        }
        if (this._gcsDataSink?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcsDataSink = this._gcsDataSink?.internalValue;
        }
        if (this._gcsDataSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcsDataSource = this._gcsDataSource?.internalValue;
        }
        if (this._httpDataSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpDataSource = this._httpDataSource?.internalValue;
        }
        if (this._objectConditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectConditions = this._objectConditions?.internalValue;
        }
        if (this._posixDataSink?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.posixDataSink = this._posixDataSink?.internalValue;
        }
        if (this._posixDataSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.posixDataSource = this._posixDataSource?.internalValue;
        }
        if (this._transferOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transferOptions = this._transferOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._awsS3DataSource.internalValue = undefined;
            this._azureBlobStorageDataSource.internalValue = undefined;
            this._gcsDataSink.internalValue = undefined;
            this._gcsDataSource.internalValue = undefined;
            this._httpDataSource.internalValue = undefined;
            this._objectConditions.internalValue = undefined;
            this._posixDataSink.internalValue = undefined;
            this._posixDataSource.internalValue = undefined;
            this._transferOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._awsS3DataSource.internalValue = value.awsS3DataSource;
            this._azureBlobStorageDataSource.internalValue = value.azureBlobStorageDataSource;
            this._gcsDataSink.internalValue = value.gcsDataSink;
            this._gcsDataSource.internalValue = value.gcsDataSource;
            this._httpDataSource.internalValue = value.httpDataSource;
            this._objectConditions.internalValue = value.objectConditions;
            this._posixDataSink.internalValue = value.posixDataSink;
            this._posixDataSource.internalValue = value.posixDataSource;
            this._transferOptions.internalValue = value.transferOptions;
        }
    }
    get awsS3DataSource() {
        return this._awsS3DataSource;
    }
    putAwsS3DataSource(value) {
        this._awsS3DataSource.internalValue = value;
    }
    resetAwsS3DataSource() {
        this._awsS3DataSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsS3DataSourceInput() {
        return this._awsS3DataSource.internalValue;
    }
    get azureBlobStorageDataSource() {
        return this._azureBlobStorageDataSource;
    }
    putAzureBlobStorageDataSource(value) {
        this._azureBlobStorageDataSource.internalValue = value;
    }
    resetAzureBlobStorageDataSource() {
        this._azureBlobStorageDataSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get azureBlobStorageDataSourceInput() {
        return this._azureBlobStorageDataSource.internalValue;
    }
    get gcsDataSink() {
        return this._gcsDataSink;
    }
    putGcsDataSink(value) {
        this._gcsDataSink.internalValue = value;
    }
    resetGcsDataSink() {
        this._gcsDataSink.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsDataSinkInput() {
        return this._gcsDataSink.internalValue;
    }
    get gcsDataSource() {
        return this._gcsDataSource;
    }
    putGcsDataSource(value) {
        this._gcsDataSource.internalValue = value;
    }
    resetGcsDataSource() {
        this._gcsDataSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsDataSourceInput() {
        return this._gcsDataSource.internalValue;
    }
    get httpDataSource() {
        return this._httpDataSource;
    }
    putHttpDataSource(value) {
        this._httpDataSource.internalValue = value;
    }
    resetHttpDataSource() {
        this._httpDataSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpDataSourceInput() {
        return this._httpDataSource.internalValue;
    }
    get objectConditions() {
        return this._objectConditions;
    }
    putObjectConditions(value) {
        this._objectConditions.internalValue = value;
    }
    resetObjectConditions() {
        this._objectConditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get objectConditionsInput() {
        return this._objectConditions.internalValue;
    }
    get posixDataSink() {
        return this._posixDataSink;
    }
    putPosixDataSink(value) {
        this._posixDataSink.internalValue = value;
    }
    resetPosixDataSink() {
        this._posixDataSink.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get posixDataSinkInput() {
        return this._posixDataSink.internalValue;
    }
    get posixDataSource() {
        return this._posixDataSource;
    }
    putPosixDataSource(value) {
        this._posixDataSource.internalValue = value;
    }
    resetPosixDataSource() {
        this._posixDataSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get posixDataSourceInput() {
        return this._posixDataSource.internalValue;
    }
    get transferOptions() {
        return this._transferOptions;
    }
    putTransferOptions(value) {
        this._transferOptions.internalValue = value;
    }
    resetTransferOptions() {
        this._transferOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transferOptionsInput() {
        return this._transferOptions.internalValue;
    }
}
exports.StorageTransferJobTransferSpecOutputReference = StorageTransferJobTransferSpecOutputReference;
_s = JSII_RTTI_SYMBOL_1;
StorageTransferJobTransferSpecOutputReference[_s] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJobTransferSpecOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/storage_transfer_job google_storage_transfer_job}
*/
class StorageTransferJob extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/storage_transfer_job google_storage_transfer_job} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options StorageTransferJobConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_storage_transfer_job',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // notification_config - computed: false, optional: true, required: false
        this._notificationConfig = new StorageTransferJobNotificationConfigOutputReference(this, "notification_config");
        // schedule - computed: false, optional: true, required: false
        this._schedule = new StorageTransferJobScheduleOutputReference(this, "schedule");
        // transfer_spec - computed: false, optional: false, required: true
        this._transferSpec = new StorageTransferJobTransferSpecOutputReference(this, "transfer_spec");
        this._description = config.description;
        this._id = config.id;
        this._project = config.project;
        this._status = config.status;
        this._notificationConfig.internalValue = config.notificationConfig;
        this._schedule.internalValue = config.schedule;
        this._transferSpec.internalValue = config.transferSpec;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getStringAttribute('creation_time');
    }
    // deletion_time - computed: true, optional: false, required: false
    get deletionTime() {
        return this.getStringAttribute('deletion_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // last_modification_time - computed: true, optional: false, required: false
    get lastModificationTime() {
        return this.getStringAttribute('last_modification_time');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    get notificationConfig() {
        return this._notificationConfig;
    }
    putNotificationConfig(value) {
        this._notificationConfig.internalValue = value;
    }
    resetNotificationConfig() {
        this._notificationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationConfigInput() {
        return this._notificationConfig.internalValue;
    }
    get schedule() {
        return this._schedule;
    }
    putSchedule(value) {
        this._schedule.internalValue = value;
    }
    resetSchedule() {
        this._schedule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleInput() {
        return this._schedule.internalValue;
    }
    get transferSpec() {
        return this._transferSpec;
    }
    putTransferSpec(value) {
        this._transferSpec.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get transferSpecInput() {
        return this._transferSpec.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            project: cdktf.stringToTerraform(this._project),
            status: cdktf.stringToTerraform(this._status),
            notification_config: storageTransferJobNotificationConfigToTerraform(this._notificationConfig.internalValue),
            schedule: storageTransferJobScheduleToTerraform(this._schedule.internalValue),
            transfer_spec: storageTransferJobTransferSpecToTerraform(this._transferSpec.internalValue),
        };
    }
}
exports.StorageTransferJob = StorageTransferJob;
_t = JSII_RTTI_SYMBOL_1;
StorageTransferJob[_t] = { fqn: "@cdktf/provider-google.storageTransferJob.StorageTransferJob", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
StorageTransferJob.tfResourceType = "google_storage_transfer_job";
//# sourceMappingURL=data:application/json;base64,