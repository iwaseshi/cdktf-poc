"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GkeBackupBackupPlan = exports.GkeBackupBackupPlanTimeoutsOutputReference = exports.gkeBackupBackupPlanTimeoutsToTerraform = exports.GkeBackupBackupPlanRetentionPolicyOutputReference = exports.gkeBackupBackupPlanRetentionPolicyToTerraform = exports.GkeBackupBackupPlanBackupScheduleOutputReference = exports.gkeBackupBackupPlanBackupScheduleToTerraform = exports.GkeBackupBackupPlanBackupConfigOutputReference = exports.gkeBackupBackupPlanBackupConfigToTerraform = exports.GkeBackupBackupPlanBackupConfigSelectedNamespacesOutputReference = exports.gkeBackupBackupPlanBackupConfigSelectedNamespacesToTerraform = exports.GkeBackupBackupPlanBackupConfigSelectedApplicationsOutputReference = exports.gkeBackupBackupPlanBackupConfigSelectedApplicationsToTerraform = exports.GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesList = exports.GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesOutputReference = exports.gkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesToTerraform = exports.GkeBackupBackupPlanBackupConfigEncryptionKeyOutputReference = exports.gkeBackupBackupPlanBackupConfigEncryptionKeyToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function gkeBackupBackupPlanBackupConfigEncryptionKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gcp_kms_encryption_key: cdktf.stringToTerraform(struct.gcpKmsEncryptionKey),
    };
}
exports.gkeBackupBackupPlanBackupConfigEncryptionKeyToTerraform = gkeBackupBackupPlanBackupConfigEncryptionKeyToTerraform;
class GkeBackupBackupPlanBackupConfigEncryptionKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gcpKmsEncryptionKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcpKmsEncryptionKey = this._gcpKmsEncryptionKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gcpKmsEncryptionKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gcpKmsEncryptionKey = value.gcpKmsEncryptionKey;
        }
    }
    get gcpKmsEncryptionKey() {
        return this.getStringAttribute('gcp_kms_encryption_key');
    }
    set gcpKmsEncryptionKey(value) {
        this._gcpKmsEncryptionKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get gcpKmsEncryptionKeyInput() {
        return this._gcpKmsEncryptionKey;
    }
}
exports.GkeBackupBackupPlanBackupConfigEncryptionKeyOutputReference = GkeBackupBackupPlanBackupConfigEncryptionKeyOutputReference;
_a = JSII_RTTI_SYMBOL_1;
GkeBackupBackupPlanBackupConfigEncryptionKeyOutputReference[_a] = { fqn: "@cdktf/provider-google.gkeBackupBackupPlan.GkeBackupBackupPlanBackupConfigEncryptionKeyOutputReference", version: "5.0.1" };
function gkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        namespace: cdktf.stringToTerraform(struct.namespace),
    };
}
exports.gkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesToTerraform = gkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesToTerraform;
class GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._namespace !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespace = this._namespace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._namespace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._namespace = value.namespace;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get namespace() {
        return this.getStringAttribute('namespace');
    }
    set namespace(value) {
        this._namespace = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespaceInput() {
        return this._namespace;
    }
}
exports.GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesOutputReference = GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesOutputReference;
_b = JSII_RTTI_SYMBOL_1;
GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesOutputReference[_b] = { fqn: "@cdktf/provider-google.gkeBackupBackupPlan.GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesOutputReference", version: "5.0.1" };
class GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesList = GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesList;
_c = JSII_RTTI_SYMBOL_1;
GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesList[_c] = { fqn: "@cdktf/provider-google.gkeBackupBackupPlan.GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesList", version: "5.0.1" };
function gkeBackupBackupPlanBackupConfigSelectedApplicationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        namespaced_names: cdktf.listMapper(gkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesToTerraform, true)(struct.namespacedNames),
    };
}
exports.gkeBackupBackupPlanBackupConfigSelectedApplicationsToTerraform = gkeBackupBackupPlanBackupConfigSelectedApplicationsToTerraform;
class GkeBackupBackupPlanBackupConfigSelectedApplicationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // namespaced_names - computed: false, optional: false, required: true
        this._namespacedNames = new GkeBackupBackupPlanBackupConfigSelectedApplicationsNamespacedNamesList(this, "namespaced_names", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._namespacedNames?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespacedNames = this._namespacedNames?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._namespacedNames.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._namespacedNames.internalValue = value.namespacedNames;
        }
    }
    get namespacedNames() {
        return this._namespacedNames;
    }
    putNamespacedNames(value) {
        this._namespacedNames.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespacedNamesInput() {
        return this._namespacedNames.internalValue;
    }
}
exports.GkeBackupBackupPlanBackupConfigSelectedApplicationsOutputReference = GkeBackupBackupPlanBackupConfigSelectedApplicationsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
GkeBackupBackupPlanBackupConfigSelectedApplicationsOutputReference[_d] = { fqn: "@cdktf/provider-google.gkeBackupBackupPlan.GkeBackupBackupPlanBackupConfigSelectedApplicationsOutputReference", version: "5.0.1" };
function gkeBackupBackupPlanBackupConfigSelectedNamespacesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        namespaces: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.namespaces),
    };
}
exports.gkeBackupBackupPlanBackupConfigSelectedNamespacesToTerraform = gkeBackupBackupPlanBackupConfigSelectedNamespacesToTerraform;
class GkeBackupBackupPlanBackupConfigSelectedNamespacesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._namespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespaces = this._namespaces;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._namespaces = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._namespaces = value.namespaces;
        }
    }
    get namespaces() {
        return this.getListAttribute('namespaces');
    }
    set namespaces(value) {
        this._namespaces = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespacesInput() {
        return this._namespaces;
    }
}
exports.GkeBackupBackupPlanBackupConfigSelectedNamespacesOutputReference = GkeBackupBackupPlanBackupConfigSelectedNamespacesOutputReference;
_e = JSII_RTTI_SYMBOL_1;
GkeBackupBackupPlanBackupConfigSelectedNamespacesOutputReference[_e] = { fqn: "@cdktf/provider-google.gkeBackupBackupPlan.GkeBackupBackupPlanBackupConfigSelectedNamespacesOutputReference", version: "5.0.1" };
function gkeBackupBackupPlanBackupConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        all_namespaces: cdktf.booleanToTerraform(struct.allNamespaces),
        include_secrets: cdktf.booleanToTerraform(struct.includeSecrets),
        include_volume_data: cdktf.booleanToTerraform(struct.includeVolumeData),
        encryption_key: gkeBackupBackupPlanBackupConfigEncryptionKeyToTerraform(struct.encryptionKey),
        selected_applications: gkeBackupBackupPlanBackupConfigSelectedApplicationsToTerraform(struct.selectedApplications),
        selected_namespaces: gkeBackupBackupPlanBackupConfigSelectedNamespacesToTerraform(struct.selectedNamespaces),
    };
}
exports.gkeBackupBackupPlanBackupConfigToTerraform = gkeBackupBackupPlanBackupConfigToTerraform;
class GkeBackupBackupPlanBackupConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // encryption_key - computed: false, optional: true, required: false
        this._encryptionKey = new GkeBackupBackupPlanBackupConfigEncryptionKeyOutputReference(this, "encryption_key");
        // selected_applications - computed: false, optional: true, required: false
        this._selectedApplications = new GkeBackupBackupPlanBackupConfigSelectedApplicationsOutputReference(this, "selected_applications");
        // selected_namespaces - computed: false, optional: true, required: false
        this._selectedNamespaces = new GkeBackupBackupPlanBackupConfigSelectedNamespacesOutputReference(this, "selected_namespaces");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allNamespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.allNamespaces = this._allNamespaces;
        }
        if (this._includeSecrets !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeSecrets = this._includeSecrets;
        }
        if (this._includeVolumeData !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeVolumeData = this._includeVolumeData;
        }
        if (this._encryptionKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionKey = this._encryptionKey?.internalValue;
        }
        if (this._selectedApplications?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.selectedApplications = this._selectedApplications?.internalValue;
        }
        if (this._selectedNamespaces?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.selectedNamespaces = this._selectedNamespaces?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allNamespaces = undefined;
            this._includeSecrets = undefined;
            this._includeVolumeData = undefined;
            this._encryptionKey.internalValue = undefined;
            this._selectedApplications.internalValue = undefined;
            this._selectedNamespaces.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allNamespaces = value.allNamespaces;
            this._includeSecrets = value.includeSecrets;
            this._includeVolumeData = value.includeVolumeData;
            this._encryptionKey.internalValue = value.encryptionKey;
            this._selectedApplications.internalValue = value.selectedApplications;
            this._selectedNamespaces.internalValue = value.selectedNamespaces;
        }
    }
    get allNamespaces() {
        return this.getBooleanAttribute('all_namespaces');
    }
    set allNamespaces(value) {
        this._allNamespaces = value;
    }
    resetAllNamespaces() {
        this._allNamespaces = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allNamespacesInput() {
        return this._allNamespaces;
    }
    get includeSecrets() {
        return this.getBooleanAttribute('include_secrets');
    }
    set includeSecrets(value) {
        this._includeSecrets = value;
    }
    resetIncludeSecrets() {
        this._includeSecrets = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeSecretsInput() {
        return this._includeSecrets;
    }
    get includeVolumeData() {
        return this.getBooleanAttribute('include_volume_data');
    }
    set includeVolumeData(value) {
        this._includeVolumeData = value;
    }
    resetIncludeVolumeData() {
        this._includeVolumeData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeVolumeDataInput() {
        return this._includeVolumeData;
    }
    get encryptionKey() {
        return this._encryptionKey;
    }
    putEncryptionKey(value) {
        this._encryptionKey.internalValue = value;
    }
    resetEncryptionKey() {
        this._encryptionKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionKeyInput() {
        return this._encryptionKey.internalValue;
    }
    get selectedApplications() {
        return this._selectedApplications;
    }
    putSelectedApplications(value) {
        this._selectedApplications.internalValue = value;
    }
    resetSelectedApplications() {
        this._selectedApplications.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selectedApplicationsInput() {
        return this._selectedApplications.internalValue;
    }
    get selectedNamespaces() {
        return this._selectedNamespaces;
    }
    putSelectedNamespaces(value) {
        this._selectedNamespaces.internalValue = value;
    }
    resetSelectedNamespaces() {
        this._selectedNamespaces.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selectedNamespacesInput() {
        return this._selectedNamespaces.internalValue;
    }
}
exports.GkeBackupBackupPlanBackupConfigOutputReference = GkeBackupBackupPlanBackupConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
GkeBackupBackupPlanBackupConfigOutputReference[_f] = { fqn: "@cdktf/provider-google.gkeBackupBackupPlan.GkeBackupBackupPlanBackupConfigOutputReference", version: "5.0.1" };
function gkeBackupBackupPlanBackupScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cron_schedule: cdktf.stringToTerraform(struct.cronSchedule),
        paused: cdktf.booleanToTerraform(struct.paused),
    };
}
exports.gkeBackupBackupPlanBackupScheduleToTerraform = gkeBackupBackupPlanBackupScheduleToTerraform;
class GkeBackupBackupPlanBackupScheduleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cronSchedule !== undefined) {
            hasAnyValues = true;
            internalValueResult.cronSchedule = this._cronSchedule;
        }
        if (this._paused !== undefined) {
            hasAnyValues = true;
            internalValueResult.paused = this._paused;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cronSchedule = undefined;
            this._paused = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cronSchedule = value.cronSchedule;
            this._paused = value.paused;
        }
    }
    get cronSchedule() {
        return this.getStringAttribute('cron_schedule');
    }
    set cronSchedule(value) {
        this._cronSchedule = value;
    }
    resetCronSchedule() {
        this._cronSchedule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cronScheduleInput() {
        return this._cronSchedule;
    }
    get paused() {
        return this.getBooleanAttribute('paused');
    }
    set paused(value) {
        this._paused = value;
    }
    resetPaused() {
        this._paused = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pausedInput() {
        return this._paused;
    }
}
exports.GkeBackupBackupPlanBackupScheduleOutputReference = GkeBackupBackupPlanBackupScheduleOutputReference;
_g = JSII_RTTI_SYMBOL_1;
GkeBackupBackupPlanBackupScheduleOutputReference[_g] = { fqn: "@cdktf/provider-google.gkeBackupBackupPlan.GkeBackupBackupPlanBackupScheduleOutputReference", version: "5.0.1" };
function gkeBackupBackupPlanRetentionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backup_delete_lock_days: cdktf.numberToTerraform(struct.backupDeleteLockDays),
        backup_retain_days: cdktf.numberToTerraform(struct.backupRetainDays),
        locked: cdktf.booleanToTerraform(struct.locked),
    };
}
exports.gkeBackupBackupPlanRetentionPolicyToTerraform = gkeBackupBackupPlanRetentionPolicyToTerraform;
class GkeBackupBackupPlanRetentionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backupDeleteLockDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.backupDeleteLockDays = this._backupDeleteLockDays;
        }
        if (this._backupRetainDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.backupRetainDays = this._backupRetainDays;
        }
        if (this._locked !== undefined) {
            hasAnyValues = true;
            internalValueResult.locked = this._locked;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backupDeleteLockDays = undefined;
            this._backupRetainDays = undefined;
            this._locked = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backupDeleteLockDays = value.backupDeleteLockDays;
            this._backupRetainDays = value.backupRetainDays;
            this._locked = value.locked;
        }
    }
    get backupDeleteLockDays() {
        return this.getNumberAttribute('backup_delete_lock_days');
    }
    set backupDeleteLockDays(value) {
        this._backupDeleteLockDays = value;
    }
    resetBackupDeleteLockDays() {
        this._backupDeleteLockDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupDeleteLockDaysInput() {
        return this._backupDeleteLockDays;
    }
    get backupRetainDays() {
        return this.getNumberAttribute('backup_retain_days');
    }
    set backupRetainDays(value) {
        this._backupRetainDays = value;
    }
    resetBackupRetainDays() {
        this._backupRetainDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupRetainDaysInput() {
        return this._backupRetainDays;
    }
    get locked() {
        return this.getBooleanAttribute('locked');
    }
    set locked(value) {
        this._locked = value;
    }
    resetLocked() {
        this._locked = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lockedInput() {
        return this._locked;
    }
}
exports.GkeBackupBackupPlanRetentionPolicyOutputReference = GkeBackupBackupPlanRetentionPolicyOutputReference;
_h = JSII_RTTI_SYMBOL_1;
GkeBackupBackupPlanRetentionPolicyOutputReference[_h] = { fqn: "@cdktf/provider-google.gkeBackupBackupPlan.GkeBackupBackupPlanRetentionPolicyOutputReference", version: "5.0.1" };
function gkeBackupBackupPlanTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.gkeBackupBackupPlanTimeoutsToTerraform = gkeBackupBackupPlanTimeoutsToTerraform;
class GkeBackupBackupPlanTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.GkeBackupBackupPlanTimeoutsOutputReference = GkeBackupBackupPlanTimeoutsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
GkeBackupBackupPlanTimeoutsOutputReference[_j] = { fqn: "@cdktf/provider-google.gkeBackupBackupPlan.GkeBackupBackupPlanTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/gke_backup_backup_plan google_gke_backup_backup_plan}
*/
class GkeBackupBackupPlan extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/gke_backup_backup_plan google_gke_backup_backup_plan} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GkeBackupBackupPlanConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_gke_backup_backup_plan',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // backup_config - computed: false, optional: true, required: false
        this._backupConfig = new GkeBackupBackupPlanBackupConfigOutputReference(this, "backup_config");
        // backup_schedule - computed: false, optional: true, required: false
        this._backupSchedule = new GkeBackupBackupPlanBackupScheduleOutputReference(this, "backup_schedule");
        // retention_policy - computed: false, optional: true, required: false
        this._retentionPolicy = new GkeBackupBackupPlanRetentionPolicyOutputReference(this, "retention_policy");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new GkeBackupBackupPlanTimeoutsOutputReference(this, "timeouts");
        this._cluster = config.cluster;
        this._deactivated = config.deactivated;
        this._description = config.description;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._backupConfig.internalValue = config.backupConfig;
        this._backupSchedule.internalValue = config.backupSchedule;
        this._retentionPolicy.internalValue = config.retentionPolicy;
        this._timeouts.internalValue = config.timeouts;
    }
    get cluster() {
        return this.getStringAttribute('cluster');
    }
    set cluster(value) {
        this._cluster = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterInput() {
        return this._cluster;
    }
    get deactivated() {
        return this.getBooleanAttribute('deactivated');
    }
    set deactivated(value) {
        this._deactivated = value;
    }
    resetDeactivated() {
        this._deactivated = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deactivatedInput() {
        return this._deactivated;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // protected_pod_count - computed: true, optional: false, required: false
    get protectedPodCount() {
        return this.getNumberAttribute('protected_pod_count');
    }
    // uid - computed: true, optional: false, required: false
    get uid() {
        return this.getStringAttribute('uid');
    }
    get backupConfig() {
        return this._backupConfig;
    }
    putBackupConfig(value) {
        this._backupConfig.internalValue = value;
    }
    resetBackupConfig() {
        this._backupConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupConfigInput() {
        return this._backupConfig.internalValue;
    }
    get backupSchedule() {
        return this._backupSchedule;
    }
    putBackupSchedule(value) {
        this._backupSchedule.internalValue = value;
    }
    resetBackupSchedule() {
        this._backupSchedule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupScheduleInput() {
        return this._backupSchedule.internalValue;
    }
    get retentionPolicy() {
        return this._retentionPolicy;
    }
    putRetentionPolicy(value) {
        this._retentionPolicy.internalValue = value;
    }
    resetRetentionPolicy() {
        this._retentionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPolicyInput() {
        return this._retentionPolicy.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cluster: cdktf.stringToTerraform(this._cluster),
            deactivated: cdktf.booleanToTerraform(this._deactivated),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            backup_config: gkeBackupBackupPlanBackupConfigToTerraform(this._backupConfig.internalValue),
            backup_schedule: gkeBackupBackupPlanBackupScheduleToTerraform(this._backupSchedule.internalValue),
            retention_policy: gkeBackupBackupPlanRetentionPolicyToTerraform(this._retentionPolicy.internalValue),
            timeouts: gkeBackupBackupPlanTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.GkeBackupBackupPlan = GkeBackupBackupPlan;
_k = JSII_RTTI_SYMBOL_1;
GkeBackupBackupPlan[_k] = { fqn: "@cdktf/provider-google.gkeBackupBackupPlan.GkeBackupBackupPlan", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
GkeBackupBackupPlan.tfResourceType = "google_gke_backup_backup_plan";
//# sourceMappingURL=data:application/json;base64,