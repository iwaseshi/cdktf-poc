"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DialogflowCxFlow = exports.DialogflowCxFlowTransitionRoutesList = exports.DialogflowCxFlowTransitionRoutesOutputReference = exports.dialogflowCxFlowTransitionRoutesToTerraform = exports.DialogflowCxFlowTransitionRoutesTriggerFulfillmentOutputReference = exports.dialogflowCxFlowTransitionRoutesTriggerFulfillmentToTerraform = exports.DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesList = exports.DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesOutputReference = exports.dialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesToTerraform = exports.DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextOutputReference = exports.dialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextToTerraform = exports.DialogflowCxFlowTimeoutsOutputReference = exports.dialogflowCxFlowTimeoutsToTerraform = exports.DialogflowCxFlowNluSettingsOutputReference = exports.dialogflowCxFlowNluSettingsToTerraform = exports.DialogflowCxFlowEventHandlersList = exports.DialogflowCxFlowEventHandlersOutputReference = exports.dialogflowCxFlowEventHandlersToTerraform = exports.DialogflowCxFlowEventHandlersTriggerFulfillmentOutputReference = exports.dialogflowCxFlowEventHandlersTriggerFulfillmentToTerraform = exports.DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesList = exports.DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesOutputReference = exports.dialogflowCxFlowEventHandlersTriggerFulfillmentMessagesToTerraform = exports.DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextOutputReference = exports.dialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.text),
    };
}
exports.dialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextToTerraform = dialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextToTerraform;
class DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get text() {
        return this.getListAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextOutputReference = DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextOutputReference[_a] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextOutputReference", version: "5.0.1" };
function dialogflowCxFlowEventHandlersTriggerFulfillmentMessagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: dialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextToTerraform(struct.text),
    };
}
exports.dialogflowCxFlowEventHandlersTriggerFulfillmentMessagesToTerraform = dialogflowCxFlowEventHandlersTriggerFulfillmentMessagesToTerraform;
class DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // text - computed: false, optional: true, required: false
        this._text = new DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesTextOutputReference(this, "text");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text.internalValue = value.text;
        }
    }
    get text() {
        return this._text;
    }
    putText(value) {
        this._text.internalValue = value;
    }
    resetText() {
        this._text.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text.internalValue;
    }
}
exports.DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesOutputReference = DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesOutputReference[_b] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesOutputReference", version: "5.0.1" };
class DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesList = DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesList;
_c = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesList[_c] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesList", version: "5.0.1" };
function dialogflowCxFlowEventHandlersTriggerFulfillmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        return_partial_responses: cdktf.booleanToTerraform(struct.returnPartialResponses),
        tag: cdktf.stringToTerraform(struct.tag),
        webhook: cdktf.stringToTerraform(struct.webhook),
        messages: cdktf.listMapper(dialogflowCxFlowEventHandlersTriggerFulfillmentMessagesToTerraform, true)(struct.messages),
    };
}
exports.dialogflowCxFlowEventHandlersTriggerFulfillmentToTerraform = dialogflowCxFlowEventHandlersTriggerFulfillmentToTerraform;
class DialogflowCxFlowEventHandlersTriggerFulfillmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // messages - computed: false, optional: true, required: false
        this._messages = new DialogflowCxFlowEventHandlersTriggerFulfillmentMessagesList(this, "messages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._returnPartialResponses !== undefined) {
            hasAnyValues = true;
            internalValueResult.returnPartialResponses = this._returnPartialResponses;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        if (this._webhook !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhook = this._webhook;
        }
        if (this._messages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messages = this._messages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._returnPartialResponses = undefined;
            this._tag = undefined;
            this._webhook = undefined;
            this._messages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._returnPartialResponses = value.returnPartialResponses;
            this._tag = value.tag;
            this._webhook = value.webhook;
            this._messages.internalValue = value.messages;
        }
    }
    get returnPartialResponses() {
        return this.getBooleanAttribute('return_partial_responses');
    }
    set returnPartialResponses(value) {
        this._returnPartialResponses = value;
    }
    resetReturnPartialResponses() {
        this._returnPartialResponses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get returnPartialResponsesInput() {
        return this._returnPartialResponses;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
    get webhook() {
        return this.getStringAttribute('webhook');
    }
    set webhook(value) {
        this._webhook = value;
    }
    resetWebhook() {
        this._webhook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookInput() {
        return this._webhook;
    }
    get messages() {
        return this._messages;
    }
    putMessages(value) {
        this._messages.internalValue = value;
    }
    resetMessages() {
        this._messages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messagesInput() {
        return this._messages.internalValue;
    }
}
exports.DialogflowCxFlowEventHandlersTriggerFulfillmentOutputReference = DialogflowCxFlowEventHandlersTriggerFulfillmentOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowEventHandlersTriggerFulfillmentOutputReference[_d] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowEventHandlersTriggerFulfillmentOutputReference", version: "5.0.1" };
function dialogflowCxFlowEventHandlersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event: cdktf.stringToTerraform(struct.event),
        target_flow: cdktf.stringToTerraform(struct.targetFlow),
        target_page: cdktf.stringToTerraform(struct.targetPage),
        trigger_fulfillment: dialogflowCxFlowEventHandlersTriggerFulfillmentToTerraform(struct.triggerFulfillment),
    };
}
exports.dialogflowCxFlowEventHandlersToTerraform = dialogflowCxFlowEventHandlersToTerraform;
class DialogflowCxFlowEventHandlersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // trigger_fulfillment - computed: false, optional: true, required: false
        this._triggerFulfillment = new DialogflowCxFlowEventHandlersTriggerFulfillmentOutputReference(this, "trigger_fulfillment");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._event !== undefined) {
            hasAnyValues = true;
            internalValueResult.event = this._event;
        }
        if (this._targetFlow !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetFlow = this._targetFlow;
        }
        if (this._targetPage !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetPage = this._targetPage;
        }
        if (this._triggerFulfillment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggerFulfillment = this._triggerFulfillment?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._event = undefined;
            this._targetFlow = undefined;
            this._targetPage = undefined;
            this._triggerFulfillment.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._event = value.event;
            this._targetFlow = value.targetFlow;
            this._targetPage = value.targetPage;
            this._triggerFulfillment.internalValue = value.triggerFulfillment;
        }
    }
    get event() {
        return this.getStringAttribute('event');
    }
    set event(value) {
        this._event = value;
    }
    resetEvent() {
        this._event = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventInput() {
        return this._event;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get targetFlow() {
        return this.getStringAttribute('target_flow');
    }
    set targetFlow(value) {
        this._targetFlow = value;
    }
    resetTargetFlow() {
        this._targetFlow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetFlowInput() {
        return this._targetFlow;
    }
    get targetPage() {
        return this.getStringAttribute('target_page');
    }
    set targetPage(value) {
        this._targetPage = value;
    }
    resetTargetPage() {
        this._targetPage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetPageInput() {
        return this._targetPage;
    }
    get triggerFulfillment() {
        return this._triggerFulfillment;
    }
    putTriggerFulfillment(value) {
        this._triggerFulfillment.internalValue = value;
    }
    resetTriggerFulfillment() {
        this._triggerFulfillment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerFulfillmentInput() {
        return this._triggerFulfillment.internalValue;
    }
}
exports.DialogflowCxFlowEventHandlersOutputReference = DialogflowCxFlowEventHandlersOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowEventHandlersOutputReference[_e] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowEventHandlersOutputReference", version: "5.0.1" };
class DialogflowCxFlowEventHandlersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxFlowEventHandlersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxFlowEventHandlersList = DialogflowCxFlowEventHandlersList;
_f = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowEventHandlersList[_f] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowEventHandlersList", version: "5.0.1" };
function dialogflowCxFlowNluSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        classification_threshold: cdktf.numberToTerraform(struct.classificationThreshold),
        model_training_mode: cdktf.stringToTerraform(struct.modelTrainingMode),
        model_type: cdktf.stringToTerraform(struct.modelType),
    };
}
exports.dialogflowCxFlowNluSettingsToTerraform = dialogflowCxFlowNluSettingsToTerraform;
class DialogflowCxFlowNluSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._classificationThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.classificationThreshold = this._classificationThreshold;
        }
        if (this._modelTrainingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.modelTrainingMode = this._modelTrainingMode;
        }
        if (this._modelType !== undefined) {
            hasAnyValues = true;
            internalValueResult.modelType = this._modelType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._classificationThreshold = undefined;
            this._modelTrainingMode = undefined;
            this._modelType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._classificationThreshold = value.classificationThreshold;
            this._modelTrainingMode = value.modelTrainingMode;
            this._modelType = value.modelType;
        }
    }
    get classificationThreshold() {
        return this.getNumberAttribute('classification_threshold');
    }
    set classificationThreshold(value) {
        this._classificationThreshold = value;
    }
    resetClassificationThreshold() {
        this._classificationThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get classificationThresholdInput() {
        return this._classificationThreshold;
    }
    get modelTrainingMode() {
        return this.getStringAttribute('model_training_mode');
    }
    set modelTrainingMode(value) {
        this._modelTrainingMode = value;
    }
    resetModelTrainingMode() {
        this._modelTrainingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modelTrainingModeInput() {
        return this._modelTrainingMode;
    }
    get modelType() {
        return this.getStringAttribute('model_type');
    }
    set modelType(value) {
        this._modelType = value;
    }
    resetModelType() {
        this._modelType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modelTypeInput() {
        return this._modelType;
    }
}
exports.DialogflowCxFlowNluSettingsOutputReference = DialogflowCxFlowNluSettingsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowNluSettingsOutputReference[_g] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowNluSettingsOutputReference", version: "5.0.1" };
function dialogflowCxFlowTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dialogflowCxFlowTimeoutsToTerraform = dialogflowCxFlowTimeoutsToTerraform;
class DialogflowCxFlowTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DialogflowCxFlowTimeoutsOutputReference = DialogflowCxFlowTimeoutsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowTimeoutsOutputReference[_h] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowTimeoutsOutputReference", version: "5.0.1" };
function dialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.text),
    };
}
exports.dialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextToTerraform = dialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextToTerraform;
class DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get text() {
        return this.getListAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextOutputReference = DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextOutputReference[_j] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextOutputReference", version: "5.0.1" };
function dialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: dialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextToTerraform(struct.text),
    };
}
exports.dialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesToTerraform = dialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesToTerraform;
class DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // text - computed: false, optional: true, required: false
        this._text = new DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesTextOutputReference(this, "text");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._text.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._text.internalValue = value.text;
        }
    }
    get text() {
        return this._text;
    }
    putText(value) {
        this._text.internalValue = value;
    }
    resetText() {
        this._text.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text.internalValue;
    }
}
exports.DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesOutputReference = DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesOutputReference[_k] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesOutputReference", version: "5.0.1" };
class DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesList = DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesList;
_l = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesList[_l] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesList", version: "5.0.1" };
function dialogflowCxFlowTransitionRoutesTriggerFulfillmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        return_partial_responses: cdktf.booleanToTerraform(struct.returnPartialResponses),
        tag: cdktf.stringToTerraform(struct.tag),
        webhook: cdktf.stringToTerraform(struct.webhook),
        messages: cdktf.listMapper(dialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesToTerraform, true)(struct.messages),
    };
}
exports.dialogflowCxFlowTransitionRoutesTriggerFulfillmentToTerraform = dialogflowCxFlowTransitionRoutesTriggerFulfillmentToTerraform;
class DialogflowCxFlowTransitionRoutesTriggerFulfillmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // messages - computed: false, optional: true, required: false
        this._messages = new DialogflowCxFlowTransitionRoutesTriggerFulfillmentMessagesList(this, "messages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._returnPartialResponses !== undefined) {
            hasAnyValues = true;
            internalValueResult.returnPartialResponses = this._returnPartialResponses;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        if (this._webhook !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhook = this._webhook;
        }
        if (this._messages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messages = this._messages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._returnPartialResponses = undefined;
            this._tag = undefined;
            this._webhook = undefined;
            this._messages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._returnPartialResponses = value.returnPartialResponses;
            this._tag = value.tag;
            this._webhook = value.webhook;
            this._messages.internalValue = value.messages;
        }
    }
    get returnPartialResponses() {
        return this.getBooleanAttribute('return_partial_responses');
    }
    set returnPartialResponses(value) {
        this._returnPartialResponses = value;
    }
    resetReturnPartialResponses() {
        this._returnPartialResponses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get returnPartialResponsesInput() {
        return this._returnPartialResponses;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
    get webhook() {
        return this.getStringAttribute('webhook');
    }
    set webhook(value) {
        this._webhook = value;
    }
    resetWebhook() {
        this._webhook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookInput() {
        return this._webhook;
    }
    get messages() {
        return this._messages;
    }
    putMessages(value) {
        this._messages.internalValue = value;
    }
    resetMessages() {
        this._messages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messagesInput() {
        return this._messages.internalValue;
    }
}
exports.DialogflowCxFlowTransitionRoutesTriggerFulfillmentOutputReference = DialogflowCxFlowTransitionRoutesTriggerFulfillmentOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowTransitionRoutesTriggerFulfillmentOutputReference[_m] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowTransitionRoutesTriggerFulfillmentOutputReference", version: "5.0.1" };
function dialogflowCxFlowTransitionRoutesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        condition: cdktf.stringToTerraform(struct.condition),
        intent: cdktf.stringToTerraform(struct.intent),
        target_flow: cdktf.stringToTerraform(struct.targetFlow),
        target_page: cdktf.stringToTerraform(struct.targetPage),
        trigger_fulfillment: dialogflowCxFlowTransitionRoutesTriggerFulfillmentToTerraform(struct.triggerFulfillment),
    };
}
exports.dialogflowCxFlowTransitionRoutesToTerraform = dialogflowCxFlowTransitionRoutesToTerraform;
class DialogflowCxFlowTransitionRoutesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // trigger_fulfillment - computed: false, optional: true, required: false
        this._triggerFulfillment = new DialogflowCxFlowTransitionRoutesTriggerFulfillmentOutputReference(this, "trigger_fulfillment");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._condition !== undefined) {
            hasAnyValues = true;
            internalValueResult.condition = this._condition;
        }
        if (this._intent !== undefined) {
            hasAnyValues = true;
            internalValueResult.intent = this._intent;
        }
        if (this._targetFlow !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetFlow = this._targetFlow;
        }
        if (this._targetPage !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetPage = this._targetPage;
        }
        if (this._triggerFulfillment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggerFulfillment = this._triggerFulfillment?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._condition = undefined;
            this._intent = undefined;
            this._targetFlow = undefined;
            this._targetPage = undefined;
            this._triggerFulfillment.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._condition = value.condition;
            this._intent = value.intent;
            this._targetFlow = value.targetFlow;
            this._targetPage = value.targetPage;
            this._triggerFulfillment.internalValue = value.triggerFulfillment;
        }
    }
    get condition() {
        return this.getStringAttribute('condition');
    }
    set condition(value) {
        this._condition = value;
    }
    resetCondition() {
        this._condition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionInput() {
        return this._condition;
    }
    get intent() {
        return this.getStringAttribute('intent');
    }
    set intent(value) {
        this._intent = value;
    }
    resetIntent() {
        this._intent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intentInput() {
        return this._intent;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get targetFlow() {
        return this.getStringAttribute('target_flow');
    }
    set targetFlow(value) {
        this._targetFlow = value;
    }
    resetTargetFlow() {
        this._targetFlow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetFlowInput() {
        return this._targetFlow;
    }
    get targetPage() {
        return this.getStringAttribute('target_page');
    }
    set targetPage(value) {
        this._targetPage = value;
    }
    resetTargetPage() {
        this._targetPage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetPageInput() {
        return this._targetPage;
    }
    get triggerFulfillment() {
        return this._triggerFulfillment;
    }
    putTriggerFulfillment(value) {
        this._triggerFulfillment.internalValue = value;
    }
    resetTriggerFulfillment() {
        this._triggerFulfillment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerFulfillmentInput() {
        return this._triggerFulfillment.internalValue;
    }
}
exports.DialogflowCxFlowTransitionRoutesOutputReference = DialogflowCxFlowTransitionRoutesOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowTransitionRoutesOutputReference[_o] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowTransitionRoutesOutputReference", version: "5.0.1" };
class DialogflowCxFlowTransitionRoutesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxFlowTransitionRoutesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxFlowTransitionRoutesList = DialogflowCxFlowTransitionRoutesList;
_p = JSII_RTTI_SYMBOL_1;
DialogflowCxFlowTransitionRoutesList[_p] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlowTransitionRoutesList", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/dialogflow_cx_flow google_dialogflow_cx_flow}
*/
class DialogflowCxFlow extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/dialogflow_cx_flow google_dialogflow_cx_flow} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DialogflowCxFlowConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_dialogflow_cx_flow',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // event_handlers - computed: false, optional: true, required: false
        this._eventHandlers = new DialogflowCxFlowEventHandlersList(this, "event_handlers", false);
        // nlu_settings - computed: false, optional: true, required: false
        this._nluSettings = new DialogflowCxFlowNluSettingsOutputReference(this, "nlu_settings");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DialogflowCxFlowTimeoutsOutputReference(this, "timeouts");
        // transition_routes - computed: false, optional: true, required: false
        this._transitionRoutes = new DialogflowCxFlowTransitionRoutesList(this, "transition_routes", false);
        this._description = config.description;
        this._displayName = config.displayName;
        this._id = config.id;
        this._languageCode = config.languageCode;
        this._parent = config.parent;
        this._transitionRouteGroups = config.transitionRouteGroups;
        this._eventHandlers.internalValue = config.eventHandlers;
        this._nluSettings.internalValue = config.nluSettings;
        this._timeouts.internalValue = config.timeouts;
        this._transitionRoutes.internalValue = config.transitionRoutes;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    resetLanguageCode() {
        this._languageCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get parent() {
        return this.getStringAttribute('parent');
    }
    set parent(value) {
        this._parent = value;
    }
    resetParent() {
        this._parent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parentInput() {
        return this._parent;
    }
    get transitionRouteGroups() {
        return this.getListAttribute('transition_route_groups');
    }
    set transitionRouteGroups(value) {
        this._transitionRouteGroups = value;
    }
    resetTransitionRouteGroups() {
        this._transitionRouteGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transitionRouteGroupsInput() {
        return this._transitionRouteGroups;
    }
    get eventHandlers() {
        return this._eventHandlers;
    }
    putEventHandlers(value) {
        this._eventHandlers.internalValue = value;
    }
    resetEventHandlers() {
        this._eventHandlers.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventHandlersInput() {
        return this._eventHandlers.internalValue;
    }
    get nluSettings() {
        return this._nluSettings;
    }
    putNluSettings(value) {
        this._nluSettings.internalValue = value;
    }
    resetNluSettings() {
        this._nluSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nluSettingsInput() {
        return this._nluSettings.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get transitionRoutes() {
        return this._transitionRoutes;
    }
    putTransitionRoutes(value) {
        this._transitionRoutes.internalValue = value;
    }
    resetTransitionRoutes() {
        this._transitionRoutes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transitionRoutesInput() {
        return this._transitionRoutes.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            language_code: cdktf.stringToTerraform(this._languageCode),
            parent: cdktf.stringToTerraform(this._parent),
            transition_route_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(this._transitionRouteGroups),
            event_handlers: cdktf.listMapper(dialogflowCxFlowEventHandlersToTerraform, true)(this._eventHandlers.internalValue),
            nlu_settings: dialogflowCxFlowNluSettingsToTerraform(this._nluSettings.internalValue),
            timeouts: dialogflowCxFlowTimeoutsToTerraform(this._timeouts.internalValue),
            transition_routes: cdktf.listMapper(dialogflowCxFlowTransitionRoutesToTerraform, true)(this._transitionRoutes.internalValue),
        };
    }
}
exports.DialogflowCxFlow = DialogflowCxFlow;
_q = JSII_RTTI_SYMBOL_1;
DialogflowCxFlow[_q] = { fqn: "@cdktf/provider-google.dialogflowCxFlow.DialogflowCxFlow", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
DialogflowCxFlow.tfResourceType = "google_dialogflow_cx_flow";
//# sourceMappingURL=data:application/json;base64,