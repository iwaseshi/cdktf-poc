"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessContextManagerServicePerimeter = exports.AccessContextManagerServicePerimeterTimeoutsOutputReference = exports.accessContextManagerServicePerimeterTimeoutsToTerraform = exports.AccessContextManagerServicePerimeterStatusOutputReference = exports.accessContextManagerServicePerimeterStatusToTerraform = exports.AccessContextManagerServicePerimeterStatusVpcAccessibleServicesOutputReference = exports.accessContextManagerServicePerimeterStatusVpcAccessibleServicesToTerraform = exports.AccessContextManagerServicePerimeterStatusIngressPoliciesList = exports.AccessContextManagerServicePerimeterStatusIngressPoliciesOutputReference = exports.accessContextManagerServicePerimeterStatusIngressPoliciesToTerraform = exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOutputReference = exports.accessContextManagerServicePerimeterStatusIngressPoliciesIngressToToTerraform = exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsList = exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsOutputReference = exports.accessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsToTerraform = exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsList = exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference = exports.accessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsToTerraform = exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromOutputReference = exports.accessContextManagerServicePerimeterStatusIngressPoliciesIngressFromToTerraform = exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesList = exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesOutputReference = exports.accessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesToTerraform = exports.AccessContextManagerServicePerimeterStatusEgressPoliciesList = exports.AccessContextManagerServicePerimeterStatusEgressPoliciesOutputReference = exports.accessContextManagerServicePerimeterStatusEgressPoliciesToTerraform = exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOutputReference = exports.accessContextManagerServicePerimeterStatusEgressPoliciesEgressToToTerraform = exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsList = exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsOutputReference = exports.accessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsToTerraform = exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsList = exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference = exports.accessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsToTerraform = exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressFromOutputReference = exports.accessContextManagerServicePerimeterStatusEgressPoliciesEgressFromToTerraform = exports.AccessContextManagerServicePerimeterSpecOutputReference = exports.accessContextManagerServicePerimeterSpecToTerraform = exports.AccessContextManagerServicePerimeterSpecVpcAccessibleServicesOutputReference = exports.accessContextManagerServicePerimeterSpecVpcAccessibleServicesToTerraform = exports.AccessContextManagerServicePerimeterSpecIngressPoliciesList = exports.AccessContextManagerServicePerimeterSpecIngressPoliciesOutputReference = exports.accessContextManagerServicePerimeterSpecIngressPoliciesToTerraform = exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOutputReference = exports.accessContextManagerServicePerimeterSpecIngressPoliciesIngressToToTerraform = exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsList = exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsOutputReference = exports.accessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsToTerraform = exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsList = exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference = exports.accessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsToTerraform = exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromOutputReference = exports.accessContextManagerServicePerimeterSpecIngressPoliciesIngressFromToTerraform = exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesList = exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesOutputReference = exports.accessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesToTerraform = exports.AccessContextManagerServicePerimeterSpecEgressPoliciesList = exports.AccessContextManagerServicePerimeterSpecEgressPoliciesOutputReference = exports.accessContextManagerServicePerimeterSpecEgressPoliciesToTerraform = exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOutputReference = exports.accessContextManagerServicePerimeterSpecEgressPoliciesEgressToToTerraform = exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsList = exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsOutputReference = exports.accessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsToTerraform = exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsList = exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference = exports.accessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsToTerraform = exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressFromOutputReference = exports.accessContextManagerServicePerimeterSpecEgressPoliciesEgressFromToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function accessContextManagerServicePerimeterSpecEgressPoliciesEgressFromToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identities: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.identities),
        identity_type: cdktf.stringToTerraform(struct.identityType),
    };
}
exports.accessContextManagerServicePerimeterSpecEgressPoliciesEgressFromToTerraform = accessContextManagerServicePerimeterSpecEgressPoliciesEgressFromToTerraform;
class AccessContextManagerServicePerimeterSpecEgressPoliciesEgressFromOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._identities !== undefined) {
            hasAnyValues = true;
            internalValueResult.identities = this._identities;
        }
        if (this._identityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityType = this._identityType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._identities = undefined;
            this._identityType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._identities = value.identities;
            this._identityType = value.identityType;
        }
    }
    get identities() {
        return this.getListAttribute('identities');
    }
    set identities(value) {
        this._identities = value;
    }
    resetIdentities() {
        this._identities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identitiesInput() {
        return this._identities;
    }
    get identityType() {
        return this.getStringAttribute('identity_type');
    }
    set identityType(value) {
        this._identityType = value;
    }
    resetIdentityType() {
        this._identityType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityTypeInput() {
        return this._identityType;
    }
}
exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressFromOutputReference = AccessContextManagerServicePerimeterSpecEgressPoliciesEgressFromOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecEgressPoliciesEgressFromOutputReference[_a] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressFromOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        method: cdktf.stringToTerraform(struct.method),
        permission: cdktf.stringToTerraform(struct.permission),
    };
}
exports.accessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsToTerraform = accessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsToTerraform;
class AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._method !== undefined) {
            hasAnyValues = true;
            internalValueResult.method = this._method;
        }
        if (this._permission !== undefined) {
            hasAnyValues = true;
            internalValueResult.permission = this._permission;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._method = undefined;
            this._permission = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._method = value.method;
            this._permission = value.permission;
        }
    }
    get method() {
        return this.getStringAttribute('method');
    }
    set method(value) {
        this._method = value;
    }
    resetMethod() {
        this._method = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodInput() {
        return this._method;
    }
    get permission() {
        return this.getStringAttribute('permission');
    }
    set permission(value) {
        this._permission = value;
    }
    resetPermission() {
        this._permission = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission;
    }
}
exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference = AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference[_b] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsList = AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsList;
_c = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsList[_c] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsList", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
        method_selectors: cdktf.listMapper(accessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsToTerraform, true)(struct.methodSelectors),
    };
}
exports.accessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsToTerraform = accessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsToTerraform;
class AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // method_selectors - computed: false, optional: true, required: false
        this._methodSelectors = new AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsMethodSelectorsList(this, "method_selectors", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._methodSelectors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.methodSelectors = this._methodSelectors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._serviceName = undefined;
            this._methodSelectors.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._serviceName = value.serviceName;
            this._methodSelectors.internalValue = value.methodSelectors;
        }
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get methodSelectors() {
        return this._methodSelectors;
    }
    putMethodSelectors(value) {
        this._methodSelectors.internalValue = value;
    }
    resetMethodSelectors() {
        this._methodSelectors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodSelectorsInput() {
        return this._methodSelectors.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsOutputReference = AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsOutputReference[_d] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsList = AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsList;
_e = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsList[_e] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsList", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecEgressPoliciesEgressToToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        external_resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.externalResources),
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        operations: cdktf.listMapper(accessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsToTerraform, true)(struct.operations),
    };
}
exports.accessContextManagerServicePerimeterSpecEgressPoliciesEgressToToTerraform = accessContextManagerServicePerimeterSpecEgressPoliciesEgressToToTerraform;
class AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // operations - computed: false, optional: true, required: false
        this._operations = new AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOperationsList(this, "operations", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._externalResources !== undefined) {
            hasAnyValues = true;
            internalValueResult.externalResources = this._externalResources;
        }
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._operations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.operations = this._operations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._externalResources = undefined;
            this._resources = undefined;
            this._operations.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._externalResources = value.externalResources;
            this._resources = value.resources;
            this._operations.internalValue = value.operations;
        }
    }
    get externalResources() {
        return this.getListAttribute('external_resources');
    }
    set externalResources(value) {
        this._externalResources = value;
    }
    resetExternalResources() {
        this._externalResources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get externalResourcesInput() {
        return this._externalResources;
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get operations() {
        return this._operations;
    }
    putOperations(value) {
        this._operations.internalValue = value;
    }
    resetOperations() {
        this._operations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operationsInput() {
        return this._operations.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOutputReference = AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOutputReference;
_f = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOutputReference[_f] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecEgressPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        egress_from: accessContextManagerServicePerimeterSpecEgressPoliciesEgressFromToTerraform(struct.egressFrom),
        egress_to: accessContextManagerServicePerimeterSpecEgressPoliciesEgressToToTerraform(struct.egressTo),
    };
}
exports.accessContextManagerServicePerimeterSpecEgressPoliciesToTerraform = accessContextManagerServicePerimeterSpecEgressPoliciesToTerraform;
class AccessContextManagerServicePerimeterSpecEgressPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // egress_from - computed: false, optional: true, required: false
        this._egressFrom = new AccessContextManagerServicePerimeterSpecEgressPoliciesEgressFromOutputReference(this, "egress_from");
        // egress_to - computed: false, optional: true, required: false
        this._egressTo = new AccessContextManagerServicePerimeterSpecEgressPoliciesEgressToOutputReference(this, "egress_to");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._egressFrom?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressFrom = this._egressFrom?.internalValue;
        }
        if (this._egressTo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressTo = this._egressTo?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._egressFrom.internalValue = undefined;
            this._egressTo.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._egressFrom.internalValue = value.egressFrom;
            this._egressTo.internalValue = value.egressTo;
        }
    }
    get egressFrom() {
        return this._egressFrom;
    }
    putEgressFrom(value) {
        this._egressFrom.internalValue = value;
    }
    resetEgressFrom() {
        this._egressFrom.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressFromInput() {
        return this._egressFrom.internalValue;
    }
    get egressTo() {
        return this._egressTo;
    }
    putEgressTo(value) {
        this._egressTo.internalValue = value;
    }
    resetEgressTo() {
        this._egressTo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressToInput() {
        return this._egressTo.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterSpecEgressPoliciesOutputReference = AccessContextManagerServicePerimeterSpecEgressPoliciesOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecEgressPoliciesOutputReference[_g] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecEgressPoliciesOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterSpecEgressPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterSpecEgressPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterSpecEgressPoliciesList = AccessContextManagerServicePerimeterSpecEgressPoliciesList;
_h = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecEgressPoliciesList[_h] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecEgressPoliciesList", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_level: cdktf.stringToTerraform(struct.accessLevel),
        resource: cdktf.stringToTerraform(struct.resource),
    };
}
exports.accessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesToTerraform = accessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesToTerraform;
class AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessLevel = this._accessLevel;
        }
        if (this._resource !== undefined) {
            hasAnyValues = true;
            internalValueResult.resource = this._resource;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._accessLevel = undefined;
            this._resource = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._accessLevel = value.accessLevel;
            this._resource = value.resource;
        }
    }
    get accessLevel() {
        return this.getStringAttribute('access_level');
    }
    set accessLevel(value) {
        this._accessLevel = value;
    }
    resetAccessLevel() {
        this._accessLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessLevelInput() {
        return this._accessLevel;
    }
    get resource() {
        return this.getStringAttribute('resource');
    }
    set resource(value) {
        this._resource = value;
    }
    resetResource() {
        this._resource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceInput() {
        return this._resource;
    }
}
exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesOutputReference = AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesOutputReference[_j] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesList = AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesList;
_k = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesList[_k] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesList", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecIngressPoliciesIngressFromToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identities: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.identities),
        identity_type: cdktf.stringToTerraform(struct.identityType),
        sources: cdktf.listMapper(accessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesToTerraform, true)(struct.sources),
    };
}
exports.accessContextManagerServicePerimeterSpecIngressPoliciesIngressFromToTerraform = accessContextManagerServicePerimeterSpecIngressPoliciesIngressFromToTerraform;
class AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sources - computed: false, optional: true, required: false
        this._sources = new AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromSourcesList(this, "sources", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._identities !== undefined) {
            hasAnyValues = true;
            internalValueResult.identities = this._identities;
        }
        if (this._identityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityType = this._identityType;
        }
        if (this._sources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sources = this._sources?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._identities = undefined;
            this._identityType = undefined;
            this._sources.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._identities = value.identities;
            this._identityType = value.identityType;
            this._sources.internalValue = value.sources;
        }
    }
    get identities() {
        return this.getListAttribute('identities');
    }
    set identities(value) {
        this._identities = value;
    }
    resetIdentities() {
        this._identities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identitiesInput() {
        return this._identities;
    }
    get identityType() {
        return this.getStringAttribute('identity_type');
    }
    set identityType(value) {
        this._identityType = value;
    }
    resetIdentityType() {
        this._identityType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityTypeInput() {
        return this._identityType;
    }
    get sources() {
        return this._sources;
    }
    putSources(value) {
        this._sources.internalValue = value;
    }
    resetSources() {
        this._sources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourcesInput() {
        return this._sources.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromOutputReference = AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromOutputReference;
_l = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromOutputReference[_l] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        method: cdktf.stringToTerraform(struct.method),
        permission: cdktf.stringToTerraform(struct.permission),
    };
}
exports.accessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsToTerraform = accessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsToTerraform;
class AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._method !== undefined) {
            hasAnyValues = true;
            internalValueResult.method = this._method;
        }
        if (this._permission !== undefined) {
            hasAnyValues = true;
            internalValueResult.permission = this._permission;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._method = undefined;
            this._permission = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._method = value.method;
            this._permission = value.permission;
        }
    }
    get method() {
        return this.getStringAttribute('method');
    }
    set method(value) {
        this._method = value;
    }
    resetMethod() {
        this._method = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodInput() {
        return this._method;
    }
    get permission() {
        return this.getStringAttribute('permission');
    }
    set permission(value) {
        this._permission = value;
    }
    resetPermission() {
        this._permission = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission;
    }
}
exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference = AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference[_m] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsList = AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsList;
_o = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsList[_o] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsList", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
        method_selectors: cdktf.listMapper(accessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsToTerraform, true)(struct.methodSelectors),
    };
}
exports.accessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsToTerraform = accessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsToTerraform;
class AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // method_selectors - computed: false, optional: true, required: false
        this._methodSelectors = new AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsMethodSelectorsList(this, "method_selectors", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._methodSelectors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.methodSelectors = this._methodSelectors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._serviceName = undefined;
            this._methodSelectors.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._serviceName = value.serviceName;
            this._methodSelectors.internalValue = value.methodSelectors;
        }
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get methodSelectors() {
        return this._methodSelectors;
    }
    putMethodSelectors(value) {
        this._methodSelectors.internalValue = value;
    }
    resetMethodSelectors() {
        this._methodSelectors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodSelectorsInput() {
        return this._methodSelectors.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsOutputReference = AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsOutputReference[_p] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsList = AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsList;
_q = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsList[_q] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsList", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecIngressPoliciesIngressToToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        operations: cdktf.listMapper(accessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsToTerraform, true)(struct.operations),
    };
}
exports.accessContextManagerServicePerimeterSpecIngressPoliciesIngressToToTerraform = accessContextManagerServicePerimeterSpecIngressPoliciesIngressToToTerraform;
class AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // operations - computed: false, optional: true, required: false
        this._operations = new AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOperationsList(this, "operations", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._operations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.operations = this._operations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resources = undefined;
            this._operations.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resources = value.resources;
            this._operations.internalValue = value.operations;
        }
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get operations() {
        return this._operations;
    }
    putOperations(value) {
        this._operations.internalValue = value;
    }
    resetOperations() {
        this._operations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operationsInput() {
        return this._operations.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOutputReference = AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOutputReference;
_r = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOutputReference[_r] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecIngressPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ingress_from: accessContextManagerServicePerimeterSpecIngressPoliciesIngressFromToTerraform(struct.ingressFrom),
        ingress_to: accessContextManagerServicePerimeterSpecIngressPoliciesIngressToToTerraform(struct.ingressTo),
    };
}
exports.accessContextManagerServicePerimeterSpecIngressPoliciesToTerraform = accessContextManagerServicePerimeterSpecIngressPoliciesToTerraform;
class AccessContextManagerServicePerimeterSpecIngressPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // ingress_from - computed: false, optional: true, required: false
        this._ingressFrom = new AccessContextManagerServicePerimeterSpecIngressPoliciesIngressFromOutputReference(this, "ingress_from");
        // ingress_to - computed: false, optional: true, required: false
        this._ingressTo = new AccessContextManagerServicePerimeterSpecIngressPoliciesIngressToOutputReference(this, "ingress_to");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ingressFrom?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressFrom = this._ingressFrom?.internalValue;
        }
        if (this._ingressTo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressTo = this._ingressTo?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ingressFrom.internalValue = undefined;
            this._ingressTo.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ingressFrom.internalValue = value.ingressFrom;
            this._ingressTo.internalValue = value.ingressTo;
        }
    }
    get ingressFrom() {
        return this._ingressFrom;
    }
    putIngressFrom(value) {
        this._ingressFrom.internalValue = value;
    }
    resetIngressFrom() {
        this._ingressFrom.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressFromInput() {
        return this._ingressFrom.internalValue;
    }
    get ingressTo() {
        return this._ingressTo;
    }
    putIngressTo(value) {
        this._ingressTo.internalValue = value;
    }
    resetIngressTo() {
        this._ingressTo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressToInput() {
        return this._ingressTo.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterSpecIngressPoliciesOutputReference = AccessContextManagerServicePerimeterSpecIngressPoliciesOutputReference;
_s = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecIngressPoliciesOutputReference[_s] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecIngressPoliciesOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterSpecIngressPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterSpecIngressPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterSpecIngressPoliciesList = AccessContextManagerServicePerimeterSpecIngressPoliciesList;
_t = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecIngressPoliciesList[_t] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecIngressPoliciesList", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecVpcAccessibleServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_services: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedServices),
        enable_restriction: cdktf.booleanToTerraform(struct.enableRestriction),
    };
}
exports.accessContextManagerServicePerimeterSpecVpcAccessibleServicesToTerraform = accessContextManagerServicePerimeterSpecVpcAccessibleServicesToTerraform;
class AccessContextManagerServicePerimeterSpecVpcAccessibleServicesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedServices !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedServices = this._allowedServices;
        }
        if (this._enableRestriction !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableRestriction = this._enableRestriction;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedServices = undefined;
            this._enableRestriction = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedServices = value.allowedServices;
            this._enableRestriction = value.enableRestriction;
        }
    }
    get allowedServices() {
        return this.getListAttribute('allowed_services');
    }
    set allowedServices(value) {
        this._allowedServices = value;
    }
    resetAllowedServices() {
        this._allowedServices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedServicesInput() {
        return this._allowedServices;
    }
    get enableRestriction() {
        return this.getBooleanAttribute('enable_restriction');
    }
    set enableRestriction(value) {
        this._enableRestriction = value;
    }
    resetEnableRestriction() {
        this._enableRestriction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableRestrictionInput() {
        return this._enableRestriction;
    }
}
exports.AccessContextManagerServicePerimeterSpecVpcAccessibleServicesOutputReference = AccessContextManagerServicePerimeterSpecVpcAccessibleServicesOutputReference;
_u = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecVpcAccessibleServicesOutputReference[_u] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecVpcAccessibleServicesOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_levels: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.accessLevels),
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        restricted_services: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.restrictedServices),
        egress_policies: cdktf.listMapper(accessContextManagerServicePerimeterSpecEgressPoliciesToTerraform, true)(struct.egressPolicies),
        ingress_policies: cdktf.listMapper(accessContextManagerServicePerimeterSpecIngressPoliciesToTerraform, true)(struct.ingressPolicies),
        vpc_accessible_services: accessContextManagerServicePerimeterSpecVpcAccessibleServicesToTerraform(struct.vpcAccessibleServices),
    };
}
exports.accessContextManagerServicePerimeterSpecToTerraform = accessContextManagerServicePerimeterSpecToTerraform;
class AccessContextManagerServicePerimeterSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // egress_policies - computed: false, optional: true, required: false
        this._egressPolicies = new AccessContextManagerServicePerimeterSpecEgressPoliciesList(this, "egress_policies", false);
        // ingress_policies - computed: false, optional: true, required: false
        this._ingressPolicies = new AccessContextManagerServicePerimeterSpecIngressPoliciesList(this, "ingress_policies", false);
        // vpc_accessible_services - computed: false, optional: true, required: false
        this._vpcAccessibleServices = new AccessContextManagerServicePerimeterSpecVpcAccessibleServicesOutputReference(this, "vpc_accessible_services");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessLevels = this._accessLevels;
        }
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._restrictedServices !== undefined) {
            hasAnyValues = true;
            internalValueResult.restrictedServices = this._restrictedServices;
        }
        if (this._egressPolicies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressPolicies = this._egressPolicies?.internalValue;
        }
        if (this._ingressPolicies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressPolicies = this._ingressPolicies?.internalValue;
        }
        if (this._vpcAccessibleServices?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcAccessibleServices = this._vpcAccessibleServices?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessLevels = undefined;
            this._resources = undefined;
            this._restrictedServices = undefined;
            this._egressPolicies.internalValue = undefined;
            this._ingressPolicies.internalValue = undefined;
            this._vpcAccessibleServices.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessLevels = value.accessLevels;
            this._resources = value.resources;
            this._restrictedServices = value.restrictedServices;
            this._egressPolicies.internalValue = value.egressPolicies;
            this._ingressPolicies.internalValue = value.ingressPolicies;
            this._vpcAccessibleServices.internalValue = value.vpcAccessibleServices;
        }
    }
    get accessLevels() {
        return this.getListAttribute('access_levels');
    }
    set accessLevels(value) {
        this._accessLevels = value;
    }
    resetAccessLevels() {
        this._accessLevels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessLevelsInput() {
        return this._accessLevels;
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get restrictedServices() {
        return this.getListAttribute('restricted_services');
    }
    set restrictedServices(value) {
        this._restrictedServices = value;
    }
    resetRestrictedServices() {
        this._restrictedServices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restrictedServicesInput() {
        return this._restrictedServices;
    }
    get egressPolicies() {
        return this._egressPolicies;
    }
    putEgressPolicies(value) {
        this._egressPolicies.internalValue = value;
    }
    resetEgressPolicies() {
        this._egressPolicies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressPoliciesInput() {
        return this._egressPolicies.internalValue;
    }
    get ingressPolicies() {
        return this._ingressPolicies;
    }
    putIngressPolicies(value) {
        this._ingressPolicies.internalValue = value;
    }
    resetIngressPolicies() {
        this._ingressPolicies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressPoliciesInput() {
        return this._ingressPolicies.internalValue;
    }
    get vpcAccessibleServices() {
        return this._vpcAccessibleServices;
    }
    putVpcAccessibleServices(value) {
        this._vpcAccessibleServices.internalValue = value;
    }
    resetVpcAccessibleServices() {
        this._vpcAccessibleServices.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcAccessibleServicesInput() {
        return this._vpcAccessibleServices.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterSpecOutputReference = AccessContextManagerServicePerimeterSpecOutputReference;
_v = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterSpecOutputReference[_v] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterSpecOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusEgressPoliciesEgressFromToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identities: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.identities),
        identity_type: cdktf.stringToTerraform(struct.identityType),
    };
}
exports.accessContextManagerServicePerimeterStatusEgressPoliciesEgressFromToTerraform = accessContextManagerServicePerimeterStatusEgressPoliciesEgressFromToTerraform;
class AccessContextManagerServicePerimeterStatusEgressPoliciesEgressFromOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._identities !== undefined) {
            hasAnyValues = true;
            internalValueResult.identities = this._identities;
        }
        if (this._identityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityType = this._identityType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._identities = undefined;
            this._identityType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._identities = value.identities;
            this._identityType = value.identityType;
        }
    }
    get identities() {
        return this.getListAttribute('identities');
    }
    set identities(value) {
        this._identities = value;
    }
    resetIdentities() {
        this._identities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identitiesInput() {
        return this._identities;
    }
    get identityType() {
        return this.getStringAttribute('identity_type');
    }
    set identityType(value) {
        this._identityType = value;
    }
    resetIdentityType() {
        this._identityType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityTypeInput() {
        return this._identityType;
    }
}
exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressFromOutputReference = AccessContextManagerServicePerimeterStatusEgressPoliciesEgressFromOutputReference;
_w = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusEgressPoliciesEgressFromOutputReference[_w] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressFromOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        method: cdktf.stringToTerraform(struct.method),
        permission: cdktf.stringToTerraform(struct.permission),
    };
}
exports.accessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsToTerraform = accessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsToTerraform;
class AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._method !== undefined) {
            hasAnyValues = true;
            internalValueResult.method = this._method;
        }
        if (this._permission !== undefined) {
            hasAnyValues = true;
            internalValueResult.permission = this._permission;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._method = undefined;
            this._permission = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._method = value.method;
            this._permission = value.permission;
        }
    }
    get method() {
        return this.getStringAttribute('method');
    }
    set method(value) {
        this._method = value;
    }
    resetMethod() {
        this._method = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodInput() {
        return this._method;
    }
    get permission() {
        return this.getStringAttribute('permission');
    }
    set permission(value) {
        this._permission = value;
    }
    resetPermission() {
        this._permission = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission;
    }
}
exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference = AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference[_x] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsList = AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsList;
_y = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsList[_y] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsList", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
        method_selectors: cdktf.listMapper(accessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsToTerraform, true)(struct.methodSelectors),
    };
}
exports.accessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsToTerraform = accessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsToTerraform;
class AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // method_selectors - computed: false, optional: true, required: false
        this._methodSelectors = new AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsMethodSelectorsList(this, "method_selectors", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._methodSelectors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.methodSelectors = this._methodSelectors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._serviceName = undefined;
            this._methodSelectors.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._serviceName = value.serviceName;
            this._methodSelectors.internalValue = value.methodSelectors;
        }
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get methodSelectors() {
        return this._methodSelectors;
    }
    putMethodSelectors(value) {
        this._methodSelectors.internalValue = value;
    }
    resetMethodSelectors() {
        this._methodSelectors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodSelectorsInput() {
        return this._methodSelectors.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsOutputReference = AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsOutputReference;
_z = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsOutputReference[_z] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsList = AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsList;
_0 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsList[_0] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsList", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusEgressPoliciesEgressToToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        external_resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.externalResources),
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        operations: cdktf.listMapper(accessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsToTerraform, true)(struct.operations),
    };
}
exports.accessContextManagerServicePerimeterStatusEgressPoliciesEgressToToTerraform = accessContextManagerServicePerimeterStatusEgressPoliciesEgressToToTerraform;
class AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // operations - computed: false, optional: true, required: false
        this._operations = new AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOperationsList(this, "operations", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._externalResources !== undefined) {
            hasAnyValues = true;
            internalValueResult.externalResources = this._externalResources;
        }
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._operations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.operations = this._operations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._externalResources = undefined;
            this._resources = undefined;
            this._operations.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._externalResources = value.externalResources;
            this._resources = value.resources;
            this._operations.internalValue = value.operations;
        }
    }
    get externalResources() {
        return this.getListAttribute('external_resources');
    }
    set externalResources(value) {
        this._externalResources = value;
    }
    resetExternalResources() {
        this._externalResources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get externalResourcesInput() {
        return this._externalResources;
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get operations() {
        return this._operations;
    }
    putOperations(value) {
        this._operations.internalValue = value;
    }
    resetOperations() {
        this._operations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operationsInput() {
        return this._operations.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOutputReference = AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOutputReference[_1] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusEgressPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        egress_from: accessContextManagerServicePerimeterStatusEgressPoliciesEgressFromToTerraform(struct.egressFrom),
        egress_to: accessContextManagerServicePerimeterStatusEgressPoliciesEgressToToTerraform(struct.egressTo),
    };
}
exports.accessContextManagerServicePerimeterStatusEgressPoliciesToTerraform = accessContextManagerServicePerimeterStatusEgressPoliciesToTerraform;
class AccessContextManagerServicePerimeterStatusEgressPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // egress_from - computed: false, optional: true, required: false
        this._egressFrom = new AccessContextManagerServicePerimeterStatusEgressPoliciesEgressFromOutputReference(this, "egress_from");
        // egress_to - computed: false, optional: true, required: false
        this._egressTo = new AccessContextManagerServicePerimeterStatusEgressPoliciesEgressToOutputReference(this, "egress_to");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._egressFrom?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressFrom = this._egressFrom?.internalValue;
        }
        if (this._egressTo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressTo = this._egressTo?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._egressFrom.internalValue = undefined;
            this._egressTo.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._egressFrom.internalValue = value.egressFrom;
            this._egressTo.internalValue = value.egressTo;
        }
    }
    get egressFrom() {
        return this._egressFrom;
    }
    putEgressFrom(value) {
        this._egressFrom.internalValue = value;
    }
    resetEgressFrom() {
        this._egressFrom.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressFromInput() {
        return this._egressFrom.internalValue;
    }
    get egressTo() {
        return this._egressTo;
    }
    putEgressTo(value) {
        this._egressTo.internalValue = value;
    }
    resetEgressTo() {
        this._egressTo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressToInput() {
        return this._egressTo.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterStatusEgressPoliciesOutputReference = AccessContextManagerServicePerimeterStatusEgressPoliciesOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusEgressPoliciesOutputReference[_2] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusEgressPoliciesOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterStatusEgressPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterStatusEgressPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterStatusEgressPoliciesList = AccessContextManagerServicePerimeterStatusEgressPoliciesList;
_3 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusEgressPoliciesList[_3] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusEgressPoliciesList", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_level: cdktf.stringToTerraform(struct.accessLevel),
        resource: cdktf.stringToTerraform(struct.resource),
    };
}
exports.accessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesToTerraform = accessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesToTerraform;
class AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessLevel = this._accessLevel;
        }
        if (this._resource !== undefined) {
            hasAnyValues = true;
            internalValueResult.resource = this._resource;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._accessLevel = undefined;
            this._resource = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._accessLevel = value.accessLevel;
            this._resource = value.resource;
        }
    }
    get accessLevel() {
        return this.getStringAttribute('access_level');
    }
    set accessLevel(value) {
        this._accessLevel = value;
    }
    resetAccessLevel() {
        this._accessLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessLevelInput() {
        return this._accessLevel;
    }
    get resource() {
        return this.getStringAttribute('resource');
    }
    set resource(value) {
        this._resource = value;
    }
    resetResource() {
        this._resource = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceInput() {
        return this._resource;
    }
}
exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesOutputReference = AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesOutputReference[_4] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesList = AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesList;
_5 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesList[_5] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesList", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusIngressPoliciesIngressFromToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identities: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.identities),
        identity_type: cdktf.stringToTerraform(struct.identityType),
        sources: cdktf.listMapper(accessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesToTerraform, true)(struct.sources),
    };
}
exports.accessContextManagerServicePerimeterStatusIngressPoliciesIngressFromToTerraform = accessContextManagerServicePerimeterStatusIngressPoliciesIngressFromToTerraform;
class AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sources - computed: false, optional: true, required: false
        this._sources = new AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromSourcesList(this, "sources", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._identities !== undefined) {
            hasAnyValues = true;
            internalValueResult.identities = this._identities;
        }
        if (this._identityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.identityType = this._identityType;
        }
        if (this._sources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sources = this._sources?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._identities = undefined;
            this._identityType = undefined;
            this._sources.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._identities = value.identities;
            this._identityType = value.identityType;
            this._sources.internalValue = value.sources;
        }
    }
    get identities() {
        return this.getListAttribute('identities');
    }
    set identities(value) {
        this._identities = value;
    }
    resetIdentities() {
        this._identities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identitiesInput() {
        return this._identities;
    }
    get identityType() {
        return this.getStringAttribute('identity_type');
    }
    set identityType(value) {
        this._identityType = value;
    }
    resetIdentityType() {
        this._identityType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identityTypeInput() {
        return this._identityType;
    }
    get sources() {
        return this._sources;
    }
    putSources(value) {
        this._sources.internalValue = value;
    }
    resetSources() {
        this._sources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourcesInput() {
        return this._sources.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromOutputReference = AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromOutputReference[_6] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        method: cdktf.stringToTerraform(struct.method),
        permission: cdktf.stringToTerraform(struct.permission),
    };
}
exports.accessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsToTerraform = accessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsToTerraform;
class AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._method !== undefined) {
            hasAnyValues = true;
            internalValueResult.method = this._method;
        }
        if (this._permission !== undefined) {
            hasAnyValues = true;
            internalValueResult.permission = this._permission;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._method = undefined;
            this._permission = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._method = value.method;
            this._permission = value.permission;
        }
    }
    get method() {
        return this.getStringAttribute('method');
    }
    set method(value) {
        this._method = value;
    }
    resetMethod() {
        this._method = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodInput() {
        return this._method;
    }
    get permission() {
        return this.getStringAttribute('permission');
    }
    set permission(value) {
        this._permission = value;
    }
    resetPermission() {
        this._permission = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionInput() {
        return this._permission;
    }
}
exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference = AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference[_7] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsList = AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsList;
_8 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsList[_8] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsList", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_name: cdktf.stringToTerraform(struct.serviceName),
        method_selectors: cdktf.listMapper(accessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsToTerraform, true)(struct.methodSelectors),
    };
}
exports.accessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsToTerraform = accessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsToTerraform;
class AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // method_selectors - computed: false, optional: true, required: false
        this._methodSelectors = new AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsMethodSelectorsList(this, "method_selectors", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        if (this._methodSelectors?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.methodSelectors = this._methodSelectors?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._serviceName = undefined;
            this._methodSelectors.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._serviceName = value.serviceName;
            this._methodSelectors.internalValue = value.methodSelectors;
        }
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    resetServiceName() {
        this._serviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
    get methodSelectors() {
        return this._methodSelectors;
    }
    putMethodSelectors(value) {
        this._methodSelectors.internalValue = value;
    }
    resetMethodSelectors() {
        this._methodSelectors.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodSelectorsInput() {
        return this._methodSelectors.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsOutputReference = AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsOutputReference[_9] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsList = AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsList;
_10 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsList[_10] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsList", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusIngressPoliciesIngressToToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        operations: cdktf.listMapper(accessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsToTerraform, true)(struct.operations),
    };
}
exports.accessContextManagerServicePerimeterStatusIngressPoliciesIngressToToTerraform = accessContextManagerServicePerimeterStatusIngressPoliciesIngressToToTerraform;
class AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // operations - computed: false, optional: true, required: false
        this._operations = new AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOperationsList(this, "operations", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._operations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.operations = this._operations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resources = undefined;
            this._operations.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resources = value.resources;
            this._operations.internalValue = value.operations;
        }
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get operations() {
        return this._operations;
    }
    putOperations(value) {
        this._operations.internalValue = value;
    }
    resetOperations() {
        this._operations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operationsInput() {
        return this._operations.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOutputReference = AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOutputReference[_11] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusIngressPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ingress_from: accessContextManagerServicePerimeterStatusIngressPoliciesIngressFromToTerraform(struct.ingressFrom),
        ingress_to: accessContextManagerServicePerimeterStatusIngressPoliciesIngressToToTerraform(struct.ingressTo),
    };
}
exports.accessContextManagerServicePerimeterStatusIngressPoliciesToTerraform = accessContextManagerServicePerimeterStatusIngressPoliciesToTerraform;
class AccessContextManagerServicePerimeterStatusIngressPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // ingress_from - computed: false, optional: true, required: false
        this._ingressFrom = new AccessContextManagerServicePerimeterStatusIngressPoliciesIngressFromOutputReference(this, "ingress_from");
        // ingress_to - computed: false, optional: true, required: false
        this._ingressTo = new AccessContextManagerServicePerimeterStatusIngressPoliciesIngressToOutputReference(this, "ingress_to");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ingressFrom?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressFrom = this._ingressFrom?.internalValue;
        }
        if (this._ingressTo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressTo = this._ingressTo?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ingressFrom.internalValue = undefined;
            this._ingressTo.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ingressFrom.internalValue = value.ingressFrom;
            this._ingressTo.internalValue = value.ingressTo;
        }
    }
    get ingressFrom() {
        return this._ingressFrom;
    }
    putIngressFrom(value) {
        this._ingressFrom.internalValue = value;
    }
    resetIngressFrom() {
        this._ingressFrom.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressFromInput() {
        return this._ingressFrom.internalValue;
    }
    get ingressTo() {
        return this._ingressTo;
    }
    putIngressTo(value) {
        this._ingressTo.internalValue = value;
    }
    resetIngressTo() {
        this._ingressTo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressToInput() {
        return this._ingressTo.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterStatusIngressPoliciesOutputReference = AccessContextManagerServicePerimeterStatusIngressPoliciesOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusIngressPoliciesOutputReference[_12] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusIngressPoliciesOutputReference", version: "5.0.1" };
class AccessContextManagerServicePerimeterStatusIngressPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AccessContextManagerServicePerimeterStatusIngressPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AccessContextManagerServicePerimeterStatusIngressPoliciesList = AccessContextManagerServicePerimeterStatusIngressPoliciesList;
_13 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusIngressPoliciesList[_13] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusIngressPoliciesList", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusVpcAccessibleServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_services: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedServices),
        enable_restriction: cdktf.booleanToTerraform(struct.enableRestriction),
    };
}
exports.accessContextManagerServicePerimeterStatusVpcAccessibleServicesToTerraform = accessContextManagerServicePerimeterStatusVpcAccessibleServicesToTerraform;
class AccessContextManagerServicePerimeterStatusVpcAccessibleServicesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedServices !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedServices = this._allowedServices;
        }
        if (this._enableRestriction !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableRestriction = this._enableRestriction;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedServices = undefined;
            this._enableRestriction = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedServices = value.allowedServices;
            this._enableRestriction = value.enableRestriction;
        }
    }
    get allowedServices() {
        return cdktf.Fn.tolist(this.getListAttribute('allowed_services'));
    }
    set allowedServices(value) {
        this._allowedServices = value;
    }
    resetAllowedServices() {
        this._allowedServices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedServicesInput() {
        return this._allowedServices;
    }
    get enableRestriction() {
        return this.getBooleanAttribute('enable_restriction');
    }
    set enableRestriction(value) {
        this._enableRestriction = value;
    }
    resetEnableRestriction() {
        this._enableRestriction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableRestrictionInput() {
        return this._enableRestriction;
    }
}
exports.AccessContextManagerServicePerimeterStatusVpcAccessibleServicesOutputReference = AccessContextManagerServicePerimeterStatusVpcAccessibleServicesOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusVpcAccessibleServicesOutputReference[_14] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusVpcAccessibleServicesOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_levels: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.accessLevels),
        resources: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resources),
        restricted_services: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.restrictedServices),
        egress_policies: cdktf.listMapper(accessContextManagerServicePerimeterStatusEgressPoliciesToTerraform, true)(struct.egressPolicies),
        ingress_policies: cdktf.listMapper(accessContextManagerServicePerimeterStatusIngressPoliciesToTerraform, true)(struct.ingressPolicies),
        vpc_accessible_services: accessContextManagerServicePerimeterStatusVpcAccessibleServicesToTerraform(struct.vpcAccessibleServices),
    };
}
exports.accessContextManagerServicePerimeterStatusToTerraform = accessContextManagerServicePerimeterStatusToTerraform;
class AccessContextManagerServicePerimeterStatusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // egress_policies - computed: false, optional: true, required: false
        this._egressPolicies = new AccessContextManagerServicePerimeterStatusEgressPoliciesList(this, "egress_policies", false);
        // ingress_policies - computed: false, optional: true, required: false
        this._ingressPolicies = new AccessContextManagerServicePerimeterStatusIngressPoliciesList(this, "ingress_policies", false);
        // vpc_accessible_services - computed: false, optional: true, required: false
        this._vpcAccessibleServices = new AccessContextManagerServicePerimeterStatusVpcAccessibleServicesOutputReference(this, "vpc_accessible_services");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessLevels = this._accessLevels;
        }
        if (this._resources !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources;
        }
        if (this._restrictedServices !== undefined) {
            hasAnyValues = true;
            internalValueResult.restrictedServices = this._restrictedServices;
        }
        if (this._egressPolicies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.egressPolicies = this._egressPolicies?.internalValue;
        }
        if (this._ingressPolicies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ingressPolicies = this._ingressPolicies?.internalValue;
        }
        if (this._vpcAccessibleServices?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcAccessibleServices = this._vpcAccessibleServices?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessLevels = undefined;
            this._resources = undefined;
            this._restrictedServices = undefined;
            this._egressPolicies.internalValue = undefined;
            this._ingressPolicies.internalValue = undefined;
            this._vpcAccessibleServices.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessLevels = value.accessLevels;
            this._resources = value.resources;
            this._restrictedServices = value.restrictedServices;
            this._egressPolicies.internalValue = value.egressPolicies;
            this._ingressPolicies.internalValue = value.ingressPolicies;
            this._vpcAccessibleServices.internalValue = value.vpcAccessibleServices;
        }
    }
    get accessLevels() {
        return this.getListAttribute('access_levels');
    }
    set accessLevels(value) {
        this._accessLevels = value;
    }
    resetAccessLevels() {
        this._accessLevels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessLevelsInput() {
        return this._accessLevels;
    }
    get resources() {
        return this.getListAttribute('resources');
    }
    set resources(value) {
        this._resources = value;
    }
    resetResources() {
        this._resources = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources;
    }
    get restrictedServices() {
        return cdktf.Fn.tolist(this.getListAttribute('restricted_services'));
    }
    set restrictedServices(value) {
        this._restrictedServices = value;
    }
    resetRestrictedServices() {
        this._restrictedServices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restrictedServicesInput() {
        return this._restrictedServices;
    }
    get egressPolicies() {
        return this._egressPolicies;
    }
    putEgressPolicies(value) {
        this._egressPolicies.internalValue = value;
    }
    resetEgressPolicies() {
        this._egressPolicies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get egressPoliciesInput() {
        return this._egressPolicies.internalValue;
    }
    get ingressPolicies() {
        return this._ingressPolicies;
    }
    putIngressPolicies(value) {
        this._ingressPolicies.internalValue = value;
    }
    resetIngressPolicies() {
        this._ingressPolicies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ingressPoliciesInput() {
        return this._ingressPolicies.internalValue;
    }
    get vpcAccessibleServices() {
        return this._vpcAccessibleServices;
    }
    putVpcAccessibleServices(value) {
        this._vpcAccessibleServices.internalValue = value;
    }
    resetVpcAccessibleServices() {
        this._vpcAccessibleServices.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcAccessibleServicesInput() {
        return this._vpcAccessibleServices.internalValue;
    }
}
exports.AccessContextManagerServicePerimeterStatusOutputReference = AccessContextManagerServicePerimeterStatusOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterStatusOutputReference[_15] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterStatusOutputReference", version: "5.0.1" };
function accessContextManagerServicePerimeterTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.accessContextManagerServicePerimeterTimeoutsToTerraform = accessContextManagerServicePerimeterTimeoutsToTerraform;
class AccessContextManagerServicePerimeterTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.AccessContextManagerServicePerimeterTimeoutsOutputReference = AccessContextManagerServicePerimeterTimeoutsOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeterTimeoutsOutputReference[_16] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeterTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/access_context_manager_service_perimeter google_access_context_manager_service_perimeter}
*/
class AccessContextManagerServicePerimeter extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/access_context_manager_service_perimeter google_access_context_manager_service_perimeter} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AccessContextManagerServicePerimeterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_access_context_manager_service_perimeter',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // spec - computed: false, optional: true, required: false
        this._spec = new AccessContextManagerServicePerimeterSpecOutputReference(this, "spec");
        // status - computed: false, optional: true, required: false
        this._status = new AccessContextManagerServicePerimeterStatusOutputReference(this, "status");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new AccessContextManagerServicePerimeterTimeoutsOutputReference(this, "timeouts");
        this._description = config.description;
        this._id = config.id;
        this._name = config.name;
        this._parent = config.parent;
        this._perimeterType = config.perimeterType;
        this._title = config.title;
        this._useExplicitDryRunSpec = config.useExplicitDryRunSpec;
        this._spec.internalValue = config.spec;
        this._status.internalValue = config.status;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get parent() {
        return this.getStringAttribute('parent');
    }
    set parent(value) {
        this._parent = value;
    }
    // Temporarily expose input value. Use with caution.
    get parentInput() {
        return this._parent;
    }
    get perimeterType() {
        return this.getStringAttribute('perimeter_type');
    }
    set perimeterType(value) {
        this._perimeterType = value;
    }
    resetPerimeterType() {
        this._perimeterType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perimeterTypeInput() {
        return this._perimeterType;
    }
    get title() {
        return this.getStringAttribute('title');
    }
    set title(value) {
        this._title = value;
    }
    // Temporarily expose input value. Use with caution.
    get titleInput() {
        return this._title;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get useExplicitDryRunSpec() {
        return this.getBooleanAttribute('use_explicit_dry_run_spec');
    }
    set useExplicitDryRunSpec(value) {
        this._useExplicitDryRunSpec = value;
    }
    resetUseExplicitDryRunSpec() {
        this._useExplicitDryRunSpec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useExplicitDryRunSpecInput() {
        return this._useExplicitDryRunSpec;
    }
    get spec() {
        return this._spec;
    }
    putSpec(value) {
        this._spec.internalValue = value;
    }
    resetSpec() {
        this._spec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get specInput() {
        return this._spec.internalValue;
    }
    get status() {
        return this._status;
    }
    putStatus(value) {
        this._status.internalValue = value;
    }
    resetStatus() {
        this._status.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            parent: cdktf.stringToTerraform(this._parent),
            perimeter_type: cdktf.stringToTerraform(this._perimeterType),
            title: cdktf.stringToTerraform(this._title),
            use_explicit_dry_run_spec: cdktf.booleanToTerraform(this._useExplicitDryRunSpec),
            spec: accessContextManagerServicePerimeterSpecToTerraform(this._spec.internalValue),
            status: accessContextManagerServicePerimeterStatusToTerraform(this._status.internalValue),
            timeouts: accessContextManagerServicePerimeterTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.AccessContextManagerServicePerimeter = AccessContextManagerServicePerimeter;
_17 = JSII_RTTI_SYMBOL_1;
AccessContextManagerServicePerimeter[_17] = { fqn: "@cdktf/provider-google.accessContextManagerServicePerimeter.AccessContextManagerServicePerimeter", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
AccessContextManagerServicePerimeter.tfResourceType = "google_access_context_manager_service_perimeter";
//# sourceMappingURL=data:application/json;base64,