"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkServicesEdgeCacheService = exports.NetworkServicesEdgeCacheServiceTimeoutsOutputReference = exports.networkServicesEdgeCacheServiceTimeoutsToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingOutputReference = exports.networkServicesEdgeCacheServiceRoutingToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherList = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleList = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleList = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchList = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchList = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveList = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddList = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveList = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddList = exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputReference = exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddToTerraform = exports.NetworkServicesEdgeCacheServiceRoutingHostRuleList = exports.NetworkServicesEdgeCacheServiceRoutingHostRuleOutputReference = exports.networkServicesEdgeCacheServiceRoutingHostRuleToTerraform = exports.NetworkServicesEdgeCacheServiceLogConfigOutputReference = exports.networkServicesEdgeCacheServiceLogConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function networkServicesEdgeCacheServiceLogConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable: cdktf.booleanToTerraform(struct.enable),
        sample_rate: cdktf.numberToTerraform(struct.sampleRate),
    };
}
exports.networkServicesEdgeCacheServiceLogConfigToTerraform = networkServicesEdgeCacheServiceLogConfigToTerraform;
class NetworkServicesEdgeCacheServiceLogConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enable !== undefined) {
            hasAnyValues = true;
            internalValueResult.enable = this._enable;
        }
        if (this._sampleRate !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleRate = this._sampleRate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enable = undefined;
            this._sampleRate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enable = value.enable;
            this._sampleRate = value.sampleRate;
        }
    }
    get enable() {
        return this.getBooleanAttribute('enable');
    }
    set enable(value) {
        this._enable = value;
    }
    resetEnable() {
        this._enable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableInput() {
        return this._enable;
    }
    get sampleRate() {
        return this.getNumberAttribute('sample_rate');
    }
    set sampleRate(value) {
        this._sampleRate = value;
    }
    resetSampleRate() {
        this._sampleRate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleRateInput() {
        return this._sampleRate;
    }
}
exports.NetworkServicesEdgeCacheServiceLogConfigOutputReference = NetworkServicesEdgeCacheServiceLogConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceLogConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceLogConfigOutputReference", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingHostRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        hosts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.hosts),
        path_matcher: cdktf.stringToTerraform(struct.pathMatcher),
    };
}
exports.networkServicesEdgeCacheServiceRoutingHostRuleToTerraform = networkServicesEdgeCacheServiceRoutingHostRuleToTerraform;
class NetworkServicesEdgeCacheServiceRoutingHostRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._hosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.hosts = this._hosts;
        }
        if (this._pathMatcher !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathMatcher = this._pathMatcher;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._hosts = undefined;
            this._pathMatcher = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._hosts = value.hosts;
            this._pathMatcher = value.pathMatcher;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get hosts() {
        return this.getListAttribute('hosts');
    }
    set hosts(value) {
        this._hosts = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostsInput() {
        return this._hosts;
    }
    get pathMatcher() {
        return this.getStringAttribute('path_matcher');
    }
    set pathMatcher(value) {
        this._pathMatcher = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathMatcherInput() {
        return this._pathMatcher;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingHostRuleOutputReference = NetworkServicesEdgeCacheServiceRoutingHostRuleOutputReference;
_b = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingHostRuleOutputReference[_b] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingHostRuleOutputReference", version: "4.0.3" };
class NetworkServicesEdgeCacheServiceRoutingHostRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkServicesEdgeCacheServiceRoutingHostRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingHostRuleList = NetworkServicesEdgeCacheServiceRoutingHostRuleList;
_c = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingHostRuleList[_c] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingHostRuleList", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    resetReplace() {
        this._replace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputReference;
_d = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputReference[_d] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputReference", version: "4.0.3" };
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddList = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddList;
_e = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddList[_e] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddList", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputReference;
_f = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputReference[_f] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputReference", version: "4.0.3" };
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveList = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveList;
_g = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveList[_g] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveList", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    resetReplace() {
        this._replace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputReference;
_h = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputReference[_h] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputReference", version: "4.0.3" };
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddList = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddList;
_j = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddList[_j] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddList", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputReference;
_k = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputReference[_k] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputReference", version: "4.0.3" };
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveList = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveList;
_l = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveList[_l] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveList", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_header_to_add: cdktf.listMapper(networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddToTerraform, true)(struct.requestHeaderToAdd),
        request_header_to_remove: cdktf.listMapper(networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveToTerraform, true)(struct.requestHeaderToRemove),
        response_header_to_add: cdktf.listMapper(networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddToTerraform, true)(struct.responseHeaderToAdd),
        response_header_to_remove: cdktf.listMapper(networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveToTerraform, true)(struct.responseHeaderToRemove),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_header_to_add - computed: false, optional: true, required: false
        this._requestHeaderToAdd = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddList(this, "request_header_to_add", false);
        // request_header_to_remove - computed: false, optional: true, required: false
        this._requestHeaderToRemove = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveList(this, "request_header_to_remove", false);
        // response_header_to_add - computed: false, optional: true, required: false
        this._responseHeaderToAdd = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddList(this, "response_header_to_add", false);
        // response_header_to_remove - computed: false, optional: true, required: false
        this._responseHeaderToRemove = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveList(this, "response_header_to_remove", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeaderToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeaderToAdd = this._requestHeaderToAdd?.internalValue;
        }
        if (this._requestHeaderToRemove?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeaderToRemove = this._requestHeaderToRemove?.internalValue;
        }
        if (this._responseHeaderToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeaderToAdd = this._responseHeaderToAdd?.internalValue;
        }
        if (this._responseHeaderToRemove?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeaderToRemove = this._responseHeaderToRemove?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeaderToAdd.internalValue = undefined;
            this._requestHeaderToRemove.internalValue = undefined;
            this._responseHeaderToAdd.internalValue = undefined;
            this._responseHeaderToRemove.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeaderToAdd.internalValue = value.requestHeaderToAdd;
            this._requestHeaderToRemove.internalValue = value.requestHeaderToRemove;
            this._responseHeaderToAdd.internalValue = value.responseHeaderToAdd;
            this._responseHeaderToRemove.internalValue = value.responseHeaderToRemove;
        }
    }
    get requestHeaderToAdd() {
        return this._requestHeaderToAdd;
    }
    putRequestHeaderToAdd(value) {
        this._requestHeaderToAdd.internalValue = value;
    }
    resetRequestHeaderToAdd() {
        this._requestHeaderToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeaderToAddInput() {
        return this._requestHeaderToAdd.internalValue;
    }
    get requestHeaderToRemove() {
        return this._requestHeaderToRemove;
    }
    putRequestHeaderToRemove(value) {
        this._requestHeaderToRemove.internalValue = value;
    }
    resetRequestHeaderToRemove() {
        this._requestHeaderToRemove.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeaderToRemoveInput() {
        return this._requestHeaderToRemove.internalValue;
    }
    get responseHeaderToAdd() {
        return this._responseHeaderToAdd;
    }
    putResponseHeaderToAdd(value) {
        this._responseHeaderToAdd.internalValue = value;
    }
    resetResponseHeaderToAdd() {
        this._responseHeaderToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeaderToAddInput() {
        return this._responseHeaderToAdd.internalValue;
    }
    get responseHeaderToRemove() {
        return this._responseHeaderToRemove;
    }
    putResponseHeaderToRemove(value) {
        this._responseHeaderToRemove.internalValue = value;
    }
    resetResponseHeaderToRemove() {
        this._responseHeaderToRemove.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeaderToRemoveInput() {
        return this._responseHeaderToRemove.internalValue;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputReference;
_m = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputReference[_m] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputReference", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exact_match: cdktf.stringToTerraform(struct.exactMatch),
        header_name: cdktf.stringToTerraform(struct.headerName),
        invert_match: cdktf.booleanToTerraform(struct.invertMatch),
        prefix_match: cdktf.stringToTerraform(struct.prefixMatch),
        present_match: cdktf.booleanToTerraform(struct.presentMatch),
        suffix_match: cdktf.stringToTerraform(struct.suffixMatch),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exactMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.exactMatch = this._exactMatch;
        }
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._invertMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertMatch = this._invertMatch;
        }
        if (this._prefixMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixMatch = this._prefixMatch;
        }
        if (this._presentMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.presentMatch = this._presentMatch;
        }
        if (this._suffixMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.suffixMatch = this._suffixMatch;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exactMatch = undefined;
            this._headerName = undefined;
            this._invertMatch = undefined;
            this._prefixMatch = undefined;
            this._presentMatch = undefined;
            this._suffixMatch = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exactMatch = value.exactMatch;
            this._headerName = value.headerName;
            this._invertMatch = value.invertMatch;
            this._prefixMatch = value.prefixMatch;
            this._presentMatch = value.presentMatch;
            this._suffixMatch = value.suffixMatch;
        }
    }
    get exactMatch() {
        return this.getStringAttribute('exact_match');
    }
    set exactMatch(value) {
        this._exactMatch = value;
    }
    resetExactMatch() {
        this._exactMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exactMatchInput() {
        return this._exactMatch;
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get invertMatch() {
        return this.getBooleanAttribute('invert_match');
    }
    set invertMatch(value) {
        this._invertMatch = value;
    }
    resetInvertMatch() {
        this._invertMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertMatchInput() {
        return this._invertMatch;
    }
    get prefixMatch() {
        return this.getStringAttribute('prefix_match');
    }
    set prefixMatch(value) {
        this._prefixMatch = value;
    }
    resetPrefixMatch() {
        this._prefixMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixMatchInput() {
        return this._prefixMatch;
    }
    get presentMatch() {
        return this.getBooleanAttribute('present_match');
    }
    set presentMatch(value) {
        this._presentMatch = value;
    }
    resetPresentMatch() {
        this._presentMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get presentMatchInput() {
        return this._presentMatch;
    }
    get suffixMatch() {
        return this.getStringAttribute('suffix_match');
    }
    set suffixMatch(value) {
        this._suffixMatch = value;
    }
    resetSuffixMatch() {
        this._suffixMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get suffixMatchInput() {
        return this._suffixMatch;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputReference;
_o = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputReference[_o] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputReference", version: "4.0.3" };
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchList = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchList;
_p = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchList[_p] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchList", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exact_match: cdktf.stringToTerraform(struct.exactMatch),
        name: cdktf.stringToTerraform(struct.name),
        present_match: cdktf.booleanToTerraform(struct.presentMatch),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exactMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.exactMatch = this._exactMatch;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._presentMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.presentMatch = this._presentMatch;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exactMatch = undefined;
            this._name = undefined;
            this._presentMatch = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exactMatch = value.exactMatch;
            this._name = value.name;
            this._presentMatch = value.presentMatch;
        }
    }
    get exactMatch() {
        return this.getStringAttribute('exact_match');
    }
    set exactMatch(value) {
        this._exactMatch = value;
    }
    resetExactMatch() {
        this._exactMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exactMatchInput() {
        return this._exactMatch;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get presentMatch() {
        return this.getBooleanAttribute('present_match');
    }
    set presentMatch(value) {
        this._presentMatch = value;
    }
    resetPresentMatch() {
        this._presentMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get presentMatchInput() {
        return this._presentMatch;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputReference;
_q = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputReference[_q] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputReference", version: "4.0.3" };
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchList = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchList;
_r = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchList[_r] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchList", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        full_path_match: cdktf.stringToTerraform(struct.fullPathMatch),
        ignore_case: cdktf.booleanToTerraform(struct.ignoreCase),
        path_template_match: cdktf.stringToTerraform(struct.pathTemplateMatch),
        prefix_match: cdktf.stringToTerraform(struct.prefixMatch),
        header_match: cdktf.listMapper(networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchToTerraform, true)(struct.headerMatch),
        query_parameter_match: cdktf.listMapper(networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchToTerraform, true)(struct.queryParameterMatch),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_match - computed: false, optional: true, required: false
        this._headerMatch = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleHeaderMatchList(this, "header_match", false);
        // query_parameter_match - computed: false, optional: true, required: false
        this._queryParameterMatch = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleQueryParameterMatchList(this, "query_parameter_match", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fullPathMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.fullPathMatch = this._fullPathMatch;
        }
        if (this._ignoreCase !== undefined) {
            hasAnyValues = true;
            internalValueResult.ignoreCase = this._ignoreCase;
        }
        if (this._pathTemplateMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathTemplateMatch = this._pathTemplateMatch;
        }
        if (this._prefixMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixMatch = this._prefixMatch;
        }
        if (this._headerMatch?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerMatch = this._headerMatch?.internalValue;
        }
        if (this._queryParameterMatch?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryParameterMatch = this._queryParameterMatch?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._fullPathMatch = undefined;
            this._ignoreCase = undefined;
            this._pathTemplateMatch = undefined;
            this._prefixMatch = undefined;
            this._headerMatch.internalValue = undefined;
            this._queryParameterMatch.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._fullPathMatch = value.fullPathMatch;
            this._ignoreCase = value.ignoreCase;
            this._pathTemplateMatch = value.pathTemplateMatch;
            this._prefixMatch = value.prefixMatch;
            this._headerMatch.internalValue = value.headerMatch;
            this._queryParameterMatch.internalValue = value.queryParameterMatch;
        }
    }
    get fullPathMatch() {
        return this.getStringAttribute('full_path_match');
    }
    set fullPathMatch(value) {
        this._fullPathMatch = value;
    }
    resetFullPathMatch() {
        this._fullPathMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fullPathMatchInput() {
        return this._fullPathMatch;
    }
    get ignoreCase() {
        return this.getBooleanAttribute('ignore_case');
    }
    set ignoreCase(value) {
        this._ignoreCase = value;
    }
    resetIgnoreCase() {
        this._ignoreCase = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreCaseInput() {
        return this._ignoreCase;
    }
    get pathTemplateMatch() {
        return this.getStringAttribute('path_template_match');
    }
    set pathTemplateMatch(value) {
        this._pathTemplateMatch = value;
    }
    resetPathTemplateMatch() {
        this._pathTemplateMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathTemplateMatchInput() {
        return this._pathTemplateMatch;
    }
    get prefixMatch() {
        return this.getStringAttribute('prefix_match');
    }
    set prefixMatch(value) {
        this._prefixMatch = value;
    }
    resetPrefixMatch() {
        this._prefixMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixMatchInput() {
        return this._prefixMatch;
    }
    get headerMatch() {
        return this._headerMatch;
    }
    putHeaderMatch(value) {
        this._headerMatch.internalValue = value;
    }
    resetHeaderMatch() {
        this._headerMatch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerMatchInput() {
        return this._headerMatch.internalValue;
    }
    get queryParameterMatch() {
        return this._queryParameterMatch;
    }
    putQueryParameterMatch(value) {
        this._queryParameterMatch.internalValue = value;
    }
    resetQueryParameterMatch() {
        this._queryParameterMatch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryParameterMatchInput() {
        return this._queryParameterMatch.internalValue;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputReference;
_s = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputReference[_s] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputReference", version: "4.0.3" };
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleList = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleList;
_t = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleList[_t] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleList", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.actions),
        copied_parameters: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.copiedParameters),
        keyset: cdktf.stringToTerraform(struct.keyset),
        token_query_parameter: cdktf.stringToTerraform(struct.tokenQueryParameter),
        token_ttl: cdktf.stringToTerraform(struct.tokenTtl),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actions !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions;
        }
        if (this._copiedParameters !== undefined) {
            hasAnyValues = true;
            internalValueResult.copiedParameters = this._copiedParameters;
        }
        if (this._keyset !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyset = this._keyset;
        }
        if (this._tokenQueryParameter !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenQueryParameter = this._tokenQueryParameter;
        }
        if (this._tokenTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenTtl = this._tokenTtl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._actions = undefined;
            this._copiedParameters = undefined;
            this._keyset = undefined;
            this._tokenQueryParameter = undefined;
            this._tokenTtl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._actions = value.actions;
            this._copiedParameters = value.copiedParameters;
            this._keyset = value.keyset;
            this._tokenQueryParameter = value.tokenQueryParameter;
            this._tokenTtl = value.tokenTtl;
        }
    }
    get actions() {
        return this.getListAttribute('actions');
    }
    set actions(value) {
        this._actions = value;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
    get copiedParameters() {
        return this.getListAttribute('copied_parameters');
    }
    set copiedParameters(value) {
        this._copiedParameters = value;
    }
    resetCopiedParameters() {
        this._copiedParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get copiedParametersInput() {
        return this._copiedParameters;
    }
    get keyset() {
        return this.getStringAttribute('keyset');
    }
    set keyset(value) {
        this._keyset = value;
    }
    resetKeyset() {
        this._keyset = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keysetInput() {
        return this._keyset;
    }
    get tokenQueryParameter() {
        return this.getStringAttribute('token_query_parameter');
    }
    set tokenQueryParameter(value) {
        this._tokenQueryParameter = value;
    }
    resetTokenQueryParameter() {
        this._tokenQueryParameter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenQueryParameterInput() {
        return this._tokenQueryParameter;
    }
    get tokenTtl() {
        return this.getStringAttribute('token_ttl');
    }
    set tokenTtl(value) {
        this._tokenTtl = value;
    }
    resetTokenTtl() {
        this._tokenTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenTtlInput() {
        return this._tokenTtl;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutputReference;
_u = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutputReference[_u] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutputReference", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclude_host: cdktf.booleanToTerraform(struct.excludeHost),
        exclude_query_string: cdktf.booleanToTerraform(struct.excludeQueryString),
        excluded_query_parameters: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludedQueryParameters),
        include_protocol: cdktf.booleanToTerraform(struct.includeProtocol),
        included_cookie_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includedCookieNames),
        included_header_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includedHeaderNames),
        included_query_parameters: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includedQueryParameters),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._excludeHost !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeHost = this._excludeHost;
        }
        if (this._excludeQueryString !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeQueryString = this._excludeQueryString;
        }
        if (this._excludedQueryParameters !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedQueryParameters = this._excludedQueryParameters;
        }
        if (this._includeProtocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeProtocol = this._includeProtocol;
        }
        if (this._includedCookieNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.includedCookieNames = this._includedCookieNames;
        }
        if (this._includedHeaderNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.includedHeaderNames = this._includedHeaderNames;
        }
        if (this._includedQueryParameters !== undefined) {
            hasAnyValues = true;
            internalValueResult.includedQueryParameters = this._includedQueryParameters;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._excludeHost = undefined;
            this._excludeQueryString = undefined;
            this._excludedQueryParameters = undefined;
            this._includeProtocol = undefined;
            this._includedCookieNames = undefined;
            this._includedHeaderNames = undefined;
            this._includedQueryParameters = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._excludeHost = value.excludeHost;
            this._excludeQueryString = value.excludeQueryString;
            this._excludedQueryParameters = value.excludedQueryParameters;
            this._includeProtocol = value.includeProtocol;
            this._includedCookieNames = value.includedCookieNames;
            this._includedHeaderNames = value.includedHeaderNames;
            this._includedQueryParameters = value.includedQueryParameters;
        }
    }
    get excludeHost() {
        return this.getBooleanAttribute('exclude_host');
    }
    set excludeHost(value) {
        this._excludeHost = value;
    }
    resetExcludeHost() {
        this._excludeHost = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeHostInput() {
        return this._excludeHost;
    }
    get excludeQueryString() {
        return this.getBooleanAttribute('exclude_query_string');
    }
    set excludeQueryString(value) {
        this._excludeQueryString = value;
    }
    resetExcludeQueryString() {
        this._excludeQueryString = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeQueryStringInput() {
        return this._excludeQueryString;
    }
    get excludedQueryParameters() {
        return this.getListAttribute('excluded_query_parameters');
    }
    set excludedQueryParameters(value) {
        this._excludedQueryParameters = value;
    }
    resetExcludedQueryParameters() {
        this._excludedQueryParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedQueryParametersInput() {
        return this._excludedQueryParameters;
    }
    get includeProtocol() {
        return this.getBooleanAttribute('include_protocol');
    }
    set includeProtocol(value) {
        this._includeProtocol = value;
    }
    resetIncludeProtocol() {
        this._includeProtocol = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeProtocolInput() {
        return this._includeProtocol;
    }
    get includedCookieNames() {
        return this.getListAttribute('included_cookie_names');
    }
    set includedCookieNames(value) {
        this._includedCookieNames = value;
    }
    resetIncludedCookieNames() {
        this._includedCookieNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includedCookieNamesInput() {
        return this._includedCookieNames;
    }
    get includedHeaderNames() {
        return this.getListAttribute('included_header_names');
    }
    set includedHeaderNames(value) {
        this._includedHeaderNames = value;
    }
    resetIncludedHeaderNames() {
        this._includedHeaderNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includedHeaderNamesInput() {
        return this._includedHeaderNames;
    }
    get includedQueryParameters() {
        return this.getListAttribute('included_query_parameters');
    }
    set includedQueryParameters(value) {
        this._includedQueryParameters = value;
    }
    resetIncludedQueryParameters() {
        this._includedQueryParameters = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includedQueryParametersInput() {
        return this._includedQueryParameters;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputReference;
_v = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputReference[_v] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputReference", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_signature_algorithms: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedSignatureAlgorithms),
        token_query_parameter: cdktf.stringToTerraform(struct.tokenQueryParameter),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedSignatureAlgorithms !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedSignatureAlgorithms = this._allowedSignatureAlgorithms;
        }
        if (this._tokenQueryParameter !== undefined) {
            hasAnyValues = true;
            internalValueResult.tokenQueryParameter = this._tokenQueryParameter;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedSignatureAlgorithms = undefined;
            this._tokenQueryParameter = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedSignatureAlgorithms = value.allowedSignatureAlgorithms;
            this._tokenQueryParameter = value.tokenQueryParameter;
        }
    }
    get allowedSignatureAlgorithms() {
        return this.getListAttribute('allowed_signature_algorithms');
    }
    set allowedSignatureAlgorithms(value) {
        this._allowedSignatureAlgorithms = value;
    }
    resetAllowedSignatureAlgorithms() {
        this._allowedSignatureAlgorithms = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedSignatureAlgorithmsInput() {
        return this._allowedSignatureAlgorithms;
    }
    get tokenQueryParameter() {
        return this.getStringAttribute('token_query_parameter');
    }
    set tokenQueryParameter(value) {
        this._tokenQueryParameter = value;
    }
    resetTokenQueryParameter() {
        this._tokenQueryParameter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tokenQueryParameterInput() {
        return this._tokenQueryParameter;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutputReference[_w] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutputReference", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cache_mode: cdktf.stringToTerraform(struct.cacheMode),
        client_ttl: cdktf.stringToTerraform(struct.clientTtl),
        default_ttl: cdktf.stringToTerraform(struct.defaultTtl),
        max_ttl: cdktf.stringToTerraform(struct.maxTtl),
        negative_caching: cdktf.booleanToTerraform(struct.negativeCaching),
        negative_caching_policy: cdktf.hashMapper(cdktf.stringToTerraform)(struct.negativeCachingPolicy),
        signed_request_keyset: cdktf.stringToTerraform(struct.signedRequestKeyset),
        signed_request_maximum_expiration_ttl: cdktf.stringToTerraform(struct.signedRequestMaximumExpirationTtl),
        signed_request_mode: cdktf.stringToTerraform(struct.signedRequestMode),
        add_signatures: networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesToTerraform(struct.addSignatures),
        cache_key_policy: networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyToTerraform(struct.cacheKeyPolicy),
        signed_token_options: networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsToTerraform(struct.signedTokenOptions),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // add_signatures - computed: false, optional: true, required: false
        this._addSignatures = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyAddSignaturesOutputReference(this, "add_signatures");
        // cache_key_policy - computed: false, optional: true, required: false
        this._cacheKeyPolicy = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyCacheKeyPolicyOutputReference(this, "cache_key_policy");
        // signed_token_options - computed: false, optional: true, required: false
        this._signedTokenOptions = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicySignedTokenOptionsOutputReference(this, "signed_token_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cacheMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.cacheMode = this._cacheMode;
        }
        if (this._clientTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientTtl = this._clientTtl;
        }
        if (this._defaultTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultTtl = this._defaultTtl;
        }
        if (this._maxTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxTtl = this._maxTtl;
        }
        if (this._negativeCaching !== undefined) {
            hasAnyValues = true;
            internalValueResult.negativeCaching = this._negativeCaching;
        }
        if (this._negativeCachingPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.negativeCachingPolicy = this._negativeCachingPolicy;
        }
        if (this._signedRequestKeyset !== undefined) {
            hasAnyValues = true;
            internalValueResult.signedRequestKeyset = this._signedRequestKeyset;
        }
        if (this._signedRequestMaximumExpirationTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.signedRequestMaximumExpirationTtl = this._signedRequestMaximumExpirationTtl;
        }
        if (this._signedRequestMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.signedRequestMode = this._signedRequestMode;
        }
        if (this._addSignatures?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.addSignatures = this._addSignatures?.internalValue;
        }
        if (this._cacheKeyPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cacheKeyPolicy = this._cacheKeyPolicy?.internalValue;
        }
        if (this._signedTokenOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.signedTokenOptions = this._signedTokenOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cacheMode = undefined;
            this._clientTtl = undefined;
            this._defaultTtl = undefined;
            this._maxTtl = undefined;
            this._negativeCaching = undefined;
            this._negativeCachingPolicy = undefined;
            this._signedRequestKeyset = undefined;
            this._signedRequestMaximumExpirationTtl = undefined;
            this._signedRequestMode = undefined;
            this._addSignatures.internalValue = undefined;
            this._cacheKeyPolicy.internalValue = undefined;
            this._signedTokenOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cacheMode = value.cacheMode;
            this._clientTtl = value.clientTtl;
            this._defaultTtl = value.defaultTtl;
            this._maxTtl = value.maxTtl;
            this._negativeCaching = value.negativeCaching;
            this._negativeCachingPolicy = value.negativeCachingPolicy;
            this._signedRequestKeyset = value.signedRequestKeyset;
            this._signedRequestMaximumExpirationTtl = value.signedRequestMaximumExpirationTtl;
            this._signedRequestMode = value.signedRequestMode;
            this._addSignatures.internalValue = value.addSignatures;
            this._cacheKeyPolicy.internalValue = value.cacheKeyPolicy;
            this._signedTokenOptions.internalValue = value.signedTokenOptions;
        }
    }
    get cacheMode() {
        return this.getStringAttribute('cache_mode');
    }
    set cacheMode(value) {
        this._cacheMode = value;
    }
    resetCacheMode() {
        this._cacheMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheModeInput() {
        return this._cacheMode;
    }
    get clientTtl() {
        return this.getStringAttribute('client_ttl');
    }
    set clientTtl(value) {
        this._clientTtl = value;
    }
    resetClientTtl() {
        this._clientTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientTtlInput() {
        return this._clientTtl;
    }
    get defaultTtl() {
        return this.getStringAttribute('default_ttl');
    }
    set defaultTtl(value) {
        this._defaultTtl = value;
    }
    resetDefaultTtl() {
        this._defaultTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultTtlInput() {
        return this._defaultTtl;
    }
    get maxTtl() {
        return this.getStringAttribute('max_ttl');
    }
    set maxTtl(value) {
        this._maxTtl = value;
    }
    resetMaxTtl() {
        this._maxTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxTtlInput() {
        return this._maxTtl;
    }
    get negativeCaching() {
        return this.getBooleanAttribute('negative_caching');
    }
    set negativeCaching(value) {
        this._negativeCaching = value;
    }
    resetNegativeCaching() {
        this._negativeCaching = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get negativeCachingInput() {
        return this._negativeCaching;
    }
    get negativeCachingPolicy() {
        return this.getStringMapAttribute('negative_caching_policy');
    }
    set negativeCachingPolicy(value) {
        this._negativeCachingPolicy = value;
    }
    resetNegativeCachingPolicy() {
        this._negativeCachingPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get negativeCachingPolicyInput() {
        return this._negativeCachingPolicy;
    }
    get signedRequestKeyset() {
        return this.getStringAttribute('signed_request_keyset');
    }
    set signedRequestKeyset(value) {
        this._signedRequestKeyset = value;
    }
    resetSignedRequestKeyset() {
        this._signedRequestKeyset = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get signedRequestKeysetInput() {
        return this._signedRequestKeyset;
    }
    get signedRequestMaximumExpirationTtl() {
        return this.getStringAttribute('signed_request_maximum_expiration_ttl');
    }
    set signedRequestMaximumExpirationTtl(value) {
        this._signedRequestMaximumExpirationTtl = value;
    }
    resetSignedRequestMaximumExpirationTtl() {
        this._signedRequestMaximumExpirationTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get signedRequestMaximumExpirationTtlInput() {
        return this._signedRequestMaximumExpirationTtl;
    }
    get signedRequestMode() {
        return this.getStringAttribute('signed_request_mode');
    }
    set signedRequestMode(value) {
        this._signedRequestMode = value;
    }
    resetSignedRequestMode() {
        this._signedRequestMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get signedRequestModeInput() {
        return this._signedRequestMode;
    }
    get addSignatures() {
        return this._addSignatures;
    }
    putAddSignatures(value) {
        this._addSignatures.internalValue = value;
    }
    resetAddSignatures() {
        this._addSignatures.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get addSignaturesInput() {
        return this._addSignatures.internalValue;
    }
    get cacheKeyPolicy() {
        return this._cacheKeyPolicy;
    }
    putCacheKeyPolicy(value) {
        this._cacheKeyPolicy.internalValue = value;
    }
    resetCacheKeyPolicy() {
        this._cacheKeyPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cacheKeyPolicyInput() {
        return this._cacheKeyPolicy.internalValue;
    }
    get signedTokenOptions() {
        return this._signedTokenOptions;
    }
    putSignedTokenOptions(value) {
        this._signedTokenOptions.internalValue = value;
    }
    resetSignedTokenOptions() {
        this._signedTokenOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get signedTokenOptionsInput() {
        return this._signedTokenOptions.internalValue;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputReference;
_x = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputReference[_x] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputReference", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_credentials: cdktf.booleanToTerraform(struct.allowCredentials),
        allow_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowHeaders),
        allow_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowMethods),
        allow_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOrigins),
        disabled: cdktf.booleanToTerraform(struct.disabled),
        expose_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exposeHeaders),
        max_age: cdktf.stringToTerraform(struct.maxAge),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowCredentials = this._allowCredentials;
        }
        if (this._allowHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowHeaders = this._allowHeaders;
        }
        if (this._allowMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowMethods = this._allowMethods;
        }
        if (this._allowOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOrigins = this._allowOrigins;
        }
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        if (this._exposeHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.exposeHeaders = this._exposeHeaders;
        }
        if (this._maxAge !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAge = this._maxAge;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowCredentials = undefined;
            this._allowHeaders = undefined;
            this._allowMethods = undefined;
            this._allowOrigins = undefined;
            this._disabled = undefined;
            this._exposeHeaders = undefined;
            this._maxAge = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowCredentials = value.allowCredentials;
            this._allowHeaders = value.allowHeaders;
            this._allowMethods = value.allowMethods;
            this._allowOrigins = value.allowOrigins;
            this._disabled = value.disabled;
            this._exposeHeaders = value.exposeHeaders;
            this._maxAge = value.maxAge;
        }
    }
    get allowCredentials() {
        return this.getBooleanAttribute('allow_credentials');
    }
    set allowCredentials(value) {
        this._allowCredentials = value;
    }
    resetAllowCredentials() {
        this._allowCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowCredentialsInput() {
        return this._allowCredentials;
    }
    get allowHeaders() {
        return this.getListAttribute('allow_headers');
    }
    set allowHeaders(value) {
        this._allowHeaders = value;
    }
    resetAllowHeaders() {
        this._allowHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowHeadersInput() {
        return this._allowHeaders;
    }
    get allowMethods() {
        return this.getListAttribute('allow_methods');
    }
    set allowMethods(value) {
        this._allowMethods = value;
    }
    resetAllowMethods() {
        this._allowMethods = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowMethodsInput() {
        return this._allowMethods;
    }
    get allowOrigins() {
        return this.getListAttribute('allow_origins');
    }
    set allowOrigins(value) {
        this._allowOrigins = value;
    }
    resetAllowOrigins() {
        this._allowOrigins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginsInput() {
        return this._allowOrigins;
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    resetDisabled() {
        this._disabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get exposeHeaders() {
        return this.getListAttribute('expose_headers');
    }
    set exposeHeaders(value) {
        this._exposeHeaders = value;
    }
    resetExposeHeaders() {
        this._exposeHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exposeHeadersInput() {
        return this._exposeHeaders;
    }
    get maxAge() {
        return this.getStringAttribute('max_age');
    }
    set maxAge(value) {
        this._maxAge = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxAgeInput() {
        return this._maxAge;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputReference;
_y = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputReference[_y] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputReference", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_rewrite: cdktf.stringToTerraform(struct.hostRewrite),
        path_prefix_rewrite: cdktf.stringToTerraform(struct.pathPrefixRewrite),
        path_template_rewrite: cdktf.stringToTerraform(struct.pathTemplateRewrite),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRewrite = this._hostRewrite;
        }
        if (this._pathPrefixRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathPrefixRewrite = this._pathPrefixRewrite;
        }
        if (this._pathTemplateRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathTemplateRewrite = this._pathTemplateRewrite;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRewrite = undefined;
            this._pathPrefixRewrite = undefined;
            this._pathTemplateRewrite = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRewrite = value.hostRewrite;
            this._pathPrefixRewrite = value.pathPrefixRewrite;
            this._pathTemplateRewrite = value.pathTemplateRewrite;
        }
    }
    get hostRewrite() {
        return this.getStringAttribute('host_rewrite');
    }
    set hostRewrite(value) {
        this._hostRewrite = value;
    }
    resetHostRewrite() {
        this._hostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRewriteInput() {
        return this._hostRewrite;
    }
    get pathPrefixRewrite() {
        return this.getStringAttribute('path_prefix_rewrite');
    }
    set pathPrefixRewrite(value) {
        this._pathPrefixRewrite = value;
    }
    resetPathPrefixRewrite() {
        this._pathPrefixRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathPrefixRewriteInput() {
        return this._pathPrefixRewrite;
    }
    get pathTemplateRewrite() {
        return this.getStringAttribute('path_template_rewrite');
    }
    set pathTemplateRewrite(value) {
        this._pathTemplateRewrite = value;
    }
    resetPathTemplateRewrite() {
        this._pathTemplateRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathTemplateRewriteInput() {
        return this._pathTemplateRewrite;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputReference;
_z = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputReference[_z] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputReference", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cdn_policy: networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyToTerraform(struct.cdnPolicy),
        cors_policy: networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyToTerraform(struct.corsPolicy),
        url_rewrite: networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteToTerraform(struct.urlRewrite),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cdn_policy - computed: false, optional: true, required: false
        this._cdnPolicy = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCdnPolicyOutputReference(this, "cdn_policy");
        // cors_policy - computed: false, optional: true, required: false
        this._corsPolicy = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionCorsPolicyOutputReference(this, "cors_policy");
        // url_rewrite - computed: false, optional: true, required: false
        this._urlRewrite = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionUrlRewriteOutputReference(this, "url_rewrite");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cdnPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cdnPolicy = this._cdnPolicy?.internalValue;
        }
        if (this._corsPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.corsPolicy = this._corsPolicy?.internalValue;
        }
        if (this._urlRewrite?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRewrite = this._urlRewrite?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cdnPolicy.internalValue = undefined;
            this._corsPolicy.internalValue = undefined;
            this._urlRewrite.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cdnPolicy.internalValue = value.cdnPolicy;
            this._corsPolicy.internalValue = value.corsPolicy;
            this._urlRewrite.internalValue = value.urlRewrite;
        }
    }
    get cdnPolicy() {
        return this._cdnPolicy;
    }
    putCdnPolicy(value) {
        this._cdnPolicy.internalValue = value;
    }
    resetCdnPolicy() {
        this._cdnPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cdnPolicyInput() {
        return this._cdnPolicy.internalValue;
    }
    get corsPolicy() {
        return this._corsPolicy;
    }
    putCorsPolicy(value) {
        this._corsPolicy.internalValue = value;
    }
    resetCorsPolicy() {
        this._corsPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsPolicyInput() {
        return this._corsPolicy.internalValue;
    }
    get urlRewrite() {
        return this._urlRewrite;
    }
    putUrlRewrite(value) {
        this._urlRewrite.internalValue = value;
    }
    resetUrlRewrite() {
        this._urlRewrite.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRewriteInput() {
        return this._urlRewrite.internalValue;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputReference[_0] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputReference", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_redirect: cdktf.stringToTerraform(struct.hostRedirect),
        https_redirect: cdktf.booleanToTerraform(struct.httpsRedirect),
        path_redirect: cdktf.stringToTerraform(struct.pathRedirect),
        prefix_redirect: cdktf.stringToTerraform(struct.prefixRedirect),
        redirect_response_code: cdktf.stringToTerraform(struct.redirectResponseCode),
        strip_query: cdktf.booleanToTerraform(struct.stripQuery),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRedirect = this._hostRedirect;
        }
        if (this._httpsRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsRedirect = this._httpsRedirect;
        }
        if (this._pathRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathRedirect = this._pathRedirect;
        }
        if (this._prefixRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixRedirect = this._prefixRedirect;
        }
        if (this._redirectResponseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectResponseCode = this._redirectResponseCode;
        }
        if (this._stripQuery !== undefined) {
            hasAnyValues = true;
            internalValueResult.stripQuery = this._stripQuery;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRedirect = undefined;
            this._httpsRedirect = undefined;
            this._pathRedirect = undefined;
            this._prefixRedirect = undefined;
            this._redirectResponseCode = undefined;
            this._stripQuery = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRedirect = value.hostRedirect;
            this._httpsRedirect = value.httpsRedirect;
            this._pathRedirect = value.pathRedirect;
            this._prefixRedirect = value.prefixRedirect;
            this._redirectResponseCode = value.redirectResponseCode;
            this._stripQuery = value.stripQuery;
        }
    }
    get hostRedirect() {
        return this.getStringAttribute('host_redirect');
    }
    set hostRedirect(value) {
        this._hostRedirect = value;
    }
    resetHostRedirect() {
        this._hostRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRedirectInput() {
        return this._hostRedirect;
    }
    get httpsRedirect() {
        return this.getBooleanAttribute('https_redirect');
    }
    set httpsRedirect(value) {
        this._httpsRedirect = value;
    }
    resetHttpsRedirect() {
        this._httpsRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsRedirectInput() {
        return this._httpsRedirect;
    }
    get pathRedirect() {
        return this.getStringAttribute('path_redirect');
    }
    set pathRedirect(value) {
        this._pathRedirect = value;
    }
    resetPathRedirect() {
        this._pathRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathRedirectInput() {
        return this._pathRedirect;
    }
    get prefixRedirect() {
        return this.getStringAttribute('prefix_redirect');
    }
    set prefixRedirect(value) {
        this._prefixRedirect = value;
    }
    resetPrefixRedirect() {
        this._prefixRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixRedirectInput() {
        return this._prefixRedirect;
    }
    get redirectResponseCode() {
        return this.getStringAttribute('redirect_response_code');
    }
    set redirectResponseCode(value) {
        this._redirectResponseCode = value;
    }
    resetRedirectResponseCode() {
        this._redirectResponseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectResponseCodeInput() {
        return this._redirectResponseCode;
    }
    get stripQuery() {
        return this.getBooleanAttribute('strip_query');
    }
    set stripQuery(value) {
        this._stripQuery = value;
    }
    resetStripQuery() {
        this._stripQuery = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stripQueryInput() {
        return this._stripQuery;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputReference[_1] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputReference", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        origin: cdktf.stringToTerraform(struct.origin),
        priority: cdktf.stringToTerraform(struct.priority),
        header_action: networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionToTerraform(struct.headerAction),
        match_rule: cdktf.listMapper(networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleToTerraform, true)(struct.matchRule),
        route_action: networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionToTerraform(struct.routeAction),
        url_redirect: networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectToTerraform(struct.urlRedirect),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionOutputReference(this, "header_action");
        // match_rule - computed: false, optional: false, required: true
        this._matchRule = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleMatchRuleList(this, "match_rule", false);
        // route_action - computed: false, optional: true, required: false
        this._routeAction = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleRouteActionOutputReference(this, "route_action");
        // url_redirect - computed: false, optional: true, required: false
        this._urlRedirect = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleUrlRedirectOutputReference(this, "url_redirect");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._origin !== undefined) {
            hasAnyValues = true;
            internalValueResult.origin = this._origin;
        }
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        if (this._headerAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerAction = this._headerAction?.internalValue;
        }
        if (this._matchRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchRule = this._matchRule?.internalValue;
        }
        if (this._routeAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.routeAction = this._routeAction?.internalValue;
        }
        if (this._urlRedirect?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRedirect = this._urlRedirect?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._origin = undefined;
            this._priority = undefined;
            this._headerAction.internalValue = undefined;
            this._matchRule.internalValue = undefined;
            this._routeAction.internalValue = undefined;
            this._urlRedirect.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._origin = value.origin;
            this._priority = value.priority;
            this._headerAction.internalValue = value.headerAction;
            this._matchRule.internalValue = value.matchRule;
            this._routeAction.internalValue = value.routeAction;
            this._urlRedirect.internalValue = value.urlRedirect;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get origin() {
        return this.getStringAttribute('origin');
    }
    set origin(value) {
        this._origin = value;
    }
    resetOrigin() {
        this._origin = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get originInput() {
        return this._origin;
    }
    get priority() {
        return this.getStringAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
    get matchRule() {
        return this._matchRule;
    }
    putMatchRule(value) {
        this._matchRule.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get matchRuleInput() {
        return this._matchRule.internalValue;
    }
    get routeAction() {
        return this._routeAction;
    }
    putRouteAction(value) {
        this._routeAction.internalValue = value;
    }
    resetRouteAction() {
        this._routeAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeActionInput() {
        return this._routeAction.internalValue;
    }
    get urlRedirect() {
        return this._urlRedirect;
    }
    putUrlRedirect(value) {
        this._urlRedirect.internalValue = value;
    }
    resetUrlRedirect() {
        this._urlRedirect.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRedirectInput() {
        return this._urlRedirect.internalValue;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleOutputReference[_2] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleOutputReference", version: "4.0.3" };
class NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleList = NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleList;
_3 = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleList[_3] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleList", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingPathMatcherToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        name: cdktf.stringToTerraform(struct.name),
        route_rule: cdktf.listMapper(networkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleToTerraform, true)(struct.routeRule),
    };
}
exports.networkServicesEdgeCacheServiceRoutingPathMatcherToTerraform = networkServicesEdgeCacheServiceRoutingPathMatcherToTerraform;
class NetworkServicesEdgeCacheServiceRoutingPathMatcherOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // route_rule - computed: false, optional: false, required: true
        this._routeRule = new NetworkServicesEdgeCacheServiceRoutingPathMatcherRouteRuleList(this, "route_rule", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._routeRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.routeRule = this._routeRule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._name = undefined;
            this._routeRule.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._name = value.name;
            this._routeRule.internalValue = value.routeRule;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get routeRule() {
        return this._routeRule;
    }
    putRouteRule(value) {
        this._routeRule.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get routeRuleInput() {
        return this._routeRule.internalValue;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherOutputReference = NetworkServicesEdgeCacheServiceRoutingPathMatcherOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherOutputReference[_4] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherOutputReference", version: "4.0.3" };
class NetworkServicesEdgeCacheServiceRoutingPathMatcherList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkServicesEdgeCacheServiceRoutingPathMatcherOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingPathMatcherList = NetworkServicesEdgeCacheServiceRoutingPathMatcherList;
_5 = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingPathMatcherList[_5] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingPathMatcherList", version: "4.0.3" };
function networkServicesEdgeCacheServiceRoutingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_rule: cdktf.listMapper(networkServicesEdgeCacheServiceRoutingHostRuleToTerraform, true)(struct.hostRule),
        path_matcher: cdktf.listMapper(networkServicesEdgeCacheServiceRoutingPathMatcherToTerraform, true)(struct.pathMatcher),
    };
}
exports.networkServicesEdgeCacheServiceRoutingToTerraform = networkServicesEdgeCacheServiceRoutingToTerraform;
class NetworkServicesEdgeCacheServiceRoutingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // host_rule - computed: false, optional: false, required: true
        this._hostRule = new NetworkServicesEdgeCacheServiceRoutingHostRuleList(this, "host_rule", false);
        // path_matcher - computed: false, optional: false, required: true
        this._pathMatcher = new NetworkServicesEdgeCacheServiceRoutingPathMatcherList(this, "path_matcher", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRule = this._hostRule?.internalValue;
        }
        if (this._pathMatcher?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathMatcher = this._pathMatcher?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRule.internalValue = undefined;
            this._pathMatcher.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRule.internalValue = value.hostRule;
            this._pathMatcher.internalValue = value.pathMatcher;
        }
    }
    get hostRule() {
        return this._hostRule;
    }
    putHostRule(value) {
        this._hostRule.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostRuleInput() {
        return this._hostRule.internalValue;
    }
    get pathMatcher() {
        return this._pathMatcher;
    }
    putPathMatcher(value) {
        this._pathMatcher.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathMatcherInput() {
        return this._pathMatcher.internalValue;
    }
}
exports.NetworkServicesEdgeCacheServiceRoutingOutputReference = NetworkServicesEdgeCacheServiceRoutingOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceRoutingOutputReference[_6] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceRoutingOutputReference", version: "4.0.3" };
function networkServicesEdgeCacheServiceTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.networkServicesEdgeCacheServiceTimeoutsToTerraform = networkServicesEdgeCacheServiceTimeoutsToTerraform;
class NetworkServicesEdgeCacheServiceTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.NetworkServicesEdgeCacheServiceTimeoutsOutputReference = NetworkServicesEdgeCacheServiceTimeoutsOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheServiceTimeoutsOutputReference[_7] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheServiceTimeoutsOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/network_services_edge_cache_service google_network_services_edge_cache_service}
*/
class NetworkServicesEdgeCacheService extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/network_services_edge_cache_service google_network_services_edge_cache_service} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NetworkServicesEdgeCacheServiceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_network_services_edge_cache_service',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // log_config - computed: false, optional: true, required: false
        this._logConfig = new NetworkServicesEdgeCacheServiceLogConfigOutputReference(this, "log_config");
        // routing - computed: false, optional: false, required: true
        this._routing = new NetworkServicesEdgeCacheServiceRoutingOutputReference(this, "routing");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new NetworkServicesEdgeCacheServiceTimeoutsOutputReference(this, "timeouts");
        this._description = config.description;
        this._disableHttp2 = config.disableHttp2;
        this._disableQuic = config.disableQuic;
        this._edgeSecurityPolicy = config.edgeSecurityPolicy;
        this._edgeSslCertificates = config.edgeSslCertificates;
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._project = config.project;
        this._requireTls = config.requireTls;
        this._sslPolicy = config.sslPolicy;
        this._logConfig.internalValue = config.logConfig;
        this._routing.internalValue = config.routing;
        this._timeouts.internalValue = config.timeouts;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get disableHttp2() {
        return this.getBooleanAttribute('disable_http2');
    }
    set disableHttp2(value) {
        this._disableHttp2 = value;
    }
    resetDisableHttp2() {
        this._disableHttp2 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableHttp2Input() {
        return this._disableHttp2;
    }
    get disableQuic() {
        return this.getBooleanAttribute('disable_quic');
    }
    set disableQuic(value) {
        this._disableQuic = value;
    }
    resetDisableQuic() {
        this._disableQuic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableQuicInput() {
        return this._disableQuic;
    }
    get edgeSecurityPolicy() {
        return this.getStringAttribute('edge_security_policy');
    }
    set edgeSecurityPolicy(value) {
        this._edgeSecurityPolicy = value;
    }
    resetEdgeSecurityPolicy() {
        this._edgeSecurityPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get edgeSecurityPolicyInput() {
        return this._edgeSecurityPolicy;
    }
    get edgeSslCertificates() {
        return this.getListAttribute('edge_ssl_certificates');
    }
    set edgeSslCertificates(value) {
        this._edgeSslCertificates = value;
    }
    resetEdgeSslCertificates() {
        this._edgeSslCertificates = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get edgeSslCertificatesInput() {
        return this._edgeSslCertificates;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // ipv4_addresses - computed: true, optional: false, required: false
    get ipv4Addresses() {
        return this.getListAttribute('ipv4_addresses');
    }
    // ipv6_addresses - computed: true, optional: false, required: false
    get ipv6Addresses() {
        return this.getListAttribute('ipv6_addresses');
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get requireTls() {
        return this.getBooleanAttribute('require_tls');
    }
    set requireTls(value) {
        this._requireTls = value;
    }
    resetRequireTls() {
        this._requireTls = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireTlsInput() {
        return this._requireTls;
    }
    get sslPolicy() {
        return this.getStringAttribute('ssl_policy');
    }
    set sslPolicy(value) {
        this._sslPolicy = value;
    }
    resetSslPolicy() {
        this._sslPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslPolicyInput() {
        return this._sslPolicy;
    }
    get logConfig() {
        return this._logConfig;
    }
    putLogConfig(value) {
        this._logConfig.internalValue = value;
    }
    resetLogConfig() {
        this._logConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logConfigInput() {
        return this._logConfig.internalValue;
    }
    get routing() {
        return this._routing;
    }
    putRouting(value) {
        this._routing.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get routingInput() {
        return this._routing.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            disable_http2: cdktf.booleanToTerraform(this._disableHttp2),
            disable_quic: cdktf.booleanToTerraform(this._disableQuic),
            edge_security_policy: cdktf.stringToTerraform(this._edgeSecurityPolicy),
            edge_ssl_certificates: cdktf.listMapper(cdktf.stringToTerraform, false)(this._edgeSslCertificates),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            require_tls: cdktf.booleanToTerraform(this._requireTls),
            ssl_policy: cdktf.stringToTerraform(this._sslPolicy),
            log_config: networkServicesEdgeCacheServiceLogConfigToTerraform(this._logConfig.internalValue),
            routing: networkServicesEdgeCacheServiceRoutingToTerraform(this._routing.internalValue),
            timeouts: networkServicesEdgeCacheServiceTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.NetworkServicesEdgeCacheService = NetworkServicesEdgeCacheService;
_8 = JSII_RTTI_SYMBOL_1;
NetworkServicesEdgeCacheService[_8] = { fqn: "@cdktf/provider-google.networkServicesEdgeCacheService.NetworkServicesEdgeCacheService", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
NetworkServicesEdgeCacheService.tfResourceType = "google_network_services_edge_cache_service";
//# sourceMappingURL=data:application/json;base64,