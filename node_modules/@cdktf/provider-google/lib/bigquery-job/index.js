"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigqueryJob = exports.BigqueryJobTimeoutsOutputReference = exports.bigqueryJobTimeoutsToTerraform = exports.BigqueryJobQueryOutputReference = exports.bigqueryJobQueryToTerraform = exports.BigqueryJobQueryUserDefinedFunctionResourcesList = exports.BigqueryJobQueryUserDefinedFunctionResourcesOutputReference = exports.bigqueryJobQueryUserDefinedFunctionResourcesToTerraform = exports.BigqueryJobQueryScriptOptionsOutputReference = exports.bigqueryJobQueryScriptOptionsToTerraform = exports.BigqueryJobQueryDestinationTableOutputReference = exports.bigqueryJobQueryDestinationTableToTerraform = exports.BigqueryJobQueryDestinationEncryptionConfigurationOutputReference = exports.bigqueryJobQueryDestinationEncryptionConfigurationToTerraform = exports.BigqueryJobQueryDefaultDatasetOutputReference = exports.bigqueryJobQueryDefaultDatasetToTerraform = exports.BigqueryJobLoadOutputReference = exports.bigqueryJobLoadToTerraform = exports.BigqueryJobLoadTimePartitioningOutputReference = exports.bigqueryJobLoadTimePartitioningToTerraform = exports.BigqueryJobLoadDestinationTableOutputReference = exports.bigqueryJobLoadDestinationTableToTerraform = exports.BigqueryJobLoadDestinationEncryptionConfigurationOutputReference = exports.bigqueryJobLoadDestinationEncryptionConfigurationToTerraform = exports.BigqueryJobExtractOutputReference = exports.bigqueryJobExtractToTerraform = exports.BigqueryJobExtractSourceTableOutputReference = exports.bigqueryJobExtractSourceTableToTerraform = exports.BigqueryJobExtractSourceModelOutputReference = exports.bigqueryJobExtractSourceModelToTerraform = exports.BigqueryJobCopyOutputReference = exports.bigqueryJobCopyToTerraform = exports.BigqueryJobCopySourceTablesList = exports.BigqueryJobCopySourceTablesOutputReference = exports.bigqueryJobCopySourceTablesToTerraform = exports.BigqueryJobCopyDestinationTableOutputReference = exports.bigqueryJobCopyDestinationTableToTerraform = exports.BigqueryJobCopyDestinationEncryptionConfigurationOutputReference = exports.bigqueryJobCopyDestinationEncryptionConfigurationToTerraform = exports.BigqueryJobStatusList = exports.BigqueryJobStatusOutputReference = exports.bigqueryJobStatusToTerraform = exports.BigqueryJobStatusErrorsList = exports.BigqueryJobStatusErrorsOutputReference = exports.bigqueryJobStatusErrorsToTerraform = exports.BigqueryJobStatusErrorResultList = exports.BigqueryJobStatusErrorResultOutputReference = exports.bigqueryJobStatusErrorResultToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function bigqueryJobStatusErrorResultToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.bigqueryJobStatusErrorResultToTerraform = bigqueryJobStatusErrorResultToTerraform;
class BigqueryJobStatusErrorResultOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // location - computed: true, optional: false, required: false
    get location() {
        return this.getStringAttribute('location');
    }
    // message - computed: true, optional: false, required: false
    get message() {
        return this.getStringAttribute('message');
    }
    // reason - computed: true, optional: false, required: false
    get reason() {
        return this.getStringAttribute('reason');
    }
}
exports.BigqueryJobStatusErrorResultOutputReference = BigqueryJobStatusErrorResultOutputReference;
_a = JSII_RTTI_SYMBOL_1;
BigqueryJobStatusErrorResultOutputReference[_a] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobStatusErrorResultOutputReference", version: "5.0.1" };
class BigqueryJobStatusErrorResultList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BigqueryJobStatusErrorResultOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BigqueryJobStatusErrorResultList = BigqueryJobStatusErrorResultList;
_b = JSII_RTTI_SYMBOL_1;
BigqueryJobStatusErrorResultList[_b] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobStatusErrorResultList", version: "5.0.1" };
function bigqueryJobStatusErrorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.bigqueryJobStatusErrorsToTerraform = bigqueryJobStatusErrorsToTerraform;
class BigqueryJobStatusErrorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // location - computed: true, optional: false, required: false
    get location() {
        return this.getStringAttribute('location');
    }
    // message - computed: true, optional: false, required: false
    get message() {
        return this.getStringAttribute('message');
    }
    // reason - computed: true, optional: false, required: false
    get reason() {
        return this.getStringAttribute('reason');
    }
}
exports.BigqueryJobStatusErrorsOutputReference = BigqueryJobStatusErrorsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
BigqueryJobStatusErrorsOutputReference[_c] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobStatusErrorsOutputReference", version: "5.0.1" };
class BigqueryJobStatusErrorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BigqueryJobStatusErrorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BigqueryJobStatusErrorsList = BigqueryJobStatusErrorsList;
_d = JSII_RTTI_SYMBOL_1;
BigqueryJobStatusErrorsList[_d] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobStatusErrorsList", version: "5.0.1" };
function bigqueryJobStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.bigqueryJobStatusToTerraform = bigqueryJobStatusToTerraform;
class BigqueryJobStatusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // error_result - computed: true, optional: false, required: false
        this._errorResult = new BigqueryJobStatusErrorResultList(this, "error_result", false);
        // errors - computed: true, optional: false, required: false
        this._errors = new BigqueryJobStatusErrorsList(this, "errors", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get errorResult() {
        return this._errorResult;
    }
    get errors() {
        return this._errors;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
}
exports.BigqueryJobStatusOutputReference = BigqueryJobStatusOutputReference;
_e = JSII_RTTI_SYMBOL_1;
BigqueryJobStatusOutputReference[_e] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobStatusOutputReference", version: "5.0.1" };
class BigqueryJobStatusList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BigqueryJobStatusOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BigqueryJobStatusList = BigqueryJobStatusList;
_f = JSII_RTTI_SYMBOL_1;
BigqueryJobStatusList[_f] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobStatusList", version: "5.0.1" };
function bigqueryJobCopyDestinationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.bigqueryJobCopyDestinationEncryptionConfigurationToTerraform = bigqueryJobCopyDestinationEncryptionConfigurationToTerraform;
class BigqueryJobCopyDestinationEncryptionConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    // kms_key_version - computed: true, optional: false, required: false
    get kmsKeyVersion() {
        return this.getStringAttribute('kms_key_version');
    }
}
exports.BigqueryJobCopyDestinationEncryptionConfigurationOutputReference = BigqueryJobCopyDestinationEncryptionConfigurationOutputReference;
_g = JSII_RTTI_SYMBOL_1;
BigqueryJobCopyDestinationEncryptionConfigurationOutputReference[_g] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobCopyDestinationEncryptionConfigurationOutputReference", version: "5.0.1" };
function bigqueryJobCopyDestinationTableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.bigqueryJobCopyDestinationTableToTerraform = bigqueryJobCopyDestinationTableToTerraform;
class BigqueryJobCopyDestinationTableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    resetDatasetId() {
        this._datasetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.BigqueryJobCopyDestinationTableOutputReference = BigqueryJobCopyDestinationTableOutputReference;
_h = JSII_RTTI_SYMBOL_1;
BigqueryJobCopyDestinationTableOutputReference[_h] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobCopyDestinationTableOutputReference", version: "5.0.1" };
function bigqueryJobCopySourceTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.bigqueryJobCopySourceTablesToTerraform = bigqueryJobCopySourceTablesToTerraform;
class BigqueryJobCopySourceTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    resetDatasetId() {
        this._datasetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.BigqueryJobCopySourceTablesOutputReference = BigqueryJobCopySourceTablesOutputReference;
_j = JSII_RTTI_SYMBOL_1;
BigqueryJobCopySourceTablesOutputReference[_j] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobCopySourceTablesOutputReference", version: "5.0.1" };
class BigqueryJobCopySourceTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BigqueryJobCopySourceTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BigqueryJobCopySourceTablesList = BigqueryJobCopySourceTablesList;
_k = JSII_RTTI_SYMBOL_1;
BigqueryJobCopySourceTablesList[_k] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobCopySourceTablesList", version: "5.0.1" };
function bigqueryJobCopyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create_disposition: cdktf.stringToTerraform(struct.createDisposition),
        write_disposition: cdktf.stringToTerraform(struct.writeDisposition),
        destination_encryption_configuration: bigqueryJobCopyDestinationEncryptionConfigurationToTerraform(struct.destinationEncryptionConfiguration),
        destination_table: bigqueryJobCopyDestinationTableToTerraform(struct.destinationTable),
        source_tables: cdktf.listMapper(bigqueryJobCopySourceTablesToTerraform, true)(struct.sourceTables),
    };
}
exports.bigqueryJobCopyToTerraform = bigqueryJobCopyToTerraform;
class BigqueryJobCopyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination_encryption_configuration - computed: false, optional: true, required: false
        this._destinationEncryptionConfiguration = new BigqueryJobCopyDestinationEncryptionConfigurationOutputReference(this, "destination_encryption_configuration");
        // destination_table - computed: false, optional: true, required: false
        this._destinationTable = new BigqueryJobCopyDestinationTableOutputReference(this, "destination_table");
        // source_tables - computed: false, optional: false, required: true
        this._sourceTables = new BigqueryJobCopySourceTablesList(this, "source_tables", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._createDisposition !== undefined) {
            hasAnyValues = true;
            internalValueResult.createDisposition = this._createDisposition;
        }
        if (this._writeDisposition !== undefined) {
            hasAnyValues = true;
            internalValueResult.writeDisposition = this._writeDisposition;
        }
        if (this._destinationEncryptionConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationEncryptionConfiguration = this._destinationEncryptionConfiguration?.internalValue;
        }
        if (this._destinationTable?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationTable = this._destinationTable?.internalValue;
        }
        if (this._sourceTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceTables = this._sourceTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._createDisposition = undefined;
            this._writeDisposition = undefined;
            this._destinationEncryptionConfiguration.internalValue = undefined;
            this._destinationTable.internalValue = undefined;
            this._sourceTables.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._createDisposition = value.createDisposition;
            this._writeDisposition = value.writeDisposition;
            this._destinationEncryptionConfiguration.internalValue = value.destinationEncryptionConfiguration;
            this._destinationTable.internalValue = value.destinationTable;
            this._sourceTables.internalValue = value.sourceTables;
        }
    }
    get createDisposition() {
        return this.getStringAttribute('create_disposition');
    }
    set createDisposition(value) {
        this._createDisposition = value;
    }
    resetCreateDisposition() {
        this._createDisposition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createDispositionInput() {
        return this._createDisposition;
    }
    get writeDisposition() {
        return this.getStringAttribute('write_disposition');
    }
    set writeDisposition(value) {
        this._writeDisposition = value;
    }
    resetWriteDisposition() {
        this._writeDisposition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get writeDispositionInput() {
        return this._writeDisposition;
    }
    get destinationEncryptionConfiguration() {
        return this._destinationEncryptionConfiguration;
    }
    putDestinationEncryptionConfiguration(value) {
        this._destinationEncryptionConfiguration.internalValue = value;
    }
    resetDestinationEncryptionConfiguration() {
        this._destinationEncryptionConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationEncryptionConfigurationInput() {
        return this._destinationEncryptionConfiguration.internalValue;
    }
    get destinationTable() {
        return this._destinationTable;
    }
    putDestinationTable(value) {
        this._destinationTable.internalValue = value;
    }
    resetDestinationTable() {
        this._destinationTable.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationTableInput() {
        return this._destinationTable.internalValue;
    }
    get sourceTables() {
        return this._sourceTables;
    }
    putSourceTables(value) {
        this._sourceTables.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceTablesInput() {
        return this._sourceTables.internalValue;
    }
}
exports.BigqueryJobCopyOutputReference = BigqueryJobCopyOutputReference;
_l = JSII_RTTI_SYMBOL_1;
BigqueryJobCopyOutputReference[_l] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobCopyOutputReference", version: "5.0.1" };
function bigqueryJobExtractSourceModelToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        model_id: cdktf.stringToTerraform(struct.modelId),
        project_id: cdktf.stringToTerraform(struct.projectId),
    };
}
exports.bigqueryJobExtractSourceModelToTerraform = bigqueryJobExtractSourceModelToTerraform;
class BigqueryJobExtractSourceModelOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._modelId !== undefined) {
            hasAnyValues = true;
            internalValueResult.modelId = this._modelId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._modelId = undefined;
            this._projectId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._modelId = value.modelId;
            this._projectId = value.projectId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get modelId() {
        return this.getStringAttribute('model_id');
    }
    set modelId(value) {
        this._modelId = value;
    }
    // Temporarily expose input value. Use with caution.
    get modelIdInput() {
        return this._modelId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
}
exports.BigqueryJobExtractSourceModelOutputReference = BigqueryJobExtractSourceModelOutputReference;
_m = JSII_RTTI_SYMBOL_1;
BigqueryJobExtractSourceModelOutputReference[_m] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobExtractSourceModelOutputReference", version: "5.0.1" };
function bigqueryJobExtractSourceTableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.bigqueryJobExtractSourceTableToTerraform = bigqueryJobExtractSourceTableToTerraform;
class BigqueryJobExtractSourceTableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    resetDatasetId() {
        this._datasetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.BigqueryJobExtractSourceTableOutputReference = BigqueryJobExtractSourceTableOutputReference;
_o = JSII_RTTI_SYMBOL_1;
BigqueryJobExtractSourceTableOutputReference[_o] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobExtractSourceTableOutputReference", version: "5.0.1" };
function bigqueryJobExtractToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        compression: cdktf.stringToTerraform(struct.compression),
        destination_format: cdktf.stringToTerraform(struct.destinationFormat),
        destination_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.destinationUris),
        field_delimiter: cdktf.stringToTerraform(struct.fieldDelimiter),
        print_header: cdktf.booleanToTerraform(struct.printHeader),
        use_avro_logical_types: cdktf.booleanToTerraform(struct.useAvroLogicalTypes),
        source_model: bigqueryJobExtractSourceModelToTerraform(struct.sourceModel),
        source_table: bigqueryJobExtractSourceTableToTerraform(struct.sourceTable),
    };
}
exports.bigqueryJobExtractToTerraform = bigqueryJobExtractToTerraform;
class BigqueryJobExtractOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // source_model - computed: false, optional: true, required: false
        this._sourceModel = new BigqueryJobExtractSourceModelOutputReference(this, "source_model");
        // source_table - computed: false, optional: true, required: false
        this._sourceTable = new BigqueryJobExtractSourceTableOutputReference(this, "source_table");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._compression !== undefined) {
            hasAnyValues = true;
            internalValueResult.compression = this._compression;
        }
        if (this._destinationFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationFormat = this._destinationFormat;
        }
        if (this._destinationUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationUris = this._destinationUris;
        }
        if (this._fieldDelimiter !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldDelimiter = this._fieldDelimiter;
        }
        if (this._printHeader !== undefined) {
            hasAnyValues = true;
            internalValueResult.printHeader = this._printHeader;
        }
        if (this._useAvroLogicalTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.useAvroLogicalTypes = this._useAvroLogicalTypes;
        }
        if (this._sourceModel?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceModel = this._sourceModel?.internalValue;
        }
        if (this._sourceTable?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceTable = this._sourceTable?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._compression = undefined;
            this._destinationFormat = undefined;
            this._destinationUris = undefined;
            this._fieldDelimiter = undefined;
            this._printHeader = undefined;
            this._useAvroLogicalTypes = undefined;
            this._sourceModel.internalValue = undefined;
            this._sourceTable.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._compression = value.compression;
            this._destinationFormat = value.destinationFormat;
            this._destinationUris = value.destinationUris;
            this._fieldDelimiter = value.fieldDelimiter;
            this._printHeader = value.printHeader;
            this._useAvroLogicalTypes = value.useAvroLogicalTypes;
            this._sourceModel.internalValue = value.sourceModel;
            this._sourceTable.internalValue = value.sourceTable;
        }
    }
    get compression() {
        return this.getStringAttribute('compression');
    }
    set compression(value) {
        this._compression = value;
    }
    resetCompression() {
        this._compression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionInput() {
        return this._compression;
    }
    get destinationFormat() {
        return this.getStringAttribute('destination_format');
    }
    set destinationFormat(value) {
        this._destinationFormat = value;
    }
    resetDestinationFormat() {
        this._destinationFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationFormatInput() {
        return this._destinationFormat;
    }
    get destinationUris() {
        return this.getListAttribute('destination_uris');
    }
    set destinationUris(value) {
        this._destinationUris = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationUrisInput() {
        return this._destinationUris;
    }
    get fieldDelimiter() {
        return this.getStringAttribute('field_delimiter');
    }
    set fieldDelimiter(value) {
        this._fieldDelimiter = value;
    }
    resetFieldDelimiter() {
        this._fieldDelimiter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fieldDelimiterInput() {
        return this._fieldDelimiter;
    }
    get printHeader() {
        return this.getBooleanAttribute('print_header');
    }
    set printHeader(value) {
        this._printHeader = value;
    }
    resetPrintHeader() {
        this._printHeader = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get printHeaderInput() {
        return this._printHeader;
    }
    get useAvroLogicalTypes() {
        return this.getBooleanAttribute('use_avro_logical_types');
    }
    set useAvroLogicalTypes(value) {
        this._useAvroLogicalTypes = value;
    }
    resetUseAvroLogicalTypes() {
        this._useAvroLogicalTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useAvroLogicalTypesInput() {
        return this._useAvroLogicalTypes;
    }
    get sourceModel() {
        return this._sourceModel;
    }
    putSourceModel(value) {
        this._sourceModel.internalValue = value;
    }
    resetSourceModel() {
        this._sourceModel.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceModelInput() {
        return this._sourceModel.internalValue;
    }
    get sourceTable() {
        return this._sourceTable;
    }
    putSourceTable(value) {
        this._sourceTable.internalValue = value;
    }
    resetSourceTable() {
        this._sourceTable.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceTableInput() {
        return this._sourceTable.internalValue;
    }
}
exports.BigqueryJobExtractOutputReference = BigqueryJobExtractOutputReference;
_p = JSII_RTTI_SYMBOL_1;
BigqueryJobExtractOutputReference[_p] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobExtractOutputReference", version: "5.0.1" };
function bigqueryJobLoadDestinationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.bigqueryJobLoadDestinationEncryptionConfigurationToTerraform = bigqueryJobLoadDestinationEncryptionConfigurationToTerraform;
class BigqueryJobLoadDestinationEncryptionConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    // kms_key_version - computed: true, optional: false, required: false
    get kmsKeyVersion() {
        return this.getStringAttribute('kms_key_version');
    }
}
exports.BigqueryJobLoadDestinationEncryptionConfigurationOutputReference = BigqueryJobLoadDestinationEncryptionConfigurationOutputReference;
_q = JSII_RTTI_SYMBOL_1;
BigqueryJobLoadDestinationEncryptionConfigurationOutputReference[_q] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobLoadDestinationEncryptionConfigurationOutputReference", version: "5.0.1" };
function bigqueryJobLoadDestinationTableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.bigqueryJobLoadDestinationTableToTerraform = bigqueryJobLoadDestinationTableToTerraform;
class BigqueryJobLoadDestinationTableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    resetDatasetId() {
        this._datasetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.BigqueryJobLoadDestinationTableOutputReference = BigqueryJobLoadDestinationTableOutputReference;
_r = JSII_RTTI_SYMBOL_1;
BigqueryJobLoadDestinationTableOutputReference[_r] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobLoadDestinationTableOutputReference", version: "5.0.1" };
function bigqueryJobLoadTimePartitioningToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        expiration_ms: cdktf.stringToTerraform(struct.expirationMs),
        field: cdktf.stringToTerraform(struct.field),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.bigqueryJobLoadTimePartitioningToTerraform = bigqueryJobLoadTimePartitioningToTerraform;
class BigqueryJobLoadTimePartitioningOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._expirationMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.expirationMs = this._expirationMs;
        }
        if (this._field !== undefined) {
            hasAnyValues = true;
            internalValueResult.field = this._field;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._expirationMs = undefined;
            this._field = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._expirationMs = value.expirationMs;
            this._field = value.field;
            this._type = value.type;
        }
    }
    get expirationMs() {
        return this.getStringAttribute('expiration_ms');
    }
    set expirationMs(value) {
        this._expirationMs = value;
    }
    resetExpirationMs() {
        this._expirationMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expirationMsInput() {
        return this._expirationMs;
    }
    get field() {
        return this.getStringAttribute('field');
    }
    set field(value) {
        this._field = value;
    }
    resetField() {
        this._field = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fieldInput() {
        return this._field;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.BigqueryJobLoadTimePartitioningOutputReference = BigqueryJobLoadTimePartitioningOutputReference;
_s = JSII_RTTI_SYMBOL_1;
BigqueryJobLoadTimePartitioningOutputReference[_s] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobLoadTimePartitioningOutputReference", version: "5.0.1" };
function bigqueryJobLoadToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_jagged_rows: cdktf.booleanToTerraform(struct.allowJaggedRows),
        allow_quoted_newlines: cdktf.booleanToTerraform(struct.allowQuotedNewlines),
        autodetect: cdktf.booleanToTerraform(struct.autodetect),
        create_disposition: cdktf.stringToTerraform(struct.createDisposition),
        encoding: cdktf.stringToTerraform(struct.encoding),
        field_delimiter: cdktf.stringToTerraform(struct.fieldDelimiter),
        ignore_unknown_values: cdktf.booleanToTerraform(struct.ignoreUnknownValues),
        json_extension: cdktf.stringToTerraform(struct.jsonExtension),
        max_bad_records: cdktf.numberToTerraform(struct.maxBadRecords),
        null_marker: cdktf.stringToTerraform(struct.nullMarker),
        projection_fields: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.projectionFields),
        quote: cdktf.stringToTerraform(struct.quote),
        schema_update_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.schemaUpdateOptions),
        skip_leading_rows: cdktf.numberToTerraform(struct.skipLeadingRows),
        source_format: cdktf.stringToTerraform(struct.sourceFormat),
        source_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.sourceUris),
        write_disposition: cdktf.stringToTerraform(struct.writeDisposition),
        destination_encryption_configuration: bigqueryJobLoadDestinationEncryptionConfigurationToTerraform(struct.destinationEncryptionConfiguration),
        destination_table: bigqueryJobLoadDestinationTableToTerraform(struct.destinationTable),
        time_partitioning: bigqueryJobLoadTimePartitioningToTerraform(struct.timePartitioning),
    };
}
exports.bigqueryJobLoadToTerraform = bigqueryJobLoadToTerraform;
class BigqueryJobLoadOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination_encryption_configuration - computed: false, optional: true, required: false
        this._destinationEncryptionConfiguration = new BigqueryJobLoadDestinationEncryptionConfigurationOutputReference(this, "destination_encryption_configuration");
        // destination_table - computed: false, optional: false, required: true
        this._destinationTable = new BigqueryJobLoadDestinationTableOutputReference(this, "destination_table");
        // time_partitioning - computed: false, optional: true, required: false
        this._timePartitioning = new BigqueryJobLoadTimePartitioningOutputReference(this, "time_partitioning");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowJaggedRows !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowJaggedRows = this._allowJaggedRows;
        }
        if (this._allowQuotedNewlines !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowQuotedNewlines = this._allowQuotedNewlines;
        }
        if (this._autodetect !== undefined) {
            hasAnyValues = true;
            internalValueResult.autodetect = this._autodetect;
        }
        if (this._createDisposition !== undefined) {
            hasAnyValues = true;
            internalValueResult.createDisposition = this._createDisposition;
        }
        if (this._encoding !== undefined) {
            hasAnyValues = true;
            internalValueResult.encoding = this._encoding;
        }
        if (this._fieldDelimiter !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldDelimiter = this._fieldDelimiter;
        }
        if (this._ignoreUnknownValues !== undefined) {
            hasAnyValues = true;
            internalValueResult.ignoreUnknownValues = this._ignoreUnknownValues;
        }
        if (this._jsonExtension !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonExtension = this._jsonExtension;
        }
        if (this._maxBadRecords !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBadRecords = this._maxBadRecords;
        }
        if (this._nullMarker !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullMarker = this._nullMarker;
        }
        if (this._projectionFields !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectionFields = this._projectionFields;
        }
        if (this._quote !== undefined) {
            hasAnyValues = true;
            internalValueResult.quote = this._quote;
        }
        if (this._schemaUpdateOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemaUpdateOptions = this._schemaUpdateOptions;
        }
        if (this._skipLeadingRows !== undefined) {
            hasAnyValues = true;
            internalValueResult.skipLeadingRows = this._skipLeadingRows;
        }
        if (this._sourceFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceFormat = this._sourceFormat;
        }
        if (this._sourceUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceUris = this._sourceUris;
        }
        if (this._writeDisposition !== undefined) {
            hasAnyValues = true;
            internalValueResult.writeDisposition = this._writeDisposition;
        }
        if (this._destinationEncryptionConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationEncryptionConfiguration = this._destinationEncryptionConfiguration?.internalValue;
        }
        if (this._destinationTable?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationTable = this._destinationTable?.internalValue;
        }
        if (this._timePartitioning?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timePartitioning = this._timePartitioning?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowJaggedRows = undefined;
            this._allowQuotedNewlines = undefined;
            this._autodetect = undefined;
            this._createDisposition = undefined;
            this._encoding = undefined;
            this._fieldDelimiter = undefined;
            this._ignoreUnknownValues = undefined;
            this._jsonExtension = undefined;
            this._maxBadRecords = undefined;
            this._nullMarker = undefined;
            this._projectionFields = undefined;
            this._quote = undefined;
            this._schemaUpdateOptions = undefined;
            this._skipLeadingRows = undefined;
            this._sourceFormat = undefined;
            this._sourceUris = undefined;
            this._writeDisposition = undefined;
            this._destinationEncryptionConfiguration.internalValue = undefined;
            this._destinationTable.internalValue = undefined;
            this._timePartitioning.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowJaggedRows = value.allowJaggedRows;
            this._allowQuotedNewlines = value.allowQuotedNewlines;
            this._autodetect = value.autodetect;
            this._createDisposition = value.createDisposition;
            this._encoding = value.encoding;
            this._fieldDelimiter = value.fieldDelimiter;
            this._ignoreUnknownValues = value.ignoreUnknownValues;
            this._jsonExtension = value.jsonExtension;
            this._maxBadRecords = value.maxBadRecords;
            this._nullMarker = value.nullMarker;
            this._projectionFields = value.projectionFields;
            this._quote = value.quote;
            this._schemaUpdateOptions = value.schemaUpdateOptions;
            this._skipLeadingRows = value.skipLeadingRows;
            this._sourceFormat = value.sourceFormat;
            this._sourceUris = value.sourceUris;
            this._writeDisposition = value.writeDisposition;
            this._destinationEncryptionConfiguration.internalValue = value.destinationEncryptionConfiguration;
            this._destinationTable.internalValue = value.destinationTable;
            this._timePartitioning.internalValue = value.timePartitioning;
        }
    }
    get allowJaggedRows() {
        return this.getBooleanAttribute('allow_jagged_rows');
    }
    set allowJaggedRows(value) {
        this._allowJaggedRows = value;
    }
    resetAllowJaggedRows() {
        this._allowJaggedRows = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowJaggedRowsInput() {
        return this._allowJaggedRows;
    }
    get allowQuotedNewlines() {
        return this.getBooleanAttribute('allow_quoted_newlines');
    }
    set allowQuotedNewlines(value) {
        this._allowQuotedNewlines = value;
    }
    resetAllowQuotedNewlines() {
        this._allowQuotedNewlines = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowQuotedNewlinesInput() {
        return this._allowQuotedNewlines;
    }
    get autodetect() {
        return this.getBooleanAttribute('autodetect');
    }
    set autodetect(value) {
        this._autodetect = value;
    }
    resetAutodetect() {
        this._autodetect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autodetectInput() {
        return this._autodetect;
    }
    get createDisposition() {
        return this.getStringAttribute('create_disposition');
    }
    set createDisposition(value) {
        this._createDisposition = value;
    }
    resetCreateDisposition() {
        this._createDisposition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createDispositionInput() {
        return this._createDisposition;
    }
    get encoding() {
        return this.getStringAttribute('encoding');
    }
    set encoding(value) {
        this._encoding = value;
    }
    resetEncoding() {
        this._encoding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encodingInput() {
        return this._encoding;
    }
    get fieldDelimiter() {
        return this.getStringAttribute('field_delimiter');
    }
    set fieldDelimiter(value) {
        this._fieldDelimiter = value;
    }
    resetFieldDelimiter() {
        this._fieldDelimiter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fieldDelimiterInput() {
        return this._fieldDelimiter;
    }
    get ignoreUnknownValues() {
        return this.getBooleanAttribute('ignore_unknown_values');
    }
    set ignoreUnknownValues(value) {
        this._ignoreUnknownValues = value;
    }
    resetIgnoreUnknownValues() {
        this._ignoreUnknownValues = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreUnknownValuesInput() {
        return this._ignoreUnknownValues;
    }
    get jsonExtension() {
        return this.getStringAttribute('json_extension');
    }
    set jsonExtension(value) {
        this._jsonExtension = value;
    }
    resetJsonExtension() {
        this._jsonExtension = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonExtensionInput() {
        return this._jsonExtension;
    }
    get maxBadRecords() {
        return this.getNumberAttribute('max_bad_records');
    }
    set maxBadRecords(value) {
        this._maxBadRecords = value;
    }
    resetMaxBadRecords() {
        this._maxBadRecords = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBadRecordsInput() {
        return this._maxBadRecords;
    }
    get nullMarker() {
        return this.getStringAttribute('null_marker');
    }
    set nullMarker(value) {
        this._nullMarker = value;
    }
    resetNullMarker() {
        this._nullMarker = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullMarkerInput() {
        return this._nullMarker;
    }
    get projectionFields() {
        return this.getListAttribute('projection_fields');
    }
    set projectionFields(value) {
        this._projectionFields = value;
    }
    resetProjectionFields() {
        this._projectionFields = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectionFieldsInput() {
        return this._projectionFields;
    }
    get quote() {
        return this.getStringAttribute('quote');
    }
    set quote(value) {
        this._quote = value;
    }
    resetQuote() {
        this._quote = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get quoteInput() {
        return this._quote;
    }
    get schemaUpdateOptions() {
        return this.getListAttribute('schema_update_options');
    }
    set schemaUpdateOptions(value) {
        this._schemaUpdateOptions = value;
    }
    resetSchemaUpdateOptions() {
        this._schemaUpdateOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaUpdateOptionsInput() {
        return this._schemaUpdateOptions;
    }
    get skipLeadingRows() {
        return this.getNumberAttribute('skip_leading_rows');
    }
    set skipLeadingRows(value) {
        this._skipLeadingRows = value;
    }
    resetSkipLeadingRows() {
        this._skipLeadingRows = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipLeadingRowsInput() {
        return this._skipLeadingRows;
    }
    get sourceFormat() {
        return this.getStringAttribute('source_format');
    }
    set sourceFormat(value) {
        this._sourceFormat = value;
    }
    resetSourceFormat() {
        this._sourceFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceFormatInput() {
        return this._sourceFormat;
    }
    get sourceUris() {
        return this.getListAttribute('source_uris');
    }
    set sourceUris(value) {
        this._sourceUris = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceUrisInput() {
        return this._sourceUris;
    }
    get writeDisposition() {
        return this.getStringAttribute('write_disposition');
    }
    set writeDisposition(value) {
        this._writeDisposition = value;
    }
    resetWriteDisposition() {
        this._writeDisposition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get writeDispositionInput() {
        return this._writeDisposition;
    }
    get destinationEncryptionConfiguration() {
        return this._destinationEncryptionConfiguration;
    }
    putDestinationEncryptionConfiguration(value) {
        this._destinationEncryptionConfiguration.internalValue = value;
    }
    resetDestinationEncryptionConfiguration() {
        this._destinationEncryptionConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationEncryptionConfigurationInput() {
        return this._destinationEncryptionConfiguration.internalValue;
    }
    get destinationTable() {
        return this._destinationTable;
    }
    putDestinationTable(value) {
        this._destinationTable.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationTableInput() {
        return this._destinationTable.internalValue;
    }
    get timePartitioning() {
        return this._timePartitioning;
    }
    putTimePartitioning(value) {
        this._timePartitioning.internalValue = value;
    }
    resetTimePartitioning() {
        this._timePartitioning.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timePartitioningInput() {
        return this._timePartitioning.internalValue;
    }
}
exports.BigqueryJobLoadOutputReference = BigqueryJobLoadOutputReference;
_t = JSII_RTTI_SYMBOL_1;
BigqueryJobLoadOutputReference[_t] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobLoadOutputReference", version: "5.0.1" };
function bigqueryJobQueryDefaultDatasetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
    };
}
exports.bigqueryJobQueryDefaultDatasetToTerraform = bigqueryJobQueryDefaultDatasetToTerraform;
class BigqueryJobQueryDefaultDatasetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
}
exports.BigqueryJobQueryDefaultDatasetOutputReference = BigqueryJobQueryDefaultDatasetOutputReference;
_u = JSII_RTTI_SYMBOL_1;
BigqueryJobQueryDefaultDatasetOutputReference[_u] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobQueryDefaultDatasetOutputReference", version: "5.0.1" };
function bigqueryJobQueryDestinationEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.bigqueryJobQueryDestinationEncryptionConfigurationToTerraform = bigqueryJobQueryDestinationEncryptionConfigurationToTerraform;
class BigqueryJobQueryDestinationEncryptionConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    // kms_key_version - computed: true, optional: false, required: false
    get kmsKeyVersion() {
        return this.getStringAttribute('kms_key_version');
    }
}
exports.BigqueryJobQueryDestinationEncryptionConfigurationOutputReference = BigqueryJobQueryDestinationEncryptionConfigurationOutputReference;
_v = JSII_RTTI_SYMBOL_1;
BigqueryJobQueryDestinationEncryptionConfigurationOutputReference[_v] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobQueryDestinationEncryptionConfigurationOutputReference", version: "5.0.1" };
function bigqueryJobQueryDestinationTableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.bigqueryJobQueryDestinationTableToTerraform = bigqueryJobQueryDestinationTableToTerraform;
class BigqueryJobQueryDestinationTableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    resetDatasetId() {
        this._datasetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.BigqueryJobQueryDestinationTableOutputReference = BigqueryJobQueryDestinationTableOutputReference;
_w = JSII_RTTI_SYMBOL_1;
BigqueryJobQueryDestinationTableOutputReference[_w] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobQueryDestinationTableOutputReference", version: "5.0.1" };
function bigqueryJobQueryScriptOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key_result_statement: cdktf.stringToTerraform(struct.keyResultStatement),
        statement_byte_budget: cdktf.stringToTerraform(struct.statementByteBudget),
        statement_timeout_ms: cdktf.stringToTerraform(struct.statementTimeoutMs),
    };
}
exports.bigqueryJobQueryScriptOptionsToTerraform = bigqueryJobQueryScriptOptionsToTerraform;
class BigqueryJobQueryScriptOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._keyResultStatement !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyResultStatement = this._keyResultStatement;
        }
        if (this._statementByteBudget !== undefined) {
            hasAnyValues = true;
            internalValueResult.statementByteBudget = this._statementByteBudget;
        }
        if (this._statementTimeoutMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.statementTimeoutMs = this._statementTimeoutMs;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._keyResultStatement = undefined;
            this._statementByteBudget = undefined;
            this._statementTimeoutMs = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._keyResultStatement = value.keyResultStatement;
            this._statementByteBudget = value.statementByteBudget;
            this._statementTimeoutMs = value.statementTimeoutMs;
        }
    }
    get keyResultStatement() {
        return this.getStringAttribute('key_result_statement');
    }
    set keyResultStatement(value) {
        this._keyResultStatement = value;
    }
    resetKeyResultStatement() {
        this._keyResultStatement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyResultStatementInput() {
        return this._keyResultStatement;
    }
    get statementByteBudget() {
        return this.getStringAttribute('statement_byte_budget');
    }
    set statementByteBudget(value) {
        this._statementByteBudget = value;
    }
    resetStatementByteBudget() {
        this._statementByteBudget = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statementByteBudgetInput() {
        return this._statementByteBudget;
    }
    get statementTimeoutMs() {
        return this.getStringAttribute('statement_timeout_ms');
    }
    set statementTimeoutMs(value) {
        this._statementTimeoutMs = value;
    }
    resetStatementTimeoutMs() {
        this._statementTimeoutMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statementTimeoutMsInput() {
        return this._statementTimeoutMs;
    }
}
exports.BigqueryJobQueryScriptOptionsOutputReference = BigqueryJobQueryScriptOptionsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
BigqueryJobQueryScriptOptionsOutputReference[_x] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobQueryScriptOptionsOutputReference", version: "5.0.1" };
function bigqueryJobQueryUserDefinedFunctionResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        inline_code: cdktf.stringToTerraform(struct.inlineCode),
        resource_uri: cdktf.stringToTerraform(struct.resourceUri),
    };
}
exports.bigqueryJobQueryUserDefinedFunctionResourcesToTerraform = bigqueryJobQueryUserDefinedFunctionResourcesToTerraform;
class BigqueryJobQueryUserDefinedFunctionResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._inlineCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.inlineCode = this._inlineCode;
        }
        if (this._resourceUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceUri = this._resourceUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._inlineCode = undefined;
            this._resourceUri = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._inlineCode = value.inlineCode;
            this._resourceUri = value.resourceUri;
        }
    }
    get inlineCode() {
        return this.getStringAttribute('inline_code');
    }
    set inlineCode(value) {
        this._inlineCode = value;
    }
    resetInlineCode() {
        this._inlineCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inlineCodeInput() {
        return this._inlineCode;
    }
    get resourceUri() {
        return this.getStringAttribute('resource_uri');
    }
    set resourceUri(value) {
        this._resourceUri = value;
    }
    resetResourceUri() {
        this._resourceUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceUriInput() {
        return this._resourceUri;
    }
}
exports.BigqueryJobQueryUserDefinedFunctionResourcesOutputReference = BigqueryJobQueryUserDefinedFunctionResourcesOutputReference;
_y = JSII_RTTI_SYMBOL_1;
BigqueryJobQueryUserDefinedFunctionResourcesOutputReference[_y] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobQueryUserDefinedFunctionResourcesOutputReference", version: "5.0.1" };
class BigqueryJobQueryUserDefinedFunctionResourcesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BigqueryJobQueryUserDefinedFunctionResourcesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BigqueryJobQueryUserDefinedFunctionResourcesList = BigqueryJobQueryUserDefinedFunctionResourcesList;
_z = JSII_RTTI_SYMBOL_1;
BigqueryJobQueryUserDefinedFunctionResourcesList[_z] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobQueryUserDefinedFunctionResourcesList", version: "5.0.1" };
function bigqueryJobQueryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_large_results: cdktf.booleanToTerraform(struct.allowLargeResults),
        create_disposition: cdktf.stringToTerraform(struct.createDisposition),
        flatten_results: cdktf.booleanToTerraform(struct.flattenResults),
        maximum_billing_tier: cdktf.numberToTerraform(struct.maximumBillingTier),
        maximum_bytes_billed: cdktf.stringToTerraform(struct.maximumBytesBilled),
        parameter_mode: cdktf.stringToTerraform(struct.parameterMode),
        priority: cdktf.stringToTerraform(struct.priority),
        query: cdktf.stringToTerraform(struct.query),
        schema_update_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.schemaUpdateOptions),
        use_legacy_sql: cdktf.booleanToTerraform(struct.useLegacySql),
        use_query_cache: cdktf.booleanToTerraform(struct.useQueryCache),
        write_disposition: cdktf.stringToTerraform(struct.writeDisposition),
        default_dataset: bigqueryJobQueryDefaultDatasetToTerraform(struct.defaultDataset),
        destination_encryption_configuration: bigqueryJobQueryDestinationEncryptionConfigurationToTerraform(struct.destinationEncryptionConfiguration),
        destination_table: bigqueryJobQueryDestinationTableToTerraform(struct.destinationTable),
        script_options: bigqueryJobQueryScriptOptionsToTerraform(struct.scriptOptions),
        user_defined_function_resources: cdktf.listMapper(bigqueryJobQueryUserDefinedFunctionResourcesToTerraform, true)(struct.userDefinedFunctionResources),
    };
}
exports.bigqueryJobQueryToTerraform = bigqueryJobQueryToTerraform;
class BigqueryJobQueryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // default_dataset - computed: false, optional: true, required: false
        this._defaultDataset = new BigqueryJobQueryDefaultDatasetOutputReference(this, "default_dataset");
        // destination_encryption_configuration - computed: false, optional: true, required: false
        this._destinationEncryptionConfiguration = new BigqueryJobQueryDestinationEncryptionConfigurationOutputReference(this, "destination_encryption_configuration");
        // destination_table - computed: false, optional: true, required: false
        this._destinationTable = new BigqueryJobQueryDestinationTableOutputReference(this, "destination_table");
        // script_options - computed: false, optional: true, required: false
        this._scriptOptions = new BigqueryJobQueryScriptOptionsOutputReference(this, "script_options");
        // user_defined_function_resources - computed: false, optional: true, required: false
        this._userDefinedFunctionResources = new BigqueryJobQueryUserDefinedFunctionResourcesList(this, "user_defined_function_resources", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowLargeResults !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowLargeResults = this._allowLargeResults;
        }
        if (this._createDisposition !== undefined) {
            hasAnyValues = true;
            internalValueResult.createDisposition = this._createDisposition;
        }
        if (this._flattenResults !== undefined) {
            hasAnyValues = true;
            internalValueResult.flattenResults = this._flattenResults;
        }
        if (this._maximumBillingTier !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumBillingTier = this._maximumBillingTier;
        }
        if (this._maximumBytesBilled !== undefined) {
            hasAnyValues = true;
            internalValueResult.maximumBytesBilled = this._maximumBytesBilled;
        }
        if (this._parameterMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameterMode = this._parameterMode;
        }
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        if (this._query !== undefined) {
            hasAnyValues = true;
            internalValueResult.query = this._query;
        }
        if (this._schemaUpdateOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemaUpdateOptions = this._schemaUpdateOptions;
        }
        if (this._useLegacySql !== undefined) {
            hasAnyValues = true;
            internalValueResult.useLegacySql = this._useLegacySql;
        }
        if (this._useQueryCache !== undefined) {
            hasAnyValues = true;
            internalValueResult.useQueryCache = this._useQueryCache;
        }
        if (this._writeDisposition !== undefined) {
            hasAnyValues = true;
            internalValueResult.writeDisposition = this._writeDisposition;
        }
        if (this._defaultDataset?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultDataset = this._defaultDataset?.internalValue;
        }
        if (this._destinationEncryptionConfiguration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationEncryptionConfiguration = this._destinationEncryptionConfiguration?.internalValue;
        }
        if (this._destinationTable?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationTable = this._destinationTable?.internalValue;
        }
        if (this._scriptOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scriptOptions = this._scriptOptions?.internalValue;
        }
        if (this._userDefinedFunctionResources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.userDefinedFunctionResources = this._userDefinedFunctionResources?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowLargeResults = undefined;
            this._createDisposition = undefined;
            this._flattenResults = undefined;
            this._maximumBillingTier = undefined;
            this._maximumBytesBilled = undefined;
            this._parameterMode = undefined;
            this._priority = undefined;
            this._query = undefined;
            this._schemaUpdateOptions = undefined;
            this._useLegacySql = undefined;
            this._useQueryCache = undefined;
            this._writeDisposition = undefined;
            this._defaultDataset.internalValue = undefined;
            this._destinationEncryptionConfiguration.internalValue = undefined;
            this._destinationTable.internalValue = undefined;
            this._scriptOptions.internalValue = undefined;
            this._userDefinedFunctionResources.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowLargeResults = value.allowLargeResults;
            this._createDisposition = value.createDisposition;
            this._flattenResults = value.flattenResults;
            this._maximumBillingTier = value.maximumBillingTier;
            this._maximumBytesBilled = value.maximumBytesBilled;
            this._parameterMode = value.parameterMode;
            this._priority = value.priority;
            this._query = value.query;
            this._schemaUpdateOptions = value.schemaUpdateOptions;
            this._useLegacySql = value.useLegacySql;
            this._useQueryCache = value.useQueryCache;
            this._writeDisposition = value.writeDisposition;
            this._defaultDataset.internalValue = value.defaultDataset;
            this._destinationEncryptionConfiguration.internalValue = value.destinationEncryptionConfiguration;
            this._destinationTable.internalValue = value.destinationTable;
            this._scriptOptions.internalValue = value.scriptOptions;
            this._userDefinedFunctionResources.internalValue = value.userDefinedFunctionResources;
        }
    }
    get allowLargeResults() {
        return this.getBooleanAttribute('allow_large_results');
    }
    set allowLargeResults(value) {
        this._allowLargeResults = value;
    }
    resetAllowLargeResults() {
        this._allowLargeResults = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowLargeResultsInput() {
        return this._allowLargeResults;
    }
    get createDisposition() {
        return this.getStringAttribute('create_disposition');
    }
    set createDisposition(value) {
        this._createDisposition = value;
    }
    resetCreateDisposition() {
        this._createDisposition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createDispositionInput() {
        return this._createDisposition;
    }
    get flattenResults() {
        return this.getBooleanAttribute('flatten_results');
    }
    set flattenResults(value) {
        this._flattenResults = value;
    }
    resetFlattenResults() {
        this._flattenResults = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get flattenResultsInput() {
        return this._flattenResults;
    }
    get maximumBillingTier() {
        return this.getNumberAttribute('maximum_billing_tier');
    }
    set maximumBillingTier(value) {
        this._maximumBillingTier = value;
    }
    resetMaximumBillingTier() {
        this._maximumBillingTier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maximumBillingTierInput() {
        return this._maximumBillingTier;
    }
    get maximumBytesBilled() {
        return this.getStringAttribute('maximum_bytes_billed');
    }
    set maximumBytesBilled(value) {
        this._maximumBytesBilled = value;
    }
    resetMaximumBytesBilled() {
        this._maximumBytesBilled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maximumBytesBilledInput() {
        return this._maximumBytesBilled;
    }
    get parameterMode() {
        return this.getStringAttribute('parameter_mode');
    }
    set parameterMode(value) {
        this._parameterMode = value;
    }
    resetParameterMode() {
        this._parameterMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parameterModeInput() {
        return this._parameterMode;
    }
    get priority() {
        return this.getStringAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    resetPriority() {
        this._priority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
    get query() {
        return this.getStringAttribute('query');
    }
    set query(value) {
        this._query = value;
    }
    // Temporarily expose input value. Use with caution.
    get queryInput() {
        return this._query;
    }
    get schemaUpdateOptions() {
        return this.getListAttribute('schema_update_options');
    }
    set schemaUpdateOptions(value) {
        this._schemaUpdateOptions = value;
    }
    resetSchemaUpdateOptions() {
        this._schemaUpdateOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaUpdateOptionsInput() {
        return this._schemaUpdateOptions;
    }
    get useLegacySql() {
        return this.getBooleanAttribute('use_legacy_sql');
    }
    set useLegacySql(value) {
        this._useLegacySql = value;
    }
    resetUseLegacySql() {
        this._useLegacySql = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useLegacySqlInput() {
        return this._useLegacySql;
    }
    get useQueryCache() {
        return this.getBooleanAttribute('use_query_cache');
    }
    set useQueryCache(value) {
        this._useQueryCache = value;
    }
    resetUseQueryCache() {
        this._useQueryCache = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useQueryCacheInput() {
        return this._useQueryCache;
    }
    get writeDisposition() {
        return this.getStringAttribute('write_disposition');
    }
    set writeDisposition(value) {
        this._writeDisposition = value;
    }
    resetWriteDisposition() {
        this._writeDisposition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get writeDispositionInput() {
        return this._writeDisposition;
    }
    get defaultDataset() {
        return this._defaultDataset;
    }
    putDefaultDataset(value) {
        this._defaultDataset.internalValue = value;
    }
    resetDefaultDataset() {
        this._defaultDataset.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultDatasetInput() {
        return this._defaultDataset.internalValue;
    }
    get destinationEncryptionConfiguration() {
        return this._destinationEncryptionConfiguration;
    }
    putDestinationEncryptionConfiguration(value) {
        this._destinationEncryptionConfiguration.internalValue = value;
    }
    resetDestinationEncryptionConfiguration() {
        this._destinationEncryptionConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationEncryptionConfigurationInput() {
        return this._destinationEncryptionConfiguration.internalValue;
    }
    get destinationTable() {
        return this._destinationTable;
    }
    putDestinationTable(value) {
        this._destinationTable.internalValue = value;
    }
    resetDestinationTable() {
        this._destinationTable.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationTableInput() {
        return this._destinationTable.internalValue;
    }
    get scriptOptions() {
        return this._scriptOptions;
    }
    putScriptOptions(value) {
        this._scriptOptions.internalValue = value;
    }
    resetScriptOptions() {
        this._scriptOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptOptionsInput() {
        return this._scriptOptions.internalValue;
    }
    get userDefinedFunctionResources() {
        return this._userDefinedFunctionResources;
    }
    putUserDefinedFunctionResources(value) {
        this._userDefinedFunctionResources.internalValue = value;
    }
    resetUserDefinedFunctionResources() {
        this._userDefinedFunctionResources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userDefinedFunctionResourcesInput() {
        return this._userDefinedFunctionResources.internalValue;
    }
}
exports.BigqueryJobQueryOutputReference = BigqueryJobQueryOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
BigqueryJobQueryOutputReference[_0] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobQueryOutputReference", version: "5.0.1" };
function bigqueryJobTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.bigqueryJobTimeoutsToTerraform = bigqueryJobTimeoutsToTerraform;
class BigqueryJobTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.BigqueryJobTimeoutsOutputReference = BigqueryJobTimeoutsOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
BigqueryJobTimeoutsOutputReference[_1] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJobTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/bigquery_job google_bigquery_job}
*/
class BigqueryJob extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/bigquery_job google_bigquery_job} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BigqueryJobConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_bigquery_job',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // status - computed: true, optional: false, required: false
        this._status = new BigqueryJobStatusList(this, "status", false);
        // copy - computed: false, optional: true, required: false
        this._copy = new BigqueryJobCopyOutputReference(this, "copy");
        // extract - computed: false, optional: true, required: false
        this._extract = new BigqueryJobExtractOutputReference(this, "extract");
        // load - computed: false, optional: true, required: false
        this._load = new BigqueryJobLoadOutputReference(this, "load");
        // query - computed: false, optional: true, required: false
        this._query = new BigqueryJobQueryOutputReference(this, "query");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new BigqueryJobTimeoutsOutputReference(this, "timeouts");
        this._id = config.id;
        this._jobId = config.jobId;
        this._jobTimeoutMs = config.jobTimeoutMs;
        this._labels = config.labels;
        this._location = config.location;
        this._project = config.project;
        this._copy.internalValue = config.copy;
        this._extract.internalValue = config.extract;
        this._load.internalValue = config.load;
        this._query.internalValue = config.query;
        this._timeouts.internalValue = config.timeouts;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get jobId() {
        return this.getStringAttribute('job_id');
    }
    set jobId(value) {
        this._jobId = value;
    }
    // Temporarily expose input value. Use with caution.
    get jobIdInput() {
        return this._jobId;
    }
    get jobTimeoutMs() {
        return this.getStringAttribute('job_timeout_ms');
    }
    set jobTimeoutMs(value) {
        this._jobTimeoutMs = value;
    }
    resetJobTimeoutMs() {
        this._jobTimeoutMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jobTimeoutMsInput() {
        return this._jobTimeoutMs;
    }
    // job_type - computed: true, optional: false, required: false
    get jobType() {
        return this.getStringAttribute('job_type');
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get status() {
        return this._status;
    }
    // user_email - computed: true, optional: false, required: false
    get userEmail() {
        return this.getStringAttribute('user_email');
    }
    get copy() {
        return this._copy;
    }
    putCopy(value) {
        this._copy.internalValue = value;
    }
    resetCopy() {
        this._copy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get copyInput() {
        return this._copy.internalValue;
    }
    get extract() {
        return this._extract;
    }
    putExtract(value) {
        this._extract.internalValue = value;
    }
    resetExtract() {
        this._extract.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get extractInput() {
        return this._extract.internalValue;
    }
    get load() {
        return this._load;
    }
    putLoad(value) {
        this._load.internalValue = value;
    }
    resetLoad() {
        this._load.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadInput() {
        return this._load.internalValue;
    }
    get query() {
        return this._query;
    }
    putQuery(value) {
        this._query.internalValue = value;
    }
    resetQuery() {
        this._query.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryInput() {
        return this._query.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            job_id: cdktf.stringToTerraform(this._jobId),
            job_timeout_ms: cdktf.stringToTerraform(this._jobTimeoutMs),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            project: cdktf.stringToTerraform(this._project),
            copy: bigqueryJobCopyToTerraform(this._copy.internalValue),
            extract: bigqueryJobExtractToTerraform(this._extract.internalValue),
            load: bigqueryJobLoadToTerraform(this._load.internalValue),
            query: bigqueryJobQueryToTerraform(this._query.internalValue),
            timeouts: bigqueryJobTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.BigqueryJob = BigqueryJob;
_2 = JSII_RTTI_SYMBOL_1;
BigqueryJob[_2] = { fqn: "@cdktf/provider-google.bigqueryJob.BigqueryJob", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
BigqueryJob.tfResourceType = "google_bigquery_job";
//# sourceMappingURL=data:application/json;base64,