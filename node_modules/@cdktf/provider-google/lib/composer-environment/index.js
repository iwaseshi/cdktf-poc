"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComposerEnvironment = exports.ComposerEnvironmentTimeoutsOutputReference = exports.composerEnvironmentTimeoutsToTerraform = exports.ComposerEnvironmentConfigAOutputReference = exports.composerEnvironmentConfigAToTerraform = exports.ComposerEnvironmentConfigWorkloadsConfigOutputReference = exports.composerEnvironmentConfigWorkloadsConfigToTerraform = exports.ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference = exports.composerEnvironmentConfigWorkloadsConfigWorkerToTerraform = exports.ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference = exports.composerEnvironmentConfigWorkloadsConfigWebServerToTerraform = exports.ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference = exports.composerEnvironmentConfigWorkloadsConfigSchedulerToTerraform = exports.ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference = exports.composerEnvironmentConfigWebServerNetworkAccessControlToTerraform = exports.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList = exports.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference = exports.composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToTerraform = exports.ComposerEnvironmentConfigWebServerConfigOutputReference = exports.composerEnvironmentConfigWebServerConfigToTerraform = exports.ComposerEnvironmentConfigSoftwareConfigOutputReference = exports.composerEnvironmentConfigSoftwareConfigToTerraform = exports.ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference = exports.composerEnvironmentConfigPrivateEnvironmentConfigToTerraform = exports.ComposerEnvironmentConfigNodeConfigOutputReference = exports.composerEnvironmentConfigNodeConfigToTerraform = exports.ComposerEnvironmentConfigNodeConfigIpAllocationPolicyList = exports.ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference = exports.composerEnvironmentConfigNodeConfigIpAllocationPolicyToTerraform = exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference = exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigToTerraform = exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList = exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference = exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToTerraform = exports.ComposerEnvironmentConfigMaintenanceWindowOutputReference = exports.composerEnvironmentConfigMaintenanceWindowToTerraform = exports.ComposerEnvironmentConfigEncryptionConfigOutputReference = exports.composerEnvironmentConfigEncryptionConfigToTerraform = exports.ComposerEnvironmentConfigDatabaseConfigOutputReference = exports.composerEnvironmentConfigDatabaseConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function composerEnvironmentConfigDatabaseConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        machine_type: cdktf.stringToTerraform(struct.machineType),
    };
}
exports.composerEnvironmentConfigDatabaseConfigToTerraform = composerEnvironmentConfigDatabaseConfigToTerraform;
class ComposerEnvironmentConfigDatabaseConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._machineType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._machineType = value.machineType;
        }
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
}
exports.ComposerEnvironmentConfigDatabaseConfigOutputReference = ComposerEnvironmentConfigDatabaseConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigDatabaseConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigDatabaseConfigOutputReference", version: "5.0.1" };
function composerEnvironmentConfigEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.composerEnvironmentConfigEncryptionConfigToTerraform = composerEnvironmentConfigEncryptionConfigToTerraform;
class ComposerEnvironmentConfigEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
}
exports.ComposerEnvironmentConfigEncryptionConfigOutputReference = ComposerEnvironmentConfigEncryptionConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigEncryptionConfigOutputReference[_b] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigEncryptionConfigOutputReference", version: "5.0.1" };
function composerEnvironmentConfigMaintenanceWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        end_time: cdktf.stringToTerraform(struct.endTime),
        recurrence: cdktf.stringToTerraform(struct.recurrence),
        start_time: cdktf.stringToTerraform(struct.startTime),
    };
}
exports.composerEnvironmentConfigMaintenanceWindowToTerraform = composerEnvironmentConfigMaintenanceWindowToTerraform;
class ComposerEnvironmentConfigMaintenanceWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.endTime = this._endTime;
        }
        if (this._recurrence !== undefined) {
            hasAnyValues = true;
            internalValueResult.recurrence = this._recurrence;
        }
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._endTime = undefined;
            this._recurrence = undefined;
            this._startTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._endTime = value.endTime;
            this._recurrence = value.recurrence;
            this._startTime = value.startTime;
        }
    }
    get endTime() {
        return this.getStringAttribute('end_time');
    }
    set endTime(value) {
        this._endTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get endTimeInput() {
        return this._endTime;
    }
    get recurrence() {
        return this.getStringAttribute('recurrence');
    }
    set recurrence(value) {
        this._recurrence = value;
    }
    // Temporarily expose input value. Use with caution.
    get recurrenceInput() {
        return this._recurrence;
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
}
exports.ComposerEnvironmentConfigMaintenanceWindowOutputReference = ComposerEnvironmentConfigMaintenanceWindowOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigMaintenanceWindowOutputReference[_c] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigMaintenanceWindowOutputReference", version: "5.0.1" };
function composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cidr_block: cdktf.stringToTerraform(struct.cidrBlock),
        display_name: cdktf.stringToTerraform(struct.displayName),
    };
}
exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToTerraform = composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToTerraform;
class ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.cidrBlock = this._cidrBlock;
        }
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cidrBlock = undefined;
            this._displayName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cidrBlock = value.cidrBlock;
            this._displayName = value.displayName;
        }
    }
    get cidrBlock() {
        return this.getStringAttribute('cidr_block');
    }
    set cidrBlock(value) {
        this._cidrBlock = value;
    }
    // Temporarily expose input value. Use with caution.
    get cidrBlockInput() {
        return this._cidrBlock;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
}
exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference = ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference[_d] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference", version: "5.0.1" };
class ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList = ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList;
_e = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList[_e] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList", version: "5.0.1" };
function composerEnvironmentConfigMasterAuthorizedNetworksConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        cidr_blocks: cdktf.listMapper(composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToTerraform, true)(struct.cidrBlocks),
    };
}
exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigToTerraform = composerEnvironmentConfigMasterAuthorizedNetworksConfigToTerraform;
class ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cidr_blocks - computed: false, optional: true, required: false
        this._cidrBlocks = new ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList(this, "cidr_blocks", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._cidrBlocks?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cidrBlocks = this._cidrBlocks?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._cidrBlocks.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._cidrBlocks.internalValue = value.cidrBlocks;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get cidrBlocks() {
        return this._cidrBlocks;
    }
    putCidrBlocks(value) {
        this._cidrBlocks.internalValue = value;
    }
    resetCidrBlocks() {
        this._cidrBlocks.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cidrBlocksInput() {
        return this._cidrBlocks.internalValue;
    }
}
exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference = ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference[_f] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference", version: "5.0.1" };
function composerEnvironmentConfigNodeConfigIpAllocationPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_ipv4_cidr_block: cdktf.stringToTerraform(struct.clusterIpv4CidrBlock),
        cluster_secondary_range_name: cdktf.stringToTerraform(struct.clusterSecondaryRangeName),
        services_ipv4_cidr_block: cdktf.stringToTerraform(struct.servicesIpv4CidrBlock),
        services_secondary_range_name: cdktf.stringToTerraform(struct.servicesSecondaryRangeName),
        use_ip_aliases: cdktf.booleanToTerraform(struct.useIpAliases),
    };
}
exports.composerEnvironmentConfigNodeConfigIpAllocationPolicyToTerraform = composerEnvironmentConfigNodeConfigIpAllocationPolicyToTerraform;
class ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterIpv4CidrBlock = this._clusterIpv4CidrBlock;
        }
        if (this._clusterSecondaryRangeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterSecondaryRangeName = this._clusterSecondaryRangeName;
        }
        if (this._servicesIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.servicesIpv4CidrBlock = this._servicesIpv4CidrBlock;
        }
        if (this._servicesSecondaryRangeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.servicesSecondaryRangeName = this._servicesSecondaryRangeName;
        }
        if (this._useIpAliases !== undefined) {
            hasAnyValues = true;
            internalValueResult.useIpAliases = this._useIpAliases;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._clusterIpv4CidrBlock = undefined;
            this._clusterSecondaryRangeName = undefined;
            this._servicesIpv4CidrBlock = undefined;
            this._servicesSecondaryRangeName = undefined;
            this._useIpAliases = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._clusterIpv4CidrBlock = value.clusterIpv4CidrBlock;
            this._clusterSecondaryRangeName = value.clusterSecondaryRangeName;
            this._servicesIpv4CidrBlock = value.servicesIpv4CidrBlock;
            this._servicesSecondaryRangeName = value.servicesSecondaryRangeName;
            this._useIpAliases = value.useIpAliases;
        }
    }
    get clusterIpv4CidrBlock() {
        return this.getStringAttribute('cluster_ipv4_cidr_block');
    }
    set clusterIpv4CidrBlock(value) {
        this._clusterIpv4CidrBlock = value;
    }
    resetClusterIpv4CidrBlock() {
        this._clusterIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIpv4CidrBlockInput() {
        return this._clusterIpv4CidrBlock;
    }
    get clusterSecondaryRangeName() {
        return this.getStringAttribute('cluster_secondary_range_name');
    }
    set clusterSecondaryRangeName(value) {
        this._clusterSecondaryRangeName = value;
    }
    resetClusterSecondaryRangeName() {
        this._clusterSecondaryRangeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterSecondaryRangeNameInput() {
        return this._clusterSecondaryRangeName;
    }
    get servicesIpv4CidrBlock() {
        return this.getStringAttribute('services_ipv4_cidr_block');
    }
    set servicesIpv4CidrBlock(value) {
        this._servicesIpv4CidrBlock = value;
    }
    resetServicesIpv4CidrBlock() {
        this._servicesIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get servicesIpv4CidrBlockInput() {
        return this._servicesIpv4CidrBlock;
    }
    get servicesSecondaryRangeName() {
        return this.getStringAttribute('services_secondary_range_name');
    }
    set servicesSecondaryRangeName(value) {
        this._servicesSecondaryRangeName = value;
    }
    resetServicesSecondaryRangeName() {
        this._servicesSecondaryRangeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get servicesSecondaryRangeNameInput() {
        return this._servicesSecondaryRangeName;
    }
    get useIpAliases() {
        return this.getBooleanAttribute('use_ip_aliases');
    }
    set useIpAliases(value) {
        this._useIpAliases = value;
    }
    resetUseIpAliases() {
        this._useIpAliases = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useIpAliasesInput() {
        return this._useIpAliases;
    }
}
exports.ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference = ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference[_g] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference", version: "5.0.1" };
class ComposerEnvironmentConfigNodeConfigIpAllocationPolicyList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComposerEnvironmentConfigNodeConfigIpAllocationPolicyList = ComposerEnvironmentConfigNodeConfigIpAllocationPolicyList;
_h = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigNodeConfigIpAllocationPolicyList[_h] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigNodeConfigIpAllocationPolicyList", version: "5.0.1" };
function composerEnvironmentConfigNodeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disk_size_gb: cdktf.numberToTerraform(struct.diskSizeGb),
        enable_ip_masq_agent: cdktf.booleanToTerraform(struct.enableIpMasqAgent),
        ip_allocation_policy: cdktf.listMapper(composerEnvironmentConfigNodeConfigIpAllocationPolicyToTerraform, false)(struct.ipAllocationPolicy),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        network: cdktf.stringToTerraform(struct.network),
        oauth_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.oauthScopes),
        service_account: cdktf.stringToTerraform(struct.serviceAccount),
        subnetwork: cdktf.stringToTerraform(struct.subnetwork),
        tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.tags),
        zone: cdktf.stringToTerraform(struct.zone),
    };
}
exports.composerEnvironmentConfigNodeConfigToTerraform = composerEnvironmentConfigNodeConfigToTerraform;
class ComposerEnvironmentConfigNodeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ip_allocation_policy - computed: true, optional: true, required: false
        this._ipAllocationPolicy = new ComposerEnvironmentConfigNodeConfigIpAllocationPolicyList(this, "ip_allocation_policy", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._diskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskSizeGb = this._diskSizeGb;
        }
        if (this._enableIpMasqAgent !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableIpMasqAgent = this._enableIpMasqAgent;
        }
        if (this._ipAllocationPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipAllocationPolicy = this._ipAllocationPolicy?.internalValue;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._network !== undefined) {
            hasAnyValues = true;
            internalValueResult.network = this._network;
        }
        if (this._oauthScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthScopes = this._oauthScopes;
        }
        if (this._serviceAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccount = this._serviceAccount;
        }
        if (this._subnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetwork = this._subnetwork;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._diskSizeGb = undefined;
            this._enableIpMasqAgent = undefined;
            this._ipAllocationPolicy.internalValue = undefined;
            this._machineType = undefined;
            this._network = undefined;
            this._oauthScopes = undefined;
            this._serviceAccount = undefined;
            this._subnetwork = undefined;
            this._tags = undefined;
            this._zone = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._diskSizeGb = value.diskSizeGb;
            this._enableIpMasqAgent = value.enableIpMasqAgent;
            this._ipAllocationPolicy.internalValue = value.ipAllocationPolicy;
            this._machineType = value.machineType;
            this._network = value.network;
            this._oauthScopes = value.oauthScopes;
            this._serviceAccount = value.serviceAccount;
            this._subnetwork = value.subnetwork;
            this._tags = value.tags;
            this._zone = value.zone;
        }
    }
    get diskSizeGb() {
        return this.getNumberAttribute('disk_size_gb');
    }
    set diskSizeGb(value) {
        this._diskSizeGb = value;
    }
    resetDiskSizeGb() {
        this._diskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskSizeGbInput() {
        return this._diskSizeGb;
    }
    get enableIpMasqAgent() {
        return this.getBooleanAttribute('enable_ip_masq_agent');
    }
    set enableIpMasqAgent(value) {
        this._enableIpMasqAgent = value;
    }
    resetEnableIpMasqAgent() {
        this._enableIpMasqAgent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIpMasqAgentInput() {
        return this._enableIpMasqAgent;
    }
    get ipAllocationPolicy() {
        return this._ipAllocationPolicy;
    }
    putIpAllocationPolicy(value) {
        this._ipAllocationPolicy.internalValue = value;
    }
    resetIpAllocationPolicy() {
        this._ipAllocationPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipAllocationPolicyInput() {
        return this._ipAllocationPolicy.internalValue;
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get network() {
        return this.getStringAttribute('network');
    }
    set network(value) {
        this._network = value;
    }
    resetNetwork() {
        this._network = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network;
    }
    get oauthScopes() {
        return cdktf.Fn.tolist(this.getListAttribute('oauth_scopes'));
    }
    set oauthScopes(value) {
        this._oauthScopes = value;
    }
    resetOauthScopes() {
        this._oauthScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthScopesInput() {
        return this._oauthScopes;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get subnetwork() {
        return this.getStringAttribute('subnetwork');
    }
    set subnetwork(value) {
        this._subnetwork = value;
    }
    resetSubnetwork() {
        this._subnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkInput() {
        return this._subnetwork;
    }
    get tags() {
        return cdktf.Fn.tolist(this.getListAttribute('tags'));
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
}
exports.ComposerEnvironmentConfigNodeConfigOutputReference = ComposerEnvironmentConfigNodeConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigNodeConfigOutputReference[_j] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigNodeConfigOutputReference", version: "5.0.1" };
function composerEnvironmentConfigPrivateEnvironmentConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_composer_connection_subnetwork: cdktf.stringToTerraform(struct.cloudComposerConnectionSubnetwork),
        cloud_composer_network_ipv4_cidr_block: cdktf.stringToTerraform(struct.cloudComposerNetworkIpv4CidrBlock),
        cloud_sql_ipv4_cidr_block: cdktf.stringToTerraform(struct.cloudSqlIpv4CidrBlock),
        enable_private_endpoint: cdktf.booleanToTerraform(struct.enablePrivateEndpoint),
        enable_privately_used_public_ips: cdktf.booleanToTerraform(struct.enablePrivatelyUsedPublicIps),
        master_ipv4_cidr_block: cdktf.stringToTerraform(struct.masterIpv4CidrBlock),
        web_server_ipv4_cidr_block: cdktf.stringToTerraform(struct.webServerIpv4CidrBlock),
    };
}
exports.composerEnvironmentConfigPrivateEnvironmentConfigToTerraform = composerEnvironmentConfigPrivateEnvironmentConfigToTerraform;
class ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudComposerConnectionSubnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudComposerConnectionSubnetwork = this._cloudComposerConnectionSubnetwork;
        }
        if (this._cloudComposerNetworkIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudComposerNetworkIpv4CidrBlock = this._cloudComposerNetworkIpv4CidrBlock;
        }
        if (this._cloudSqlIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudSqlIpv4CidrBlock = this._cloudSqlIpv4CidrBlock;
        }
        if (this._enablePrivateEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivateEndpoint = this._enablePrivateEndpoint;
        }
        if (this._enablePrivatelyUsedPublicIps !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivatelyUsedPublicIps = this._enablePrivatelyUsedPublicIps;
        }
        if (this._masterIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterIpv4CidrBlock = this._masterIpv4CidrBlock;
        }
        if (this._webServerIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.webServerIpv4CidrBlock = this._webServerIpv4CidrBlock;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudComposerConnectionSubnetwork = undefined;
            this._cloudComposerNetworkIpv4CidrBlock = undefined;
            this._cloudSqlIpv4CidrBlock = undefined;
            this._enablePrivateEndpoint = undefined;
            this._enablePrivatelyUsedPublicIps = undefined;
            this._masterIpv4CidrBlock = undefined;
            this._webServerIpv4CidrBlock = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudComposerConnectionSubnetwork = value.cloudComposerConnectionSubnetwork;
            this._cloudComposerNetworkIpv4CidrBlock = value.cloudComposerNetworkIpv4CidrBlock;
            this._cloudSqlIpv4CidrBlock = value.cloudSqlIpv4CidrBlock;
            this._enablePrivateEndpoint = value.enablePrivateEndpoint;
            this._enablePrivatelyUsedPublicIps = value.enablePrivatelyUsedPublicIps;
            this._masterIpv4CidrBlock = value.masterIpv4CidrBlock;
            this._webServerIpv4CidrBlock = value.webServerIpv4CidrBlock;
        }
    }
    get cloudComposerConnectionSubnetwork() {
        return this.getStringAttribute('cloud_composer_connection_subnetwork');
    }
    set cloudComposerConnectionSubnetwork(value) {
        this._cloudComposerConnectionSubnetwork = value;
    }
    resetCloudComposerConnectionSubnetwork() {
        this._cloudComposerConnectionSubnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudComposerConnectionSubnetworkInput() {
        return this._cloudComposerConnectionSubnetwork;
    }
    get cloudComposerNetworkIpv4CidrBlock() {
        return this.getStringAttribute('cloud_composer_network_ipv4_cidr_block');
    }
    set cloudComposerNetworkIpv4CidrBlock(value) {
        this._cloudComposerNetworkIpv4CidrBlock = value;
    }
    resetCloudComposerNetworkIpv4CidrBlock() {
        this._cloudComposerNetworkIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudComposerNetworkIpv4CidrBlockInput() {
        return this._cloudComposerNetworkIpv4CidrBlock;
    }
    get cloudSqlIpv4CidrBlock() {
        return this.getStringAttribute('cloud_sql_ipv4_cidr_block');
    }
    set cloudSqlIpv4CidrBlock(value) {
        this._cloudSqlIpv4CidrBlock = value;
    }
    resetCloudSqlIpv4CidrBlock() {
        this._cloudSqlIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudSqlIpv4CidrBlockInput() {
        return this._cloudSqlIpv4CidrBlock;
    }
    get enablePrivateEndpoint() {
        return this.getBooleanAttribute('enable_private_endpoint');
    }
    set enablePrivateEndpoint(value) {
        this._enablePrivateEndpoint = value;
    }
    resetEnablePrivateEndpoint() {
        this._enablePrivateEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivateEndpointInput() {
        return this._enablePrivateEndpoint;
    }
    get enablePrivatelyUsedPublicIps() {
        return this.getBooleanAttribute('enable_privately_used_public_ips');
    }
    set enablePrivatelyUsedPublicIps(value) {
        this._enablePrivatelyUsedPublicIps = value;
    }
    resetEnablePrivatelyUsedPublicIps() {
        this._enablePrivatelyUsedPublicIps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivatelyUsedPublicIpsInput() {
        return this._enablePrivatelyUsedPublicIps;
    }
    get masterIpv4CidrBlock() {
        return this.getStringAttribute('master_ipv4_cidr_block');
    }
    set masterIpv4CidrBlock(value) {
        this._masterIpv4CidrBlock = value;
    }
    resetMasterIpv4CidrBlock() {
        this._masterIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterIpv4CidrBlockInput() {
        return this._masterIpv4CidrBlock;
    }
    get webServerIpv4CidrBlock() {
        return this.getStringAttribute('web_server_ipv4_cidr_block');
    }
    set webServerIpv4CidrBlock(value) {
        this._webServerIpv4CidrBlock = value;
    }
    resetWebServerIpv4CidrBlock() {
        this._webServerIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webServerIpv4CidrBlockInput() {
        return this._webServerIpv4CidrBlock;
    }
}
exports.ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference = ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference[_k] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference", version: "5.0.1" };
function composerEnvironmentConfigSoftwareConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        airflow_config_overrides: cdktf.hashMapper(cdktf.stringToTerraform)(struct.airflowConfigOverrides),
        env_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.envVariables),
        image_version: cdktf.stringToTerraform(struct.imageVersion),
        pypi_packages: cdktf.hashMapper(cdktf.stringToTerraform)(struct.pypiPackages),
        python_version: cdktf.stringToTerraform(struct.pythonVersion),
        scheduler_count: cdktf.numberToTerraform(struct.schedulerCount),
    };
}
exports.composerEnvironmentConfigSoftwareConfigToTerraform = composerEnvironmentConfigSoftwareConfigToTerraform;
class ComposerEnvironmentConfigSoftwareConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._airflowConfigOverrides !== undefined) {
            hasAnyValues = true;
            internalValueResult.airflowConfigOverrides = this._airflowConfigOverrides;
        }
        if (this._envVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.envVariables = this._envVariables;
        }
        if (this._imageVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersion = this._imageVersion;
        }
        if (this._pypiPackages !== undefined) {
            hasAnyValues = true;
            internalValueResult.pypiPackages = this._pypiPackages;
        }
        if (this._pythonVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.pythonVersion = this._pythonVersion;
        }
        if (this._schedulerCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.schedulerCount = this._schedulerCount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._airflowConfigOverrides = undefined;
            this._envVariables = undefined;
            this._imageVersion = undefined;
            this._pypiPackages = undefined;
            this._pythonVersion = undefined;
            this._schedulerCount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._airflowConfigOverrides = value.airflowConfigOverrides;
            this._envVariables = value.envVariables;
            this._imageVersion = value.imageVersion;
            this._pypiPackages = value.pypiPackages;
            this._pythonVersion = value.pythonVersion;
            this._schedulerCount = value.schedulerCount;
        }
    }
    get airflowConfigOverrides() {
        return this.getStringMapAttribute('airflow_config_overrides');
    }
    set airflowConfigOverrides(value) {
        this._airflowConfigOverrides = value;
    }
    resetAirflowConfigOverrides() {
        this._airflowConfigOverrides = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get airflowConfigOverridesInput() {
        return this._airflowConfigOverrides;
    }
    get envVariables() {
        return this.getStringMapAttribute('env_variables');
    }
    set envVariables(value) {
        this._envVariables = value;
    }
    resetEnvVariables() {
        this._envVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get envVariablesInput() {
        return this._envVariables;
    }
    get imageVersion() {
        return this.getStringAttribute('image_version');
    }
    set imageVersion(value) {
        this._imageVersion = value;
    }
    resetImageVersion() {
        this._imageVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionInput() {
        return this._imageVersion;
    }
    get pypiPackages() {
        return this.getStringMapAttribute('pypi_packages');
    }
    set pypiPackages(value) {
        this._pypiPackages = value;
    }
    resetPypiPackages() {
        this._pypiPackages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pypiPackagesInput() {
        return this._pypiPackages;
    }
    get pythonVersion() {
        return this.getStringAttribute('python_version');
    }
    set pythonVersion(value) {
        this._pythonVersion = value;
    }
    resetPythonVersion() {
        this._pythonVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pythonVersionInput() {
        return this._pythonVersion;
    }
    get schedulerCount() {
        return this.getNumberAttribute('scheduler_count');
    }
    set schedulerCount(value) {
        this._schedulerCount = value;
    }
    resetSchedulerCount() {
        this._schedulerCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schedulerCountInput() {
        return this._schedulerCount;
    }
}
exports.ComposerEnvironmentConfigSoftwareConfigOutputReference = ComposerEnvironmentConfigSoftwareConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigSoftwareConfigOutputReference[_l] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigSoftwareConfigOutputReference", version: "5.0.1" };
function composerEnvironmentConfigWebServerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        machine_type: cdktf.stringToTerraform(struct.machineType),
    };
}
exports.composerEnvironmentConfigWebServerConfigToTerraform = composerEnvironmentConfigWebServerConfigToTerraform;
class ComposerEnvironmentConfigWebServerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._machineType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._machineType = value.machineType;
        }
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
}
exports.ComposerEnvironmentConfigWebServerConfigOutputReference = ComposerEnvironmentConfigWebServerConfigOutputReference;
_m = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWebServerConfigOutputReference[_m] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWebServerConfigOutputReference", version: "5.0.1" };
function composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToTerraform = composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToTerraform;
class ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._value = value.value;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference = ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference[_o] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference", version: "5.0.1" };
class ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList = ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList;
_p = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList[_p] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList", version: "5.0.1" };
function composerEnvironmentConfigWebServerNetworkAccessControlToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_ip_range: cdktf.listMapper(composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToTerraform, true)(struct.allowedIpRange),
    };
}
exports.composerEnvironmentConfigWebServerNetworkAccessControlToTerraform = composerEnvironmentConfigWebServerNetworkAccessControlToTerraform;
class ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // allowed_ip_range - computed: false, optional: true, required: false
        this._allowedIpRange = new ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList(this, "allowed_ip_range", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedIpRange?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedIpRange = this._allowedIpRange?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedIpRange.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedIpRange.internalValue = value.allowedIpRange;
        }
    }
    get allowedIpRange() {
        return this._allowedIpRange;
    }
    putAllowedIpRange(value) {
        this._allowedIpRange.internalValue = value;
    }
    resetAllowedIpRange() {
        this._allowedIpRange.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedIpRangeInput() {
        return this._allowedIpRange.internalValue;
    }
}
exports.ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference = ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference[_q] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference", version: "5.0.1" };
function composerEnvironmentConfigWorkloadsConfigSchedulerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        cpu: cdktf.numberToTerraform(struct.cpu),
        memory_gb: cdktf.numberToTerraform(struct.memoryGb),
        storage_gb: cdktf.numberToTerraform(struct.storageGb),
    };
}
exports.composerEnvironmentConfigWorkloadsConfigSchedulerToTerraform = composerEnvironmentConfigWorkloadsConfigSchedulerToTerraform;
class ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._memoryGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryGb = this._memoryGb;
        }
        if (this._storageGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageGb = this._storageGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._cpu = undefined;
            this._memoryGb = undefined;
            this._storageGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._cpu = value.cpu;
            this._memoryGb = value.memoryGb;
            this._storageGb = value.storageGb;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get cpu() {
        return this.getNumberAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get memoryGb() {
        return this.getNumberAttribute('memory_gb');
    }
    set memoryGb(value) {
        this._memoryGb = value;
    }
    resetMemoryGb() {
        this._memoryGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryGbInput() {
        return this._memoryGb;
    }
    get storageGb() {
        return this.getNumberAttribute('storage_gb');
    }
    set storageGb(value) {
        this._storageGb = value;
    }
    resetStorageGb() {
        this._storageGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageGbInput() {
        return this._storageGb;
    }
}
exports.ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference = ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference[_r] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference", version: "5.0.1" };
function composerEnvironmentConfigWorkloadsConfigWebServerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu: cdktf.numberToTerraform(struct.cpu),
        memory_gb: cdktf.numberToTerraform(struct.memoryGb),
        storage_gb: cdktf.numberToTerraform(struct.storageGb),
    };
}
exports.composerEnvironmentConfigWorkloadsConfigWebServerToTerraform = composerEnvironmentConfigWorkloadsConfigWebServerToTerraform;
class ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._memoryGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryGb = this._memoryGb;
        }
        if (this._storageGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageGb = this._storageGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpu = undefined;
            this._memoryGb = undefined;
            this._storageGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpu = value.cpu;
            this._memoryGb = value.memoryGb;
            this._storageGb = value.storageGb;
        }
    }
    get cpu() {
        return this.getNumberAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get memoryGb() {
        return this.getNumberAttribute('memory_gb');
    }
    set memoryGb(value) {
        this._memoryGb = value;
    }
    resetMemoryGb() {
        this._memoryGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryGbInput() {
        return this._memoryGb;
    }
    get storageGb() {
        return this.getNumberAttribute('storage_gb');
    }
    set storageGb(value) {
        this._storageGb = value;
    }
    resetStorageGb() {
        this._storageGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageGbInput() {
        return this._storageGb;
    }
}
exports.ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference = ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference;
_s = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference[_s] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference", version: "5.0.1" };
function composerEnvironmentConfigWorkloadsConfigWorkerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu: cdktf.numberToTerraform(struct.cpu),
        max_count: cdktf.numberToTerraform(struct.maxCount),
        memory_gb: cdktf.numberToTerraform(struct.memoryGb),
        min_count: cdktf.numberToTerraform(struct.minCount),
        storage_gb: cdktf.numberToTerraform(struct.storageGb),
    };
}
exports.composerEnvironmentConfigWorkloadsConfigWorkerToTerraform = composerEnvironmentConfigWorkloadsConfigWorkerToTerraform;
class ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._maxCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxCount = this._maxCount;
        }
        if (this._memoryGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryGb = this._memoryGb;
        }
        if (this._minCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCount = this._minCount;
        }
        if (this._storageGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageGb = this._storageGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpu = undefined;
            this._maxCount = undefined;
            this._memoryGb = undefined;
            this._minCount = undefined;
            this._storageGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpu = value.cpu;
            this._maxCount = value.maxCount;
            this._memoryGb = value.memoryGb;
            this._minCount = value.minCount;
            this._storageGb = value.storageGb;
        }
    }
    get cpu() {
        return this.getNumberAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get maxCount() {
        return this.getNumberAttribute('max_count');
    }
    set maxCount(value) {
        this._maxCount = value;
    }
    resetMaxCount() {
        this._maxCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxCountInput() {
        return this._maxCount;
    }
    get memoryGb() {
        return this.getNumberAttribute('memory_gb');
    }
    set memoryGb(value) {
        this._memoryGb = value;
    }
    resetMemoryGb() {
        this._memoryGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryGbInput() {
        return this._memoryGb;
    }
    get minCount() {
        return this.getNumberAttribute('min_count');
    }
    set minCount(value) {
        this._minCount = value;
    }
    resetMinCount() {
        this._minCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCountInput() {
        return this._minCount;
    }
    get storageGb() {
        return this.getNumberAttribute('storage_gb');
    }
    set storageGb(value) {
        this._storageGb = value;
    }
    resetStorageGb() {
        this._storageGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageGbInput() {
        return this._storageGb;
    }
}
exports.ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference = ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference[_t] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference", version: "5.0.1" };
function composerEnvironmentConfigWorkloadsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        scheduler: composerEnvironmentConfigWorkloadsConfigSchedulerToTerraform(struct.scheduler),
        web_server: composerEnvironmentConfigWorkloadsConfigWebServerToTerraform(struct.webServer),
        worker: composerEnvironmentConfigWorkloadsConfigWorkerToTerraform(struct.worker),
    };
}
exports.composerEnvironmentConfigWorkloadsConfigToTerraform = composerEnvironmentConfigWorkloadsConfigToTerraform;
class ComposerEnvironmentConfigWorkloadsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // scheduler - computed: false, optional: true, required: false
        this._scheduler = new ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference(this, "scheduler");
        // web_server - computed: false, optional: true, required: false
        this._webServer = new ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference(this, "web_server");
        // worker - computed: false, optional: true, required: false
        this._worker = new ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference(this, "worker");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._scheduler?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduler = this._scheduler?.internalValue;
        }
        if (this._webServer?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.webServer = this._webServer?.internalValue;
        }
        if (this._worker?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.worker = this._worker?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._scheduler.internalValue = undefined;
            this._webServer.internalValue = undefined;
            this._worker.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._scheduler.internalValue = value.scheduler;
            this._webServer.internalValue = value.webServer;
            this._worker.internalValue = value.worker;
        }
    }
    get scheduler() {
        return this._scheduler;
    }
    putScheduler(value) {
        this._scheduler.internalValue = value;
    }
    resetScheduler() {
        this._scheduler.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schedulerInput() {
        return this._scheduler.internalValue;
    }
    get webServer() {
        return this._webServer;
    }
    putWebServer(value) {
        this._webServer.internalValue = value;
    }
    resetWebServer() {
        this._webServer.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webServerInput() {
        return this._webServer.internalValue;
    }
    get worker() {
        return this._worker;
    }
    putWorker(value) {
        this._worker.internalValue = value;
    }
    resetWorker() {
        this._worker.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workerInput() {
        return this._worker.internalValue;
    }
}
exports.ComposerEnvironmentConfigWorkloadsConfigOutputReference = ComposerEnvironmentConfigWorkloadsConfigOutputReference;
_u = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWorkloadsConfigOutputReference[_u] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWorkloadsConfigOutputReference", version: "5.0.1" };
function composerEnvironmentConfigAToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        environment_size: cdktf.stringToTerraform(struct.environmentSize),
        node_count: cdktf.numberToTerraform(struct.nodeCount),
        database_config: composerEnvironmentConfigDatabaseConfigToTerraform(struct.databaseConfig),
        encryption_config: composerEnvironmentConfigEncryptionConfigToTerraform(struct.encryptionConfig),
        maintenance_window: composerEnvironmentConfigMaintenanceWindowToTerraform(struct.maintenanceWindow),
        master_authorized_networks_config: composerEnvironmentConfigMasterAuthorizedNetworksConfigToTerraform(struct.masterAuthorizedNetworksConfig),
        node_config: composerEnvironmentConfigNodeConfigToTerraform(struct.nodeConfig),
        private_environment_config: composerEnvironmentConfigPrivateEnvironmentConfigToTerraform(struct.privateEnvironmentConfig),
        software_config: composerEnvironmentConfigSoftwareConfigToTerraform(struct.softwareConfig),
        web_server_config: composerEnvironmentConfigWebServerConfigToTerraform(struct.webServerConfig),
        web_server_network_access_control: composerEnvironmentConfigWebServerNetworkAccessControlToTerraform(struct.webServerNetworkAccessControl),
        workloads_config: composerEnvironmentConfigWorkloadsConfigToTerraform(struct.workloadsConfig),
    };
}
exports.composerEnvironmentConfigAToTerraform = composerEnvironmentConfigAToTerraform;
class ComposerEnvironmentConfigAOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // database_config - computed: false, optional: true, required: false
        this._databaseConfig = new ComposerEnvironmentConfigDatabaseConfigOutputReference(this, "database_config");
        // encryption_config - computed: false, optional: true, required: false
        this._encryptionConfig = new ComposerEnvironmentConfigEncryptionConfigOutputReference(this, "encryption_config");
        // maintenance_window - computed: false, optional: true, required: false
        this._maintenanceWindow = new ComposerEnvironmentConfigMaintenanceWindowOutputReference(this, "maintenance_window");
        // master_authorized_networks_config - computed: false, optional: true, required: false
        this._masterAuthorizedNetworksConfig = new ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference(this, "master_authorized_networks_config");
        // node_config - computed: false, optional: true, required: false
        this._nodeConfig = new ComposerEnvironmentConfigNodeConfigOutputReference(this, "node_config");
        // private_environment_config - computed: false, optional: true, required: false
        this._privateEnvironmentConfig = new ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference(this, "private_environment_config");
        // software_config - computed: false, optional: true, required: false
        this._softwareConfig = new ComposerEnvironmentConfigSoftwareConfigOutputReference(this, "software_config");
        // web_server_config - computed: false, optional: true, required: false
        this._webServerConfig = new ComposerEnvironmentConfigWebServerConfigOutputReference(this, "web_server_config");
        // web_server_network_access_control - computed: false, optional: true, required: false
        this._webServerNetworkAccessControl = new ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference(this, "web_server_network_access_control");
        // workloads_config - computed: false, optional: true, required: false
        this._workloadsConfig = new ComposerEnvironmentConfigWorkloadsConfigOutputReference(this, "workloads_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._environmentSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.environmentSize = this._environmentSize;
        }
        if (this._nodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeCount = this._nodeCount;
        }
        if (this._databaseConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseConfig = this._databaseConfig?.internalValue;
        }
        if (this._encryptionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionConfig = this._encryptionConfig?.internalValue;
        }
        if (this._maintenanceWindow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceWindow = this._maintenanceWindow?.internalValue;
        }
        if (this._masterAuthorizedNetworksConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterAuthorizedNetworksConfig = this._masterAuthorizedNetworksConfig?.internalValue;
        }
        if (this._nodeConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeConfig = this._nodeConfig?.internalValue;
        }
        if (this._privateEnvironmentConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateEnvironmentConfig = this._privateEnvironmentConfig?.internalValue;
        }
        if (this._softwareConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.softwareConfig = this._softwareConfig?.internalValue;
        }
        if (this._webServerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.webServerConfig = this._webServerConfig?.internalValue;
        }
        if (this._webServerNetworkAccessControl?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.webServerNetworkAccessControl = this._webServerNetworkAccessControl?.internalValue;
        }
        if (this._workloadsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.workloadsConfig = this._workloadsConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._environmentSize = undefined;
            this._nodeCount = undefined;
            this._databaseConfig.internalValue = undefined;
            this._encryptionConfig.internalValue = undefined;
            this._maintenanceWindow.internalValue = undefined;
            this._masterAuthorizedNetworksConfig.internalValue = undefined;
            this._nodeConfig.internalValue = undefined;
            this._privateEnvironmentConfig.internalValue = undefined;
            this._softwareConfig.internalValue = undefined;
            this._webServerConfig.internalValue = undefined;
            this._webServerNetworkAccessControl.internalValue = undefined;
            this._workloadsConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._environmentSize = value.environmentSize;
            this._nodeCount = value.nodeCount;
            this._databaseConfig.internalValue = value.databaseConfig;
            this._encryptionConfig.internalValue = value.encryptionConfig;
            this._maintenanceWindow.internalValue = value.maintenanceWindow;
            this._masterAuthorizedNetworksConfig.internalValue = value.masterAuthorizedNetworksConfig;
            this._nodeConfig.internalValue = value.nodeConfig;
            this._privateEnvironmentConfig.internalValue = value.privateEnvironmentConfig;
            this._softwareConfig.internalValue = value.softwareConfig;
            this._webServerConfig.internalValue = value.webServerConfig;
            this._webServerNetworkAccessControl.internalValue = value.webServerNetworkAccessControl;
            this._workloadsConfig.internalValue = value.workloadsConfig;
        }
    }
    // airflow_uri - computed: true, optional: false, required: false
    get airflowUri() {
        return this.getStringAttribute('airflow_uri');
    }
    // dag_gcs_prefix - computed: true, optional: false, required: false
    get dagGcsPrefix() {
        return this.getStringAttribute('dag_gcs_prefix');
    }
    get environmentSize() {
        return this.getStringAttribute('environment_size');
    }
    set environmentSize(value) {
        this._environmentSize = value;
    }
    resetEnvironmentSize() {
        this._environmentSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get environmentSizeInput() {
        return this._environmentSize;
    }
    // gke_cluster - computed: true, optional: false, required: false
    get gkeCluster() {
        return this.getStringAttribute('gke_cluster');
    }
    get nodeCount() {
        return this.getNumberAttribute('node_count');
    }
    set nodeCount(value) {
        this._nodeCount = value;
    }
    resetNodeCount() {
        this._nodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeCountInput() {
        return this._nodeCount;
    }
    get databaseConfig() {
        return this._databaseConfig;
    }
    putDatabaseConfig(value) {
        this._databaseConfig.internalValue = value;
    }
    resetDatabaseConfig() {
        this._databaseConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseConfigInput() {
        return this._databaseConfig.internalValue;
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    resetEncryptionConfig() {
        this._encryptionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
    get maintenanceWindow() {
        return this._maintenanceWindow;
    }
    putMaintenanceWindow(value) {
        this._maintenanceWindow.internalValue = value;
    }
    resetMaintenanceWindow() {
        this._maintenanceWindow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowInput() {
        return this._maintenanceWindow.internalValue;
    }
    get masterAuthorizedNetworksConfig() {
        return this._masterAuthorizedNetworksConfig;
    }
    putMasterAuthorizedNetworksConfig(value) {
        this._masterAuthorizedNetworksConfig.internalValue = value;
    }
    resetMasterAuthorizedNetworksConfig() {
        this._masterAuthorizedNetworksConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterAuthorizedNetworksConfigInput() {
        return this._masterAuthorizedNetworksConfig.internalValue;
    }
    get nodeConfig() {
        return this._nodeConfig;
    }
    putNodeConfig(value) {
        this._nodeConfig.internalValue = value;
    }
    resetNodeConfig() {
        this._nodeConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeConfigInput() {
        return this._nodeConfig.internalValue;
    }
    get privateEnvironmentConfig() {
        return this._privateEnvironmentConfig;
    }
    putPrivateEnvironmentConfig(value) {
        this._privateEnvironmentConfig.internalValue = value;
    }
    resetPrivateEnvironmentConfig() {
        this._privateEnvironmentConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateEnvironmentConfigInput() {
        return this._privateEnvironmentConfig.internalValue;
    }
    get softwareConfig() {
        return this._softwareConfig;
    }
    putSoftwareConfig(value) {
        this._softwareConfig.internalValue = value;
    }
    resetSoftwareConfig() {
        this._softwareConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get softwareConfigInput() {
        return this._softwareConfig.internalValue;
    }
    get webServerConfig() {
        return this._webServerConfig;
    }
    putWebServerConfig(value) {
        this._webServerConfig.internalValue = value;
    }
    resetWebServerConfig() {
        this._webServerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webServerConfigInput() {
        return this._webServerConfig.internalValue;
    }
    get webServerNetworkAccessControl() {
        return this._webServerNetworkAccessControl;
    }
    putWebServerNetworkAccessControl(value) {
        this._webServerNetworkAccessControl.internalValue = value;
    }
    resetWebServerNetworkAccessControl() {
        this._webServerNetworkAccessControl.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webServerNetworkAccessControlInput() {
        return this._webServerNetworkAccessControl.internalValue;
    }
    get workloadsConfig() {
        return this._workloadsConfig;
    }
    putWorkloadsConfig(value) {
        this._workloadsConfig.internalValue = value;
    }
    resetWorkloadsConfig() {
        this._workloadsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workloadsConfigInput() {
        return this._workloadsConfig.internalValue;
    }
}
exports.ComposerEnvironmentConfigAOutputReference = ComposerEnvironmentConfigAOutputReference;
_v = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigAOutputReference[_v] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigAOutputReference", version: "5.0.1" };
function composerEnvironmentTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.composerEnvironmentTimeoutsToTerraform = composerEnvironmentTimeoutsToTerraform;
class ComposerEnvironmentTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ComposerEnvironmentTimeoutsOutputReference = ComposerEnvironmentTimeoutsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentTimeoutsOutputReference[_w] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentTimeoutsOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/composer_environment google_composer_environment}
*/
class ComposerEnvironment extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/composer_environment google_composer_environment} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ComposerEnvironmentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_composer_environment',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // config - computed: false, optional: true, required: false
        this._config = new ComposerEnvironmentConfigAOutputReference(this, "config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ComposerEnvironmentTimeoutsOutputReference(this, "timeouts");
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._project = config.project;
        this._region = config.region;
        this._config.internalValue = config.config;
        this._timeouts.internalValue = config.timeouts;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get config() {
        return this._config;
    }
    putConfig(value) {
        this._config.internalValue = value;
    }
    resetConfig() {
        this._config.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configInput() {
        return this._config.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            config: composerEnvironmentConfigAToTerraform(this._config.internalValue),
            timeouts: composerEnvironmentTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.ComposerEnvironment = ComposerEnvironment;
_x = JSII_RTTI_SYMBOL_1;
ComposerEnvironment[_x] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironment", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
ComposerEnvironment.tfResourceType = "google_composer_environment";
//# sourceMappingURL=data:application/json;base64,