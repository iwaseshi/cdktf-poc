"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppEngineFlexibleAppVersion = exports.AppEngineFlexibleAppVersionVpcAccessConnectorOutputReference = exports.appEngineFlexibleAppVersionVpcAccessConnectorToTerraform = exports.AppEngineFlexibleAppVersionTimeoutsOutputReference = exports.appEngineFlexibleAppVersionTimeoutsToTerraform = exports.AppEngineFlexibleAppVersionResourcesOutputReference = exports.appEngineFlexibleAppVersionResourcesToTerraform = exports.AppEngineFlexibleAppVersionResourcesVolumesList = exports.AppEngineFlexibleAppVersionResourcesVolumesOutputReference = exports.appEngineFlexibleAppVersionResourcesVolumesToTerraform = exports.AppEngineFlexibleAppVersionReadinessCheckOutputReference = exports.appEngineFlexibleAppVersionReadinessCheckToTerraform = exports.AppEngineFlexibleAppVersionNetworkOutputReference = exports.appEngineFlexibleAppVersionNetworkToTerraform = exports.AppEngineFlexibleAppVersionManualScalingOutputReference = exports.appEngineFlexibleAppVersionManualScalingToTerraform = exports.AppEngineFlexibleAppVersionLivenessCheckOutputReference = exports.appEngineFlexibleAppVersionLivenessCheckToTerraform = exports.AppEngineFlexibleAppVersionHandlersList = exports.AppEngineFlexibleAppVersionHandlersOutputReference = exports.appEngineFlexibleAppVersionHandlersToTerraform = exports.AppEngineFlexibleAppVersionHandlersStaticFilesOutputReference = exports.appEngineFlexibleAppVersionHandlersStaticFilesToTerraform = exports.AppEngineFlexibleAppVersionHandlersScriptOutputReference = exports.appEngineFlexibleAppVersionHandlersScriptToTerraform = exports.AppEngineFlexibleAppVersionEntrypointOutputReference = exports.appEngineFlexibleAppVersionEntrypointToTerraform = exports.AppEngineFlexibleAppVersionEndpointsApiServiceOutputReference = exports.appEngineFlexibleAppVersionEndpointsApiServiceToTerraform = exports.AppEngineFlexibleAppVersionDeploymentOutputReference = exports.appEngineFlexibleAppVersionDeploymentToTerraform = exports.AppEngineFlexibleAppVersionDeploymentZipOutputReference = exports.appEngineFlexibleAppVersionDeploymentZipToTerraform = exports.AppEngineFlexibleAppVersionDeploymentFilesList = exports.AppEngineFlexibleAppVersionDeploymentFilesOutputReference = exports.appEngineFlexibleAppVersionDeploymentFilesToTerraform = exports.AppEngineFlexibleAppVersionDeploymentContainerOutputReference = exports.appEngineFlexibleAppVersionDeploymentContainerToTerraform = exports.AppEngineFlexibleAppVersionDeploymentCloudBuildOptionsOutputReference = exports.appEngineFlexibleAppVersionDeploymentCloudBuildOptionsToTerraform = exports.AppEngineFlexibleAppVersionAutomaticScalingOutputReference = exports.appEngineFlexibleAppVersionAutomaticScalingToTerraform = exports.AppEngineFlexibleAppVersionAutomaticScalingRequestUtilizationOutputReference = exports.appEngineFlexibleAppVersionAutomaticScalingRequestUtilizationToTerraform = exports.AppEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationOutputReference = exports.appEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationToTerraform = exports.AppEngineFlexibleAppVersionAutomaticScalingDiskUtilizationOutputReference = exports.appEngineFlexibleAppVersionAutomaticScalingDiskUtilizationToTerraform = exports.AppEngineFlexibleAppVersionAutomaticScalingCpuUtilizationOutputReference = exports.appEngineFlexibleAppVersionAutomaticScalingCpuUtilizationToTerraform = exports.AppEngineFlexibleAppVersionApiConfigOutputReference = exports.appEngineFlexibleAppVersionApiConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function appEngineFlexibleAppVersionApiConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_fail_action: cdktf.stringToTerraform(struct.authFailAction),
        login: cdktf.stringToTerraform(struct.login),
        script: cdktf.stringToTerraform(struct.script),
        security_level: cdktf.stringToTerraform(struct.securityLevel),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.appEngineFlexibleAppVersionApiConfigToTerraform = appEngineFlexibleAppVersionApiConfigToTerraform;
class AppEngineFlexibleAppVersionApiConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authFailAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.authFailAction = this._authFailAction;
        }
        if (this._login !== undefined) {
            hasAnyValues = true;
            internalValueResult.login = this._login;
        }
        if (this._script !== undefined) {
            hasAnyValues = true;
            internalValueResult.script = this._script;
        }
        if (this._securityLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityLevel = this._securityLevel;
        }
        if (this._url !== undefined) {
            hasAnyValues = true;
            internalValueResult.url = this._url;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authFailAction = undefined;
            this._login = undefined;
            this._script = undefined;
            this._securityLevel = undefined;
            this._url = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authFailAction = value.authFailAction;
            this._login = value.login;
            this._script = value.script;
            this._securityLevel = value.securityLevel;
            this._url = value.url;
        }
    }
    get authFailAction() {
        return this.getStringAttribute('auth_fail_action');
    }
    set authFailAction(value) {
        this._authFailAction = value;
    }
    resetAuthFailAction() {
        this._authFailAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authFailActionInput() {
        return this._authFailAction;
    }
    get login() {
        return this.getStringAttribute('login');
    }
    set login(value) {
        this._login = value;
    }
    resetLogin() {
        this._login = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loginInput() {
        return this._login;
    }
    get script() {
        return this.getStringAttribute('script');
    }
    set script(value) {
        this._script = value;
    }
    // Temporarily expose input value. Use with caution.
    get scriptInput() {
        return this._script;
    }
    get securityLevel() {
        return this.getStringAttribute('security_level');
    }
    set securityLevel(value) {
        this._securityLevel = value;
    }
    resetSecurityLevel() {
        this._securityLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityLevelInput() {
        return this._securityLevel;
    }
    get url() {
        return this.getStringAttribute('url');
    }
    set url(value) {
        this._url = value;
    }
    resetUrl() {
        this._url = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlInput() {
        return this._url;
    }
}
exports.AppEngineFlexibleAppVersionApiConfigOutputReference = AppEngineFlexibleAppVersionApiConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionApiConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionApiConfigOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionAutomaticScalingCpuUtilizationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aggregation_window_length: cdktf.stringToTerraform(struct.aggregationWindowLength),
        target_utilization: cdktf.numberToTerraform(struct.targetUtilization),
    };
}
exports.appEngineFlexibleAppVersionAutomaticScalingCpuUtilizationToTerraform = appEngineFlexibleAppVersionAutomaticScalingCpuUtilizationToTerraform;
class AppEngineFlexibleAppVersionAutomaticScalingCpuUtilizationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._aggregationWindowLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.aggregationWindowLength = this._aggregationWindowLength;
        }
        if (this._targetUtilization !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetUtilization = this._targetUtilization;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._aggregationWindowLength = undefined;
            this._targetUtilization = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._aggregationWindowLength = value.aggregationWindowLength;
            this._targetUtilization = value.targetUtilization;
        }
    }
    get aggregationWindowLength() {
        return this.getStringAttribute('aggregation_window_length');
    }
    set aggregationWindowLength(value) {
        this._aggregationWindowLength = value;
    }
    resetAggregationWindowLength() {
        this._aggregationWindowLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aggregationWindowLengthInput() {
        return this._aggregationWindowLength;
    }
    get targetUtilization() {
        return this.getNumberAttribute('target_utilization');
    }
    set targetUtilization(value) {
        this._targetUtilization = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetUtilizationInput() {
        return this._targetUtilization;
    }
}
exports.AppEngineFlexibleAppVersionAutomaticScalingCpuUtilizationOutputReference = AppEngineFlexibleAppVersionAutomaticScalingCpuUtilizationOutputReference;
_b = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionAutomaticScalingCpuUtilizationOutputReference[_b] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionAutomaticScalingCpuUtilizationOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionAutomaticScalingDiskUtilizationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        target_read_bytes_per_second: cdktf.numberToTerraform(struct.targetReadBytesPerSecond),
        target_read_ops_per_second: cdktf.numberToTerraform(struct.targetReadOpsPerSecond),
        target_write_bytes_per_second: cdktf.numberToTerraform(struct.targetWriteBytesPerSecond),
        target_write_ops_per_second: cdktf.numberToTerraform(struct.targetWriteOpsPerSecond),
    };
}
exports.appEngineFlexibleAppVersionAutomaticScalingDiskUtilizationToTerraform = appEngineFlexibleAppVersionAutomaticScalingDiskUtilizationToTerraform;
class AppEngineFlexibleAppVersionAutomaticScalingDiskUtilizationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._targetReadBytesPerSecond !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetReadBytesPerSecond = this._targetReadBytesPerSecond;
        }
        if (this._targetReadOpsPerSecond !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetReadOpsPerSecond = this._targetReadOpsPerSecond;
        }
        if (this._targetWriteBytesPerSecond !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetWriteBytesPerSecond = this._targetWriteBytesPerSecond;
        }
        if (this._targetWriteOpsPerSecond !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetWriteOpsPerSecond = this._targetWriteOpsPerSecond;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._targetReadBytesPerSecond = undefined;
            this._targetReadOpsPerSecond = undefined;
            this._targetWriteBytesPerSecond = undefined;
            this._targetWriteOpsPerSecond = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._targetReadBytesPerSecond = value.targetReadBytesPerSecond;
            this._targetReadOpsPerSecond = value.targetReadOpsPerSecond;
            this._targetWriteBytesPerSecond = value.targetWriteBytesPerSecond;
            this._targetWriteOpsPerSecond = value.targetWriteOpsPerSecond;
        }
    }
    get targetReadBytesPerSecond() {
        return this.getNumberAttribute('target_read_bytes_per_second');
    }
    set targetReadBytesPerSecond(value) {
        this._targetReadBytesPerSecond = value;
    }
    resetTargetReadBytesPerSecond() {
        this._targetReadBytesPerSecond = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetReadBytesPerSecondInput() {
        return this._targetReadBytesPerSecond;
    }
    get targetReadOpsPerSecond() {
        return this.getNumberAttribute('target_read_ops_per_second');
    }
    set targetReadOpsPerSecond(value) {
        this._targetReadOpsPerSecond = value;
    }
    resetTargetReadOpsPerSecond() {
        this._targetReadOpsPerSecond = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetReadOpsPerSecondInput() {
        return this._targetReadOpsPerSecond;
    }
    get targetWriteBytesPerSecond() {
        return this.getNumberAttribute('target_write_bytes_per_second');
    }
    set targetWriteBytesPerSecond(value) {
        this._targetWriteBytesPerSecond = value;
    }
    resetTargetWriteBytesPerSecond() {
        this._targetWriteBytesPerSecond = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetWriteBytesPerSecondInput() {
        return this._targetWriteBytesPerSecond;
    }
    get targetWriteOpsPerSecond() {
        return this.getNumberAttribute('target_write_ops_per_second');
    }
    set targetWriteOpsPerSecond(value) {
        this._targetWriteOpsPerSecond = value;
    }
    resetTargetWriteOpsPerSecond() {
        this._targetWriteOpsPerSecond = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetWriteOpsPerSecondInput() {
        return this._targetWriteOpsPerSecond;
    }
}
exports.AppEngineFlexibleAppVersionAutomaticScalingDiskUtilizationOutputReference = AppEngineFlexibleAppVersionAutomaticScalingDiskUtilizationOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionAutomaticScalingDiskUtilizationOutputReference[_c] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionAutomaticScalingDiskUtilizationOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        target_received_bytes_per_second: cdktf.numberToTerraform(struct.targetReceivedBytesPerSecond),
        target_received_packets_per_second: cdktf.numberToTerraform(struct.targetReceivedPacketsPerSecond),
        target_sent_bytes_per_second: cdktf.numberToTerraform(struct.targetSentBytesPerSecond),
        target_sent_packets_per_second: cdktf.numberToTerraform(struct.targetSentPacketsPerSecond),
    };
}
exports.appEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationToTerraform = appEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationToTerraform;
class AppEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._targetReceivedBytesPerSecond !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetReceivedBytesPerSecond = this._targetReceivedBytesPerSecond;
        }
        if (this._targetReceivedPacketsPerSecond !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetReceivedPacketsPerSecond = this._targetReceivedPacketsPerSecond;
        }
        if (this._targetSentBytesPerSecond !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetSentBytesPerSecond = this._targetSentBytesPerSecond;
        }
        if (this._targetSentPacketsPerSecond !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetSentPacketsPerSecond = this._targetSentPacketsPerSecond;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._targetReceivedBytesPerSecond = undefined;
            this._targetReceivedPacketsPerSecond = undefined;
            this._targetSentBytesPerSecond = undefined;
            this._targetSentPacketsPerSecond = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._targetReceivedBytesPerSecond = value.targetReceivedBytesPerSecond;
            this._targetReceivedPacketsPerSecond = value.targetReceivedPacketsPerSecond;
            this._targetSentBytesPerSecond = value.targetSentBytesPerSecond;
            this._targetSentPacketsPerSecond = value.targetSentPacketsPerSecond;
        }
    }
    get targetReceivedBytesPerSecond() {
        return this.getNumberAttribute('target_received_bytes_per_second');
    }
    set targetReceivedBytesPerSecond(value) {
        this._targetReceivedBytesPerSecond = value;
    }
    resetTargetReceivedBytesPerSecond() {
        this._targetReceivedBytesPerSecond = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetReceivedBytesPerSecondInput() {
        return this._targetReceivedBytesPerSecond;
    }
    get targetReceivedPacketsPerSecond() {
        return this.getNumberAttribute('target_received_packets_per_second');
    }
    set targetReceivedPacketsPerSecond(value) {
        this._targetReceivedPacketsPerSecond = value;
    }
    resetTargetReceivedPacketsPerSecond() {
        this._targetReceivedPacketsPerSecond = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetReceivedPacketsPerSecondInput() {
        return this._targetReceivedPacketsPerSecond;
    }
    get targetSentBytesPerSecond() {
        return this.getNumberAttribute('target_sent_bytes_per_second');
    }
    set targetSentBytesPerSecond(value) {
        this._targetSentBytesPerSecond = value;
    }
    resetTargetSentBytesPerSecond() {
        this._targetSentBytesPerSecond = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetSentBytesPerSecondInput() {
        return this._targetSentBytesPerSecond;
    }
    get targetSentPacketsPerSecond() {
        return this.getNumberAttribute('target_sent_packets_per_second');
    }
    set targetSentPacketsPerSecond(value) {
        this._targetSentPacketsPerSecond = value;
    }
    resetTargetSentPacketsPerSecond() {
        this._targetSentPacketsPerSecond = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetSentPacketsPerSecondInput() {
        return this._targetSentPacketsPerSecond;
    }
}
exports.AppEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationOutputReference = AppEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationOutputReference[_d] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionAutomaticScalingRequestUtilizationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        target_concurrent_requests: cdktf.numberToTerraform(struct.targetConcurrentRequests),
        target_request_count_per_second: cdktf.stringToTerraform(struct.targetRequestCountPerSecond),
    };
}
exports.appEngineFlexibleAppVersionAutomaticScalingRequestUtilizationToTerraform = appEngineFlexibleAppVersionAutomaticScalingRequestUtilizationToTerraform;
class AppEngineFlexibleAppVersionAutomaticScalingRequestUtilizationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._targetConcurrentRequests !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetConcurrentRequests = this._targetConcurrentRequests;
        }
        if (this._targetRequestCountPerSecond !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetRequestCountPerSecond = this._targetRequestCountPerSecond;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._targetConcurrentRequests = undefined;
            this._targetRequestCountPerSecond = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._targetConcurrentRequests = value.targetConcurrentRequests;
            this._targetRequestCountPerSecond = value.targetRequestCountPerSecond;
        }
    }
    get targetConcurrentRequests() {
        return this.getNumberAttribute('target_concurrent_requests');
    }
    set targetConcurrentRequests(value) {
        this._targetConcurrentRequests = value;
    }
    resetTargetConcurrentRequests() {
        this._targetConcurrentRequests = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetConcurrentRequestsInput() {
        return this._targetConcurrentRequests;
    }
    get targetRequestCountPerSecond() {
        return this.getStringAttribute('target_request_count_per_second');
    }
    set targetRequestCountPerSecond(value) {
        this._targetRequestCountPerSecond = value;
    }
    resetTargetRequestCountPerSecond() {
        this._targetRequestCountPerSecond = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetRequestCountPerSecondInput() {
        return this._targetRequestCountPerSecond;
    }
}
exports.AppEngineFlexibleAppVersionAutomaticScalingRequestUtilizationOutputReference = AppEngineFlexibleAppVersionAutomaticScalingRequestUtilizationOutputReference;
_e = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionAutomaticScalingRequestUtilizationOutputReference[_e] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionAutomaticScalingRequestUtilizationOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionAutomaticScalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cool_down_period: cdktf.stringToTerraform(struct.coolDownPeriod),
        max_concurrent_requests: cdktf.numberToTerraform(struct.maxConcurrentRequests),
        max_idle_instances: cdktf.numberToTerraform(struct.maxIdleInstances),
        max_pending_latency: cdktf.stringToTerraform(struct.maxPendingLatency),
        max_total_instances: cdktf.numberToTerraform(struct.maxTotalInstances),
        min_idle_instances: cdktf.numberToTerraform(struct.minIdleInstances),
        min_pending_latency: cdktf.stringToTerraform(struct.minPendingLatency),
        min_total_instances: cdktf.numberToTerraform(struct.minTotalInstances),
        cpu_utilization: appEngineFlexibleAppVersionAutomaticScalingCpuUtilizationToTerraform(struct.cpuUtilization),
        disk_utilization: appEngineFlexibleAppVersionAutomaticScalingDiskUtilizationToTerraform(struct.diskUtilization),
        network_utilization: appEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationToTerraform(struct.networkUtilization),
        request_utilization: appEngineFlexibleAppVersionAutomaticScalingRequestUtilizationToTerraform(struct.requestUtilization),
    };
}
exports.appEngineFlexibleAppVersionAutomaticScalingToTerraform = appEngineFlexibleAppVersionAutomaticScalingToTerraform;
class AppEngineFlexibleAppVersionAutomaticScalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cpu_utilization - computed: false, optional: false, required: true
        this._cpuUtilization = new AppEngineFlexibleAppVersionAutomaticScalingCpuUtilizationOutputReference(this, "cpu_utilization");
        // disk_utilization - computed: false, optional: true, required: false
        this._diskUtilization = new AppEngineFlexibleAppVersionAutomaticScalingDiskUtilizationOutputReference(this, "disk_utilization");
        // network_utilization - computed: false, optional: true, required: false
        this._networkUtilization = new AppEngineFlexibleAppVersionAutomaticScalingNetworkUtilizationOutputReference(this, "network_utilization");
        // request_utilization - computed: false, optional: true, required: false
        this._requestUtilization = new AppEngineFlexibleAppVersionAutomaticScalingRequestUtilizationOutputReference(this, "request_utilization");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._coolDownPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.coolDownPeriod = this._coolDownPeriod;
        }
        if (this._maxConcurrentRequests !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentRequests = this._maxConcurrentRequests;
        }
        if (this._maxIdleInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxIdleInstances = this._maxIdleInstances;
        }
        if (this._maxPendingLatency !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxPendingLatency = this._maxPendingLatency;
        }
        if (this._maxTotalInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxTotalInstances = this._maxTotalInstances;
        }
        if (this._minIdleInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.minIdleInstances = this._minIdleInstances;
        }
        if (this._minPendingLatency !== undefined) {
            hasAnyValues = true;
            internalValueResult.minPendingLatency = this._minPendingLatency;
        }
        if (this._minTotalInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.minTotalInstances = this._minTotalInstances;
        }
        if (this._cpuUtilization?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuUtilization = this._cpuUtilization?.internalValue;
        }
        if (this._diskUtilization?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskUtilization = this._diskUtilization?.internalValue;
        }
        if (this._networkUtilization?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkUtilization = this._networkUtilization?.internalValue;
        }
        if (this._requestUtilization?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestUtilization = this._requestUtilization?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._coolDownPeriod = undefined;
            this._maxConcurrentRequests = undefined;
            this._maxIdleInstances = undefined;
            this._maxPendingLatency = undefined;
            this._maxTotalInstances = undefined;
            this._minIdleInstances = undefined;
            this._minPendingLatency = undefined;
            this._minTotalInstances = undefined;
            this._cpuUtilization.internalValue = undefined;
            this._diskUtilization.internalValue = undefined;
            this._networkUtilization.internalValue = undefined;
            this._requestUtilization.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._coolDownPeriod = value.coolDownPeriod;
            this._maxConcurrentRequests = value.maxConcurrentRequests;
            this._maxIdleInstances = value.maxIdleInstances;
            this._maxPendingLatency = value.maxPendingLatency;
            this._maxTotalInstances = value.maxTotalInstances;
            this._minIdleInstances = value.minIdleInstances;
            this._minPendingLatency = value.minPendingLatency;
            this._minTotalInstances = value.minTotalInstances;
            this._cpuUtilization.internalValue = value.cpuUtilization;
            this._diskUtilization.internalValue = value.diskUtilization;
            this._networkUtilization.internalValue = value.networkUtilization;
            this._requestUtilization.internalValue = value.requestUtilization;
        }
    }
    get coolDownPeriod() {
        return this.getStringAttribute('cool_down_period');
    }
    set coolDownPeriod(value) {
        this._coolDownPeriod = value;
    }
    resetCoolDownPeriod() {
        this._coolDownPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get coolDownPeriodInput() {
        return this._coolDownPeriod;
    }
    get maxConcurrentRequests() {
        return this.getNumberAttribute('max_concurrent_requests');
    }
    set maxConcurrentRequests(value) {
        this._maxConcurrentRequests = value;
    }
    resetMaxConcurrentRequests() {
        this._maxConcurrentRequests = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentRequestsInput() {
        return this._maxConcurrentRequests;
    }
    get maxIdleInstances() {
        return this.getNumberAttribute('max_idle_instances');
    }
    set maxIdleInstances(value) {
        this._maxIdleInstances = value;
    }
    resetMaxIdleInstances() {
        this._maxIdleInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxIdleInstancesInput() {
        return this._maxIdleInstances;
    }
    get maxPendingLatency() {
        return this.getStringAttribute('max_pending_latency');
    }
    set maxPendingLatency(value) {
        this._maxPendingLatency = value;
    }
    resetMaxPendingLatency() {
        this._maxPendingLatency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxPendingLatencyInput() {
        return this._maxPendingLatency;
    }
    get maxTotalInstances() {
        return this.getNumberAttribute('max_total_instances');
    }
    set maxTotalInstances(value) {
        this._maxTotalInstances = value;
    }
    resetMaxTotalInstances() {
        this._maxTotalInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxTotalInstancesInput() {
        return this._maxTotalInstances;
    }
    get minIdleInstances() {
        return this.getNumberAttribute('min_idle_instances');
    }
    set minIdleInstances(value) {
        this._minIdleInstances = value;
    }
    resetMinIdleInstances() {
        this._minIdleInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minIdleInstancesInput() {
        return this._minIdleInstances;
    }
    get minPendingLatency() {
        return this.getStringAttribute('min_pending_latency');
    }
    set minPendingLatency(value) {
        this._minPendingLatency = value;
    }
    resetMinPendingLatency() {
        this._minPendingLatency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minPendingLatencyInput() {
        return this._minPendingLatency;
    }
    get minTotalInstances() {
        return this.getNumberAttribute('min_total_instances');
    }
    set minTotalInstances(value) {
        this._minTotalInstances = value;
    }
    resetMinTotalInstances() {
        this._minTotalInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minTotalInstancesInput() {
        return this._minTotalInstances;
    }
    get cpuUtilization() {
        return this._cpuUtilization;
    }
    putCpuUtilization(value) {
        this._cpuUtilization.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get cpuUtilizationInput() {
        return this._cpuUtilization.internalValue;
    }
    get diskUtilization() {
        return this._diskUtilization;
    }
    putDiskUtilization(value) {
        this._diskUtilization.internalValue = value;
    }
    resetDiskUtilization() {
        this._diskUtilization.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskUtilizationInput() {
        return this._diskUtilization.internalValue;
    }
    get networkUtilization() {
        return this._networkUtilization;
    }
    putNetworkUtilization(value) {
        this._networkUtilization.internalValue = value;
    }
    resetNetworkUtilization() {
        this._networkUtilization.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkUtilizationInput() {
        return this._networkUtilization.internalValue;
    }
    get requestUtilization() {
        return this._requestUtilization;
    }
    putRequestUtilization(value) {
        this._requestUtilization.internalValue = value;
    }
    resetRequestUtilization() {
        this._requestUtilization.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestUtilizationInput() {
        return this._requestUtilization.internalValue;
    }
}
exports.AppEngineFlexibleAppVersionAutomaticScalingOutputReference = AppEngineFlexibleAppVersionAutomaticScalingOutputReference;
_f = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionAutomaticScalingOutputReference[_f] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionAutomaticScalingOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionDeploymentCloudBuildOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_yaml_path: cdktf.stringToTerraform(struct.appYamlPath),
        cloud_build_timeout: cdktf.stringToTerraform(struct.cloudBuildTimeout),
    };
}
exports.appEngineFlexibleAppVersionDeploymentCloudBuildOptionsToTerraform = appEngineFlexibleAppVersionDeploymentCloudBuildOptionsToTerraform;
class AppEngineFlexibleAppVersionDeploymentCloudBuildOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appYamlPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.appYamlPath = this._appYamlPath;
        }
        if (this._cloudBuildTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudBuildTimeout = this._cloudBuildTimeout;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appYamlPath = undefined;
            this._cloudBuildTimeout = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appYamlPath = value.appYamlPath;
            this._cloudBuildTimeout = value.cloudBuildTimeout;
        }
    }
    get appYamlPath() {
        return this.getStringAttribute('app_yaml_path');
    }
    set appYamlPath(value) {
        this._appYamlPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get appYamlPathInput() {
        return this._appYamlPath;
    }
    get cloudBuildTimeout() {
        return this.getStringAttribute('cloud_build_timeout');
    }
    set cloudBuildTimeout(value) {
        this._cloudBuildTimeout = value;
    }
    resetCloudBuildTimeout() {
        this._cloudBuildTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudBuildTimeoutInput() {
        return this._cloudBuildTimeout;
    }
}
exports.AppEngineFlexibleAppVersionDeploymentCloudBuildOptionsOutputReference = AppEngineFlexibleAppVersionDeploymentCloudBuildOptionsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionDeploymentCloudBuildOptionsOutputReference[_g] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionDeploymentCloudBuildOptionsOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionDeploymentContainerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image: cdktf.stringToTerraform(struct.image),
    };
}
exports.appEngineFlexibleAppVersionDeploymentContainerToTerraform = appEngineFlexibleAppVersionDeploymentContainerToTerraform;
class AppEngineFlexibleAppVersionDeploymentContainerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._image !== undefined) {
            hasAnyValues = true;
            internalValueResult.image = this._image;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._image = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._image = value.image;
        }
    }
    get image() {
        return this.getStringAttribute('image');
    }
    set image(value) {
        this._image = value;
    }
    // Temporarily expose input value. Use with caution.
    get imageInput() {
        return this._image;
    }
}
exports.AppEngineFlexibleAppVersionDeploymentContainerOutputReference = AppEngineFlexibleAppVersionDeploymentContainerOutputReference;
_h = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionDeploymentContainerOutputReference[_h] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionDeploymentContainerOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionDeploymentFilesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        sha1_sum: cdktf.stringToTerraform(struct.sha1Sum),
        source_url: cdktf.stringToTerraform(struct.sourceUrl),
    };
}
exports.appEngineFlexibleAppVersionDeploymentFilesToTerraform = appEngineFlexibleAppVersionDeploymentFilesToTerraform;
class AppEngineFlexibleAppVersionDeploymentFilesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._sha1Sum !== undefined) {
            hasAnyValues = true;
            internalValueResult.sha1Sum = this._sha1Sum;
        }
        if (this._sourceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceUrl = this._sourceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._sha1Sum = undefined;
            this._sourceUrl = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._sha1Sum = value.sha1Sum;
            this._sourceUrl = value.sourceUrl;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get sha1Sum() {
        return this.getStringAttribute('sha1_sum');
    }
    set sha1Sum(value) {
        this._sha1Sum = value;
    }
    resetSha1Sum() {
        this._sha1Sum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sha1SumInput() {
        return this._sha1Sum;
    }
    get sourceUrl() {
        return this.getStringAttribute('source_url');
    }
    set sourceUrl(value) {
        this._sourceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceUrlInput() {
        return this._sourceUrl;
    }
}
exports.AppEngineFlexibleAppVersionDeploymentFilesOutputReference = AppEngineFlexibleAppVersionDeploymentFilesOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionDeploymentFilesOutputReference[_j] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionDeploymentFilesOutputReference", version: "5.0.1" };
class AppEngineFlexibleAppVersionDeploymentFilesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppEngineFlexibleAppVersionDeploymentFilesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppEngineFlexibleAppVersionDeploymentFilesList = AppEngineFlexibleAppVersionDeploymentFilesList;
_k = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionDeploymentFilesList[_k] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionDeploymentFilesList", version: "5.0.1" };
function appEngineFlexibleAppVersionDeploymentZipToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        files_count: cdktf.numberToTerraform(struct.filesCount),
        source_url: cdktf.stringToTerraform(struct.sourceUrl),
    };
}
exports.appEngineFlexibleAppVersionDeploymentZipToTerraform = appEngineFlexibleAppVersionDeploymentZipToTerraform;
class AppEngineFlexibleAppVersionDeploymentZipOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._filesCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.filesCount = this._filesCount;
        }
        if (this._sourceUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceUrl = this._sourceUrl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._filesCount = undefined;
            this._sourceUrl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._filesCount = value.filesCount;
            this._sourceUrl = value.sourceUrl;
        }
    }
    get filesCount() {
        return this.getNumberAttribute('files_count');
    }
    set filesCount(value) {
        this._filesCount = value;
    }
    resetFilesCount() {
        this._filesCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filesCountInput() {
        return this._filesCount;
    }
    get sourceUrl() {
        return this.getStringAttribute('source_url');
    }
    set sourceUrl(value) {
        this._sourceUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceUrlInput() {
        return this._sourceUrl;
    }
}
exports.AppEngineFlexibleAppVersionDeploymentZipOutputReference = AppEngineFlexibleAppVersionDeploymentZipOutputReference;
_l = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionDeploymentZipOutputReference[_l] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionDeploymentZipOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionDeploymentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_build_options: appEngineFlexibleAppVersionDeploymentCloudBuildOptionsToTerraform(struct.cloudBuildOptions),
        container: appEngineFlexibleAppVersionDeploymentContainerToTerraform(struct.container),
        files: cdktf.listMapper(appEngineFlexibleAppVersionDeploymentFilesToTerraform, true)(struct.files),
        zip: appEngineFlexibleAppVersionDeploymentZipToTerraform(struct.zip),
    };
}
exports.appEngineFlexibleAppVersionDeploymentToTerraform = appEngineFlexibleAppVersionDeploymentToTerraform;
class AppEngineFlexibleAppVersionDeploymentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_build_options - computed: false, optional: true, required: false
        this._cloudBuildOptions = new AppEngineFlexibleAppVersionDeploymentCloudBuildOptionsOutputReference(this, "cloud_build_options");
        // container - computed: false, optional: true, required: false
        this._container = new AppEngineFlexibleAppVersionDeploymentContainerOutputReference(this, "container");
        // files - computed: false, optional: true, required: false
        this._files = new AppEngineFlexibleAppVersionDeploymentFilesList(this, "files", true);
        // zip - computed: false, optional: true, required: false
        this._zip = new AppEngineFlexibleAppVersionDeploymentZipOutputReference(this, "zip");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudBuildOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudBuildOptions = this._cloudBuildOptions?.internalValue;
        }
        if (this._container?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.container = this._container?.internalValue;
        }
        if (this._files?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.files = this._files?.internalValue;
        }
        if (this._zip?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.zip = this._zip?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudBuildOptions.internalValue = undefined;
            this._container.internalValue = undefined;
            this._files.internalValue = undefined;
            this._zip.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudBuildOptions.internalValue = value.cloudBuildOptions;
            this._container.internalValue = value.container;
            this._files.internalValue = value.files;
            this._zip.internalValue = value.zip;
        }
    }
    get cloudBuildOptions() {
        return this._cloudBuildOptions;
    }
    putCloudBuildOptions(value) {
        this._cloudBuildOptions.internalValue = value;
    }
    resetCloudBuildOptions() {
        this._cloudBuildOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudBuildOptionsInput() {
        return this._cloudBuildOptions.internalValue;
    }
    get container() {
        return this._container;
    }
    putContainer(value) {
        this._container.internalValue = value;
    }
    resetContainer() {
        this._container.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerInput() {
        return this._container.internalValue;
    }
    get files() {
        return this._files;
    }
    putFiles(value) {
        this._files.internalValue = value;
    }
    resetFiles() {
        this._files.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filesInput() {
        return this._files.internalValue;
    }
    get zip() {
        return this._zip;
    }
    putZip(value) {
        this._zip.internalValue = value;
    }
    resetZip() {
        this._zip.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zipInput() {
        return this._zip.internalValue;
    }
}
exports.AppEngineFlexibleAppVersionDeploymentOutputReference = AppEngineFlexibleAppVersionDeploymentOutputReference;
_m = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionDeploymentOutputReference[_m] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionDeploymentOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionEndpointsApiServiceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        config_id: cdktf.stringToTerraform(struct.configId),
        disable_trace_sampling: cdktf.booleanToTerraform(struct.disableTraceSampling),
        name: cdktf.stringToTerraform(struct.name),
        rollout_strategy: cdktf.stringToTerraform(struct.rolloutStrategy),
    };
}
exports.appEngineFlexibleAppVersionEndpointsApiServiceToTerraform = appEngineFlexibleAppVersionEndpointsApiServiceToTerraform;
class AppEngineFlexibleAppVersionEndpointsApiServiceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._configId !== undefined) {
            hasAnyValues = true;
            internalValueResult.configId = this._configId;
        }
        if (this._disableTraceSampling !== undefined) {
            hasAnyValues = true;
            internalValueResult.disableTraceSampling = this._disableTraceSampling;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._rolloutStrategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.rolloutStrategy = this._rolloutStrategy;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._configId = undefined;
            this._disableTraceSampling = undefined;
            this._name = undefined;
            this._rolloutStrategy = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._configId = value.configId;
            this._disableTraceSampling = value.disableTraceSampling;
            this._name = value.name;
            this._rolloutStrategy = value.rolloutStrategy;
        }
    }
    get configId() {
        return this.getStringAttribute('config_id');
    }
    set configId(value) {
        this._configId = value;
    }
    resetConfigId() {
        this._configId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configIdInput() {
        return this._configId;
    }
    get disableTraceSampling() {
        return this.getBooleanAttribute('disable_trace_sampling');
    }
    set disableTraceSampling(value) {
        this._disableTraceSampling = value;
    }
    resetDisableTraceSampling() {
        this._disableTraceSampling = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableTraceSamplingInput() {
        return this._disableTraceSampling;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get rolloutStrategy() {
        return this.getStringAttribute('rollout_strategy');
    }
    set rolloutStrategy(value) {
        this._rolloutStrategy = value;
    }
    resetRolloutStrategy() {
        this._rolloutStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rolloutStrategyInput() {
        return this._rolloutStrategy;
    }
}
exports.AppEngineFlexibleAppVersionEndpointsApiServiceOutputReference = AppEngineFlexibleAppVersionEndpointsApiServiceOutputReference;
_o = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionEndpointsApiServiceOutputReference[_o] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionEndpointsApiServiceOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionEntrypointToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        shell: cdktf.stringToTerraform(struct.shell),
    };
}
exports.appEngineFlexibleAppVersionEntrypointToTerraform = appEngineFlexibleAppVersionEntrypointToTerraform;
class AppEngineFlexibleAppVersionEntrypointOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._shell !== undefined) {
            hasAnyValues = true;
            internalValueResult.shell = this._shell;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._shell = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._shell = value.shell;
        }
    }
    get shell() {
        return this.getStringAttribute('shell');
    }
    set shell(value) {
        this._shell = value;
    }
    // Temporarily expose input value. Use with caution.
    get shellInput() {
        return this._shell;
    }
}
exports.AppEngineFlexibleAppVersionEntrypointOutputReference = AppEngineFlexibleAppVersionEntrypointOutputReference;
_p = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionEntrypointOutputReference[_p] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionEntrypointOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionHandlersScriptToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        script_path: cdktf.stringToTerraform(struct.scriptPath),
    };
}
exports.appEngineFlexibleAppVersionHandlersScriptToTerraform = appEngineFlexibleAppVersionHandlersScriptToTerraform;
class AppEngineFlexibleAppVersionHandlersScriptOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._scriptPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.scriptPath = this._scriptPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._scriptPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._scriptPath = value.scriptPath;
        }
    }
    get scriptPath() {
        return this.getStringAttribute('script_path');
    }
    set scriptPath(value) {
        this._scriptPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get scriptPathInput() {
        return this._scriptPath;
    }
}
exports.AppEngineFlexibleAppVersionHandlersScriptOutputReference = AppEngineFlexibleAppVersionHandlersScriptOutputReference;
_q = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionHandlersScriptOutputReference[_q] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionHandlersScriptOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionHandlersStaticFilesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        application_readable: cdktf.booleanToTerraform(struct.applicationReadable),
        expiration: cdktf.stringToTerraform(struct.expiration),
        http_headers: cdktf.hashMapper(cdktf.stringToTerraform)(struct.httpHeaders),
        mime_type: cdktf.stringToTerraform(struct.mimeType),
        path: cdktf.stringToTerraform(struct.path),
        require_matching_file: cdktf.booleanToTerraform(struct.requireMatchingFile),
        upload_path_regex: cdktf.stringToTerraform(struct.uploadPathRegex),
    };
}
exports.appEngineFlexibleAppVersionHandlersStaticFilesToTerraform = appEngineFlexibleAppVersionHandlersStaticFilesToTerraform;
class AppEngineFlexibleAppVersionHandlersStaticFilesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._applicationReadable !== undefined) {
            hasAnyValues = true;
            internalValueResult.applicationReadable = this._applicationReadable;
        }
        if (this._expiration !== undefined) {
            hasAnyValues = true;
            internalValueResult.expiration = this._expiration;
        }
        if (this._httpHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpHeaders = this._httpHeaders;
        }
        if (this._mimeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.mimeType = this._mimeType;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._requireMatchingFile !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireMatchingFile = this._requireMatchingFile;
        }
        if (this._uploadPathRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.uploadPathRegex = this._uploadPathRegex;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._applicationReadable = undefined;
            this._expiration = undefined;
            this._httpHeaders = undefined;
            this._mimeType = undefined;
            this._path = undefined;
            this._requireMatchingFile = undefined;
            this._uploadPathRegex = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._applicationReadable = value.applicationReadable;
            this._expiration = value.expiration;
            this._httpHeaders = value.httpHeaders;
            this._mimeType = value.mimeType;
            this._path = value.path;
            this._requireMatchingFile = value.requireMatchingFile;
            this._uploadPathRegex = value.uploadPathRegex;
        }
    }
    get applicationReadable() {
        return this.getBooleanAttribute('application_readable');
    }
    set applicationReadable(value) {
        this._applicationReadable = value;
    }
    resetApplicationReadable() {
        this._applicationReadable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get applicationReadableInput() {
        return this._applicationReadable;
    }
    get expiration() {
        return this.getStringAttribute('expiration');
    }
    set expiration(value) {
        this._expiration = value;
    }
    resetExpiration() {
        this._expiration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expirationInput() {
        return this._expiration;
    }
    get httpHeaders() {
        return this.getStringMapAttribute('http_headers');
    }
    set httpHeaders(value) {
        this._httpHeaders = value;
    }
    resetHttpHeaders() {
        this._httpHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpHeadersInput() {
        return this._httpHeaders;
    }
    get mimeType() {
        return this.getStringAttribute('mime_type');
    }
    set mimeType(value) {
        this._mimeType = value;
    }
    resetMimeType() {
        this._mimeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mimeTypeInput() {
        return this._mimeType;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get requireMatchingFile() {
        return this.getBooleanAttribute('require_matching_file');
    }
    set requireMatchingFile(value) {
        this._requireMatchingFile = value;
    }
    resetRequireMatchingFile() {
        this._requireMatchingFile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireMatchingFileInput() {
        return this._requireMatchingFile;
    }
    get uploadPathRegex() {
        return this.getStringAttribute('upload_path_regex');
    }
    set uploadPathRegex(value) {
        this._uploadPathRegex = value;
    }
    resetUploadPathRegex() {
        this._uploadPathRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uploadPathRegexInput() {
        return this._uploadPathRegex;
    }
}
exports.AppEngineFlexibleAppVersionHandlersStaticFilesOutputReference = AppEngineFlexibleAppVersionHandlersStaticFilesOutputReference;
_r = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionHandlersStaticFilesOutputReference[_r] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionHandlersStaticFilesOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionHandlersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_fail_action: cdktf.stringToTerraform(struct.authFailAction),
        login: cdktf.stringToTerraform(struct.login),
        redirect_http_response_code: cdktf.stringToTerraform(struct.redirectHttpResponseCode),
        security_level: cdktf.stringToTerraform(struct.securityLevel),
        url_regex: cdktf.stringToTerraform(struct.urlRegex),
        script: appEngineFlexibleAppVersionHandlersScriptToTerraform(struct.script),
        static_files: appEngineFlexibleAppVersionHandlersStaticFilesToTerraform(struct.staticFiles),
    };
}
exports.appEngineFlexibleAppVersionHandlersToTerraform = appEngineFlexibleAppVersionHandlersToTerraform;
class AppEngineFlexibleAppVersionHandlersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // script - computed: false, optional: true, required: false
        this._script = new AppEngineFlexibleAppVersionHandlersScriptOutputReference(this, "script");
        // static_files - computed: false, optional: true, required: false
        this._staticFiles = new AppEngineFlexibleAppVersionHandlersStaticFilesOutputReference(this, "static_files");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authFailAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.authFailAction = this._authFailAction;
        }
        if (this._login !== undefined) {
            hasAnyValues = true;
            internalValueResult.login = this._login;
        }
        if (this._redirectHttpResponseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectHttpResponseCode = this._redirectHttpResponseCode;
        }
        if (this._securityLevel !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityLevel = this._securityLevel;
        }
        if (this._urlRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRegex = this._urlRegex;
        }
        if (this._script?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.script = this._script?.internalValue;
        }
        if (this._staticFiles?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.staticFiles = this._staticFiles?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._authFailAction = undefined;
            this._login = undefined;
            this._redirectHttpResponseCode = undefined;
            this._securityLevel = undefined;
            this._urlRegex = undefined;
            this._script.internalValue = undefined;
            this._staticFiles.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._authFailAction = value.authFailAction;
            this._login = value.login;
            this._redirectHttpResponseCode = value.redirectHttpResponseCode;
            this._securityLevel = value.securityLevel;
            this._urlRegex = value.urlRegex;
            this._script.internalValue = value.script;
            this._staticFiles.internalValue = value.staticFiles;
        }
    }
    get authFailAction() {
        return this.getStringAttribute('auth_fail_action');
    }
    set authFailAction(value) {
        this._authFailAction = value;
    }
    resetAuthFailAction() {
        this._authFailAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authFailActionInput() {
        return this._authFailAction;
    }
    get login() {
        return this.getStringAttribute('login');
    }
    set login(value) {
        this._login = value;
    }
    resetLogin() {
        this._login = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loginInput() {
        return this._login;
    }
    get redirectHttpResponseCode() {
        return this.getStringAttribute('redirect_http_response_code');
    }
    set redirectHttpResponseCode(value) {
        this._redirectHttpResponseCode = value;
    }
    resetRedirectHttpResponseCode() {
        this._redirectHttpResponseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectHttpResponseCodeInput() {
        return this._redirectHttpResponseCode;
    }
    get securityLevel() {
        return this.getStringAttribute('security_level');
    }
    set securityLevel(value) {
        this._securityLevel = value;
    }
    resetSecurityLevel() {
        this._securityLevel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityLevelInput() {
        return this._securityLevel;
    }
    get urlRegex() {
        return this.getStringAttribute('url_regex');
    }
    set urlRegex(value) {
        this._urlRegex = value;
    }
    resetUrlRegex() {
        this._urlRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRegexInput() {
        return this._urlRegex;
    }
    get script() {
        return this._script;
    }
    putScript(value) {
        this._script.internalValue = value;
    }
    resetScript() {
        this._script.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptInput() {
        return this._script.internalValue;
    }
    get staticFiles() {
        return this._staticFiles;
    }
    putStaticFiles(value) {
        this._staticFiles.internalValue = value;
    }
    resetStaticFiles() {
        this._staticFiles.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get staticFilesInput() {
        return this._staticFiles.internalValue;
    }
}
exports.AppEngineFlexibleAppVersionHandlersOutputReference = AppEngineFlexibleAppVersionHandlersOutputReference;
_s = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionHandlersOutputReference[_s] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionHandlersOutputReference", version: "5.0.1" };
class AppEngineFlexibleAppVersionHandlersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppEngineFlexibleAppVersionHandlersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppEngineFlexibleAppVersionHandlersList = AppEngineFlexibleAppVersionHandlersList;
_t = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionHandlersList[_t] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionHandlersList", version: "5.0.1" };
function appEngineFlexibleAppVersionLivenessCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        check_interval: cdktf.stringToTerraform(struct.checkInterval),
        failure_threshold: cdktf.numberToTerraform(struct.failureThreshold),
        host: cdktf.stringToTerraform(struct.host),
        initial_delay: cdktf.stringToTerraform(struct.initialDelay),
        path: cdktf.stringToTerraform(struct.path),
        success_threshold: cdktf.numberToTerraform(struct.successThreshold),
        timeout: cdktf.stringToTerraform(struct.timeout),
    };
}
exports.appEngineFlexibleAppVersionLivenessCheckToTerraform = appEngineFlexibleAppVersionLivenessCheckToTerraform;
class AppEngineFlexibleAppVersionLivenessCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._checkInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.checkInterval = this._checkInterval;
        }
        if (this._failureThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.failureThreshold = this._failureThreshold;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._initialDelay !== undefined) {
            hasAnyValues = true;
            internalValueResult.initialDelay = this._initialDelay;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._successThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.successThreshold = this._successThreshold;
        }
        if (this._timeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._checkInterval = undefined;
            this._failureThreshold = undefined;
            this._host = undefined;
            this._initialDelay = undefined;
            this._path = undefined;
            this._successThreshold = undefined;
            this._timeout = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._checkInterval = value.checkInterval;
            this._failureThreshold = value.failureThreshold;
            this._host = value.host;
            this._initialDelay = value.initialDelay;
            this._path = value.path;
            this._successThreshold = value.successThreshold;
            this._timeout = value.timeout;
        }
    }
    get checkInterval() {
        return this.getStringAttribute('check_interval');
    }
    set checkInterval(value) {
        this._checkInterval = value;
    }
    resetCheckInterval() {
        this._checkInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get checkIntervalInput() {
        return this._checkInterval;
    }
    get failureThreshold() {
        return this.getNumberAttribute('failure_threshold');
    }
    set failureThreshold(value) {
        this._failureThreshold = value;
    }
    resetFailureThreshold() {
        this._failureThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failureThresholdInput() {
        return this._failureThreshold;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get initialDelay() {
        return this.getStringAttribute('initial_delay');
    }
    set initialDelay(value) {
        this._initialDelay = value;
    }
    resetInitialDelay() {
        this._initialDelay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialDelayInput() {
        return this._initialDelay;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get successThreshold() {
        return this.getNumberAttribute('success_threshold');
    }
    set successThreshold(value) {
        this._successThreshold = value;
    }
    resetSuccessThreshold() {
        this._successThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get successThresholdInput() {
        return this._successThreshold;
    }
    get timeout() {
        return this.getStringAttribute('timeout');
    }
    set timeout(value) {
        this._timeout = value;
    }
    resetTimeout() {
        this._timeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout;
    }
}
exports.AppEngineFlexibleAppVersionLivenessCheckOutputReference = AppEngineFlexibleAppVersionLivenessCheckOutputReference;
_u = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionLivenessCheckOutputReference[_u] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionLivenessCheckOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionManualScalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instances: cdktf.numberToTerraform(struct.instances),
    };
}
exports.appEngineFlexibleAppVersionManualScalingToTerraform = appEngineFlexibleAppVersionManualScalingToTerraform;
class AppEngineFlexibleAppVersionManualScalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instances !== undefined) {
            hasAnyValues = true;
            internalValueResult.instances = this._instances;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instances = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instances = value.instances;
        }
    }
    get instances() {
        return this.getNumberAttribute('instances');
    }
    set instances(value) {
        this._instances = value;
    }
    // Temporarily expose input value. Use with caution.
    get instancesInput() {
        return this._instances;
    }
}
exports.AppEngineFlexibleAppVersionManualScalingOutputReference = AppEngineFlexibleAppVersionManualScalingOutputReference;
_v = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionManualScalingOutputReference[_v] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionManualScalingOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionNetworkToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        forwarded_ports: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.forwardedPorts),
        instance_tag: cdktf.stringToTerraform(struct.instanceTag),
        name: cdktf.stringToTerraform(struct.name),
        session_affinity: cdktf.booleanToTerraform(struct.sessionAffinity),
        subnetwork: cdktf.stringToTerraform(struct.subnetwork),
    };
}
exports.appEngineFlexibleAppVersionNetworkToTerraform = appEngineFlexibleAppVersionNetworkToTerraform;
class AppEngineFlexibleAppVersionNetworkOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._forwardedPorts !== undefined) {
            hasAnyValues = true;
            internalValueResult.forwardedPorts = this._forwardedPorts;
        }
        if (this._instanceTag !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceTag = this._instanceTag;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._sessionAffinity !== undefined) {
            hasAnyValues = true;
            internalValueResult.sessionAffinity = this._sessionAffinity;
        }
        if (this._subnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetwork = this._subnetwork;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._forwardedPorts = undefined;
            this._instanceTag = undefined;
            this._name = undefined;
            this._sessionAffinity = undefined;
            this._subnetwork = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._forwardedPorts = value.forwardedPorts;
            this._instanceTag = value.instanceTag;
            this._name = value.name;
            this._sessionAffinity = value.sessionAffinity;
            this._subnetwork = value.subnetwork;
        }
    }
    get forwardedPorts() {
        return this.getListAttribute('forwarded_ports');
    }
    set forwardedPorts(value) {
        this._forwardedPorts = value;
    }
    resetForwardedPorts() {
        this._forwardedPorts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forwardedPortsInput() {
        return this._forwardedPorts;
    }
    get instanceTag() {
        return this.getStringAttribute('instance_tag');
    }
    set instanceTag(value) {
        this._instanceTag = value;
    }
    resetInstanceTag() {
        this._instanceTag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTagInput() {
        return this._instanceTag;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get sessionAffinity() {
        return this.getBooleanAttribute('session_affinity');
    }
    set sessionAffinity(value) {
        this._sessionAffinity = value;
    }
    resetSessionAffinity() {
        this._sessionAffinity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sessionAffinityInput() {
        return this._sessionAffinity;
    }
    get subnetwork() {
        return this.getStringAttribute('subnetwork');
    }
    set subnetwork(value) {
        this._subnetwork = value;
    }
    resetSubnetwork() {
        this._subnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkInput() {
        return this._subnetwork;
    }
}
exports.AppEngineFlexibleAppVersionNetworkOutputReference = AppEngineFlexibleAppVersionNetworkOutputReference;
_w = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionNetworkOutputReference[_w] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionNetworkOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionReadinessCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_start_timeout: cdktf.stringToTerraform(struct.appStartTimeout),
        check_interval: cdktf.stringToTerraform(struct.checkInterval),
        failure_threshold: cdktf.numberToTerraform(struct.failureThreshold),
        host: cdktf.stringToTerraform(struct.host),
        path: cdktf.stringToTerraform(struct.path),
        success_threshold: cdktf.numberToTerraform(struct.successThreshold),
        timeout: cdktf.stringToTerraform(struct.timeout),
    };
}
exports.appEngineFlexibleAppVersionReadinessCheckToTerraform = appEngineFlexibleAppVersionReadinessCheckToTerraform;
class AppEngineFlexibleAppVersionReadinessCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appStartTimeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.appStartTimeout = this._appStartTimeout;
        }
        if (this._checkInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.checkInterval = this._checkInterval;
        }
        if (this._failureThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.failureThreshold = this._failureThreshold;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._successThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.successThreshold = this._successThreshold;
        }
        if (this._timeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appStartTimeout = undefined;
            this._checkInterval = undefined;
            this._failureThreshold = undefined;
            this._host = undefined;
            this._path = undefined;
            this._successThreshold = undefined;
            this._timeout = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appStartTimeout = value.appStartTimeout;
            this._checkInterval = value.checkInterval;
            this._failureThreshold = value.failureThreshold;
            this._host = value.host;
            this._path = value.path;
            this._successThreshold = value.successThreshold;
            this._timeout = value.timeout;
        }
    }
    get appStartTimeout() {
        return this.getStringAttribute('app_start_timeout');
    }
    set appStartTimeout(value) {
        this._appStartTimeout = value;
    }
    resetAppStartTimeout() {
        this._appStartTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appStartTimeoutInput() {
        return this._appStartTimeout;
    }
    get checkInterval() {
        return this.getStringAttribute('check_interval');
    }
    set checkInterval(value) {
        this._checkInterval = value;
    }
    resetCheckInterval() {
        this._checkInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get checkIntervalInput() {
        return this._checkInterval;
    }
    get failureThreshold() {
        return this.getNumberAttribute('failure_threshold');
    }
    set failureThreshold(value) {
        this._failureThreshold = value;
    }
    resetFailureThreshold() {
        this._failureThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get failureThresholdInput() {
        return this._failureThreshold;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get successThreshold() {
        return this.getNumberAttribute('success_threshold');
    }
    set successThreshold(value) {
        this._successThreshold = value;
    }
    resetSuccessThreshold() {
        this._successThreshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get successThresholdInput() {
        return this._successThreshold;
    }
    get timeout() {
        return this.getStringAttribute('timeout');
    }
    set timeout(value) {
        this._timeout = value;
    }
    resetTimeout() {
        this._timeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout;
    }
}
exports.AppEngineFlexibleAppVersionReadinessCheckOutputReference = AppEngineFlexibleAppVersionReadinessCheckOutputReference;
_x = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionReadinessCheckOutputReference[_x] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionReadinessCheckOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionResourcesVolumesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        size_gb: cdktf.numberToTerraform(struct.sizeGb),
        volume_type: cdktf.stringToTerraform(struct.volumeType),
    };
}
exports.appEngineFlexibleAppVersionResourcesVolumesToTerraform = appEngineFlexibleAppVersionResourcesVolumesToTerraform;
class AppEngineFlexibleAppVersionResourcesVolumesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._sizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.sizeGb = this._sizeGb;
        }
        if (this._volumeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeType = this._volumeType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._sizeGb = undefined;
            this._volumeType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._sizeGb = value.sizeGb;
            this._volumeType = value.volumeType;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get sizeGb() {
        return this.getNumberAttribute('size_gb');
    }
    set sizeGb(value) {
        this._sizeGb = value;
    }
    // Temporarily expose input value. Use with caution.
    get sizeGbInput() {
        return this._sizeGb;
    }
    get volumeType() {
        return this.getStringAttribute('volume_type');
    }
    set volumeType(value) {
        this._volumeType = value;
    }
    // Temporarily expose input value. Use with caution.
    get volumeTypeInput() {
        return this._volumeType;
    }
}
exports.AppEngineFlexibleAppVersionResourcesVolumesOutputReference = AppEngineFlexibleAppVersionResourcesVolumesOutputReference;
_y = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionResourcesVolumesOutputReference[_y] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionResourcesVolumesOutputReference", version: "5.0.1" };
class AppEngineFlexibleAppVersionResourcesVolumesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppEngineFlexibleAppVersionResourcesVolumesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppEngineFlexibleAppVersionResourcesVolumesList = AppEngineFlexibleAppVersionResourcesVolumesList;
_z = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionResourcesVolumesList[_z] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionResourcesVolumesList", version: "5.0.1" };
function appEngineFlexibleAppVersionResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu: cdktf.numberToTerraform(struct.cpu),
        disk_gb: cdktf.numberToTerraform(struct.diskGb),
        memory_gb: cdktf.numberToTerraform(struct.memoryGb),
        volumes: cdktf.listMapper(appEngineFlexibleAppVersionResourcesVolumesToTerraform, true)(struct.volumes),
    };
}
exports.appEngineFlexibleAppVersionResourcesToTerraform = appEngineFlexibleAppVersionResourcesToTerraform;
class AppEngineFlexibleAppVersionResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // volumes - computed: false, optional: true, required: false
        this._volumes = new AppEngineFlexibleAppVersionResourcesVolumesList(this, "volumes", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._diskGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskGb = this._diskGb;
        }
        if (this._memoryGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryGb = this._memoryGb;
        }
        if (this._volumes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumes = this._volumes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpu = undefined;
            this._diskGb = undefined;
            this._memoryGb = undefined;
            this._volumes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpu = value.cpu;
            this._diskGb = value.diskGb;
            this._memoryGb = value.memoryGb;
            this._volumes.internalValue = value.volumes;
        }
    }
    get cpu() {
        return this.getNumberAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get diskGb() {
        return this.getNumberAttribute('disk_gb');
    }
    set diskGb(value) {
        this._diskGb = value;
    }
    resetDiskGb() {
        this._diskGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskGbInput() {
        return this._diskGb;
    }
    get memoryGb() {
        return this.getNumberAttribute('memory_gb');
    }
    set memoryGb(value) {
        this._memoryGb = value;
    }
    resetMemoryGb() {
        this._memoryGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryGbInput() {
        return this._memoryGb;
    }
    get volumes() {
        return this._volumes;
    }
    putVolumes(value) {
        this._volumes.internalValue = value;
    }
    resetVolumes() {
        this._volumes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumesInput() {
        return this._volumes.internalValue;
    }
}
exports.AppEngineFlexibleAppVersionResourcesOutputReference = AppEngineFlexibleAppVersionResourcesOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionResourcesOutputReference[_0] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionResourcesOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.appEngineFlexibleAppVersionTimeoutsToTerraform = appEngineFlexibleAppVersionTimeoutsToTerraform;
class AppEngineFlexibleAppVersionTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.AppEngineFlexibleAppVersionTimeoutsOutputReference = AppEngineFlexibleAppVersionTimeoutsOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionTimeoutsOutputReference[_1] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionTimeoutsOutputReference", version: "5.0.1" };
function appEngineFlexibleAppVersionVpcAccessConnectorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.appEngineFlexibleAppVersionVpcAccessConnectorToTerraform = appEngineFlexibleAppVersionVpcAccessConnectorToTerraform;
class AppEngineFlexibleAppVersionVpcAccessConnectorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.AppEngineFlexibleAppVersionVpcAccessConnectorOutputReference = AppEngineFlexibleAppVersionVpcAccessConnectorOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersionVpcAccessConnectorOutputReference[_2] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersionVpcAccessConnectorOutputReference", version: "5.0.1" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/app_engine_flexible_app_version google_app_engine_flexible_app_version}
*/
class AppEngineFlexibleAppVersion extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/app_engine_flexible_app_version google_app_engine_flexible_app_version} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppEngineFlexibleAppVersionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_app_engine_flexible_app_version',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.49.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // api_config - computed: false, optional: true, required: false
        this._apiConfig = new AppEngineFlexibleAppVersionApiConfigOutputReference(this, "api_config");
        // automatic_scaling - computed: false, optional: true, required: false
        this._automaticScaling = new AppEngineFlexibleAppVersionAutomaticScalingOutputReference(this, "automatic_scaling");
        // deployment - computed: false, optional: true, required: false
        this._deployment = new AppEngineFlexibleAppVersionDeploymentOutputReference(this, "deployment");
        // endpoints_api_service - computed: false, optional: true, required: false
        this._endpointsApiService = new AppEngineFlexibleAppVersionEndpointsApiServiceOutputReference(this, "endpoints_api_service");
        // entrypoint - computed: false, optional: true, required: false
        this._entrypoint = new AppEngineFlexibleAppVersionEntrypointOutputReference(this, "entrypoint");
        // handlers - computed: false, optional: true, required: false
        this._handlers = new AppEngineFlexibleAppVersionHandlersList(this, "handlers", false);
        // liveness_check - computed: false, optional: false, required: true
        this._livenessCheck = new AppEngineFlexibleAppVersionLivenessCheckOutputReference(this, "liveness_check");
        // manual_scaling - computed: false, optional: true, required: false
        this._manualScaling = new AppEngineFlexibleAppVersionManualScalingOutputReference(this, "manual_scaling");
        // network - computed: false, optional: true, required: false
        this._network = new AppEngineFlexibleAppVersionNetworkOutputReference(this, "network");
        // readiness_check - computed: false, optional: false, required: true
        this._readinessCheck = new AppEngineFlexibleAppVersionReadinessCheckOutputReference(this, "readiness_check");
        // resources - computed: false, optional: true, required: false
        this._resources = new AppEngineFlexibleAppVersionResourcesOutputReference(this, "resources");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new AppEngineFlexibleAppVersionTimeoutsOutputReference(this, "timeouts");
        // vpc_access_connector - computed: false, optional: true, required: false
        this._vpcAccessConnector = new AppEngineFlexibleAppVersionVpcAccessConnectorOutputReference(this, "vpc_access_connector");
        this._betaSettings = config.betaSettings;
        this._defaultExpiration = config.defaultExpiration;
        this._deleteServiceOnDestroy = config.deleteServiceOnDestroy;
        this._envVariables = config.envVariables;
        this._id = config.id;
        this._inboundServices = config.inboundServices;
        this._instanceClass = config.instanceClass;
        this._nobuildFilesRegex = config.nobuildFilesRegex;
        this._noopOnDestroy = config.noopOnDestroy;
        this._project = config.project;
        this._runtime = config.runtime;
        this._runtimeApiVersion = config.runtimeApiVersion;
        this._runtimeChannel = config.runtimeChannel;
        this._runtimeMainExecutablePath = config.runtimeMainExecutablePath;
        this._service = config.service;
        this._serviceAccount = config.serviceAccount;
        this._servingStatus = config.servingStatus;
        this._versionId = config.versionId;
        this._apiConfig.internalValue = config.apiConfig;
        this._automaticScaling.internalValue = config.automaticScaling;
        this._deployment.internalValue = config.deployment;
        this._endpointsApiService.internalValue = config.endpointsApiService;
        this._entrypoint.internalValue = config.entrypoint;
        this._handlers.internalValue = config.handlers;
        this._livenessCheck.internalValue = config.livenessCheck;
        this._manualScaling.internalValue = config.manualScaling;
        this._network.internalValue = config.network;
        this._readinessCheck.internalValue = config.readinessCheck;
        this._resources.internalValue = config.resources;
        this._timeouts.internalValue = config.timeouts;
        this._vpcAccessConnector.internalValue = config.vpcAccessConnector;
    }
    get betaSettings() {
        return this.getStringMapAttribute('beta_settings');
    }
    set betaSettings(value) {
        this._betaSettings = value;
    }
    resetBetaSettings() {
        this._betaSettings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get betaSettingsInput() {
        return this._betaSettings;
    }
    get defaultExpiration() {
        return this.getStringAttribute('default_expiration');
    }
    set defaultExpiration(value) {
        this._defaultExpiration = value;
    }
    resetDefaultExpiration() {
        this._defaultExpiration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultExpirationInput() {
        return this._defaultExpiration;
    }
    get deleteServiceOnDestroy() {
        return this.getBooleanAttribute('delete_service_on_destroy');
    }
    set deleteServiceOnDestroy(value) {
        this._deleteServiceOnDestroy = value;
    }
    resetDeleteServiceOnDestroy() {
        this._deleteServiceOnDestroy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteServiceOnDestroyInput() {
        return this._deleteServiceOnDestroy;
    }
    get envVariables() {
        return this.getStringMapAttribute('env_variables');
    }
    set envVariables(value) {
        this._envVariables = value;
    }
    resetEnvVariables() {
        this._envVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get envVariablesInput() {
        return this._envVariables;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get inboundServices() {
        return cdktf.Fn.tolist(this.getListAttribute('inbound_services'));
    }
    set inboundServices(value) {
        this._inboundServices = value;
    }
    resetInboundServices() {
        this._inboundServices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inboundServicesInput() {
        return this._inboundServices;
    }
    get instanceClass() {
        return this.getStringAttribute('instance_class');
    }
    set instanceClass(value) {
        this._instanceClass = value;
    }
    resetInstanceClass() {
        this._instanceClass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceClassInput() {
        return this._instanceClass;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get nobuildFilesRegex() {
        return this.getStringAttribute('nobuild_files_regex');
    }
    set nobuildFilesRegex(value) {
        this._nobuildFilesRegex = value;
    }
    resetNobuildFilesRegex() {
        this._nobuildFilesRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nobuildFilesRegexInput() {
        return this._nobuildFilesRegex;
    }
    get noopOnDestroy() {
        return this.getBooleanAttribute('noop_on_destroy');
    }
    set noopOnDestroy(value) {
        this._noopOnDestroy = value;
    }
    resetNoopOnDestroy() {
        this._noopOnDestroy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get noopOnDestroyInput() {
        return this._noopOnDestroy;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get runtime() {
        return this.getStringAttribute('runtime');
    }
    set runtime(value) {
        this._runtime = value;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeInput() {
        return this._runtime;
    }
    get runtimeApiVersion() {
        return this.getStringAttribute('runtime_api_version');
    }
    set runtimeApiVersion(value) {
        this._runtimeApiVersion = value;
    }
    resetRuntimeApiVersion() {
        this._runtimeApiVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeApiVersionInput() {
        return this._runtimeApiVersion;
    }
    get runtimeChannel() {
        return this.getStringAttribute('runtime_channel');
    }
    set runtimeChannel(value) {
        this._runtimeChannel = value;
    }
    resetRuntimeChannel() {
        this._runtimeChannel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeChannelInput() {
        return this._runtimeChannel;
    }
    get runtimeMainExecutablePath() {
        return this.getStringAttribute('runtime_main_executable_path');
    }
    set runtimeMainExecutablePath(value) {
        this._runtimeMainExecutablePath = value;
    }
    resetRuntimeMainExecutablePath() {
        this._runtimeMainExecutablePath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeMainExecutablePathInput() {
        return this._runtimeMainExecutablePath;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get servingStatus() {
        return this.getStringAttribute('serving_status');
    }
    set servingStatus(value) {
        this._servingStatus = value;
    }
    resetServingStatus() {
        this._servingStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get servingStatusInput() {
        return this._servingStatus;
    }
    get versionId() {
        return this.getStringAttribute('version_id');
    }
    set versionId(value) {
        this._versionId = value;
    }
    resetVersionId() {
        this._versionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionIdInput() {
        return this._versionId;
    }
    get apiConfig() {
        return this._apiConfig;
    }
    putApiConfig(value) {
        this._apiConfig.internalValue = value;
    }
    resetApiConfig() {
        this._apiConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get apiConfigInput() {
        return this._apiConfig.internalValue;
    }
    get automaticScaling() {
        return this._automaticScaling;
    }
    putAutomaticScaling(value) {
        this._automaticScaling.internalValue = value;
    }
    resetAutomaticScaling() {
        this._automaticScaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automaticScalingInput() {
        return this._automaticScaling.internalValue;
    }
    get deployment() {
        return this._deployment;
    }
    putDeployment(value) {
        this._deployment.internalValue = value;
    }
    resetDeployment() {
        this._deployment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentInput() {
        return this._deployment.internalValue;
    }
    get endpointsApiService() {
        return this._endpointsApiService;
    }
    putEndpointsApiService(value) {
        this._endpointsApiService.internalValue = value;
    }
    resetEndpointsApiService() {
        this._endpointsApiService.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointsApiServiceInput() {
        return this._endpointsApiService.internalValue;
    }
    get entrypoint() {
        return this._entrypoint;
    }
    putEntrypoint(value) {
        this._entrypoint.internalValue = value;
    }
    resetEntrypoint() {
        this._entrypoint.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entrypointInput() {
        return this._entrypoint.internalValue;
    }
    get handlers() {
        return this._handlers;
    }
    putHandlers(value) {
        this._handlers.internalValue = value;
    }
    resetHandlers() {
        this._handlers.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get handlersInput() {
        return this._handlers.internalValue;
    }
    get livenessCheck() {
        return this._livenessCheck;
    }
    putLivenessCheck(value) {
        this._livenessCheck.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get livenessCheckInput() {
        return this._livenessCheck.internalValue;
    }
    get manualScaling() {
        return this._manualScaling;
    }
    putManualScaling(value) {
        this._manualScaling.internalValue = value;
    }
    resetManualScaling() {
        this._manualScaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get manualScalingInput() {
        return this._manualScaling.internalValue;
    }
    get network() {
        return this._network;
    }
    putNetwork(value) {
        this._network.internalValue = value;
    }
    resetNetwork() {
        this._network.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network.internalValue;
    }
    get readinessCheck() {
        return this._readinessCheck;
    }
    putReadinessCheck(value) {
        this._readinessCheck.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get readinessCheckInput() {
        return this._readinessCheck.internalValue;
    }
    get resources() {
        return this._resources;
    }
    putResources(value) {
        this._resources.internalValue = value;
    }
    resetResources() {
        this._resources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get vpcAccessConnector() {
        return this._vpcAccessConnector;
    }
    putVpcAccessConnector(value) {
        this._vpcAccessConnector.internalValue = value;
    }
    resetVpcAccessConnector() {
        this._vpcAccessConnector.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vpcAccessConnectorInput() {
        return this._vpcAccessConnector.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            beta_settings: cdktf.hashMapper(cdktf.stringToTerraform)(this._betaSettings),
            default_expiration: cdktf.stringToTerraform(this._defaultExpiration),
            delete_service_on_destroy: cdktf.booleanToTerraform(this._deleteServiceOnDestroy),
            env_variables: cdktf.hashMapper(cdktf.stringToTerraform)(this._envVariables),
            id: cdktf.stringToTerraform(this._id),
            inbound_services: cdktf.listMapper(cdktf.stringToTerraform, false)(this._inboundServices),
            instance_class: cdktf.stringToTerraform(this._instanceClass),
            nobuild_files_regex: cdktf.stringToTerraform(this._nobuildFilesRegex),
            noop_on_destroy: cdktf.booleanToTerraform(this._noopOnDestroy),
            project: cdktf.stringToTerraform(this._project),
            runtime: cdktf.stringToTerraform(this._runtime),
            runtime_api_version: cdktf.stringToTerraform(this._runtimeApiVersion),
            runtime_channel: cdktf.stringToTerraform(this._runtimeChannel),
            runtime_main_executable_path: cdktf.stringToTerraform(this._runtimeMainExecutablePath),
            service: cdktf.stringToTerraform(this._service),
            service_account: cdktf.stringToTerraform(this._serviceAccount),
            serving_status: cdktf.stringToTerraform(this._servingStatus),
            version_id: cdktf.stringToTerraform(this._versionId),
            api_config: appEngineFlexibleAppVersionApiConfigToTerraform(this._apiConfig.internalValue),
            automatic_scaling: appEngineFlexibleAppVersionAutomaticScalingToTerraform(this._automaticScaling.internalValue),
            deployment: appEngineFlexibleAppVersionDeploymentToTerraform(this._deployment.internalValue),
            endpoints_api_service: appEngineFlexibleAppVersionEndpointsApiServiceToTerraform(this._endpointsApiService.internalValue),
            entrypoint: appEngineFlexibleAppVersionEntrypointToTerraform(this._entrypoint.internalValue),
            handlers: cdktf.listMapper(appEngineFlexibleAppVersionHandlersToTerraform, true)(this._handlers.internalValue),
            liveness_check: appEngineFlexibleAppVersionLivenessCheckToTerraform(this._livenessCheck.internalValue),
            manual_scaling: appEngineFlexibleAppVersionManualScalingToTerraform(this._manualScaling.internalValue),
            network: appEngineFlexibleAppVersionNetworkToTerraform(this._network.internalValue),
            readiness_check: appEngineFlexibleAppVersionReadinessCheckToTerraform(this._readinessCheck.internalValue),
            resources: appEngineFlexibleAppVersionResourcesToTerraform(this._resources.internalValue),
            timeouts: appEngineFlexibleAppVersionTimeoutsToTerraform(this._timeouts.internalValue),
            vpc_access_connector: appEngineFlexibleAppVersionVpcAccessConnectorToTerraform(this._vpcAccessConnector.internalValue),
        };
    }
}
exports.AppEngineFlexibleAppVersion = AppEngineFlexibleAppVersion;
_3 = JSII_RTTI_SYMBOL_1;
AppEngineFlexibleAppVersion[_3] = { fqn: "@cdktf/provider-google.appEngineFlexibleAppVersion.AppEngineFlexibleAppVersion", version: "5.0.1" };
// =================
// STATIC PROPERTIES
// =================
AppEngineFlexibleAppVersion.tfResourceType = "google_app_engine_flexible_app_version";
//# sourceMappingURL=data:application/json;base64,