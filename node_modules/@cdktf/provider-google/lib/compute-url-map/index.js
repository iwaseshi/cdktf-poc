"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeUrlMap = exports.ComputeUrlMapTimeoutsOutputReference = exports.computeUrlMapTimeoutsToTerraform = exports.ComputeUrlMapTestList = exports.ComputeUrlMapTestOutputReference = exports.computeUrlMapTestToTerraform = exports.ComputeUrlMapPathMatcherList = exports.ComputeUrlMapPathMatcherOutputReference = exports.computeUrlMapPathMatcherToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesList = exports.ComputeUrlMapPathMatcherRouteRulesOutputReference = exports.computeUrlMapPathMatcherRouteRulesToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesUrlRedirectOutputReference = exports.computeUrlMapPathMatcherRouteRulesUrlRedirectToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionTimeoutToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference = exports.computeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesList = exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesOutputReference = exports.computeUrlMapPathMatcherRouteRulesMatchRulesToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList = exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference = exports.computeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList = exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference = exports.computeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList = exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference = exports.computeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList = exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference = exports.computeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference = exports.computeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesHeaderActionOutputReference = exports.computeUrlMapPathMatcherRouteRulesHeaderActionToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList = exports.ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference = exports.computeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddToTerraform = exports.ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList = exports.ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference = exports.computeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddToTerraform = exports.ComputeUrlMapPathMatcherPathRuleList = exports.ComputeUrlMapPathMatcherPathRuleOutputReference = exports.computeUrlMapPathMatcherPathRuleToTerraform = exports.ComputeUrlMapPathMatcherPathRuleUrlRedirectOutputReference = exports.computeUrlMapPathMatcherPathRuleUrlRedirectToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList = exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionUrlRewriteToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionTimeoutToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionRetryPolicyToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortToTerraform = exports.ComputeUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference = exports.computeUrlMapPathMatcherPathRuleRouteActionCorsPolicyToTerraform = exports.ComputeUrlMapPathMatcherHeaderActionOutputReference = exports.computeUrlMapPathMatcherHeaderActionToTerraform = exports.ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddList = exports.ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddOutputReference = exports.computeUrlMapPathMatcherHeaderActionResponseHeadersToAddToTerraform = exports.ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddList = exports.ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddOutputReference = exports.computeUrlMapPathMatcherHeaderActionRequestHeadersToAddToTerraform = exports.ComputeUrlMapPathMatcherDefaultUrlRedirectOutputReference = exports.computeUrlMapPathMatcherDefaultUrlRedirectToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesList = exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionUrlRewriteOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionUrlRewriteToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionTimeoutOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionTimeoutToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionRetryPolicyToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortToTerraform = exports.ComputeUrlMapPathMatcherDefaultRouteActionCorsPolicyOutputReference = exports.computeUrlMapPathMatcherDefaultRouteActionCorsPolicyToTerraform = exports.ComputeUrlMapHostRuleList = exports.ComputeUrlMapHostRuleOutputReference = exports.computeUrlMapHostRuleToTerraform = exports.ComputeUrlMapHeaderActionOutputReference = exports.computeUrlMapHeaderActionToTerraform = exports.ComputeUrlMapHeaderActionResponseHeadersToAddList = exports.ComputeUrlMapHeaderActionResponseHeadersToAddOutputReference = exports.computeUrlMapHeaderActionResponseHeadersToAddToTerraform = exports.ComputeUrlMapHeaderActionRequestHeadersToAddList = exports.ComputeUrlMapHeaderActionRequestHeadersToAddOutputReference = exports.computeUrlMapHeaderActionRequestHeadersToAddToTerraform = exports.ComputeUrlMapDefaultUrlRedirectOutputReference = exports.computeUrlMapDefaultUrlRedirectToTerraform = exports.ComputeUrlMapDefaultRouteActionOutputReference = exports.computeUrlMapDefaultRouteActionToTerraform = exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesList = exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesOutputReference = exports.computeUrlMapDefaultRouteActionWeightedBackendServicesToTerraform = exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference = exports.computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform = exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = exports.computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = exports.computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = exports.ComputeUrlMapDefaultRouteActionUrlRewriteOutputReference = exports.computeUrlMapDefaultRouteActionUrlRewriteToTerraform = exports.ComputeUrlMapDefaultRouteActionTimeoutOutputReference = exports.computeUrlMapDefaultRouteActionTimeoutToTerraform = exports.ComputeUrlMapDefaultRouteActionRetryPolicyOutputReference = exports.computeUrlMapDefaultRouteActionRetryPolicyToTerraform = exports.ComputeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference = exports.computeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform = exports.ComputeUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference = exports.computeUrlMapDefaultRouteActionRequestMirrorPolicyToTerraform = exports.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference = exports.computeUrlMapDefaultRouteActionFaultInjectionPolicyToTerraform = exports.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference = exports.computeUrlMapDefaultRouteActionFaultInjectionPolicyDelayToTerraform = exports.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = exports.computeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = exports.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference = exports.computeUrlMapDefaultRouteActionFaultInjectionPolicyAbortToTerraform = exports.ComputeUrlMapDefaultRouteActionCorsPolicyOutputReference = exports.computeUrlMapDefaultRouteActionCorsPolicyToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function computeUrlMapDefaultRouteActionCorsPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_credentials: cdktf.booleanToTerraform(struct.allowCredentials),
        allow_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowHeaders),
        allow_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowMethods),
        allow_origin_regexes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOriginRegexes),
        allow_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOrigins),
        disabled: cdktf.booleanToTerraform(struct.disabled),
        expose_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exposeHeaders),
        max_age: cdktf.numberToTerraform(struct.maxAge),
    };
}
exports.computeUrlMapDefaultRouteActionCorsPolicyToTerraform = computeUrlMapDefaultRouteActionCorsPolicyToTerraform;
class ComputeUrlMapDefaultRouteActionCorsPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowCredentials = this._allowCredentials;
        }
        if (this._allowHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowHeaders = this._allowHeaders;
        }
        if (this._allowMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowMethods = this._allowMethods;
        }
        if (this._allowOriginRegexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOriginRegexes = this._allowOriginRegexes;
        }
        if (this._allowOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOrigins = this._allowOrigins;
        }
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        if (this._exposeHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.exposeHeaders = this._exposeHeaders;
        }
        if (this._maxAge !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAge = this._maxAge;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowCredentials = undefined;
            this._allowHeaders = undefined;
            this._allowMethods = undefined;
            this._allowOriginRegexes = undefined;
            this._allowOrigins = undefined;
            this._disabled = undefined;
            this._exposeHeaders = undefined;
            this._maxAge = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowCredentials = value.allowCredentials;
            this._allowHeaders = value.allowHeaders;
            this._allowMethods = value.allowMethods;
            this._allowOriginRegexes = value.allowOriginRegexes;
            this._allowOrigins = value.allowOrigins;
            this._disabled = value.disabled;
            this._exposeHeaders = value.exposeHeaders;
            this._maxAge = value.maxAge;
        }
    }
    get allowCredentials() {
        return this.getBooleanAttribute('allow_credentials');
    }
    set allowCredentials(value) {
        this._allowCredentials = value;
    }
    resetAllowCredentials() {
        this._allowCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowCredentialsInput() {
        return this._allowCredentials;
    }
    get allowHeaders() {
        return this.getListAttribute('allow_headers');
    }
    set allowHeaders(value) {
        this._allowHeaders = value;
    }
    resetAllowHeaders() {
        this._allowHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowHeadersInput() {
        return this._allowHeaders;
    }
    get allowMethods() {
        return this.getListAttribute('allow_methods');
    }
    set allowMethods(value) {
        this._allowMethods = value;
    }
    resetAllowMethods() {
        this._allowMethods = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowMethodsInput() {
        return this._allowMethods;
    }
    get allowOriginRegexes() {
        return this.getListAttribute('allow_origin_regexes');
    }
    set allowOriginRegexes(value) {
        this._allowOriginRegexes = value;
    }
    resetAllowOriginRegexes() {
        this._allowOriginRegexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginRegexesInput() {
        return this._allowOriginRegexes;
    }
    get allowOrigins() {
        return this.getListAttribute('allow_origins');
    }
    set allowOrigins(value) {
        this._allowOrigins = value;
    }
    resetAllowOrigins() {
        this._allowOrigins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginsInput() {
        return this._allowOrigins;
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    resetDisabled() {
        this._disabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get exposeHeaders() {
        return this.getListAttribute('expose_headers');
    }
    set exposeHeaders(value) {
        this._exposeHeaders = value;
    }
    resetExposeHeaders() {
        this._exposeHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exposeHeadersInput() {
        return this._exposeHeaders;
    }
    get maxAge() {
        return this.getNumberAttribute('max_age');
    }
    set maxAge(value) {
        this._maxAge = value;
    }
    resetMaxAge() {
        this._maxAge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAgeInput() {
        return this._maxAge;
    }
}
exports.ComputeUrlMapDefaultRouteActionCorsPolicyOutputReference = ComputeUrlMapDefaultRouteActionCorsPolicyOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionCorsPolicyOutputReference[_a] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionCorsPolicyOutputReference", version: "4.0.3" };
function computeUrlMapDefaultRouteActionFaultInjectionPolicyAbortToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_status: cdktf.numberToTerraform(struct.httpStatus),
        percentage: cdktf.numberToTerraform(struct.percentage),
    };
}
exports.computeUrlMapDefaultRouteActionFaultInjectionPolicyAbortToTerraform = computeUrlMapDefaultRouteActionFaultInjectionPolicyAbortToTerraform;
class ComputeUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpStatus = this._httpStatus;
        }
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpStatus = undefined;
            this._percentage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpStatus = value.httpStatus;
            this._percentage = value.percentage;
        }
    }
    get httpStatus() {
        return this.getNumberAttribute('http_status');
    }
    set httpStatus(value) {
        this._httpStatus = value;
    }
    resetHttpStatus() {
        this._httpStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpStatusInput() {
        return this._httpStatus;
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    resetPercentage() {
        this._percentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
}
exports.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference = ComputeUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference[_b] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference", version: "4.0.3" };
function computeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = computeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform;
class ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference[_c] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference", version: "4.0.3" };
function computeUrlMapDefaultRouteActionFaultInjectionPolicyDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        percentage: cdktf.numberToTerraform(struct.percentage),
        fixed_delay: computeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct.fixedDelay),
    };
}
exports.computeUrlMapDefaultRouteActionFaultInjectionPolicyDelayToTerraform = computeUrlMapDefaultRouteActionFaultInjectionPolicyDelayToTerraform;
class ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // fixed_delay - computed: false, optional: true, required: false
        this._fixedDelay = new ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference(this, "fixed_delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        if (this._fixedDelay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedDelay = this._fixedDelay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._percentage = undefined;
            this._fixedDelay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._percentage = value.percentage;
            this._fixedDelay.internalValue = value.fixedDelay;
        }
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    resetPercentage() {
        this._percentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
    get fixedDelay() {
        return this._fixedDelay;
    }
    putFixedDelay(value) {
        this._fixedDelay.internalValue = value;
    }
    resetFixedDelay() {
        this._fixedDelay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedDelayInput() {
        return this._fixedDelay.internalValue;
    }
}
exports.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference = ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference[_d] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference", version: "4.0.3" };
function computeUrlMapDefaultRouteActionFaultInjectionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        abort: computeUrlMapDefaultRouteActionFaultInjectionPolicyAbortToTerraform(struct.abort),
        delay: computeUrlMapDefaultRouteActionFaultInjectionPolicyDelayToTerraform(struct.delay),
    };
}
exports.computeUrlMapDefaultRouteActionFaultInjectionPolicyToTerraform = computeUrlMapDefaultRouteActionFaultInjectionPolicyToTerraform;
class ComputeUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // abort - computed: false, optional: true, required: false
        this._abort = new ComputeUrlMapDefaultRouteActionFaultInjectionPolicyAbortOutputReference(this, "abort");
        // delay - computed: false, optional: true, required: false
        this._delay = new ComputeUrlMapDefaultRouteActionFaultInjectionPolicyDelayOutputReference(this, "delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._abort?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.abort = this._abort?.internalValue;
        }
        if (this._delay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.delay = this._delay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._abort.internalValue = undefined;
            this._delay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._abort.internalValue = value.abort;
            this._delay.internalValue = value.delay;
        }
    }
    get abort() {
        return this._abort;
    }
    putAbort(value) {
        this._abort.internalValue = value;
    }
    resetAbort() {
        this._abort.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get abortInput() {
        return this._abort.internalValue;
    }
    get delay() {
        return this._delay;
    }
    putDelay(value) {
        this._delay.internalValue = value;
    }
    resetDelay() {
        this._delay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get delayInput() {
        return this._delay.internalValue;
    }
}
exports.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference = ComputeUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference[_e] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference", version: "4.0.3" };
function computeUrlMapDefaultRouteActionRequestMirrorPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
    };
}
exports.computeUrlMapDefaultRouteActionRequestMirrorPolicyToTerraform = computeUrlMapDefaultRouteActionRequestMirrorPolicyToTerraform;
class ComputeUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backendService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backendService = value.backendService;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
}
exports.ComputeUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference = ComputeUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference[_f] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference", version: "4.0.3" };
function computeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform = computeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform;
class ComputeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference = ComputeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference[_g] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference", version: "4.0.3" };
function computeUrlMapDefaultRouteActionRetryPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        retry_conditions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.retryConditions),
        per_try_timeout: computeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform(struct.perTryTimeout),
    };
}
exports.computeUrlMapDefaultRouteActionRetryPolicyToTerraform = computeUrlMapDefaultRouteActionRetryPolicyToTerraform;
class ComputeUrlMapDefaultRouteActionRetryPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // per_try_timeout - computed: false, optional: true, required: false
        this._perTryTimeout = new ComputeUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference(this, "per_try_timeout");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._retryConditions !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryConditions = this._retryConditions;
        }
        if (this._perTryTimeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.perTryTimeout = this._perTryTimeout?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._numRetries = undefined;
            this._retryConditions = undefined;
            this._perTryTimeout.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._numRetries = value.numRetries;
            this._retryConditions = value.retryConditions;
            this._perTryTimeout.internalValue = value.perTryTimeout;
        }
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get retryConditions() {
        return this.getListAttribute('retry_conditions');
    }
    set retryConditions(value) {
        this._retryConditions = value;
    }
    resetRetryConditions() {
        this._retryConditions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryConditionsInput() {
        return this._retryConditions;
    }
    get perTryTimeout() {
        return this._perTryTimeout;
    }
    putPerTryTimeout(value) {
        this._perTryTimeout.internalValue = value;
    }
    resetPerTryTimeout() {
        this._perTryTimeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perTryTimeoutInput() {
        return this._perTryTimeout.internalValue;
    }
}
exports.ComputeUrlMapDefaultRouteActionRetryPolicyOutputReference = ComputeUrlMapDefaultRouteActionRetryPolicyOutputReference;
_h = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionRetryPolicyOutputReference[_h] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionRetryPolicyOutputReference", version: "4.0.3" };
function computeUrlMapDefaultRouteActionTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapDefaultRouteActionTimeoutToTerraform = computeUrlMapDefaultRouteActionTimeoutToTerraform;
class ComputeUrlMapDefaultRouteActionTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapDefaultRouteActionTimeoutOutputReference = ComputeUrlMapDefaultRouteActionTimeoutOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionTimeoutOutputReference[_j] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionTimeoutOutputReference", version: "4.0.3" };
function computeUrlMapDefaultRouteActionUrlRewriteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_rewrite: cdktf.stringToTerraform(struct.hostRewrite),
        path_prefix_rewrite: cdktf.stringToTerraform(struct.pathPrefixRewrite),
    };
}
exports.computeUrlMapDefaultRouteActionUrlRewriteToTerraform = computeUrlMapDefaultRouteActionUrlRewriteToTerraform;
class ComputeUrlMapDefaultRouteActionUrlRewriteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRewrite = this._hostRewrite;
        }
        if (this._pathPrefixRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathPrefixRewrite = this._pathPrefixRewrite;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRewrite = undefined;
            this._pathPrefixRewrite = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRewrite = value.hostRewrite;
            this._pathPrefixRewrite = value.pathPrefixRewrite;
        }
    }
    get hostRewrite() {
        return this.getStringAttribute('host_rewrite');
    }
    set hostRewrite(value) {
        this._hostRewrite = value;
    }
    resetHostRewrite() {
        this._hostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRewriteInput() {
        return this._hostRewrite;
    }
    get pathPrefixRewrite() {
        return this.getStringAttribute('path_prefix_rewrite');
    }
    set pathPrefixRewrite(value) {
        this._pathPrefixRewrite = value;
    }
    resetPathPrefixRewrite() {
        this._pathPrefixRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathPrefixRewriteInput() {
        return this._pathPrefixRewrite;
    }
}
exports.ComputeUrlMapDefaultRouteActionUrlRewriteOutputReference = ComputeUrlMapDefaultRouteActionUrlRewriteOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionUrlRewriteOutputReference[_k] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionUrlRewriteOutputReference", version: "4.0.3" };
function computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform;
class ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    resetHeaderName() {
        this._headerName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    resetHeaderValue() {
        this._headerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    resetReplace() {
        this._replace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference[_l] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList;
_m = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList[_m] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList", version: "4.0.3" };
function computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform;
class ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    resetHeaderName() {
        this._headerName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    resetHeaderValue() {
        this._headerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    resetReplace() {
        this._replace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference[_o] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList;
_p = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList[_p] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList", version: "4.0.3" };
function computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requestHeadersToRemove),
        response_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.responseHeadersToRemove),
        request_headers_to_add: cdktf.listMapper(computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform, true)(struct.requestHeadersToAdd),
        response_headers_to_add: cdktf.listMapper(computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform, true)(struct.responseHeadersToAdd),
    };
}
exports.computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform = computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform;
class ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_headers_to_add - computed: false, optional: true, required: false
        this._requestHeadersToAdd = new ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList(this, "request_headers_to_add", false);
        // response_headers_to_add - computed: false, optional: true, required: false
        this._responseHeadersToAdd = new ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList(this, "response_headers_to_add", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToRemove = this._requestHeadersToRemove;
        }
        if (this._responseHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToRemove = this._responseHeadersToRemove;
        }
        if (this._requestHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToAdd = this._requestHeadersToAdd?.internalValue;
        }
        if (this._responseHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToAdd = this._responseHeadersToAdd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeadersToRemove = undefined;
            this._responseHeadersToRemove = undefined;
            this._requestHeadersToAdd.internalValue = undefined;
            this._responseHeadersToAdd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeadersToRemove = value.requestHeadersToRemove;
            this._responseHeadersToRemove = value.responseHeadersToRemove;
            this._requestHeadersToAdd.internalValue = value.requestHeadersToAdd;
            this._responseHeadersToAdd.internalValue = value.responseHeadersToAdd;
        }
    }
    get requestHeadersToRemove() {
        return this.getListAttribute('request_headers_to_remove');
    }
    set requestHeadersToRemove(value) {
        this._requestHeadersToRemove = value;
    }
    resetRequestHeadersToRemove() {
        this._requestHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToRemoveInput() {
        return this._requestHeadersToRemove;
    }
    get responseHeadersToRemove() {
        return this.getListAttribute('response_headers_to_remove');
    }
    set responseHeadersToRemove(value) {
        this._responseHeadersToRemove = value;
    }
    resetResponseHeadersToRemove() {
        this._responseHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToRemoveInput() {
        return this._responseHeadersToRemove;
    }
    get requestHeadersToAdd() {
        return this._requestHeadersToAdd;
    }
    putRequestHeadersToAdd(value) {
        this._requestHeadersToAdd.internalValue = value;
    }
    resetRequestHeadersToAdd() {
        this._requestHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToAddInput() {
        return this._requestHeadersToAdd.internalValue;
    }
    get responseHeadersToAdd() {
        return this._responseHeadersToAdd;
    }
    putResponseHeadersToAdd(value) {
        this._responseHeadersToAdd.internalValue = value;
    }
    resetResponseHeadersToAdd() {
        this._responseHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToAddInput() {
        return this._responseHeadersToAdd.internalValue;
    }
}
exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference = ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference[_q] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference", version: "4.0.3" };
function computeUrlMapDefaultRouteActionWeightedBackendServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
        weight: cdktf.numberToTerraform(struct.weight),
        header_action: computeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform(struct.headerAction),
    };
}
exports.computeUrlMapDefaultRouteActionWeightedBackendServicesToTerraform = computeUrlMapDefaultRouteActionWeightedBackendServicesToTerraform;
class ComputeUrlMapDefaultRouteActionWeightedBackendServicesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new ComputeUrlMapDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference(this, "header_action");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        if (this._headerAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerAction = this._headerAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._backendService = undefined;
            this._weight = undefined;
            this._headerAction.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._backendService = value.backendService;
            this._weight = value.weight;
            this._headerAction.internalValue = value.headerAction;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    resetBackendService() {
        this._backendService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    resetWeight() {
        this._weight = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
}
exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesOutputReference = ComputeUrlMapDefaultRouteActionWeightedBackendServicesOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionWeightedBackendServicesOutputReference[_r] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionWeightedBackendServicesOutputReference", version: "4.0.3" };
class ComputeUrlMapDefaultRouteActionWeightedBackendServicesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapDefaultRouteActionWeightedBackendServicesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapDefaultRouteActionWeightedBackendServicesList = ComputeUrlMapDefaultRouteActionWeightedBackendServicesList;
_s = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionWeightedBackendServicesList[_s] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionWeightedBackendServicesList", version: "4.0.3" };
function computeUrlMapDefaultRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cors_policy: computeUrlMapDefaultRouteActionCorsPolicyToTerraform(struct.corsPolicy),
        fault_injection_policy: computeUrlMapDefaultRouteActionFaultInjectionPolicyToTerraform(struct.faultInjectionPolicy),
        request_mirror_policy: computeUrlMapDefaultRouteActionRequestMirrorPolicyToTerraform(struct.requestMirrorPolicy),
        retry_policy: computeUrlMapDefaultRouteActionRetryPolicyToTerraform(struct.retryPolicy),
        timeout: computeUrlMapDefaultRouteActionTimeoutToTerraform(struct.timeout),
        url_rewrite: computeUrlMapDefaultRouteActionUrlRewriteToTerraform(struct.urlRewrite),
        weighted_backend_services: cdktf.listMapper(computeUrlMapDefaultRouteActionWeightedBackendServicesToTerraform, true)(struct.weightedBackendServices),
    };
}
exports.computeUrlMapDefaultRouteActionToTerraform = computeUrlMapDefaultRouteActionToTerraform;
class ComputeUrlMapDefaultRouteActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cors_policy - computed: false, optional: true, required: false
        this._corsPolicy = new ComputeUrlMapDefaultRouteActionCorsPolicyOutputReference(this, "cors_policy");
        // fault_injection_policy - computed: false, optional: true, required: false
        this._faultInjectionPolicy = new ComputeUrlMapDefaultRouteActionFaultInjectionPolicyOutputReference(this, "fault_injection_policy");
        // request_mirror_policy - computed: false, optional: true, required: false
        this._requestMirrorPolicy = new ComputeUrlMapDefaultRouteActionRequestMirrorPolicyOutputReference(this, "request_mirror_policy");
        // retry_policy - computed: false, optional: true, required: false
        this._retryPolicy = new ComputeUrlMapDefaultRouteActionRetryPolicyOutputReference(this, "retry_policy");
        // timeout - computed: false, optional: true, required: false
        this._timeout = new ComputeUrlMapDefaultRouteActionTimeoutOutputReference(this, "timeout");
        // url_rewrite - computed: false, optional: true, required: false
        this._urlRewrite = new ComputeUrlMapDefaultRouteActionUrlRewriteOutputReference(this, "url_rewrite");
        // weighted_backend_services - computed: false, optional: true, required: false
        this._weightedBackendServices = new ComputeUrlMapDefaultRouteActionWeightedBackendServicesList(this, "weighted_backend_services", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._corsPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.corsPolicy = this._corsPolicy?.internalValue;
        }
        if (this._faultInjectionPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.faultInjectionPolicy = this._faultInjectionPolicy?.internalValue;
        }
        if (this._requestMirrorPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestMirrorPolicy = this._requestMirrorPolicy?.internalValue;
        }
        if (this._retryPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryPolicy = this._retryPolicy?.internalValue;
        }
        if (this._timeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout?.internalValue;
        }
        if (this._urlRewrite?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRewrite = this._urlRewrite?.internalValue;
        }
        if (this._weightedBackendServices?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.weightedBackendServices = this._weightedBackendServices?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._corsPolicy.internalValue = undefined;
            this._faultInjectionPolicy.internalValue = undefined;
            this._requestMirrorPolicy.internalValue = undefined;
            this._retryPolicy.internalValue = undefined;
            this._timeout.internalValue = undefined;
            this._urlRewrite.internalValue = undefined;
            this._weightedBackendServices.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._corsPolicy.internalValue = value.corsPolicy;
            this._faultInjectionPolicy.internalValue = value.faultInjectionPolicy;
            this._requestMirrorPolicy.internalValue = value.requestMirrorPolicy;
            this._retryPolicy.internalValue = value.retryPolicy;
            this._timeout.internalValue = value.timeout;
            this._urlRewrite.internalValue = value.urlRewrite;
            this._weightedBackendServices.internalValue = value.weightedBackendServices;
        }
    }
    get corsPolicy() {
        return this._corsPolicy;
    }
    putCorsPolicy(value) {
        this._corsPolicy.internalValue = value;
    }
    resetCorsPolicy() {
        this._corsPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsPolicyInput() {
        return this._corsPolicy.internalValue;
    }
    get faultInjectionPolicy() {
        return this._faultInjectionPolicy;
    }
    putFaultInjectionPolicy(value) {
        this._faultInjectionPolicy.internalValue = value;
    }
    resetFaultInjectionPolicy() {
        this._faultInjectionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get faultInjectionPolicyInput() {
        return this._faultInjectionPolicy.internalValue;
    }
    get requestMirrorPolicy() {
        return this._requestMirrorPolicy;
    }
    putRequestMirrorPolicy(value) {
        this._requestMirrorPolicy.internalValue = value;
    }
    resetRequestMirrorPolicy() {
        this._requestMirrorPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestMirrorPolicyInput() {
        return this._requestMirrorPolicy.internalValue;
    }
    get retryPolicy() {
        return this._retryPolicy;
    }
    putRetryPolicy(value) {
        this._retryPolicy.internalValue = value;
    }
    resetRetryPolicy() {
        this._retryPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryPolicyInput() {
        return this._retryPolicy.internalValue;
    }
    get timeout() {
        return this._timeout;
    }
    putTimeout(value) {
        this._timeout.internalValue = value;
    }
    resetTimeout() {
        this._timeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout.internalValue;
    }
    get urlRewrite() {
        return this._urlRewrite;
    }
    putUrlRewrite(value) {
        this._urlRewrite.internalValue = value;
    }
    resetUrlRewrite() {
        this._urlRewrite.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRewriteInput() {
        return this._urlRewrite.internalValue;
    }
    get weightedBackendServices() {
        return this._weightedBackendServices;
    }
    putWeightedBackendServices(value) {
        this._weightedBackendServices.internalValue = value;
    }
    resetWeightedBackendServices() {
        this._weightedBackendServices.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightedBackendServicesInput() {
        return this._weightedBackendServices.internalValue;
    }
}
exports.ComputeUrlMapDefaultRouteActionOutputReference = ComputeUrlMapDefaultRouteActionOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultRouteActionOutputReference[_t] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultRouteActionOutputReference", version: "4.0.3" };
function computeUrlMapDefaultUrlRedirectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_redirect: cdktf.stringToTerraform(struct.hostRedirect),
        https_redirect: cdktf.booleanToTerraform(struct.httpsRedirect),
        path_redirect: cdktf.stringToTerraform(struct.pathRedirect),
        prefix_redirect: cdktf.stringToTerraform(struct.prefixRedirect),
        redirect_response_code: cdktf.stringToTerraform(struct.redirectResponseCode),
        strip_query: cdktf.booleanToTerraform(struct.stripQuery),
    };
}
exports.computeUrlMapDefaultUrlRedirectToTerraform = computeUrlMapDefaultUrlRedirectToTerraform;
class ComputeUrlMapDefaultUrlRedirectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRedirect = this._hostRedirect;
        }
        if (this._httpsRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsRedirect = this._httpsRedirect;
        }
        if (this._pathRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathRedirect = this._pathRedirect;
        }
        if (this._prefixRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixRedirect = this._prefixRedirect;
        }
        if (this._redirectResponseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectResponseCode = this._redirectResponseCode;
        }
        if (this._stripQuery !== undefined) {
            hasAnyValues = true;
            internalValueResult.stripQuery = this._stripQuery;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRedirect = undefined;
            this._httpsRedirect = undefined;
            this._pathRedirect = undefined;
            this._prefixRedirect = undefined;
            this._redirectResponseCode = undefined;
            this._stripQuery = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRedirect = value.hostRedirect;
            this._httpsRedirect = value.httpsRedirect;
            this._pathRedirect = value.pathRedirect;
            this._prefixRedirect = value.prefixRedirect;
            this._redirectResponseCode = value.redirectResponseCode;
            this._stripQuery = value.stripQuery;
        }
    }
    get hostRedirect() {
        return this.getStringAttribute('host_redirect');
    }
    set hostRedirect(value) {
        this._hostRedirect = value;
    }
    resetHostRedirect() {
        this._hostRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRedirectInput() {
        return this._hostRedirect;
    }
    get httpsRedirect() {
        return this.getBooleanAttribute('https_redirect');
    }
    set httpsRedirect(value) {
        this._httpsRedirect = value;
    }
    resetHttpsRedirect() {
        this._httpsRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsRedirectInput() {
        return this._httpsRedirect;
    }
    get pathRedirect() {
        return this.getStringAttribute('path_redirect');
    }
    set pathRedirect(value) {
        this._pathRedirect = value;
    }
    resetPathRedirect() {
        this._pathRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathRedirectInput() {
        return this._pathRedirect;
    }
    get prefixRedirect() {
        return this.getStringAttribute('prefix_redirect');
    }
    set prefixRedirect(value) {
        this._prefixRedirect = value;
    }
    resetPrefixRedirect() {
        this._prefixRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixRedirectInput() {
        return this._prefixRedirect;
    }
    get redirectResponseCode() {
        return this.getStringAttribute('redirect_response_code');
    }
    set redirectResponseCode(value) {
        this._redirectResponseCode = value;
    }
    resetRedirectResponseCode() {
        this._redirectResponseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectResponseCodeInput() {
        return this._redirectResponseCode;
    }
    get stripQuery() {
        return this.getBooleanAttribute('strip_query');
    }
    set stripQuery(value) {
        this._stripQuery = value;
    }
    // Temporarily expose input value. Use with caution.
    get stripQueryInput() {
        return this._stripQuery;
    }
}
exports.ComputeUrlMapDefaultUrlRedirectOutputReference = ComputeUrlMapDefaultUrlRedirectOutputReference;
_u = JSII_RTTI_SYMBOL_1;
ComputeUrlMapDefaultUrlRedirectOutputReference[_u] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapDefaultUrlRedirectOutputReference", version: "4.0.3" };
function computeUrlMapHeaderActionRequestHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapHeaderActionRequestHeadersToAddToTerraform = computeUrlMapHeaderActionRequestHeadersToAddToTerraform;
class ComputeUrlMapHeaderActionRequestHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapHeaderActionRequestHeadersToAddOutputReference = ComputeUrlMapHeaderActionRequestHeadersToAddOutputReference;
_v = JSII_RTTI_SYMBOL_1;
ComputeUrlMapHeaderActionRequestHeadersToAddOutputReference[_v] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapHeaderActionRequestHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapHeaderActionRequestHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapHeaderActionRequestHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapHeaderActionRequestHeadersToAddList = ComputeUrlMapHeaderActionRequestHeadersToAddList;
_w = JSII_RTTI_SYMBOL_1;
ComputeUrlMapHeaderActionRequestHeadersToAddList[_w] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapHeaderActionRequestHeadersToAddList", version: "4.0.3" };
function computeUrlMapHeaderActionResponseHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapHeaderActionResponseHeadersToAddToTerraform = computeUrlMapHeaderActionResponseHeadersToAddToTerraform;
class ComputeUrlMapHeaderActionResponseHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapHeaderActionResponseHeadersToAddOutputReference = ComputeUrlMapHeaderActionResponseHeadersToAddOutputReference;
_x = JSII_RTTI_SYMBOL_1;
ComputeUrlMapHeaderActionResponseHeadersToAddOutputReference[_x] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapHeaderActionResponseHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapHeaderActionResponseHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapHeaderActionResponseHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapHeaderActionResponseHeadersToAddList = ComputeUrlMapHeaderActionResponseHeadersToAddList;
_y = JSII_RTTI_SYMBOL_1;
ComputeUrlMapHeaderActionResponseHeadersToAddList[_y] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapHeaderActionResponseHeadersToAddList", version: "4.0.3" };
function computeUrlMapHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requestHeadersToRemove),
        response_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.responseHeadersToRemove),
        request_headers_to_add: cdktf.listMapper(computeUrlMapHeaderActionRequestHeadersToAddToTerraform, true)(struct.requestHeadersToAdd),
        response_headers_to_add: cdktf.listMapper(computeUrlMapHeaderActionResponseHeadersToAddToTerraform, true)(struct.responseHeadersToAdd),
    };
}
exports.computeUrlMapHeaderActionToTerraform = computeUrlMapHeaderActionToTerraform;
class ComputeUrlMapHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_headers_to_add - computed: false, optional: true, required: false
        this._requestHeadersToAdd = new ComputeUrlMapHeaderActionRequestHeadersToAddList(this, "request_headers_to_add", false);
        // response_headers_to_add - computed: false, optional: true, required: false
        this._responseHeadersToAdd = new ComputeUrlMapHeaderActionResponseHeadersToAddList(this, "response_headers_to_add", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToRemove = this._requestHeadersToRemove;
        }
        if (this._responseHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToRemove = this._responseHeadersToRemove;
        }
        if (this._requestHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToAdd = this._requestHeadersToAdd?.internalValue;
        }
        if (this._responseHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToAdd = this._responseHeadersToAdd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeadersToRemove = undefined;
            this._responseHeadersToRemove = undefined;
            this._requestHeadersToAdd.internalValue = undefined;
            this._responseHeadersToAdd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeadersToRemove = value.requestHeadersToRemove;
            this._responseHeadersToRemove = value.responseHeadersToRemove;
            this._requestHeadersToAdd.internalValue = value.requestHeadersToAdd;
            this._responseHeadersToAdd.internalValue = value.responseHeadersToAdd;
        }
    }
    get requestHeadersToRemove() {
        return this.getListAttribute('request_headers_to_remove');
    }
    set requestHeadersToRemove(value) {
        this._requestHeadersToRemove = value;
    }
    resetRequestHeadersToRemove() {
        this._requestHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToRemoveInput() {
        return this._requestHeadersToRemove;
    }
    get responseHeadersToRemove() {
        return this.getListAttribute('response_headers_to_remove');
    }
    set responseHeadersToRemove(value) {
        this._responseHeadersToRemove = value;
    }
    resetResponseHeadersToRemove() {
        this._responseHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToRemoveInput() {
        return this._responseHeadersToRemove;
    }
    get requestHeadersToAdd() {
        return this._requestHeadersToAdd;
    }
    putRequestHeadersToAdd(value) {
        this._requestHeadersToAdd.internalValue = value;
    }
    resetRequestHeadersToAdd() {
        this._requestHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToAddInput() {
        return this._requestHeadersToAdd.internalValue;
    }
    get responseHeadersToAdd() {
        return this._responseHeadersToAdd;
    }
    putResponseHeadersToAdd(value) {
        this._responseHeadersToAdd.internalValue = value;
    }
    resetResponseHeadersToAdd() {
        this._responseHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToAddInput() {
        return this._responseHeadersToAdd.internalValue;
    }
}
exports.ComputeUrlMapHeaderActionOutputReference = ComputeUrlMapHeaderActionOutputReference;
_z = JSII_RTTI_SYMBOL_1;
ComputeUrlMapHeaderActionOutputReference[_z] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapHeaderActionOutputReference", version: "4.0.3" };
function computeUrlMapHostRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        hosts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.hosts),
        path_matcher: cdktf.stringToTerraform(struct.pathMatcher),
    };
}
exports.computeUrlMapHostRuleToTerraform = computeUrlMapHostRuleToTerraform;
class ComputeUrlMapHostRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._hosts !== undefined) {
            hasAnyValues = true;
            internalValueResult.hosts = this._hosts;
        }
        if (this._pathMatcher !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathMatcher = this._pathMatcher;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._hosts = undefined;
            this._pathMatcher = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._hosts = value.hosts;
            this._pathMatcher = value.pathMatcher;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get hosts() {
        return cdktf.Fn.tolist(this.getListAttribute('hosts'));
    }
    set hosts(value) {
        this._hosts = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostsInput() {
        return this._hosts;
    }
    get pathMatcher() {
        return this.getStringAttribute('path_matcher');
    }
    set pathMatcher(value) {
        this._pathMatcher = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathMatcherInput() {
        return this._pathMatcher;
    }
}
exports.ComputeUrlMapHostRuleOutputReference = ComputeUrlMapHostRuleOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapHostRuleOutputReference[_0] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapHostRuleOutputReference", version: "4.0.3" };
class ComputeUrlMapHostRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapHostRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapHostRuleList = ComputeUrlMapHostRuleList;
_1 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapHostRuleList[_1] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapHostRuleList", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionCorsPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_credentials: cdktf.booleanToTerraform(struct.allowCredentials),
        allow_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowHeaders),
        allow_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowMethods),
        allow_origin_regexes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOriginRegexes),
        allow_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOrigins),
        disabled: cdktf.booleanToTerraform(struct.disabled),
        expose_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exposeHeaders),
        max_age: cdktf.numberToTerraform(struct.maxAge),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionCorsPolicyToTerraform = computeUrlMapPathMatcherDefaultRouteActionCorsPolicyToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionCorsPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowCredentials = this._allowCredentials;
        }
        if (this._allowHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowHeaders = this._allowHeaders;
        }
        if (this._allowMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowMethods = this._allowMethods;
        }
        if (this._allowOriginRegexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOriginRegexes = this._allowOriginRegexes;
        }
        if (this._allowOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOrigins = this._allowOrigins;
        }
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        if (this._exposeHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.exposeHeaders = this._exposeHeaders;
        }
        if (this._maxAge !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAge = this._maxAge;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowCredentials = undefined;
            this._allowHeaders = undefined;
            this._allowMethods = undefined;
            this._allowOriginRegexes = undefined;
            this._allowOrigins = undefined;
            this._disabled = undefined;
            this._exposeHeaders = undefined;
            this._maxAge = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowCredentials = value.allowCredentials;
            this._allowHeaders = value.allowHeaders;
            this._allowMethods = value.allowMethods;
            this._allowOriginRegexes = value.allowOriginRegexes;
            this._allowOrigins = value.allowOrigins;
            this._disabled = value.disabled;
            this._exposeHeaders = value.exposeHeaders;
            this._maxAge = value.maxAge;
        }
    }
    get allowCredentials() {
        return this.getBooleanAttribute('allow_credentials');
    }
    set allowCredentials(value) {
        this._allowCredentials = value;
    }
    resetAllowCredentials() {
        this._allowCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowCredentialsInput() {
        return this._allowCredentials;
    }
    get allowHeaders() {
        return this.getListAttribute('allow_headers');
    }
    set allowHeaders(value) {
        this._allowHeaders = value;
    }
    resetAllowHeaders() {
        this._allowHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowHeadersInput() {
        return this._allowHeaders;
    }
    get allowMethods() {
        return this.getListAttribute('allow_methods');
    }
    set allowMethods(value) {
        this._allowMethods = value;
    }
    resetAllowMethods() {
        this._allowMethods = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowMethodsInput() {
        return this._allowMethods;
    }
    get allowOriginRegexes() {
        return this.getListAttribute('allow_origin_regexes');
    }
    set allowOriginRegexes(value) {
        this._allowOriginRegexes = value;
    }
    resetAllowOriginRegexes() {
        this._allowOriginRegexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginRegexesInput() {
        return this._allowOriginRegexes;
    }
    get allowOrigins() {
        return this.getListAttribute('allow_origins');
    }
    set allowOrigins(value) {
        this._allowOrigins = value;
    }
    resetAllowOrigins() {
        this._allowOrigins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginsInput() {
        return this._allowOrigins;
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    resetDisabled() {
        this._disabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get exposeHeaders() {
        return this.getListAttribute('expose_headers');
    }
    set exposeHeaders(value) {
        this._exposeHeaders = value;
    }
    resetExposeHeaders() {
        this._exposeHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exposeHeadersInput() {
        return this._exposeHeaders;
    }
    get maxAge() {
        return this.getNumberAttribute('max_age');
    }
    set maxAge(value) {
        this._maxAge = value;
    }
    resetMaxAge() {
        this._maxAge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAgeInput() {
        return this._maxAge;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionCorsPolicyOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionCorsPolicyOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionCorsPolicyOutputReference[_2] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionCorsPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_status: cdktf.numberToTerraform(struct.httpStatus),
        percentage: cdktf.numberToTerraform(struct.percentage),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortToTerraform = computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpStatus = this._httpStatus;
        }
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpStatus = undefined;
            this._percentage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpStatus = value.httpStatus;
            this._percentage = value.percentage;
        }
    }
    get httpStatus() {
        return this.getNumberAttribute('http_status');
    }
    set httpStatus(value) {
        this._httpStatus = value;
    }
    resetHttpStatus() {
        this._httpStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpStatusInput() {
        return this._httpStatus;
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    resetPercentage() {
        this._percentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortOutputReference[_3] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference[_4] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        percentage: cdktf.numberToTerraform(struct.percentage),
        fixed_delay: computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct.fixedDelay),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayToTerraform = computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // fixed_delay - computed: false, optional: true, required: false
        this._fixedDelay = new ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference(this, "fixed_delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        if (this._fixedDelay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedDelay = this._fixedDelay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._percentage = undefined;
            this._fixedDelay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._percentage = value.percentage;
            this._fixedDelay.internalValue = value.fixedDelay;
        }
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    resetPercentage() {
        this._percentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
    get fixedDelay() {
        return this._fixedDelay;
    }
    putFixedDelay(value) {
        this._fixedDelay.internalValue = value;
    }
    resetFixedDelay() {
        this._fixedDelay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedDelayInput() {
        return this._fixedDelay.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayOutputReference[_5] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        abort: computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortToTerraform(struct.abort),
        delay: computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayToTerraform(struct.delay),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyToTerraform = computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // abort - computed: false, optional: true, required: false
        this._abort = new ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyAbortOutputReference(this, "abort");
        // delay - computed: false, optional: true, required: false
        this._delay = new ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyDelayOutputReference(this, "delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._abort?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.abort = this._abort?.internalValue;
        }
        if (this._delay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.delay = this._delay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._abort.internalValue = undefined;
            this._delay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._abort.internalValue = value.abort;
            this._delay.internalValue = value.delay;
        }
    }
    get abort() {
        return this._abort;
    }
    putAbort(value) {
        this._abort.internalValue = value;
    }
    resetAbort() {
        this._abort.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get abortInput() {
        return this._abort.internalValue;
    }
    get delay() {
        return this._delay;
    }
    putDelay(value) {
        this._delay.internalValue = value;
    }
    resetDelay() {
        this._delay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get delayInput() {
        return this._delay.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyOutputReference[_6] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyToTerraform = computeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backendService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backendService = value.backendService;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyOutputReference[_7] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform = computeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference[_8] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionRetryPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        retry_conditions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.retryConditions),
        per_try_timeout: computeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutToTerraform(struct.perTryTimeout),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionRetryPolicyToTerraform = computeUrlMapPathMatcherDefaultRouteActionRetryPolicyToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // per_try_timeout - computed: false, optional: true, required: false
        this._perTryTimeout = new ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutOutputReference(this, "per_try_timeout");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._retryConditions !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryConditions = this._retryConditions;
        }
        if (this._perTryTimeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.perTryTimeout = this._perTryTimeout?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._numRetries = undefined;
            this._retryConditions = undefined;
            this._perTryTimeout.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._numRetries = value.numRetries;
            this._retryConditions = value.retryConditions;
            this._perTryTimeout.internalValue = value.perTryTimeout;
        }
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get retryConditions() {
        return this.getListAttribute('retry_conditions');
    }
    set retryConditions(value) {
        this._retryConditions = value;
    }
    resetRetryConditions() {
        this._retryConditions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryConditionsInput() {
        return this._retryConditions;
    }
    get perTryTimeout() {
        return this._perTryTimeout;
    }
    putPerTryTimeout(value) {
        this._perTryTimeout.internalValue = value;
    }
    resetPerTryTimeout() {
        this._perTryTimeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perTryTimeoutInput() {
        return this._perTryTimeout.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyOutputReference[_9] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionTimeoutToTerraform = computeUrlMapPathMatcherDefaultRouteActionTimeoutToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionTimeoutOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionTimeoutOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionTimeoutOutputReference[_10] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionTimeoutOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionUrlRewriteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_rewrite: cdktf.stringToTerraform(struct.hostRewrite),
        path_prefix_rewrite: cdktf.stringToTerraform(struct.pathPrefixRewrite),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionUrlRewriteToTerraform = computeUrlMapPathMatcherDefaultRouteActionUrlRewriteToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionUrlRewriteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRewrite = this._hostRewrite;
        }
        if (this._pathPrefixRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathPrefixRewrite = this._pathPrefixRewrite;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRewrite = undefined;
            this._pathPrefixRewrite = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRewrite = value.hostRewrite;
            this._pathPrefixRewrite = value.pathPrefixRewrite;
        }
    }
    get hostRewrite() {
        return this.getStringAttribute('host_rewrite');
    }
    set hostRewrite(value) {
        this._hostRewrite = value;
    }
    resetHostRewrite() {
        this._hostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRewriteInput() {
        return this._hostRewrite;
    }
    get pathPrefixRewrite() {
        return this.getStringAttribute('path_prefix_rewrite');
    }
    set pathPrefixRewrite(value) {
        this._pathPrefixRewrite = value;
    }
    resetPathPrefixRewrite() {
        this._pathPrefixRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathPrefixRewriteInput() {
        return this._pathPrefixRewrite;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionUrlRewriteOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionUrlRewriteOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionUrlRewriteOutputReference[_11] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionUrlRewriteOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    resetHeaderName() {
        this._headerName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    resetHeaderValue() {
        this._headerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    resetReplace() {
        this._replace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference[_12] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList;
_13 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList[_13] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    resetHeaderName() {
        this._headerName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    resetHeaderValue() {
        this._headerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    resetReplace() {
        this._replace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference[_14] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList;
_15 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList[_15] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requestHeadersToRemove),
        response_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.responseHeadersToRemove),
        request_headers_to_add: cdktf.listMapper(computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform, true)(struct.requestHeadersToAdd),
        response_headers_to_add: cdktf.listMapper(computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform, true)(struct.responseHeadersToAdd),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform = computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_headers_to_add - computed: false, optional: true, required: false
        this._requestHeadersToAdd = new ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList(this, "request_headers_to_add", false);
        // response_headers_to_add - computed: false, optional: true, required: false
        this._responseHeadersToAdd = new ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList(this, "response_headers_to_add", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToRemove = this._requestHeadersToRemove;
        }
        if (this._responseHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToRemove = this._responseHeadersToRemove;
        }
        if (this._requestHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToAdd = this._requestHeadersToAdd?.internalValue;
        }
        if (this._responseHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToAdd = this._responseHeadersToAdd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeadersToRemove = undefined;
            this._responseHeadersToRemove = undefined;
            this._requestHeadersToAdd.internalValue = undefined;
            this._responseHeadersToAdd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeadersToRemove = value.requestHeadersToRemove;
            this._responseHeadersToRemove = value.responseHeadersToRemove;
            this._requestHeadersToAdd.internalValue = value.requestHeadersToAdd;
            this._responseHeadersToAdd.internalValue = value.responseHeadersToAdd;
        }
    }
    get requestHeadersToRemove() {
        return this.getListAttribute('request_headers_to_remove');
    }
    set requestHeadersToRemove(value) {
        this._requestHeadersToRemove = value;
    }
    resetRequestHeadersToRemove() {
        this._requestHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToRemoveInput() {
        return this._requestHeadersToRemove;
    }
    get responseHeadersToRemove() {
        return this.getListAttribute('response_headers_to_remove');
    }
    set responseHeadersToRemove(value) {
        this._responseHeadersToRemove = value;
    }
    resetResponseHeadersToRemove() {
        this._responseHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToRemoveInput() {
        return this._responseHeadersToRemove;
    }
    get requestHeadersToAdd() {
        return this._requestHeadersToAdd;
    }
    putRequestHeadersToAdd(value) {
        this._requestHeadersToAdd.internalValue = value;
    }
    resetRequestHeadersToAdd() {
        this._requestHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToAddInput() {
        return this._requestHeadersToAdd.internalValue;
    }
    get responseHeadersToAdd() {
        return this._responseHeadersToAdd;
    }
    putResponseHeadersToAdd(value) {
        this._responseHeadersToAdd.internalValue = value;
    }
    resetResponseHeadersToAdd() {
        this._responseHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToAddInput() {
        return this._responseHeadersToAdd.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference[_16] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
        weight: cdktf.numberToTerraform(struct.weight),
        header_action: computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionToTerraform(struct.headerAction),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesToTerraform = computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionOutputReference(this, "header_action");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        if (this._headerAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerAction = this._headerAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._backendService = undefined;
            this._weight = undefined;
            this._headerAction.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._backendService = value.backendService;
            this._weight = value.weight;
            this._headerAction.internalValue = value.headerAction;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    resetBackendService() {
        this._backendService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    resetWeight() {
        this._weight = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesOutputReference[_17] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesList = ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesList;
_18 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesList[_18] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesList", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cors_policy: computeUrlMapPathMatcherDefaultRouteActionCorsPolicyToTerraform(struct.corsPolicy),
        fault_injection_policy: computeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyToTerraform(struct.faultInjectionPolicy),
        request_mirror_policy: computeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyToTerraform(struct.requestMirrorPolicy),
        retry_policy: computeUrlMapPathMatcherDefaultRouteActionRetryPolicyToTerraform(struct.retryPolicy),
        timeout: computeUrlMapPathMatcherDefaultRouteActionTimeoutToTerraform(struct.timeout),
        url_rewrite: computeUrlMapPathMatcherDefaultRouteActionUrlRewriteToTerraform(struct.urlRewrite),
        weighted_backend_services: cdktf.listMapper(computeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesToTerraform, true)(struct.weightedBackendServices),
    };
}
exports.computeUrlMapPathMatcherDefaultRouteActionToTerraform = computeUrlMapPathMatcherDefaultRouteActionToTerraform;
class ComputeUrlMapPathMatcherDefaultRouteActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cors_policy - computed: false, optional: true, required: false
        this._corsPolicy = new ComputeUrlMapPathMatcherDefaultRouteActionCorsPolicyOutputReference(this, "cors_policy");
        // fault_injection_policy - computed: false, optional: true, required: false
        this._faultInjectionPolicy = new ComputeUrlMapPathMatcherDefaultRouteActionFaultInjectionPolicyOutputReference(this, "fault_injection_policy");
        // request_mirror_policy - computed: false, optional: true, required: false
        this._requestMirrorPolicy = new ComputeUrlMapPathMatcherDefaultRouteActionRequestMirrorPolicyOutputReference(this, "request_mirror_policy");
        // retry_policy - computed: false, optional: true, required: false
        this._retryPolicy = new ComputeUrlMapPathMatcherDefaultRouteActionRetryPolicyOutputReference(this, "retry_policy");
        // timeout - computed: false, optional: true, required: false
        this._timeout = new ComputeUrlMapPathMatcherDefaultRouteActionTimeoutOutputReference(this, "timeout");
        // url_rewrite - computed: false, optional: true, required: false
        this._urlRewrite = new ComputeUrlMapPathMatcherDefaultRouteActionUrlRewriteOutputReference(this, "url_rewrite");
        // weighted_backend_services - computed: false, optional: true, required: false
        this._weightedBackendServices = new ComputeUrlMapPathMatcherDefaultRouteActionWeightedBackendServicesList(this, "weighted_backend_services", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._corsPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.corsPolicy = this._corsPolicy?.internalValue;
        }
        if (this._faultInjectionPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.faultInjectionPolicy = this._faultInjectionPolicy?.internalValue;
        }
        if (this._requestMirrorPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestMirrorPolicy = this._requestMirrorPolicy?.internalValue;
        }
        if (this._retryPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryPolicy = this._retryPolicy?.internalValue;
        }
        if (this._timeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout?.internalValue;
        }
        if (this._urlRewrite?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRewrite = this._urlRewrite?.internalValue;
        }
        if (this._weightedBackendServices?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.weightedBackendServices = this._weightedBackendServices?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._corsPolicy.internalValue = undefined;
            this._faultInjectionPolicy.internalValue = undefined;
            this._requestMirrorPolicy.internalValue = undefined;
            this._retryPolicy.internalValue = undefined;
            this._timeout.internalValue = undefined;
            this._urlRewrite.internalValue = undefined;
            this._weightedBackendServices.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._corsPolicy.internalValue = value.corsPolicy;
            this._faultInjectionPolicy.internalValue = value.faultInjectionPolicy;
            this._requestMirrorPolicy.internalValue = value.requestMirrorPolicy;
            this._retryPolicy.internalValue = value.retryPolicy;
            this._timeout.internalValue = value.timeout;
            this._urlRewrite.internalValue = value.urlRewrite;
            this._weightedBackendServices.internalValue = value.weightedBackendServices;
        }
    }
    get corsPolicy() {
        return this._corsPolicy;
    }
    putCorsPolicy(value) {
        this._corsPolicy.internalValue = value;
    }
    resetCorsPolicy() {
        this._corsPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsPolicyInput() {
        return this._corsPolicy.internalValue;
    }
    get faultInjectionPolicy() {
        return this._faultInjectionPolicy;
    }
    putFaultInjectionPolicy(value) {
        this._faultInjectionPolicy.internalValue = value;
    }
    resetFaultInjectionPolicy() {
        this._faultInjectionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get faultInjectionPolicyInput() {
        return this._faultInjectionPolicy.internalValue;
    }
    get requestMirrorPolicy() {
        return this._requestMirrorPolicy;
    }
    putRequestMirrorPolicy(value) {
        this._requestMirrorPolicy.internalValue = value;
    }
    resetRequestMirrorPolicy() {
        this._requestMirrorPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestMirrorPolicyInput() {
        return this._requestMirrorPolicy.internalValue;
    }
    get retryPolicy() {
        return this._retryPolicy;
    }
    putRetryPolicy(value) {
        this._retryPolicy.internalValue = value;
    }
    resetRetryPolicy() {
        this._retryPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryPolicyInput() {
        return this._retryPolicy.internalValue;
    }
    get timeout() {
        return this._timeout;
    }
    putTimeout(value) {
        this._timeout.internalValue = value;
    }
    resetTimeout() {
        this._timeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout.internalValue;
    }
    get urlRewrite() {
        return this._urlRewrite;
    }
    putUrlRewrite(value) {
        this._urlRewrite.internalValue = value;
    }
    resetUrlRewrite() {
        this._urlRewrite.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRewriteInput() {
        return this._urlRewrite.internalValue;
    }
    get weightedBackendServices() {
        return this._weightedBackendServices;
    }
    putWeightedBackendServices(value) {
        this._weightedBackendServices.internalValue = value;
    }
    resetWeightedBackendServices() {
        this._weightedBackendServices.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightedBackendServicesInput() {
        return this._weightedBackendServices.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherDefaultRouteActionOutputReference = ComputeUrlMapPathMatcherDefaultRouteActionOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultRouteActionOutputReference[_19] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultRouteActionOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherDefaultUrlRedirectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_redirect: cdktf.stringToTerraform(struct.hostRedirect),
        https_redirect: cdktf.booleanToTerraform(struct.httpsRedirect),
        path_redirect: cdktf.stringToTerraform(struct.pathRedirect),
        prefix_redirect: cdktf.stringToTerraform(struct.prefixRedirect),
        redirect_response_code: cdktf.stringToTerraform(struct.redirectResponseCode),
        strip_query: cdktf.booleanToTerraform(struct.stripQuery),
    };
}
exports.computeUrlMapPathMatcherDefaultUrlRedirectToTerraform = computeUrlMapPathMatcherDefaultUrlRedirectToTerraform;
class ComputeUrlMapPathMatcherDefaultUrlRedirectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRedirect = this._hostRedirect;
        }
        if (this._httpsRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsRedirect = this._httpsRedirect;
        }
        if (this._pathRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathRedirect = this._pathRedirect;
        }
        if (this._prefixRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixRedirect = this._prefixRedirect;
        }
        if (this._redirectResponseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectResponseCode = this._redirectResponseCode;
        }
        if (this._stripQuery !== undefined) {
            hasAnyValues = true;
            internalValueResult.stripQuery = this._stripQuery;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRedirect = undefined;
            this._httpsRedirect = undefined;
            this._pathRedirect = undefined;
            this._prefixRedirect = undefined;
            this._redirectResponseCode = undefined;
            this._stripQuery = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRedirect = value.hostRedirect;
            this._httpsRedirect = value.httpsRedirect;
            this._pathRedirect = value.pathRedirect;
            this._prefixRedirect = value.prefixRedirect;
            this._redirectResponseCode = value.redirectResponseCode;
            this._stripQuery = value.stripQuery;
        }
    }
    get hostRedirect() {
        return this.getStringAttribute('host_redirect');
    }
    set hostRedirect(value) {
        this._hostRedirect = value;
    }
    resetHostRedirect() {
        this._hostRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRedirectInput() {
        return this._hostRedirect;
    }
    get httpsRedirect() {
        return this.getBooleanAttribute('https_redirect');
    }
    set httpsRedirect(value) {
        this._httpsRedirect = value;
    }
    resetHttpsRedirect() {
        this._httpsRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsRedirectInput() {
        return this._httpsRedirect;
    }
    get pathRedirect() {
        return this.getStringAttribute('path_redirect');
    }
    set pathRedirect(value) {
        this._pathRedirect = value;
    }
    resetPathRedirect() {
        this._pathRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathRedirectInput() {
        return this._pathRedirect;
    }
    get prefixRedirect() {
        return this.getStringAttribute('prefix_redirect');
    }
    set prefixRedirect(value) {
        this._prefixRedirect = value;
    }
    resetPrefixRedirect() {
        this._prefixRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixRedirectInput() {
        return this._prefixRedirect;
    }
    get redirectResponseCode() {
        return this.getStringAttribute('redirect_response_code');
    }
    set redirectResponseCode(value) {
        this._redirectResponseCode = value;
    }
    resetRedirectResponseCode() {
        this._redirectResponseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectResponseCodeInput() {
        return this._redirectResponseCode;
    }
    get stripQuery() {
        return this.getBooleanAttribute('strip_query');
    }
    set stripQuery(value) {
        this._stripQuery = value;
    }
    // Temporarily expose input value. Use with caution.
    get stripQueryInput() {
        return this._stripQuery;
    }
}
exports.ComputeUrlMapPathMatcherDefaultUrlRedirectOutputReference = ComputeUrlMapPathMatcherDefaultUrlRedirectOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherDefaultUrlRedirectOutputReference[_20] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherDefaultUrlRedirectOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherHeaderActionRequestHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapPathMatcherHeaderActionRequestHeadersToAddToTerraform = computeUrlMapPathMatcherHeaderActionRequestHeadersToAddToTerraform;
class ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddOutputReference = ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddOutputReference[_21] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddList = ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddList;
_22 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddList[_22] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddList", version: "4.0.3" };
function computeUrlMapPathMatcherHeaderActionResponseHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapPathMatcherHeaderActionResponseHeadersToAddToTerraform = computeUrlMapPathMatcherHeaderActionResponseHeadersToAddToTerraform;
class ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddOutputReference = ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddOutputReference[_23] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddList = ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddList;
_24 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddList[_24] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddList", version: "4.0.3" };
function computeUrlMapPathMatcherHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requestHeadersToRemove),
        response_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.responseHeadersToRemove),
        request_headers_to_add: cdktf.listMapper(computeUrlMapPathMatcherHeaderActionRequestHeadersToAddToTerraform, true)(struct.requestHeadersToAdd),
        response_headers_to_add: cdktf.listMapper(computeUrlMapPathMatcherHeaderActionResponseHeadersToAddToTerraform, true)(struct.responseHeadersToAdd),
    };
}
exports.computeUrlMapPathMatcherHeaderActionToTerraform = computeUrlMapPathMatcherHeaderActionToTerraform;
class ComputeUrlMapPathMatcherHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_headers_to_add - computed: false, optional: true, required: false
        this._requestHeadersToAdd = new ComputeUrlMapPathMatcherHeaderActionRequestHeadersToAddList(this, "request_headers_to_add", false);
        // response_headers_to_add - computed: false, optional: true, required: false
        this._responseHeadersToAdd = new ComputeUrlMapPathMatcherHeaderActionResponseHeadersToAddList(this, "response_headers_to_add", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToRemove = this._requestHeadersToRemove;
        }
        if (this._responseHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToRemove = this._responseHeadersToRemove;
        }
        if (this._requestHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToAdd = this._requestHeadersToAdd?.internalValue;
        }
        if (this._responseHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToAdd = this._responseHeadersToAdd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeadersToRemove = undefined;
            this._responseHeadersToRemove = undefined;
            this._requestHeadersToAdd.internalValue = undefined;
            this._responseHeadersToAdd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeadersToRemove = value.requestHeadersToRemove;
            this._responseHeadersToRemove = value.responseHeadersToRemove;
            this._requestHeadersToAdd.internalValue = value.requestHeadersToAdd;
            this._responseHeadersToAdd.internalValue = value.responseHeadersToAdd;
        }
    }
    get requestHeadersToRemove() {
        return this.getListAttribute('request_headers_to_remove');
    }
    set requestHeadersToRemove(value) {
        this._requestHeadersToRemove = value;
    }
    resetRequestHeadersToRemove() {
        this._requestHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToRemoveInput() {
        return this._requestHeadersToRemove;
    }
    get responseHeadersToRemove() {
        return this.getListAttribute('response_headers_to_remove');
    }
    set responseHeadersToRemove(value) {
        this._responseHeadersToRemove = value;
    }
    resetResponseHeadersToRemove() {
        this._responseHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToRemoveInput() {
        return this._responseHeadersToRemove;
    }
    get requestHeadersToAdd() {
        return this._requestHeadersToAdd;
    }
    putRequestHeadersToAdd(value) {
        this._requestHeadersToAdd.internalValue = value;
    }
    resetRequestHeadersToAdd() {
        this._requestHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToAddInput() {
        return this._requestHeadersToAdd.internalValue;
    }
    get responseHeadersToAdd() {
        return this._responseHeadersToAdd;
    }
    putResponseHeadersToAdd(value) {
        this._responseHeadersToAdd.internalValue = value;
    }
    resetResponseHeadersToAdd() {
        this._responseHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToAddInput() {
        return this._responseHeadersToAdd.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherHeaderActionOutputReference = ComputeUrlMapPathMatcherHeaderActionOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherHeaderActionOutputReference[_25] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherHeaderActionOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionCorsPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_credentials: cdktf.booleanToTerraform(struct.allowCredentials),
        allow_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowHeaders),
        allow_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowMethods),
        allow_origin_regexes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOriginRegexes),
        allow_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOrigins),
        disabled: cdktf.booleanToTerraform(struct.disabled),
        expose_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exposeHeaders),
        max_age: cdktf.numberToTerraform(struct.maxAge),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionCorsPolicyToTerraform = computeUrlMapPathMatcherPathRuleRouteActionCorsPolicyToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowCredentials = this._allowCredentials;
        }
        if (this._allowHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowHeaders = this._allowHeaders;
        }
        if (this._allowMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowMethods = this._allowMethods;
        }
        if (this._allowOriginRegexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOriginRegexes = this._allowOriginRegexes;
        }
        if (this._allowOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOrigins = this._allowOrigins;
        }
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        if (this._exposeHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.exposeHeaders = this._exposeHeaders;
        }
        if (this._maxAge !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAge = this._maxAge;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowCredentials = undefined;
            this._allowHeaders = undefined;
            this._allowMethods = undefined;
            this._allowOriginRegexes = undefined;
            this._allowOrigins = undefined;
            this._disabled = undefined;
            this._exposeHeaders = undefined;
            this._maxAge = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowCredentials = value.allowCredentials;
            this._allowHeaders = value.allowHeaders;
            this._allowMethods = value.allowMethods;
            this._allowOriginRegexes = value.allowOriginRegexes;
            this._allowOrigins = value.allowOrigins;
            this._disabled = value.disabled;
            this._exposeHeaders = value.exposeHeaders;
            this._maxAge = value.maxAge;
        }
    }
    get allowCredentials() {
        return this.getBooleanAttribute('allow_credentials');
    }
    set allowCredentials(value) {
        this._allowCredentials = value;
    }
    resetAllowCredentials() {
        this._allowCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowCredentialsInput() {
        return this._allowCredentials;
    }
    get allowHeaders() {
        return this.getListAttribute('allow_headers');
    }
    set allowHeaders(value) {
        this._allowHeaders = value;
    }
    resetAllowHeaders() {
        this._allowHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowHeadersInput() {
        return this._allowHeaders;
    }
    get allowMethods() {
        return this.getListAttribute('allow_methods');
    }
    set allowMethods(value) {
        this._allowMethods = value;
    }
    resetAllowMethods() {
        this._allowMethods = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowMethodsInput() {
        return this._allowMethods;
    }
    get allowOriginRegexes() {
        return this.getListAttribute('allow_origin_regexes');
    }
    set allowOriginRegexes(value) {
        this._allowOriginRegexes = value;
    }
    resetAllowOriginRegexes() {
        this._allowOriginRegexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginRegexesInput() {
        return this._allowOriginRegexes;
    }
    get allowOrigins() {
        return this.getListAttribute('allow_origins');
    }
    set allowOrigins(value) {
        this._allowOrigins = value;
    }
    resetAllowOrigins() {
        this._allowOrigins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginsInput() {
        return this._allowOrigins;
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get exposeHeaders() {
        return this.getListAttribute('expose_headers');
    }
    set exposeHeaders(value) {
        this._exposeHeaders = value;
    }
    resetExposeHeaders() {
        this._exposeHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exposeHeadersInput() {
        return this._exposeHeaders;
    }
    get maxAge() {
        return this.getNumberAttribute('max_age');
    }
    set maxAge(value) {
        this._maxAge = value;
    }
    resetMaxAge() {
        this._maxAge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAgeInput() {
        return this._maxAge;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference[_26] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_status: cdktf.numberToTerraform(struct.httpStatus),
        percentage: cdktf.numberToTerraform(struct.percentage),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortToTerraform = computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpStatus = this._httpStatus;
        }
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpStatus = undefined;
            this._percentage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpStatus = value.httpStatus;
            this._percentage = value.percentage;
        }
    }
    get httpStatus() {
        return this.getNumberAttribute('http_status');
    }
    set httpStatus(value) {
        this._httpStatus = value;
    }
    // Temporarily expose input value. Use with caution.
    get httpStatusInput() {
        return this._httpStatus;
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference[_27] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference[_28] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        percentage: cdktf.numberToTerraform(struct.percentage),
        fixed_delay: computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct.fixedDelay),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayToTerraform = computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // fixed_delay - computed: false, optional: false, required: true
        this._fixedDelay = new ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference(this, "fixed_delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        if (this._fixedDelay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedDelay = this._fixedDelay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._percentage = undefined;
            this._fixedDelay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._percentage = value.percentage;
            this._fixedDelay.internalValue = value.fixedDelay;
        }
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
    get fixedDelay() {
        return this._fixedDelay;
    }
    putFixedDelay(value) {
        this._fixedDelay.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get fixedDelayInput() {
        return this._fixedDelay.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference[_29] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        abort: computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortToTerraform(struct.abort),
        delay: computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayToTerraform(struct.delay),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyToTerraform = computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // abort - computed: false, optional: true, required: false
        this._abort = new ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortOutputReference(this, "abort");
        // delay - computed: false, optional: true, required: false
        this._delay = new ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayOutputReference(this, "delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._abort?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.abort = this._abort?.internalValue;
        }
        if (this._delay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.delay = this._delay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._abort.internalValue = undefined;
            this._delay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._abort.internalValue = value.abort;
            this._delay.internalValue = value.delay;
        }
    }
    get abort() {
        return this._abort;
    }
    putAbort(value) {
        this._abort.internalValue = value;
    }
    resetAbort() {
        this._abort.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get abortInput() {
        return this._abort.internalValue;
    }
    get delay() {
        return this._delay;
    }
    putDelay(value) {
        this._delay.internalValue = value;
    }
    resetDelay() {
        this._delay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get delayInput() {
        return this._delay.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference[_30] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyToTerraform = computeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backendService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backendService = value.backendService;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference[_31] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutToTerraform = computeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference[_32] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionRetryPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        retry_conditions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.retryConditions),
        per_try_timeout: computeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutToTerraform(struct.perTryTimeout),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionRetryPolicyToTerraform = computeUrlMapPathMatcherPathRuleRouteActionRetryPolicyToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // per_try_timeout - computed: false, optional: true, required: false
        this._perTryTimeout = new ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutOutputReference(this, "per_try_timeout");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._retryConditions !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryConditions = this._retryConditions;
        }
        if (this._perTryTimeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.perTryTimeout = this._perTryTimeout?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._numRetries = undefined;
            this._retryConditions = undefined;
            this._perTryTimeout.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._numRetries = value.numRetries;
            this._retryConditions = value.retryConditions;
            this._perTryTimeout.internalValue = value.perTryTimeout;
        }
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    resetNumRetries() {
        this._numRetries = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get retryConditions() {
        return this.getListAttribute('retry_conditions');
    }
    set retryConditions(value) {
        this._retryConditions = value;
    }
    resetRetryConditions() {
        this._retryConditions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryConditionsInput() {
        return this._retryConditions;
    }
    get perTryTimeout() {
        return this._perTryTimeout;
    }
    putPerTryTimeout(value) {
        this._perTryTimeout.internalValue = value;
    }
    resetPerTryTimeout() {
        this._perTryTimeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perTryTimeoutInput() {
        return this._perTryTimeout.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference[_33] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionTimeoutToTerraform = computeUrlMapPathMatcherPathRuleRouteActionTimeoutToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference[_34] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionUrlRewriteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_rewrite: cdktf.stringToTerraform(struct.hostRewrite),
        path_prefix_rewrite: cdktf.stringToTerraform(struct.pathPrefixRewrite),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionUrlRewriteToTerraform = computeUrlMapPathMatcherPathRuleRouteActionUrlRewriteToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRewrite = this._hostRewrite;
        }
        if (this._pathPrefixRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathPrefixRewrite = this._pathPrefixRewrite;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRewrite = undefined;
            this._pathPrefixRewrite = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRewrite = value.hostRewrite;
            this._pathPrefixRewrite = value.pathPrefixRewrite;
        }
    }
    get hostRewrite() {
        return this.getStringAttribute('host_rewrite');
    }
    set hostRewrite(value) {
        this._hostRewrite = value;
    }
    resetHostRewrite() {
        this._hostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRewriteInput() {
        return this._hostRewrite;
    }
    get pathPrefixRewrite() {
        return this.getStringAttribute('path_prefix_rewrite');
    }
    set pathPrefixRewrite(value) {
        this._pathPrefixRewrite = value;
    }
    resetPathPrefixRewrite() {
        this._pathPrefixRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathPrefixRewriteInput() {
        return this._pathPrefixRewrite;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference[_35] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference[_36] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList;
_37 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList[_37] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference[_38] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList;
_39 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList[_39] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requestHeadersToRemove),
        response_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.responseHeadersToRemove),
        request_headers_to_add: cdktf.listMapper(computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform, true)(struct.requestHeadersToAdd),
        response_headers_to_add: cdktf.listMapper(computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform, true)(struct.responseHeadersToAdd),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionToTerraform = computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_headers_to_add - computed: false, optional: true, required: false
        this._requestHeadersToAdd = new ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList(this, "request_headers_to_add", false);
        // response_headers_to_add - computed: false, optional: true, required: false
        this._responseHeadersToAdd = new ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList(this, "response_headers_to_add", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToRemove = this._requestHeadersToRemove;
        }
        if (this._responseHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToRemove = this._responseHeadersToRemove;
        }
        if (this._requestHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToAdd = this._requestHeadersToAdd?.internalValue;
        }
        if (this._responseHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToAdd = this._responseHeadersToAdd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeadersToRemove = undefined;
            this._responseHeadersToRemove = undefined;
            this._requestHeadersToAdd.internalValue = undefined;
            this._responseHeadersToAdd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeadersToRemove = value.requestHeadersToRemove;
            this._responseHeadersToRemove = value.responseHeadersToRemove;
            this._requestHeadersToAdd.internalValue = value.requestHeadersToAdd;
            this._responseHeadersToAdd.internalValue = value.responseHeadersToAdd;
        }
    }
    get requestHeadersToRemove() {
        return this.getListAttribute('request_headers_to_remove');
    }
    set requestHeadersToRemove(value) {
        this._requestHeadersToRemove = value;
    }
    resetRequestHeadersToRemove() {
        this._requestHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToRemoveInput() {
        return this._requestHeadersToRemove;
    }
    get responseHeadersToRemove() {
        return this.getListAttribute('response_headers_to_remove');
    }
    set responseHeadersToRemove(value) {
        this._responseHeadersToRemove = value;
    }
    resetResponseHeadersToRemove() {
        this._responseHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToRemoveInput() {
        return this._responseHeadersToRemove;
    }
    get requestHeadersToAdd() {
        return this._requestHeadersToAdd;
    }
    putRequestHeadersToAdd(value) {
        this._requestHeadersToAdd.internalValue = value;
    }
    resetRequestHeadersToAdd() {
        this._requestHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToAddInput() {
        return this._requestHeadersToAdd.internalValue;
    }
    get responseHeadersToAdd() {
        return this._responseHeadersToAdd;
    }
    putResponseHeadersToAdd(value) {
        this._responseHeadersToAdd.internalValue = value;
    }
    resetResponseHeadersToAdd() {
        this._responseHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToAddInput() {
        return this._responseHeadersToAdd.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference[_40] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
        weight: cdktf.numberToTerraform(struct.weight),
        header_action: computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionToTerraform(struct.headerAction),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesToTerraform = computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionOutputReference(this, "header_action");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        if (this._headerAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerAction = this._headerAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._backendService = undefined;
            this._weight = undefined;
            this._headerAction.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._backendService = value.backendService;
            this._weight = value.weight;
            this._headerAction.internalValue = value.headerAction;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference[_41] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList = ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList;
_42 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList[_42] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cors_policy: computeUrlMapPathMatcherPathRuleRouteActionCorsPolicyToTerraform(struct.corsPolicy),
        fault_injection_policy: computeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyToTerraform(struct.faultInjectionPolicy),
        request_mirror_policy: computeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyToTerraform(struct.requestMirrorPolicy),
        retry_policy: computeUrlMapPathMatcherPathRuleRouteActionRetryPolicyToTerraform(struct.retryPolicy),
        timeout: computeUrlMapPathMatcherPathRuleRouteActionTimeoutToTerraform(struct.timeout),
        url_rewrite: computeUrlMapPathMatcherPathRuleRouteActionUrlRewriteToTerraform(struct.urlRewrite),
        weighted_backend_services: cdktf.listMapper(computeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesToTerraform, true)(struct.weightedBackendServices),
    };
}
exports.computeUrlMapPathMatcherPathRuleRouteActionToTerraform = computeUrlMapPathMatcherPathRuleRouteActionToTerraform;
class ComputeUrlMapPathMatcherPathRuleRouteActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cors_policy - computed: false, optional: true, required: false
        this._corsPolicy = new ComputeUrlMapPathMatcherPathRuleRouteActionCorsPolicyOutputReference(this, "cors_policy");
        // fault_injection_policy - computed: false, optional: true, required: false
        this._faultInjectionPolicy = new ComputeUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyOutputReference(this, "fault_injection_policy");
        // request_mirror_policy - computed: false, optional: true, required: false
        this._requestMirrorPolicy = new ComputeUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyOutputReference(this, "request_mirror_policy");
        // retry_policy - computed: false, optional: true, required: false
        this._retryPolicy = new ComputeUrlMapPathMatcherPathRuleRouteActionRetryPolicyOutputReference(this, "retry_policy");
        // timeout - computed: false, optional: true, required: false
        this._timeout = new ComputeUrlMapPathMatcherPathRuleRouteActionTimeoutOutputReference(this, "timeout");
        // url_rewrite - computed: false, optional: true, required: false
        this._urlRewrite = new ComputeUrlMapPathMatcherPathRuleRouteActionUrlRewriteOutputReference(this, "url_rewrite");
        // weighted_backend_services - computed: false, optional: true, required: false
        this._weightedBackendServices = new ComputeUrlMapPathMatcherPathRuleRouteActionWeightedBackendServicesList(this, "weighted_backend_services", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._corsPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.corsPolicy = this._corsPolicy?.internalValue;
        }
        if (this._faultInjectionPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.faultInjectionPolicy = this._faultInjectionPolicy?.internalValue;
        }
        if (this._requestMirrorPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestMirrorPolicy = this._requestMirrorPolicy?.internalValue;
        }
        if (this._retryPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryPolicy = this._retryPolicy?.internalValue;
        }
        if (this._timeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout?.internalValue;
        }
        if (this._urlRewrite?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRewrite = this._urlRewrite?.internalValue;
        }
        if (this._weightedBackendServices?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.weightedBackendServices = this._weightedBackendServices?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._corsPolicy.internalValue = undefined;
            this._faultInjectionPolicy.internalValue = undefined;
            this._requestMirrorPolicy.internalValue = undefined;
            this._retryPolicy.internalValue = undefined;
            this._timeout.internalValue = undefined;
            this._urlRewrite.internalValue = undefined;
            this._weightedBackendServices.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._corsPolicy.internalValue = value.corsPolicy;
            this._faultInjectionPolicy.internalValue = value.faultInjectionPolicy;
            this._requestMirrorPolicy.internalValue = value.requestMirrorPolicy;
            this._retryPolicy.internalValue = value.retryPolicy;
            this._timeout.internalValue = value.timeout;
            this._urlRewrite.internalValue = value.urlRewrite;
            this._weightedBackendServices.internalValue = value.weightedBackendServices;
        }
    }
    get corsPolicy() {
        return this._corsPolicy;
    }
    putCorsPolicy(value) {
        this._corsPolicy.internalValue = value;
    }
    resetCorsPolicy() {
        this._corsPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsPolicyInput() {
        return this._corsPolicy.internalValue;
    }
    get faultInjectionPolicy() {
        return this._faultInjectionPolicy;
    }
    putFaultInjectionPolicy(value) {
        this._faultInjectionPolicy.internalValue = value;
    }
    resetFaultInjectionPolicy() {
        this._faultInjectionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get faultInjectionPolicyInput() {
        return this._faultInjectionPolicy.internalValue;
    }
    get requestMirrorPolicy() {
        return this._requestMirrorPolicy;
    }
    putRequestMirrorPolicy(value) {
        this._requestMirrorPolicy.internalValue = value;
    }
    resetRequestMirrorPolicy() {
        this._requestMirrorPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestMirrorPolicyInput() {
        return this._requestMirrorPolicy.internalValue;
    }
    get retryPolicy() {
        return this._retryPolicy;
    }
    putRetryPolicy(value) {
        this._retryPolicy.internalValue = value;
    }
    resetRetryPolicy() {
        this._retryPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryPolicyInput() {
        return this._retryPolicy.internalValue;
    }
    get timeout() {
        return this._timeout;
    }
    putTimeout(value) {
        this._timeout.internalValue = value;
    }
    resetTimeout() {
        this._timeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout.internalValue;
    }
    get urlRewrite() {
        return this._urlRewrite;
    }
    putUrlRewrite(value) {
        this._urlRewrite.internalValue = value;
    }
    resetUrlRewrite() {
        this._urlRewrite.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRewriteInput() {
        return this._urlRewrite.internalValue;
    }
    get weightedBackendServices() {
        return this._weightedBackendServices;
    }
    putWeightedBackendServices(value) {
        this._weightedBackendServices.internalValue = value;
    }
    resetWeightedBackendServices() {
        this._weightedBackendServices.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightedBackendServicesInput() {
        return this._weightedBackendServices.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleRouteActionOutputReference = ComputeUrlMapPathMatcherPathRuleRouteActionOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleRouteActionOutputReference[_43] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleRouteActionOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleUrlRedirectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_redirect: cdktf.stringToTerraform(struct.hostRedirect),
        https_redirect: cdktf.booleanToTerraform(struct.httpsRedirect),
        path_redirect: cdktf.stringToTerraform(struct.pathRedirect),
        prefix_redirect: cdktf.stringToTerraform(struct.prefixRedirect),
        redirect_response_code: cdktf.stringToTerraform(struct.redirectResponseCode),
        strip_query: cdktf.booleanToTerraform(struct.stripQuery),
    };
}
exports.computeUrlMapPathMatcherPathRuleUrlRedirectToTerraform = computeUrlMapPathMatcherPathRuleUrlRedirectToTerraform;
class ComputeUrlMapPathMatcherPathRuleUrlRedirectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRedirect = this._hostRedirect;
        }
        if (this._httpsRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsRedirect = this._httpsRedirect;
        }
        if (this._pathRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathRedirect = this._pathRedirect;
        }
        if (this._prefixRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixRedirect = this._prefixRedirect;
        }
        if (this._redirectResponseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectResponseCode = this._redirectResponseCode;
        }
        if (this._stripQuery !== undefined) {
            hasAnyValues = true;
            internalValueResult.stripQuery = this._stripQuery;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRedirect = undefined;
            this._httpsRedirect = undefined;
            this._pathRedirect = undefined;
            this._prefixRedirect = undefined;
            this._redirectResponseCode = undefined;
            this._stripQuery = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRedirect = value.hostRedirect;
            this._httpsRedirect = value.httpsRedirect;
            this._pathRedirect = value.pathRedirect;
            this._prefixRedirect = value.prefixRedirect;
            this._redirectResponseCode = value.redirectResponseCode;
            this._stripQuery = value.stripQuery;
        }
    }
    get hostRedirect() {
        return this.getStringAttribute('host_redirect');
    }
    set hostRedirect(value) {
        this._hostRedirect = value;
    }
    resetHostRedirect() {
        this._hostRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRedirectInput() {
        return this._hostRedirect;
    }
    get httpsRedirect() {
        return this.getBooleanAttribute('https_redirect');
    }
    set httpsRedirect(value) {
        this._httpsRedirect = value;
    }
    resetHttpsRedirect() {
        this._httpsRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsRedirectInput() {
        return this._httpsRedirect;
    }
    get pathRedirect() {
        return this.getStringAttribute('path_redirect');
    }
    set pathRedirect(value) {
        this._pathRedirect = value;
    }
    resetPathRedirect() {
        this._pathRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathRedirectInput() {
        return this._pathRedirect;
    }
    get prefixRedirect() {
        return this.getStringAttribute('prefix_redirect');
    }
    set prefixRedirect(value) {
        this._prefixRedirect = value;
    }
    resetPrefixRedirect() {
        this._prefixRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixRedirectInput() {
        return this._prefixRedirect;
    }
    get redirectResponseCode() {
        return this.getStringAttribute('redirect_response_code');
    }
    set redirectResponseCode(value) {
        this._redirectResponseCode = value;
    }
    resetRedirectResponseCode() {
        this._redirectResponseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectResponseCodeInput() {
        return this._redirectResponseCode;
    }
    get stripQuery() {
        return this.getBooleanAttribute('strip_query');
    }
    set stripQuery(value) {
        this._stripQuery = value;
    }
    // Temporarily expose input value. Use with caution.
    get stripQueryInput() {
        return this._stripQuery;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleUrlRedirectOutputReference = ComputeUrlMapPathMatcherPathRuleUrlRedirectOutputReference;
_44 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleUrlRedirectOutputReference[_44] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleUrlRedirectOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherPathRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        paths: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.paths),
        service: cdktf.stringToTerraform(struct.service),
        route_action: computeUrlMapPathMatcherPathRuleRouteActionToTerraform(struct.routeAction),
        url_redirect: computeUrlMapPathMatcherPathRuleUrlRedirectToTerraform(struct.urlRedirect),
    };
}
exports.computeUrlMapPathMatcherPathRuleToTerraform = computeUrlMapPathMatcherPathRuleToTerraform;
class ComputeUrlMapPathMatcherPathRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // route_action - computed: false, optional: true, required: false
        this._routeAction = new ComputeUrlMapPathMatcherPathRuleRouteActionOutputReference(this, "route_action");
        // url_redirect - computed: false, optional: true, required: false
        this._urlRedirect = new ComputeUrlMapPathMatcherPathRuleUrlRedirectOutputReference(this, "url_redirect");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._paths !== undefined) {
            hasAnyValues = true;
            internalValueResult.paths = this._paths;
        }
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        if (this._routeAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.routeAction = this._routeAction?.internalValue;
        }
        if (this._urlRedirect?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRedirect = this._urlRedirect?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._paths = undefined;
            this._service = undefined;
            this._routeAction.internalValue = undefined;
            this._urlRedirect.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._paths = value.paths;
            this._service = value.service;
            this._routeAction.internalValue = value.routeAction;
            this._urlRedirect.internalValue = value.urlRedirect;
        }
    }
    get paths() {
        return cdktf.Fn.tolist(this.getListAttribute('paths'));
    }
    set paths(value) {
        this._paths = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathsInput() {
        return this._paths;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    resetService() {
        this._service = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
    get routeAction() {
        return this._routeAction;
    }
    putRouteAction(value) {
        this._routeAction.internalValue = value;
    }
    resetRouteAction() {
        this._routeAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeActionInput() {
        return this._routeAction.internalValue;
    }
    get urlRedirect() {
        return this._urlRedirect;
    }
    putUrlRedirect(value) {
        this._urlRedirect.internalValue = value;
    }
    resetUrlRedirect() {
        this._urlRedirect.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRedirectInput() {
        return this._urlRedirect.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherPathRuleOutputReference = ComputeUrlMapPathMatcherPathRuleOutputReference;
_45 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleOutputReference[_45] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherPathRuleList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherPathRuleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherPathRuleList = ComputeUrlMapPathMatcherPathRuleList;
_46 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherPathRuleList[_46] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherPathRuleList", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddToTerraform = computeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddToTerraform;
class ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference = ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference;
_47 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference[_47] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList = ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList;
_48 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList[_48] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddToTerraform = computeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddToTerraform;
class ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference = ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference;
_49 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference[_49] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList = ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList;
_50 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList[_50] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requestHeadersToRemove),
        response_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.responseHeadersToRemove),
        request_headers_to_add: cdktf.listMapper(computeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddToTerraform, true)(struct.requestHeadersToAdd),
        response_headers_to_add: cdktf.listMapper(computeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddToTerraform, true)(struct.responseHeadersToAdd),
    };
}
exports.computeUrlMapPathMatcherRouteRulesHeaderActionToTerraform = computeUrlMapPathMatcherRouteRulesHeaderActionToTerraform;
class ComputeUrlMapPathMatcherRouteRulesHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_headers_to_add - computed: false, optional: true, required: false
        this._requestHeadersToAdd = new ComputeUrlMapPathMatcherRouteRulesHeaderActionRequestHeadersToAddList(this, "request_headers_to_add", false);
        // response_headers_to_add - computed: false, optional: true, required: false
        this._responseHeadersToAdd = new ComputeUrlMapPathMatcherRouteRulesHeaderActionResponseHeadersToAddList(this, "response_headers_to_add", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToRemove = this._requestHeadersToRemove;
        }
        if (this._responseHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToRemove = this._responseHeadersToRemove;
        }
        if (this._requestHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToAdd = this._requestHeadersToAdd?.internalValue;
        }
        if (this._responseHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToAdd = this._responseHeadersToAdd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeadersToRemove = undefined;
            this._responseHeadersToRemove = undefined;
            this._requestHeadersToAdd.internalValue = undefined;
            this._responseHeadersToAdd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeadersToRemove = value.requestHeadersToRemove;
            this._responseHeadersToRemove = value.responseHeadersToRemove;
            this._requestHeadersToAdd.internalValue = value.requestHeadersToAdd;
            this._responseHeadersToAdd.internalValue = value.responseHeadersToAdd;
        }
    }
    get requestHeadersToRemove() {
        return this.getListAttribute('request_headers_to_remove');
    }
    set requestHeadersToRemove(value) {
        this._requestHeadersToRemove = value;
    }
    resetRequestHeadersToRemove() {
        this._requestHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToRemoveInput() {
        return this._requestHeadersToRemove;
    }
    get responseHeadersToRemove() {
        return this.getListAttribute('response_headers_to_remove');
    }
    set responseHeadersToRemove(value) {
        this._responseHeadersToRemove = value;
    }
    resetResponseHeadersToRemove() {
        this._responseHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToRemoveInput() {
        return this._responseHeadersToRemove;
    }
    get requestHeadersToAdd() {
        return this._requestHeadersToAdd;
    }
    putRequestHeadersToAdd(value) {
        this._requestHeadersToAdd.internalValue = value;
    }
    resetRequestHeadersToAdd() {
        this._requestHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToAddInput() {
        return this._requestHeadersToAdd.internalValue;
    }
    get responseHeadersToAdd() {
        return this._responseHeadersToAdd;
    }
    putResponseHeadersToAdd(value) {
        this._responseHeadersToAdd.internalValue = value;
    }
    resetResponseHeadersToAdd() {
        this._responseHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToAddInput() {
        return this._responseHeadersToAdd.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesHeaderActionOutputReference = ComputeUrlMapPathMatcherRouteRulesHeaderActionOutputReference;
_51 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesHeaderActionOutputReference[_51] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesHeaderActionOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        range_end: cdktf.numberToTerraform(struct.rangeEnd),
        range_start: cdktf.numberToTerraform(struct.rangeStart),
    };
}
exports.computeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchToTerraform = computeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchToTerraform;
class ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._rangeEnd !== undefined) {
            hasAnyValues = true;
            internalValueResult.rangeEnd = this._rangeEnd;
        }
        if (this._rangeStart !== undefined) {
            hasAnyValues = true;
            internalValueResult.rangeStart = this._rangeStart;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._rangeEnd = undefined;
            this._rangeStart = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._rangeEnd = value.rangeEnd;
            this._rangeStart = value.rangeStart;
        }
    }
    get rangeEnd() {
        return this.getNumberAttribute('range_end');
    }
    set rangeEnd(value) {
        this._rangeEnd = value;
    }
    // Temporarily expose input value. Use with caution.
    get rangeEndInput() {
        return this._rangeEnd;
    }
    get rangeStart() {
        return this.getNumberAttribute('range_start');
    }
    set rangeStart(value) {
        this._rangeStart = value;
    }
    // Temporarily expose input value. Use with caution.
    get rangeStartInput() {
        return this._rangeStart;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference = ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference;
_52 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference[_52] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exact_match: cdktf.stringToTerraform(struct.exactMatch),
        header_name: cdktf.stringToTerraform(struct.headerName),
        invert_match: cdktf.booleanToTerraform(struct.invertMatch),
        prefix_match: cdktf.stringToTerraform(struct.prefixMatch),
        present_match: cdktf.booleanToTerraform(struct.presentMatch),
        regex_match: cdktf.stringToTerraform(struct.regexMatch),
        suffix_match: cdktf.stringToTerraform(struct.suffixMatch),
        range_match: computeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchToTerraform(struct.rangeMatch),
    };
}
exports.computeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesToTerraform = computeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesToTerraform;
class ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // range_match - computed: false, optional: true, required: false
        this._rangeMatch = new ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchOutputReference(this, "range_match");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exactMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.exactMatch = this._exactMatch;
        }
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._invertMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertMatch = this._invertMatch;
        }
        if (this._prefixMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixMatch = this._prefixMatch;
        }
        if (this._presentMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.presentMatch = this._presentMatch;
        }
        if (this._regexMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.regexMatch = this._regexMatch;
        }
        if (this._suffixMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.suffixMatch = this._suffixMatch;
        }
        if (this._rangeMatch?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rangeMatch = this._rangeMatch?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exactMatch = undefined;
            this._headerName = undefined;
            this._invertMatch = undefined;
            this._prefixMatch = undefined;
            this._presentMatch = undefined;
            this._regexMatch = undefined;
            this._suffixMatch = undefined;
            this._rangeMatch.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exactMatch = value.exactMatch;
            this._headerName = value.headerName;
            this._invertMatch = value.invertMatch;
            this._prefixMatch = value.prefixMatch;
            this._presentMatch = value.presentMatch;
            this._regexMatch = value.regexMatch;
            this._suffixMatch = value.suffixMatch;
            this._rangeMatch.internalValue = value.rangeMatch;
        }
    }
    get exactMatch() {
        return this.getStringAttribute('exact_match');
    }
    set exactMatch(value) {
        this._exactMatch = value;
    }
    resetExactMatch() {
        this._exactMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exactMatchInput() {
        return this._exactMatch;
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get invertMatch() {
        return this.getBooleanAttribute('invert_match');
    }
    set invertMatch(value) {
        this._invertMatch = value;
    }
    resetInvertMatch() {
        this._invertMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertMatchInput() {
        return this._invertMatch;
    }
    get prefixMatch() {
        return this.getStringAttribute('prefix_match');
    }
    set prefixMatch(value) {
        this._prefixMatch = value;
    }
    resetPrefixMatch() {
        this._prefixMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixMatchInput() {
        return this._prefixMatch;
    }
    get presentMatch() {
        return this.getBooleanAttribute('present_match');
    }
    set presentMatch(value) {
        this._presentMatch = value;
    }
    resetPresentMatch() {
        this._presentMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get presentMatchInput() {
        return this._presentMatch;
    }
    get regexMatch() {
        return this.getStringAttribute('regex_match');
    }
    set regexMatch(value) {
        this._regexMatch = value;
    }
    resetRegexMatch() {
        this._regexMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexMatchInput() {
        return this._regexMatch;
    }
    get suffixMatch() {
        return this.getStringAttribute('suffix_match');
    }
    set suffixMatch(value) {
        this._suffixMatch = value;
    }
    resetSuffixMatch() {
        this._suffixMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get suffixMatchInput() {
        return this._suffixMatch;
    }
    get rangeMatch() {
        return this._rangeMatch;
    }
    putRangeMatch(value) {
        this._rangeMatch.internalValue = value;
    }
    resetRangeMatch() {
        this._rangeMatch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rangeMatchInput() {
        return this._rangeMatch.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference = ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference;
_53 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference[_53] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList = ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList;
_54 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList[_54] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.computeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsToTerraform = computeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsToTerraform;
class ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._value = value.value;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference = ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference;
_55 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference[_55] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList = ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList;
_56 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList[_56] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        filter_match_criteria: cdktf.stringToTerraform(struct.filterMatchCriteria),
        filter_labels: cdktf.listMapper(computeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsToTerraform, true)(struct.filterLabels),
    };
}
exports.computeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersToTerraform = computeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersToTerraform;
class ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // filter_labels - computed: false, optional: false, required: true
        this._filterLabels = new ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabelsList(this, "filter_labels", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._filterMatchCriteria !== undefined) {
            hasAnyValues = true;
            internalValueResult.filterMatchCriteria = this._filterMatchCriteria;
        }
        if (this._filterLabels?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.filterLabels = this._filterLabels?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._filterMatchCriteria = undefined;
            this._filterLabels.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._filterMatchCriteria = value.filterMatchCriteria;
            this._filterLabels.internalValue = value.filterLabels;
        }
    }
    get filterMatchCriteria() {
        return this.getStringAttribute('filter_match_criteria');
    }
    set filterMatchCriteria(value) {
        this._filterMatchCriteria = value;
    }
    // Temporarily expose input value. Use with caution.
    get filterMatchCriteriaInput() {
        return this._filterMatchCriteria;
    }
    get filterLabels() {
        return this._filterLabels;
    }
    putFilterLabels(value) {
        this._filterLabels.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get filterLabelsInput() {
        return this._filterLabels.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference = ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference;
_57 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference[_57] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList = ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList;
_58 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList[_58] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exact_match: cdktf.stringToTerraform(struct.exactMatch),
        name: cdktf.stringToTerraform(struct.name),
        present_match: cdktf.booleanToTerraform(struct.presentMatch),
        regex_match: cdktf.stringToTerraform(struct.regexMatch),
    };
}
exports.computeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesToTerraform = computeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesToTerraform;
class ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exactMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.exactMatch = this._exactMatch;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._presentMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.presentMatch = this._presentMatch;
        }
        if (this._regexMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.regexMatch = this._regexMatch;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exactMatch = undefined;
            this._name = undefined;
            this._presentMatch = undefined;
            this._regexMatch = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exactMatch = value.exactMatch;
            this._name = value.name;
            this._presentMatch = value.presentMatch;
            this._regexMatch = value.regexMatch;
        }
    }
    get exactMatch() {
        return this.getStringAttribute('exact_match');
    }
    set exactMatch(value) {
        this._exactMatch = value;
    }
    resetExactMatch() {
        this._exactMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exactMatchInput() {
        return this._exactMatch;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get presentMatch() {
        return this.getBooleanAttribute('present_match');
    }
    set presentMatch(value) {
        this._presentMatch = value;
    }
    resetPresentMatch() {
        this._presentMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get presentMatchInput() {
        return this._presentMatch;
    }
    get regexMatch() {
        return this.getStringAttribute('regex_match');
    }
    set regexMatch(value) {
        this._regexMatch = value;
    }
    resetRegexMatch() {
        this._regexMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexMatchInput() {
        return this._regexMatch;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference = ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference;
_59 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference[_59] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList = ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList;
_60 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList[_60] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesMatchRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        full_path_match: cdktf.stringToTerraform(struct.fullPathMatch),
        ignore_case: cdktf.booleanToTerraform(struct.ignoreCase),
        prefix_match: cdktf.stringToTerraform(struct.prefixMatch),
        regex_match: cdktf.stringToTerraform(struct.regexMatch),
        header_matches: cdktf.listMapper(computeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesToTerraform, true)(struct.headerMatches),
        metadata_filters: cdktf.listMapper(computeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersToTerraform, true)(struct.metadataFilters),
        query_parameter_matches: cdktf.listMapper(computeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesToTerraform, true)(struct.queryParameterMatches),
    };
}
exports.computeUrlMapPathMatcherRouteRulesMatchRulesToTerraform = computeUrlMapPathMatcherRouteRulesMatchRulesToTerraform;
class ComputeUrlMapPathMatcherRouteRulesMatchRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_matches - computed: false, optional: true, required: false
        this._headerMatches = new ComputeUrlMapPathMatcherRouteRulesMatchRulesHeaderMatchesList(this, "header_matches", false);
        // metadata_filters - computed: false, optional: true, required: false
        this._metadataFilters = new ComputeUrlMapPathMatcherRouteRulesMatchRulesMetadataFiltersList(this, "metadata_filters", false);
        // query_parameter_matches - computed: false, optional: true, required: false
        this._queryParameterMatches = new ComputeUrlMapPathMatcherRouteRulesMatchRulesQueryParameterMatchesList(this, "query_parameter_matches", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fullPathMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.fullPathMatch = this._fullPathMatch;
        }
        if (this._ignoreCase !== undefined) {
            hasAnyValues = true;
            internalValueResult.ignoreCase = this._ignoreCase;
        }
        if (this._prefixMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixMatch = this._prefixMatch;
        }
        if (this._regexMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.regexMatch = this._regexMatch;
        }
        if (this._headerMatches?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerMatches = this._headerMatches?.internalValue;
        }
        if (this._metadataFilters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadataFilters = this._metadataFilters?.internalValue;
        }
        if (this._queryParameterMatches?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryParameterMatches = this._queryParameterMatches?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._fullPathMatch = undefined;
            this._ignoreCase = undefined;
            this._prefixMatch = undefined;
            this._regexMatch = undefined;
            this._headerMatches.internalValue = undefined;
            this._metadataFilters.internalValue = undefined;
            this._queryParameterMatches.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._fullPathMatch = value.fullPathMatch;
            this._ignoreCase = value.ignoreCase;
            this._prefixMatch = value.prefixMatch;
            this._regexMatch = value.regexMatch;
            this._headerMatches.internalValue = value.headerMatches;
            this._metadataFilters.internalValue = value.metadataFilters;
            this._queryParameterMatches.internalValue = value.queryParameterMatches;
        }
    }
    get fullPathMatch() {
        return this.getStringAttribute('full_path_match');
    }
    set fullPathMatch(value) {
        this._fullPathMatch = value;
    }
    resetFullPathMatch() {
        this._fullPathMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fullPathMatchInput() {
        return this._fullPathMatch;
    }
    get ignoreCase() {
        return this.getBooleanAttribute('ignore_case');
    }
    set ignoreCase(value) {
        this._ignoreCase = value;
    }
    resetIgnoreCase() {
        this._ignoreCase = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreCaseInput() {
        return this._ignoreCase;
    }
    get prefixMatch() {
        return this.getStringAttribute('prefix_match');
    }
    set prefixMatch(value) {
        this._prefixMatch = value;
    }
    resetPrefixMatch() {
        this._prefixMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixMatchInput() {
        return this._prefixMatch;
    }
    get regexMatch() {
        return this.getStringAttribute('regex_match');
    }
    set regexMatch(value) {
        this._regexMatch = value;
    }
    resetRegexMatch() {
        this._regexMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexMatchInput() {
        return this._regexMatch;
    }
    get headerMatches() {
        return this._headerMatches;
    }
    putHeaderMatches(value) {
        this._headerMatches.internalValue = value;
    }
    resetHeaderMatches() {
        this._headerMatches.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerMatchesInput() {
        return this._headerMatches.internalValue;
    }
    get metadataFilters() {
        return this._metadataFilters;
    }
    putMetadataFilters(value) {
        this._metadataFilters.internalValue = value;
    }
    resetMetadataFilters() {
        this._metadataFilters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataFiltersInput() {
        return this._metadataFilters.internalValue;
    }
    get queryParameterMatches() {
        return this._queryParameterMatches;
    }
    putQueryParameterMatches(value) {
        this._queryParameterMatches.internalValue = value;
    }
    resetQueryParameterMatches() {
        this._queryParameterMatches.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryParameterMatchesInput() {
        return this._queryParameterMatches.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesOutputReference = ComputeUrlMapPathMatcherRouteRulesMatchRulesOutputReference;
_61 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesMatchRulesOutputReference[_61] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesMatchRulesOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherRouteRulesMatchRulesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherRouteRulesMatchRulesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesMatchRulesList = ComputeUrlMapPathMatcherRouteRulesMatchRulesList;
_62 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesMatchRulesList[_62] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesMatchRulesList", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_credentials: cdktf.booleanToTerraform(struct.allowCredentials),
        allow_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowHeaders),
        allow_methods: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowMethods),
        allow_origin_regexes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOriginRegexes),
        allow_origins: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowOrigins),
        disabled: cdktf.booleanToTerraform(struct.disabled),
        expose_headers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exposeHeaders),
        max_age: cdktf.numberToTerraform(struct.maxAge),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowCredentials !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowCredentials = this._allowCredentials;
        }
        if (this._allowHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowHeaders = this._allowHeaders;
        }
        if (this._allowMethods !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowMethods = this._allowMethods;
        }
        if (this._allowOriginRegexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOriginRegexes = this._allowOriginRegexes;
        }
        if (this._allowOrigins !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowOrigins = this._allowOrigins;
        }
        if (this._disabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled;
        }
        if (this._exposeHeaders !== undefined) {
            hasAnyValues = true;
            internalValueResult.exposeHeaders = this._exposeHeaders;
        }
        if (this._maxAge !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxAge = this._maxAge;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowCredentials = undefined;
            this._allowHeaders = undefined;
            this._allowMethods = undefined;
            this._allowOriginRegexes = undefined;
            this._allowOrigins = undefined;
            this._disabled = undefined;
            this._exposeHeaders = undefined;
            this._maxAge = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowCredentials = value.allowCredentials;
            this._allowHeaders = value.allowHeaders;
            this._allowMethods = value.allowMethods;
            this._allowOriginRegexes = value.allowOriginRegexes;
            this._allowOrigins = value.allowOrigins;
            this._disabled = value.disabled;
            this._exposeHeaders = value.exposeHeaders;
            this._maxAge = value.maxAge;
        }
    }
    get allowCredentials() {
        return this.getBooleanAttribute('allow_credentials');
    }
    set allowCredentials(value) {
        this._allowCredentials = value;
    }
    resetAllowCredentials() {
        this._allowCredentials = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowCredentialsInput() {
        return this._allowCredentials;
    }
    get allowHeaders() {
        return this.getListAttribute('allow_headers');
    }
    set allowHeaders(value) {
        this._allowHeaders = value;
    }
    resetAllowHeaders() {
        this._allowHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowHeadersInput() {
        return this._allowHeaders;
    }
    get allowMethods() {
        return this.getListAttribute('allow_methods');
    }
    set allowMethods(value) {
        this._allowMethods = value;
    }
    resetAllowMethods() {
        this._allowMethods = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowMethodsInput() {
        return this._allowMethods;
    }
    get allowOriginRegexes() {
        return this.getListAttribute('allow_origin_regexes');
    }
    set allowOriginRegexes(value) {
        this._allowOriginRegexes = value;
    }
    resetAllowOriginRegexes() {
        this._allowOriginRegexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginRegexesInput() {
        return this._allowOriginRegexes;
    }
    get allowOrigins() {
        return this.getListAttribute('allow_origins');
    }
    set allowOrigins(value) {
        this._allowOrigins = value;
    }
    resetAllowOrigins() {
        this._allowOrigins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOriginsInput() {
        return this._allowOrigins;
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    resetDisabled() {
        this._disabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get exposeHeaders() {
        return this.getListAttribute('expose_headers');
    }
    set exposeHeaders(value) {
        this._exposeHeaders = value;
    }
    resetExposeHeaders() {
        this._exposeHeaders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exposeHeadersInput() {
        return this._exposeHeaders;
    }
    get maxAge() {
        return this.getNumberAttribute('max_age');
    }
    set maxAge(value) {
        this._maxAge = value;
    }
    resetMaxAge() {
        this._maxAge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxAgeInput() {
        return this._maxAge;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference;
_63 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference[_63] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        http_status: cdktf.numberToTerraform(struct.httpStatus),
        percentage: cdktf.numberToTerraform(struct.percentage),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._httpStatus !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpStatus = this._httpStatus;
        }
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._httpStatus = undefined;
            this._percentage = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._httpStatus = value.httpStatus;
            this._percentage = value.percentage;
        }
    }
    get httpStatus() {
        return this.getNumberAttribute('http_status');
    }
    set httpStatus(value) {
        this._httpStatus = value;
    }
    resetHttpStatus() {
        this._httpStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpStatusInput() {
        return this._httpStatus;
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    resetPercentage() {
        this._percentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference;
_64 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference[_64] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference;
_65 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference[_65] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        percentage: cdktf.numberToTerraform(struct.percentage),
        fixed_delay: computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayToTerraform(struct.fixedDelay),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // fixed_delay - computed: false, optional: true, required: false
        this._fixedDelay = new ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayOutputReference(this, "fixed_delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        if (this._fixedDelay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedDelay = this._fixedDelay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._percentage = undefined;
            this._fixedDelay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._percentage = value.percentage;
            this._fixedDelay.internalValue = value.fixedDelay;
        }
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    resetPercentage() {
        this._percentage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
    get fixedDelay() {
        return this._fixedDelay;
    }
    putFixedDelay(value) {
        this._fixedDelay.internalValue = value;
    }
    resetFixedDelay() {
        this._fixedDelay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedDelayInput() {
        return this._fixedDelay.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference;
_66 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference[_66] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        abort: computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortToTerraform(struct.abort),
        delay: computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayToTerraform(struct.delay),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // abort - computed: false, optional: true, required: false
        this._abort = new ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortOutputReference(this, "abort");
        // delay - computed: false, optional: true, required: false
        this._delay = new ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayOutputReference(this, "delay");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._abort?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.abort = this._abort?.internalValue;
        }
        if (this._delay?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.delay = this._delay?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._abort.internalValue = undefined;
            this._delay.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._abort.internalValue = value.abort;
            this._delay.internalValue = value.delay;
        }
    }
    get abort() {
        return this._abort;
    }
    putAbort(value) {
        this._abort.internalValue = value;
    }
    resetAbort() {
        this._abort.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get abortInput() {
        return this._abort.internalValue;
    }
    get delay() {
        return this._delay;
    }
    putDelay(value) {
        this._delay.internalValue = value;
    }
    resetDelay() {
        this._delay.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get delayInput() {
        return this._delay.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference;
_67 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference[_67] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backendService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backendService = value.backendService;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference;
_68 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference[_68] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference;
_69 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference[_69] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        num_retries: cdktf.numberToTerraform(struct.numRetries),
        retry_conditions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.retryConditions),
        per_try_timeout: computeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutToTerraform(struct.perTryTimeout),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // per_try_timeout - computed: false, optional: true, required: false
        this._perTryTimeout = new ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutOutputReference(this, "per_try_timeout");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._numRetries !== undefined) {
            hasAnyValues = true;
            internalValueResult.numRetries = this._numRetries;
        }
        if (this._retryConditions !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryConditions = this._retryConditions;
        }
        if (this._perTryTimeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.perTryTimeout = this._perTryTimeout?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._numRetries = undefined;
            this._retryConditions = undefined;
            this._perTryTimeout.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._numRetries = value.numRetries;
            this._retryConditions = value.retryConditions;
            this._perTryTimeout.internalValue = value.perTryTimeout;
        }
    }
    get numRetries() {
        return this.getNumberAttribute('num_retries');
    }
    set numRetries(value) {
        this._numRetries = value;
    }
    // Temporarily expose input value. Use with caution.
    get numRetriesInput() {
        return this._numRetries;
    }
    get retryConditions() {
        return this.getListAttribute('retry_conditions');
    }
    set retryConditions(value) {
        this._retryConditions = value;
    }
    resetRetryConditions() {
        this._retryConditions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryConditionsInput() {
        return this._retryConditions;
    }
    get perTryTimeout() {
        return this._perTryTimeout;
    }
    putPerTryTimeout(value) {
        this._perTryTimeout.internalValue = value;
    }
    resetPerTryTimeout() {
        this._perTryTimeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perTryTimeoutInput() {
        return this._perTryTimeout.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference;
_70 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference[_70] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.stringToTerraform(struct.seconds),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionTimeoutToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionTimeoutToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getStringAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference;
_71 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference[_71] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_rewrite: cdktf.stringToTerraform(struct.hostRewrite),
        path_prefix_rewrite: cdktf.stringToTerraform(struct.pathPrefixRewrite),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRewrite = this._hostRewrite;
        }
        if (this._pathPrefixRewrite !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathPrefixRewrite = this._pathPrefixRewrite;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRewrite = undefined;
            this._pathPrefixRewrite = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRewrite = value.hostRewrite;
            this._pathPrefixRewrite = value.pathPrefixRewrite;
        }
    }
    get hostRewrite() {
        return this.getStringAttribute('host_rewrite');
    }
    set hostRewrite(value) {
        this._hostRewrite = value;
    }
    resetHostRewrite() {
        this._hostRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRewriteInput() {
        return this._hostRewrite;
    }
    get pathPrefixRewrite() {
        return this.getStringAttribute('path_prefix_rewrite');
    }
    set pathPrefixRewrite(value) {
        this._pathPrefixRewrite = value;
    }
    resetPathPrefixRewrite() {
        this._pathPrefixRewrite = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathPrefixRewriteInput() {
        return this._pathPrefixRewrite;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference;
_72 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference[_72] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference;
_73 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference[_73] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList = ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList;
_74 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList[_74] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        header_name: cdktf.stringToTerraform(struct.headerName),
        header_value: cdktf.stringToTerraform(struct.headerValue),
        replace: cdktf.booleanToTerraform(struct.replace),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._headerName !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerName = this._headerName;
        }
        if (this._headerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerValue = this._headerValue;
        }
        if (this._replace !== undefined) {
            hasAnyValues = true;
            internalValueResult.replace = this._replace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._headerName = undefined;
            this._headerValue = undefined;
            this._replace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._headerName = value.headerName;
            this._headerValue = value.headerValue;
            this._replace = value.replace;
        }
    }
    get headerName() {
        return this.getStringAttribute('header_name');
    }
    set headerName(value) {
        this._headerName = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerNameInput() {
        return this._headerName;
    }
    get headerValue() {
        return this.getStringAttribute('header_value');
    }
    set headerValue(value) {
        this._headerValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get headerValueInput() {
        return this._headerValue;
    }
    get replace() {
        return this.getBooleanAttribute('replace');
    }
    set replace(value) {
        this._replace = value;
    }
    // Temporarily expose input value. Use with caution.
    get replaceInput() {
        return this._replace;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference;
_75 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference[_75] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList = ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList;
_76 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList[_76] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requestHeadersToRemove),
        response_headers_to_remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.responseHeadersToRemove),
        request_headers_to_add: cdktf.listMapper(computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddToTerraform, true)(struct.requestHeadersToAdd),
        response_headers_to_add: cdktf.listMapper(computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddToTerraform, true)(struct.responseHeadersToAdd),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_headers_to_add - computed: false, optional: true, required: false
        this._requestHeadersToAdd = new ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAddList(this, "request_headers_to_add", false);
        // response_headers_to_add - computed: false, optional: true, required: false
        this._responseHeadersToAdd = new ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAddList(this, "response_headers_to_add", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToRemove = this._requestHeadersToRemove;
        }
        if (this._responseHeadersToRemove !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToRemove = this._responseHeadersToRemove;
        }
        if (this._requestHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestHeadersToAdd = this._requestHeadersToAdd?.internalValue;
        }
        if (this._responseHeadersToAdd?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.responseHeadersToAdd = this._responseHeadersToAdd?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestHeadersToRemove = undefined;
            this._responseHeadersToRemove = undefined;
            this._requestHeadersToAdd.internalValue = undefined;
            this._responseHeadersToAdd.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestHeadersToRemove = value.requestHeadersToRemove;
            this._responseHeadersToRemove = value.responseHeadersToRemove;
            this._requestHeadersToAdd.internalValue = value.requestHeadersToAdd;
            this._responseHeadersToAdd.internalValue = value.responseHeadersToAdd;
        }
    }
    get requestHeadersToRemove() {
        return this.getListAttribute('request_headers_to_remove');
    }
    set requestHeadersToRemove(value) {
        this._requestHeadersToRemove = value;
    }
    resetRequestHeadersToRemove() {
        this._requestHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToRemoveInput() {
        return this._requestHeadersToRemove;
    }
    get responseHeadersToRemove() {
        return this.getListAttribute('response_headers_to_remove');
    }
    set responseHeadersToRemove(value) {
        this._responseHeadersToRemove = value;
    }
    resetResponseHeadersToRemove() {
        this._responseHeadersToRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToRemoveInput() {
        return this._responseHeadersToRemove;
    }
    get requestHeadersToAdd() {
        return this._requestHeadersToAdd;
    }
    putRequestHeadersToAdd(value) {
        this._requestHeadersToAdd.internalValue = value;
    }
    resetRequestHeadersToAdd() {
        this._requestHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestHeadersToAddInput() {
        return this._requestHeadersToAdd.internalValue;
    }
    get responseHeadersToAdd() {
        return this._responseHeadersToAdd;
    }
    putResponseHeadersToAdd(value) {
        this._responseHeadersToAdd.internalValue = value;
    }
    resetResponseHeadersToAdd() {
        this._responseHeadersToAdd.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseHeadersToAddInput() {
        return this._responseHeadersToAdd.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference;
_77 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference[_77] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend_service: cdktf.stringToTerraform(struct.backendService),
        weight: cdktf.numberToTerraform(struct.weight),
        header_action: computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionToTerraform(struct.headerAction),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionOutputReference(this, "header_action");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backendService !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendService = this._backendService;
        }
        if (this._weight !== undefined) {
            hasAnyValues = true;
            internalValueResult.weight = this._weight;
        }
        if (this._headerAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerAction = this._headerAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._backendService = undefined;
            this._weight = undefined;
            this._headerAction.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._backendService = value.backendService;
            this._weight = value.weight;
            this._headerAction.internalValue = value.headerAction;
        }
    }
    get backendService() {
        return this.getStringAttribute('backend_service');
    }
    set backendService(value) {
        this._backendService = value;
    }
    // Temporarily expose input value. Use with caution.
    get backendServiceInput() {
        return this._backendService;
    }
    get weight() {
        return this.getNumberAttribute('weight');
    }
    set weight(value) {
        this._weight = value;
    }
    // Temporarily expose input value. Use with caution.
    get weightInput() {
        return this._weight;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference;
_78 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference[_78] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList = ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList;
_79 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList[_79] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesRouteActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cors_policy: computeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyToTerraform(struct.corsPolicy),
        fault_injection_policy: computeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyToTerraform(struct.faultInjectionPolicy),
        request_mirror_policy: computeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyToTerraform(struct.requestMirrorPolicy),
        retry_policy: computeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyToTerraform(struct.retryPolicy),
        timeout: computeUrlMapPathMatcherRouteRulesRouteActionTimeoutToTerraform(struct.timeout),
        url_rewrite: computeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteToTerraform(struct.urlRewrite),
        weighted_backend_services: cdktf.listMapper(computeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesToTerraform, true)(struct.weightedBackendServices),
    };
}
exports.computeUrlMapPathMatcherRouteRulesRouteActionToTerraform = computeUrlMapPathMatcherRouteRulesRouteActionToTerraform;
class ComputeUrlMapPathMatcherRouteRulesRouteActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cors_policy - computed: false, optional: true, required: false
        this._corsPolicy = new ComputeUrlMapPathMatcherRouteRulesRouteActionCorsPolicyOutputReference(this, "cors_policy");
        // fault_injection_policy - computed: false, optional: true, required: false
        this._faultInjectionPolicy = new ComputeUrlMapPathMatcherRouteRulesRouteActionFaultInjectionPolicyOutputReference(this, "fault_injection_policy");
        // request_mirror_policy - computed: false, optional: true, required: false
        this._requestMirrorPolicy = new ComputeUrlMapPathMatcherRouteRulesRouteActionRequestMirrorPolicyOutputReference(this, "request_mirror_policy");
        // retry_policy - computed: false, optional: true, required: false
        this._retryPolicy = new ComputeUrlMapPathMatcherRouteRulesRouteActionRetryPolicyOutputReference(this, "retry_policy");
        // timeout - computed: false, optional: true, required: false
        this._timeout = new ComputeUrlMapPathMatcherRouteRulesRouteActionTimeoutOutputReference(this, "timeout");
        // url_rewrite - computed: false, optional: true, required: false
        this._urlRewrite = new ComputeUrlMapPathMatcherRouteRulesRouteActionUrlRewriteOutputReference(this, "url_rewrite");
        // weighted_backend_services - computed: false, optional: true, required: false
        this._weightedBackendServices = new ComputeUrlMapPathMatcherRouteRulesRouteActionWeightedBackendServicesList(this, "weighted_backend_services", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._corsPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.corsPolicy = this._corsPolicy?.internalValue;
        }
        if (this._faultInjectionPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.faultInjectionPolicy = this._faultInjectionPolicy?.internalValue;
        }
        if (this._requestMirrorPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestMirrorPolicy = this._requestMirrorPolicy?.internalValue;
        }
        if (this._retryPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.retryPolicy = this._retryPolicy?.internalValue;
        }
        if (this._timeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout?.internalValue;
        }
        if (this._urlRewrite?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRewrite = this._urlRewrite?.internalValue;
        }
        if (this._weightedBackendServices?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.weightedBackendServices = this._weightedBackendServices?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._corsPolicy.internalValue = undefined;
            this._faultInjectionPolicy.internalValue = undefined;
            this._requestMirrorPolicy.internalValue = undefined;
            this._retryPolicy.internalValue = undefined;
            this._timeout.internalValue = undefined;
            this._urlRewrite.internalValue = undefined;
            this._weightedBackendServices.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._corsPolicy.internalValue = value.corsPolicy;
            this._faultInjectionPolicy.internalValue = value.faultInjectionPolicy;
            this._requestMirrorPolicy.internalValue = value.requestMirrorPolicy;
            this._retryPolicy.internalValue = value.retryPolicy;
            this._timeout.internalValue = value.timeout;
            this._urlRewrite.internalValue = value.urlRewrite;
            this._weightedBackendServices.internalValue = value.weightedBackendServices;
        }
    }
    get corsPolicy() {
        return this._corsPolicy;
    }
    putCorsPolicy(value) {
        this._corsPolicy.internalValue = value;
    }
    resetCorsPolicy() {
        this._corsPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get corsPolicyInput() {
        return this._corsPolicy.internalValue;
    }
    get faultInjectionPolicy() {
        return this._faultInjectionPolicy;
    }
    putFaultInjectionPolicy(value) {
        this._faultInjectionPolicy.internalValue = value;
    }
    resetFaultInjectionPolicy() {
        this._faultInjectionPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get faultInjectionPolicyInput() {
        return this._faultInjectionPolicy.internalValue;
    }
    get requestMirrorPolicy() {
        return this._requestMirrorPolicy;
    }
    putRequestMirrorPolicy(value) {
        this._requestMirrorPolicy.internalValue = value;
    }
    resetRequestMirrorPolicy() {
        this._requestMirrorPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestMirrorPolicyInput() {
        return this._requestMirrorPolicy.internalValue;
    }
    get retryPolicy() {
        return this._retryPolicy;
    }
    putRetryPolicy(value) {
        this._retryPolicy.internalValue = value;
    }
    resetRetryPolicy() {
        this._retryPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retryPolicyInput() {
        return this._retryPolicy.internalValue;
    }
    get timeout() {
        return this._timeout;
    }
    putTimeout(value) {
        this._timeout.internalValue = value;
    }
    resetTimeout() {
        this._timeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout.internalValue;
    }
    get urlRewrite() {
        return this._urlRewrite;
    }
    putUrlRewrite(value) {
        this._urlRewrite.internalValue = value;
    }
    resetUrlRewrite() {
        this._urlRewrite.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRewriteInput() {
        return this._urlRewrite.internalValue;
    }
    get weightedBackendServices() {
        return this._weightedBackendServices;
    }
    putWeightedBackendServices(value) {
        this._weightedBackendServices.internalValue = value;
    }
    resetWeightedBackendServices() {
        this._weightedBackendServices.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weightedBackendServicesInput() {
        return this._weightedBackendServices.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesRouteActionOutputReference = ComputeUrlMapPathMatcherRouteRulesRouteActionOutputReference;
_80 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesRouteActionOutputReference[_80] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesRouteActionOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesUrlRedirectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_redirect: cdktf.stringToTerraform(struct.hostRedirect),
        https_redirect: cdktf.booleanToTerraform(struct.httpsRedirect),
        path_redirect: cdktf.stringToTerraform(struct.pathRedirect),
        prefix_redirect: cdktf.stringToTerraform(struct.prefixRedirect),
        redirect_response_code: cdktf.stringToTerraform(struct.redirectResponseCode),
        strip_query: cdktf.booleanToTerraform(struct.stripQuery),
    };
}
exports.computeUrlMapPathMatcherRouteRulesUrlRedirectToTerraform = computeUrlMapPathMatcherRouteRulesUrlRedirectToTerraform;
class ComputeUrlMapPathMatcherRouteRulesUrlRedirectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostRedirect = this._hostRedirect;
        }
        if (this._httpsRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsRedirect = this._httpsRedirect;
        }
        if (this._pathRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathRedirect = this._pathRedirect;
        }
        if (this._prefixRedirect !== undefined) {
            hasAnyValues = true;
            internalValueResult.prefixRedirect = this._prefixRedirect;
        }
        if (this._redirectResponseCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.redirectResponseCode = this._redirectResponseCode;
        }
        if (this._stripQuery !== undefined) {
            hasAnyValues = true;
            internalValueResult.stripQuery = this._stripQuery;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostRedirect = undefined;
            this._httpsRedirect = undefined;
            this._pathRedirect = undefined;
            this._prefixRedirect = undefined;
            this._redirectResponseCode = undefined;
            this._stripQuery = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostRedirect = value.hostRedirect;
            this._httpsRedirect = value.httpsRedirect;
            this._pathRedirect = value.pathRedirect;
            this._prefixRedirect = value.prefixRedirect;
            this._redirectResponseCode = value.redirectResponseCode;
            this._stripQuery = value.stripQuery;
        }
    }
    get hostRedirect() {
        return this.getStringAttribute('host_redirect');
    }
    set hostRedirect(value) {
        this._hostRedirect = value;
    }
    resetHostRedirect() {
        this._hostRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRedirectInput() {
        return this._hostRedirect;
    }
    get httpsRedirect() {
        return this.getBooleanAttribute('https_redirect');
    }
    set httpsRedirect(value) {
        this._httpsRedirect = value;
    }
    resetHttpsRedirect() {
        this._httpsRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsRedirectInput() {
        return this._httpsRedirect;
    }
    get pathRedirect() {
        return this.getStringAttribute('path_redirect');
    }
    set pathRedirect(value) {
        this._pathRedirect = value;
    }
    resetPathRedirect() {
        this._pathRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathRedirectInput() {
        return this._pathRedirect;
    }
    get prefixRedirect() {
        return this.getStringAttribute('prefix_redirect');
    }
    set prefixRedirect(value) {
        this._prefixRedirect = value;
    }
    resetPrefixRedirect() {
        this._prefixRedirect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prefixRedirectInput() {
        return this._prefixRedirect;
    }
    get redirectResponseCode() {
        return this.getStringAttribute('redirect_response_code');
    }
    set redirectResponseCode(value) {
        this._redirectResponseCode = value;
    }
    resetRedirectResponseCode() {
        this._redirectResponseCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redirectResponseCodeInput() {
        return this._redirectResponseCode;
    }
    get stripQuery() {
        return this.getBooleanAttribute('strip_query');
    }
    set stripQuery(value) {
        this._stripQuery = value;
    }
    resetStripQuery() {
        this._stripQuery = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stripQueryInput() {
        return this._stripQuery;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesUrlRedirectOutputReference = ComputeUrlMapPathMatcherRouteRulesUrlRedirectOutputReference;
_81 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesUrlRedirectOutputReference[_81] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesUrlRedirectOutputReference", version: "4.0.3" };
function computeUrlMapPathMatcherRouteRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        priority: cdktf.numberToTerraform(struct.priority),
        service: cdktf.stringToTerraform(struct.service),
        header_action: computeUrlMapPathMatcherRouteRulesHeaderActionToTerraform(struct.headerAction),
        match_rules: cdktf.listMapper(computeUrlMapPathMatcherRouteRulesMatchRulesToTerraform, true)(struct.matchRules),
        route_action: computeUrlMapPathMatcherRouteRulesRouteActionToTerraform(struct.routeAction),
        url_redirect: computeUrlMapPathMatcherRouteRulesUrlRedirectToTerraform(struct.urlRedirect),
    };
}
exports.computeUrlMapPathMatcherRouteRulesToTerraform = computeUrlMapPathMatcherRouteRulesToTerraform;
class ComputeUrlMapPathMatcherRouteRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new ComputeUrlMapPathMatcherRouteRulesHeaderActionOutputReference(this, "header_action");
        // match_rules - computed: false, optional: true, required: false
        this._matchRules = new ComputeUrlMapPathMatcherRouteRulesMatchRulesList(this, "match_rules", false);
        // route_action - computed: false, optional: true, required: false
        this._routeAction = new ComputeUrlMapPathMatcherRouteRulesRouteActionOutputReference(this, "route_action");
        // url_redirect - computed: false, optional: true, required: false
        this._urlRedirect = new ComputeUrlMapPathMatcherRouteRulesUrlRedirectOutputReference(this, "url_redirect");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        if (this._headerAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerAction = this._headerAction?.internalValue;
        }
        if (this._matchRules?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchRules = this._matchRules?.internalValue;
        }
        if (this._routeAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.routeAction = this._routeAction?.internalValue;
        }
        if (this._urlRedirect?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.urlRedirect = this._urlRedirect?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._priority = undefined;
            this._service = undefined;
            this._headerAction.internalValue = undefined;
            this._matchRules.internalValue = undefined;
            this._routeAction.internalValue = undefined;
            this._urlRedirect.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._priority = value.priority;
            this._service = value.service;
            this._headerAction.internalValue = value.headerAction;
            this._matchRules.internalValue = value.matchRules;
            this._routeAction.internalValue = value.routeAction;
            this._urlRedirect.internalValue = value.urlRedirect;
        }
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    resetService() {
        this._service = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
    get matchRules() {
        return this._matchRules;
    }
    putMatchRules(value) {
        this._matchRules.internalValue = value;
    }
    resetMatchRules() {
        this._matchRules.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchRulesInput() {
        return this._matchRules.internalValue;
    }
    get routeAction() {
        return this._routeAction;
    }
    putRouteAction(value) {
        this._routeAction.internalValue = value;
    }
    resetRouteAction() {
        this._routeAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeActionInput() {
        return this._routeAction.internalValue;
    }
    get urlRedirect() {
        return this._urlRedirect;
    }
    putUrlRedirect(value) {
        this._urlRedirect.internalValue = value;
    }
    resetUrlRedirect() {
        this._urlRedirect.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlRedirectInput() {
        return this._urlRedirect.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesOutputReference = ComputeUrlMapPathMatcherRouteRulesOutputReference;
_82 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesOutputReference[_82] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherRouteRulesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherRouteRulesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherRouteRulesList = ComputeUrlMapPathMatcherRouteRulesList;
_83 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherRouteRulesList[_83] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherRouteRulesList", version: "4.0.3" };
function computeUrlMapPathMatcherToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_service: cdktf.stringToTerraform(struct.defaultService),
        description: cdktf.stringToTerraform(struct.description),
        name: cdktf.stringToTerraform(struct.name),
        default_route_action: computeUrlMapPathMatcherDefaultRouteActionToTerraform(struct.defaultRouteAction),
        default_url_redirect: computeUrlMapPathMatcherDefaultUrlRedirectToTerraform(struct.defaultUrlRedirect),
        header_action: computeUrlMapPathMatcherHeaderActionToTerraform(struct.headerAction),
        path_rule: cdktf.listMapper(computeUrlMapPathMatcherPathRuleToTerraform, true)(struct.pathRule),
        route_rules: cdktf.listMapper(computeUrlMapPathMatcherRouteRulesToTerraform, true)(struct.routeRules),
    };
}
exports.computeUrlMapPathMatcherToTerraform = computeUrlMapPathMatcherToTerraform;
class ComputeUrlMapPathMatcherOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // default_route_action - computed: false, optional: true, required: false
        this._defaultRouteAction = new ComputeUrlMapPathMatcherDefaultRouteActionOutputReference(this, "default_route_action");
        // default_url_redirect - computed: false, optional: true, required: false
        this._defaultUrlRedirect = new ComputeUrlMapPathMatcherDefaultUrlRedirectOutputReference(this, "default_url_redirect");
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new ComputeUrlMapPathMatcherHeaderActionOutputReference(this, "header_action");
        // path_rule - computed: false, optional: true, required: false
        this._pathRule = new ComputeUrlMapPathMatcherPathRuleList(this, "path_rule", false);
        // route_rules - computed: false, optional: true, required: false
        this._routeRules = new ComputeUrlMapPathMatcherRouteRulesList(this, "route_rules", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultService !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultService = this._defaultService;
        }
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._defaultRouteAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultRouteAction = this._defaultRouteAction?.internalValue;
        }
        if (this._defaultUrlRedirect?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultUrlRedirect = this._defaultUrlRedirect?.internalValue;
        }
        if (this._headerAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.headerAction = this._headerAction?.internalValue;
        }
        if (this._pathRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pathRule = this._pathRule?.internalValue;
        }
        if (this._routeRules?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.routeRules = this._routeRules?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._defaultService = undefined;
            this._description = undefined;
            this._name = undefined;
            this._defaultRouteAction.internalValue = undefined;
            this._defaultUrlRedirect.internalValue = undefined;
            this._headerAction.internalValue = undefined;
            this._pathRule.internalValue = undefined;
            this._routeRules.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._defaultService = value.defaultService;
            this._description = value.description;
            this._name = value.name;
            this._defaultRouteAction.internalValue = value.defaultRouteAction;
            this._defaultUrlRedirect.internalValue = value.defaultUrlRedirect;
            this._headerAction.internalValue = value.headerAction;
            this._pathRule.internalValue = value.pathRule;
            this._routeRules.internalValue = value.routeRules;
        }
    }
    get defaultService() {
        return this.getStringAttribute('default_service');
    }
    set defaultService(value) {
        this._defaultService = value;
    }
    resetDefaultService() {
        this._defaultService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultServiceInput() {
        return this._defaultService;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get defaultRouteAction() {
        return this._defaultRouteAction;
    }
    putDefaultRouteAction(value) {
        this._defaultRouteAction.internalValue = value;
    }
    resetDefaultRouteAction() {
        this._defaultRouteAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultRouteActionInput() {
        return this._defaultRouteAction.internalValue;
    }
    get defaultUrlRedirect() {
        return this._defaultUrlRedirect;
    }
    putDefaultUrlRedirect(value) {
        this._defaultUrlRedirect.internalValue = value;
    }
    resetDefaultUrlRedirect() {
        this._defaultUrlRedirect.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultUrlRedirectInput() {
        return this._defaultUrlRedirect.internalValue;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
    get pathRule() {
        return this._pathRule;
    }
    putPathRule(value) {
        this._pathRule.internalValue = value;
    }
    resetPathRule() {
        this._pathRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathRuleInput() {
        return this._pathRule.internalValue;
    }
    get routeRules() {
        return this._routeRules;
    }
    putRouteRules(value) {
        this._routeRules.internalValue = value;
    }
    resetRouteRules() {
        this._routeRules.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeRulesInput() {
        return this._routeRules.internalValue;
    }
}
exports.ComputeUrlMapPathMatcherOutputReference = ComputeUrlMapPathMatcherOutputReference;
_84 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherOutputReference[_84] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherOutputReference", version: "4.0.3" };
class ComputeUrlMapPathMatcherList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapPathMatcherOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapPathMatcherList = ComputeUrlMapPathMatcherList;
_85 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapPathMatcherList[_85] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapPathMatcherList", version: "4.0.3" };
function computeUrlMapTestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        host: cdktf.stringToTerraform(struct.host),
        path: cdktf.stringToTerraform(struct.path),
        service: cdktf.stringToTerraform(struct.service),
    };
}
exports.computeUrlMapTestToTerraform = computeUrlMapTestToTerraform;
class ComputeUrlMapTestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._host = undefined;
            this._path = undefined;
            this._service = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._host = value.host;
            this._path = value.path;
            this._service = value.service;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
}
exports.ComputeUrlMapTestOutputReference = ComputeUrlMapTestOutputReference;
_86 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapTestOutputReference[_86] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapTestOutputReference", version: "4.0.3" };
class ComputeUrlMapTestList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeUrlMapTestOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeUrlMapTestList = ComputeUrlMapTestList;
_87 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapTestList[_87] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapTestList", version: "4.0.3" };
function computeUrlMapTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.computeUrlMapTimeoutsToTerraform = computeUrlMapTimeoutsToTerraform;
class ComputeUrlMapTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ComputeUrlMapTimeoutsOutputReference = ComputeUrlMapTimeoutsOutputReference;
_88 = JSII_RTTI_SYMBOL_1;
ComputeUrlMapTimeoutsOutputReference[_88] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMapTimeoutsOutputReference", version: "4.0.3" };
/**
* Represents a {@link https://www.terraform.io/docs/providers/google/r/compute_url_map google_compute_url_map}
*/
class ComputeUrlMap extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://www.terraform.io/docs/providers/google/r/compute_url_map google_compute_url_map} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ComputeUrlMapConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_compute_url_map',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '4.46.0',
                providerVersionConstraint: '~> 4.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // default_route_action - computed: false, optional: true, required: false
        this._defaultRouteAction = new ComputeUrlMapDefaultRouteActionOutputReference(this, "default_route_action");
        // default_url_redirect - computed: false, optional: true, required: false
        this._defaultUrlRedirect = new ComputeUrlMapDefaultUrlRedirectOutputReference(this, "default_url_redirect");
        // header_action - computed: false, optional: true, required: false
        this._headerAction = new ComputeUrlMapHeaderActionOutputReference(this, "header_action");
        // host_rule - computed: false, optional: true, required: false
        this._hostRule = new ComputeUrlMapHostRuleList(this, "host_rule", true);
        // path_matcher - computed: false, optional: true, required: false
        this._pathMatcher = new ComputeUrlMapPathMatcherList(this, "path_matcher", false);
        // test - computed: false, optional: true, required: false
        this._test = new ComputeUrlMapTestList(this, "test", false);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ComputeUrlMapTimeoutsOutputReference(this, "timeouts");
        this._defaultService = config.defaultService;
        this._description = config.description;
        this._id = config.id;
        this._name = config.name;
        this._project = config.project;
        this._defaultRouteAction.internalValue = config.defaultRouteAction;
        this._defaultUrlRedirect.internalValue = config.defaultUrlRedirect;
        this._headerAction.internalValue = config.headerAction;
        this._hostRule.internalValue = config.hostRule;
        this._pathMatcher.internalValue = config.pathMatcher;
        this._test.internalValue = config.test;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // creation_timestamp - computed: true, optional: false, required: false
    get creationTimestamp() {
        return this.getStringAttribute('creation_timestamp');
    }
    get defaultService() {
        return this.getStringAttribute('default_service');
    }
    set defaultService(value) {
        this._defaultService = value;
    }
    resetDefaultService() {
        this._defaultService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultServiceInput() {
        return this._defaultService;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // fingerprint - computed: true, optional: false, required: false
    get fingerprint() {
        return this.getStringAttribute('fingerprint');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // map_id - computed: true, optional: false, required: false
    get mapId() {
        return this.getNumberAttribute('map_id');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    get defaultRouteAction() {
        return this._defaultRouteAction;
    }
    putDefaultRouteAction(value) {
        this._defaultRouteAction.internalValue = value;
    }
    resetDefaultRouteAction() {
        this._defaultRouteAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultRouteActionInput() {
        return this._defaultRouteAction.internalValue;
    }
    get defaultUrlRedirect() {
        return this._defaultUrlRedirect;
    }
    putDefaultUrlRedirect(value) {
        this._defaultUrlRedirect.internalValue = value;
    }
    resetDefaultUrlRedirect() {
        this._defaultUrlRedirect.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultUrlRedirectInput() {
        return this._defaultUrlRedirect.internalValue;
    }
    get headerAction() {
        return this._headerAction;
    }
    putHeaderAction(value) {
        this._headerAction.internalValue = value;
    }
    resetHeaderAction() {
        this._headerAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get headerActionInput() {
        return this._headerAction.internalValue;
    }
    get hostRule() {
        return this._hostRule;
    }
    putHostRule(value) {
        this._hostRule.internalValue = value;
    }
    resetHostRule() {
        this._hostRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostRuleInput() {
        return this._hostRule.internalValue;
    }
    get pathMatcher() {
        return this._pathMatcher;
    }
    putPathMatcher(value) {
        this._pathMatcher.internalValue = value;
    }
    resetPathMatcher() {
        this._pathMatcher.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathMatcherInput() {
        return this._pathMatcher.internalValue;
    }
    get test() {
        return this._test;
    }
    putTest(value) {
        this._test.internalValue = value;
    }
    resetTest() {
        this._test.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get testInput() {
        return this._test.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            default_service: cdktf.stringToTerraform(this._defaultService),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            default_route_action: computeUrlMapDefaultRouteActionToTerraform(this._defaultRouteAction.internalValue),
            default_url_redirect: computeUrlMapDefaultUrlRedirectToTerraform(this._defaultUrlRedirect.internalValue),
            header_action: computeUrlMapHeaderActionToTerraform(this._headerAction.internalValue),
            host_rule: cdktf.listMapper(computeUrlMapHostRuleToTerraform, true)(this._hostRule.internalValue),
            path_matcher: cdktf.listMapper(computeUrlMapPathMatcherToTerraform, true)(this._pathMatcher.internalValue),
            test: cdktf.listMapper(computeUrlMapTestToTerraform, true)(this._test.internalValue),
            timeouts: computeUrlMapTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
}
exports.ComputeUrlMap = ComputeUrlMap;
_89 = JSII_RTTI_SYMBOL_1;
ComputeUrlMap[_89] = { fqn: "@cdktf/provider-google.computeUrlMap.ComputeUrlMap", version: "4.0.3" };
// =================
// STATIC PROPERTIES
// =================
ComputeUrlMap.tfResourceType = "google_compute_url_map";
//# sourceMappingURL=data:application/json;base64,