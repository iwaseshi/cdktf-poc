"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformResource = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const tokens_1 = require("./tokens");
const terraform_element_1 = require("./terraform-element");
const util_1 = require("./util");
const tfExpression_1 = require("./tfExpression");
const assert = require("assert");
const TERRAFORM_RESOURCE_SYMBOL = Symbol.for("cdktf/TerraformResource");
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformResource extends terraform_element_1.TerraformElement {
    constructor(scope, id, config) {
        super(scope, id, config.terraformResourceType);
        Object.defineProperty(this, TERRAFORM_RESOURCE_SYMBOL, { value: true });
        this.terraformResourceType = config.terraformResourceType;
        this.terraformGeneratorMetadata = config.terraformGeneratorMetadata;
        if (Array.isArray(config.dependsOn)) {
            this.dependsOn = config.dependsOn.map((dependency) => tfExpression_1.dependable(dependency));
        }
        this.count = config.count;
        this.provider = config.provider;
        this.lifecycle = config.lifecycle;
        this.forEach = config.forEach;
        this.provisioners = config.provisioners;
        this.connection = config.connection;
    }
    static isTerraformResource(x) {
        return (x !== null && typeof x === "object" && TERRAFORM_RESOURCE_SYMBOL in x);
    }
    getStringAttribute(terraformAttribute) {
        return tokens_1.Token.asString(this.interpolationForAttribute(terraformAttribute));
    }
    getNumberAttribute(terraformAttribute) {
        return tokens_1.Token.asNumber(this.interpolationForAttribute(terraformAttribute));
    }
    getListAttribute(terraformAttribute) {
        return tokens_1.Token.asList(this.interpolationForAttribute(terraformAttribute));
    }
    getBooleanAttribute(terraformAttribute) {
        return this.interpolationForAttribute(terraformAttribute);
    }
    getNumberListAttribute(terraformAttribute) {
        return tokens_1.Token.asNumberList(this.interpolationForAttribute(terraformAttribute));
    }
    getStringMapAttribute(terraformAttribute) {
        return tokens_1.Token.asStringMap(this.interpolationForAttribute(terraformAttribute));
    }
    getNumberMapAttribute(terraformAttribute) {
        return tokens_1.Token.asNumberMap(this.interpolationForAttribute(terraformAttribute));
    }
    getBooleanMapAttribute(terraformAttribute) {
        return tokens_1.Token.asBooleanMap(this.interpolationForAttribute(terraformAttribute));
    }
    getAnyMapAttribute(terraformAttribute) {
        return tokens_1.Token.asAnyMap(this.interpolationForAttribute(terraformAttribute));
    }
    get terraformMetaArguments() {
        assert(!this.forEach || typeof this.count === "undefined", `forEach and count are both set, but they are mutually exclusive. You can only use either of them. Check the resource at path: ${this.node.path}`);
        return {
            dependsOn: this.dependsOn,
            count: this.count,
            provider: this.provider?.fqn,
            lifecycle: this.lifecycle,
            forEach: this.forEach?._getForEachExpression(),
            connection: this.connection,
        };
    }
    // jsii can't handle abstract classes?
    synthesizeAttributes() {
        return {};
    }
    /**
     * Adds this resource to the terraform JSON output.
     */
    toTerraform() {
        const attributes = util_1.deepMerge(util_1.processDynamicAttributes(this.synthesizeAttributes()), util_1.keysToSnakeCase(this.terraformMetaArguments), {
            provisioner: this.provisioners?.map(({ type, ...props }) => ({
                [type]: util_1.keysToSnakeCase(props),
            })),
        }, this.rawOverrides);
        attributes["//"] = {
            ...(attributes["//"] ?? {}),
            ...this.constructNodeMetadata,
        };
        return {
            resource: {
                [this.terraformResourceType]: {
                    [this.friendlyUniqueId]: attributes,
                },
            },
        };
    }
    toMetadata() {
        if (!Object.keys(this.rawOverrides).length) {
            return {};
        }
        return {
            overrides: {
                [this.terraformResourceType]: Object.keys(this.rawOverrides),
            },
        };
    }
    interpolationForAttribute(terraformAttribute) {
        return tfExpression_1.ref(`${this.terraformResourceType}.${this.friendlyUniqueId}.${terraformAttribute}`, this.cdktfStack);
    }
}
exports.TerraformResource = TerraformResource;
_a = JSII_RTTI_SYMBOL_1;
TerraformResource[_a] = { fqn: "cdktf.TerraformResource", version: "0.14.3" };
//# sourceMappingURL=data:application/json;base64,