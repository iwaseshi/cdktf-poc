"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateEtcdV3 = exports.EtcdV3Backend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
/**
 * @deprecated CDK for Terraform no longer supports the etcdv3 backend. Terraform deprecated etcdv3 in v1.2.3 and removed it in v1.3.
 */
class EtcdV3Backend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "etcdv3");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateEtcdV3(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
exports.EtcdV3Backend = EtcdV3Backend;
_a = JSII_RTTI_SYMBOL_1;
EtcdV3Backend[_a] = { fqn: "cdktf.EtcdV3Backend", version: "0.14.3" };
/**
 * @deprecated CDK for Terraform no longer supports the etcdv3 backend. Terraform deprecated etcdv3 in v1.2.3 and removed it in v1.3.
 */
class DataTerraformRemoteStateEtcdV3 extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "etcdv3", config);
    }
}
exports.DataTerraformRemoteStateEtcdV3 = DataTerraformRemoteStateEtcdV3;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateEtcdV3[_b] = { fqn: "cdktf.DataTerraformRemoteStateEtcdV3", version: "0.14.3" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRjZHYzLWJhY2tlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJldGNkdjMtYmFja2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDREQUF3RDtBQUN4RCxrQ0FBMEM7QUFDMUMsc0VBR21DO0FBRW5DOztHQUVHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsb0NBQWdCO0lBQ2pELFlBQVksS0FBZ0IsRUFBbUIsS0FBeUI7UUFDdEUsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFEVyxVQUFLLEdBQUwsS0FBSyxDQUFvQjtJQUV4RSxDQUFDO0lBRVMsb0JBQW9CO1FBQzVCLE9BQU8sc0JBQWUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLHdCQUF3QixDQUM3QixLQUFnQixFQUNoQixJQUFZLEVBQ1osVUFBa0I7UUFFbEIsT0FBTyxJQUFJLDhCQUE4QixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDckQsR0FBRyxJQUFJLENBQUMsS0FBSztZQUNiLFNBQVMsRUFBRSx3QkFBd0I7U0FDcEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUFsQkgsc0NBbUJDOzs7QUFFRDs7R0FFRztBQUNILE1BQWEsOEJBQStCLFNBQVEsNkNBQW9CO0lBQ3RFLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLE1BQTRDO1FBRTVDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDOztBQVBILHdFQVFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1CYWNrZW5kIH0gZnJvbSBcIi4uL3RlcnJhZm9ybS1iYWNrZW5kXCI7XG5pbXBvcnQgeyBrZXlzVG9TbmFrZUNhc2UgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHtcbiAgVGVycmFmb3JtUmVtb3RlU3RhdGUsXG4gIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbn0gZnJvbSBcIi4uL3RlcnJhZm9ybS1yZW1vdGUtc3RhdGVcIjtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBDREsgZm9yIFRlcnJhZm9ybSBubyBsb25nZXIgc3VwcG9ydHMgdGhlIGV0Y2R2MyBiYWNrZW5kLiBUZXJyYWZvcm0gZGVwcmVjYXRlZCBldGNkdjMgaW4gdjEuMi4zIGFuZCByZW1vdmVkIGl0IGluIHYxLjMuXG4gKi9cbmV4cG9ydCBjbGFzcyBFdGNkVjNCYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEV0Y2RWM0JhY2tlbmRQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBcImJhY2tlbmRcIiwgXCJldGNkdjNcIik7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiBrZXlzVG9TbmFrZUNhc2UoeyAuLi50aGlzLnByb3BzIH0pO1xuICB9XG5cbiAgcHVibGljIGdldFJlbW90ZVN0YXRlRGF0YVNvdXJjZShcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBfZnJvbVN0YWNrOiBzdHJpbmdcbiAgKTogVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICAgIHJldHVybiBuZXcgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlRXRjZFYzKHNjb3BlLCBuYW1lLCB7XG4gICAgICAuLi50aGlzLnByb3BzLFxuICAgICAgd29ya3NwYWNlOiBcIiR7dGVycmFmb3JtLndvcmtzcGFjZX1cIixcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIENESyBmb3IgVGVycmFmb3JtIG5vIGxvbmdlciBzdXBwb3J0cyB0aGUgZXRjZHYzIGJhY2tlbmQuIFRlcnJhZm9ybSBkZXByZWNhdGVkIGV0Y2R2MyBpbiB2MS4yLjMgYW5kIHJlbW92ZWQgaXQgaW4gdjEuMy5cbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUV0Y2RWMyBleHRlbmRzIFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGNvbmZpZzogRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlRXRjZFYzQ29uZmlnXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgXCJldGNkdjNcIiwgY29uZmlnKTtcbiAgfVxufVxuLyoqXG4gKiBTdG9yZXMgdGhlIHN0YXRlIGluIHRoZSBldGNkIEtWIHN0b3JlIHdpdGggYSBnaXZlbiBwcmVmaXguXG4gKlxuICogVGhpcyBiYWNrZW5kIHN1cHBvcnRzIHN0YXRlIGxvY2tpbmcuXG4gKlxuICogUmVhZCBtb3JlIGFib3V0IHRoaXMgYmFja2VuZCBpbiB0aGUgVGVycmFmb3JtIGRvY3M6XG4gKiBodHRwczovL3d3dy50ZXJyYWZvcm0uaW8vbGFuZ3VhZ2Uvc2V0dGluZ3MvYmFja2VuZHMvZXRjZHYzXG4gKlxuICogQGRlcHJlY2F0ZWQgQ0RLIGZvciBUZXJyYWZvcm0gbm8gbG9uZ2VyIHN1cHBvcnRzIHRoZSBldGNkdjMgYmFja2VuZC4gVGVycmFmb3JtIGRlcHJlY2F0ZWQgZXRjZHYzIGluIHYxLjIuMyBhbmQgcmVtb3ZlZCBpdCBpbiB2MS4zLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV0Y2RWM0JhY2tlbmRQcm9wcyB7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIFRoZSBsaXN0IG9mICdldGNkJyBlbmRwb2ludHMgd2hpY2ggdG8gY29ubmVjdCB0by5cbiAgICovXG4gIHJlYWRvbmx5IGVuZHBvaW50czogc3RyaW5nW107XG4gIC8qKlxuICAgKiAoT3B0aW9uYWwpIFVzZXJuYW1lIHVzZWQgdG8gY29ubmVjdCB0byB0aGUgZXRjZCBjbHVzdGVyLlxuICAgKi9cbiAgcmVhZG9ubHkgdXNlcm5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAgKE9wdGlvbmFsKSBQYXNzd29yZCB1c2VkIHRvIGNvbm5lY3QgdG8gdGhlIGV0Y2QgY2x1c3Rlci5cbiAgICovXG4gIHJlYWRvbmx5IHBhc3N3b3JkPzogc3RyaW5nO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBBbiBvcHRpb25hbCBwcmVmaXggdG8gYmUgYWRkZWQgdG8ga2V5cyB3aGVuIHRvIHN0b3Jpbmcgc3RhdGUgaW4gZXRjZC5cbiAgICogRGVmYXVsdHMgdG8gXCJcIi5cbiAgICovXG4gIHJlYWRvbmx5IHByZWZpeD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgV2hldGhlciB0byBsb2NrIHN0YXRlIGFjY2Vzcy4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICovXG4gIHJlYWRvbmx5IGxvY2s/OiBib29sZWFuO1xuICAvKipcbiAgICogKE9wdGlvbmFsKSBUaGUgcGF0aCB0byBhIFBFTS1lbmNvZGVkIENBIGJ1bmRsZVxuICAgKiB3aXRoIHdoaWNoIHRvIHZlcmlmeSBjZXJ0aWZpY2F0ZXMgb2YgVExTLWVuYWJsZWQgZXRjZCBzZXJ2ZXJzLlxuICAgKi9cbiAgcmVhZG9ubHkgY2FjZXJ0UGF0aD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIHBhdGggdG8gYSBQRU0tZW5jb2RlZCBjZXJ0aWZpY2F0ZSB0byBwcm92aWRlIHRvIGV0Y2RcbiAgICogZm9yIHNlY3VyZSBjbGllbnQgaWRlbnRpZmljYXRpb24uXG4gICAqL1xuICByZWFkb25seSBjZXJ0UGF0aD86IHN0cmluZztcbiAgLyoqXG4gICAqIChPcHRpb25hbCkgVGhlIHBhdGggdG8gYSBQRU0tZW5jb2RlZCBrZXkgdG8gcHJvdmlkZSB0byBldGNkIGZvciBzZWN1cmUgY2xpZW50IGlkZW50aWZpY2F0aW9uLlxuICAgKi9cbiAgcmVhZG9ubHkga2V5UGF0aD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBDREsgZm9yIFRlcnJhZm9ybSBubyBsb25nZXIgc3VwcG9ydHMgdGhlIGV0Y2R2MyBiYWNrZW5kLiBUZXJyYWZvcm0gZGVwcmVjYXRlZCBldGNkdjMgaW4gdjEuMi4zIGFuZCByZW1vdmVkIGl0IGluIHYxLjMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlRXRjZFYzQ29uZmlnXG4gIGV4dGVuZHMgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxuICAgIEV0Y2RWM0JhY2tlbmRQcm9wcyB7fVxuIl19