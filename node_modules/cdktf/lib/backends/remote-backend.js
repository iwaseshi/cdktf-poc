"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrefixedRemoteWorkspaces = exports.NamedRemoteWorkspace = exports.DataTerraformRemoteState = exports.RemoteBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
const cloud_backend_1 = require("./cloud-backend");
// eslint-disable-next-line jsdoc/require-jsdoc
class RemoteBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "remote");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    toMetadata() {
        const cloud = cloud_backend_1.getHostNameType(this.props.hostname);
        return { ...super.toMetadata(), cloud };
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteState(scope, name, {
            ...this.props,
        });
    }
}
exports.RemoteBackend = RemoteBackend;
_a = JSII_RTTI_SYMBOL_1;
RemoteBackend[_a] = { fqn: "cdktf.RemoteBackend", version: "0.14.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteState extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "remote", config);
    }
}
exports.DataTerraformRemoteState = DataTerraformRemoteState;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteState[_b] = { fqn: "cdktf.DataTerraformRemoteState", version: "0.14.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class NamedRemoteWorkspace {
    constructor(name) {
        this.name = name;
    }
}
exports.NamedRemoteWorkspace = NamedRemoteWorkspace;
_c = JSII_RTTI_SYMBOL_1;
NamedRemoteWorkspace[_c] = { fqn: "cdktf.NamedRemoteWorkspace", version: "0.14.3" };
// eslint-disable-next-line jsdoc/require-jsdoc
class PrefixedRemoteWorkspaces {
    constructor(prefix) {
        this.prefix = prefix;
    }
}
exports.PrefixedRemoteWorkspaces = PrefixedRemoteWorkspaces;
_d = JSII_RTTI_SYMBOL_1;
PrefixedRemoteWorkspaces[_d] = { fqn: "cdktf.PrefixedRemoteWorkspaces", version: "0.14.3" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLWJhY2tlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZW1vdGUtYmFja2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDREQUF3RDtBQUN4RCxrQ0FBMEM7QUFDMUMsc0VBR21DO0FBQ25DLG1EQUFrRDtBQUVsRCwrQ0FBK0M7QUFDL0MsTUFBYSxhQUFjLFNBQVEsb0NBQWdCO0lBQ2pELFlBQVksS0FBZ0IsRUFBbUIsS0FBeUI7UUFDdEUsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFEVyxVQUFLLEdBQUwsS0FBSyxDQUFvQjtJQUV4RSxDQUFDO0lBRVMsb0JBQW9CO1FBQzVCLE9BQU8sc0JBQWUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLFVBQVU7UUFDZixNQUFNLEtBQUssR0FBRywrQkFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkQsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFTSx3QkFBd0IsQ0FDN0IsS0FBZ0IsRUFDaEIsSUFBWSxFQUNaLFVBQWtCO1FBRWxCLE9BQU8sSUFBSSx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQy9DLEdBQUcsSUFBSSxDQUFDLEtBQUs7U0FDZCxDQUFDLENBQUM7SUFDTCxDQUFDOztBQXRCSCxzQ0F1QkM7OztBQUVELCtDQUErQztBQUMvQyxNQUFhLHdCQUF5QixTQUFRLDZDQUFvQjtJQUNoRSxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixNQUE0QztRQUU1QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7QUFQSCw0REFRQzs7O0FBV0QsK0NBQStDO0FBQy9DLE1BQWEsb0JBQW9CO0lBQy9CLFlBQTBCLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFRO0lBQUcsQ0FBQzs7QUFENUMsb0RBRUM7OztBQUVELCtDQUErQztBQUMvQyxNQUFhLHdCQUF3QjtJQUNuQyxZQUEwQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7O0FBRDlDLDREQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1CYWNrZW5kIH0gZnJvbSBcIi4uL3RlcnJhZm9ybS1iYWNrZW5kXCI7XG5pbXBvcnQgeyBrZXlzVG9TbmFrZUNhc2UgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHtcbiAgVGVycmFmb3JtUmVtb3RlU3RhdGUsXG4gIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbn0gZnJvbSBcIi4uL3RlcnJhZm9ybS1yZW1vdGUtc3RhdGVcIjtcbmltcG9ydCB7IGdldEhvc3ROYW1lVHlwZSB9IGZyb20gXCIuL2Nsb3VkLWJhY2tlbmRcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBjbGFzcyBSZW1vdGVCYWNrZW5kIGV4dGVuZHMgVGVycmFmb3JtQmFja2VuZCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IFJlbW90ZUJhY2tlbmRQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBcImJhY2tlbmRcIiwgXCJyZW1vdGVcIik7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiBrZXlzVG9TbmFrZUNhc2UoeyAuLi50aGlzLnByb3BzIH0pO1xuICB9XG5cbiAgcHVibGljIHRvTWV0YWRhdGEoKSB7XG4gICAgY29uc3QgY2xvdWQgPSBnZXRIb3N0TmFtZVR5cGUodGhpcy5wcm9wcy5ob3N0bmFtZSk7XG4gICAgcmV0dXJuIHsgLi4uc3VwZXIudG9NZXRhZGF0YSgpLCBjbG91ZCB9O1xuICB9XG5cbiAgcHVibGljIGdldFJlbW90ZVN0YXRlRGF0YVNvdXJjZShcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBfZnJvbVN0YWNrOiBzdHJpbmdcbiAgKTogVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICAgIHJldHVybiBuZXcgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlKHNjb3BlLCBuYW1lLCB7XG4gICAgICAuLi50aGlzLnByb3BzLFxuICAgIH0pO1xuICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlIGV4dGVuZHMgVGVycmFmb3JtUmVtb3RlU3RhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgY29uZmlnOiBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVSZW1vdGVDb25maWdcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBcInJlbW90ZVwiLCBjb25maWcpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVtb3RlQmFja2VuZFByb3BzIHtcbiAgcmVhZG9ubHkgaG9zdG5hbWU/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IG9yZ2FuaXphdGlvbjogc3RyaW5nO1xuICByZWFkb25seSB0b2tlbj86IHN0cmluZztcbiAgcmVhZG9ubHkgd29ya3NwYWNlczogSVJlbW90ZVdvcmtzcGFjZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUmVtb3RlV29ya3NwYWNlIHt9XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgTmFtZWRSZW1vdGVXb3Jrc3BhY2UgaW1wbGVtZW50cyBJUmVtb3RlV29ya3NwYWNlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lOiBzdHJpbmcpIHt9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5leHBvcnQgY2xhc3MgUHJlZml4ZWRSZW1vdGVXb3Jrc3BhY2VzIGltcGxlbWVudHMgSVJlbW90ZVdvcmtzcGFjZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcHJlZml4OiBzdHJpbmcpIHt9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlUmVtb3RlQ29uZmlnXG4gIGV4dGVuZHMgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxuICAgIFJlbW90ZUJhY2tlbmRQcm9wcyB7fVxuIl19