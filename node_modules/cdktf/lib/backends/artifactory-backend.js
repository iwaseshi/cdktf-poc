"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateArtifactory = exports.ArtifactoryBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
/**
 * @deprecated CDK for Terraform no longer supports the artifactory backend. Terraform deprecated artifactory in v1.2.3 and removed it in v1.3.
 */
class ArtifactoryBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "artifactory");
        this.props = props;
    }
    synthesizeAttributes() {
        return util_1.keysToSnakeCase({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateArtifactory(scope, name, this.props);
    }
}
exports.ArtifactoryBackend = ArtifactoryBackend;
_a = JSII_RTTI_SYMBOL_1;
ArtifactoryBackend[_a] = { fqn: "cdktf.ArtifactoryBackend", version: "0.14.3" };
/**
 * @deprecated CDK for Terraform no longer supports the artifactory backend. Terraform deprecated artifactory in v1.2.3 and removed it in v1.3.
 */
class DataTerraformRemoteStateArtifactory extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "artifactory", config);
    }
}
exports.DataTerraformRemoteStateArtifactory = DataTerraformRemoteStateArtifactory;
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateArtifactory[_b] = { fqn: "cdktf.DataTerraformRemoteStateArtifactory", version: "0.14.3" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aWZhY3RvcnktYmFja2VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFydGlmYWN0b3J5LWJhY2tlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSw0REFBd0Q7QUFDeEQsa0NBQTBDO0FBQzFDLHNFQUdtQztBQUVuQzs7R0FFRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsb0NBQWdCO0lBQ3RELFlBQ0UsS0FBZ0IsRUFDQyxLQUE4QjtRQUUvQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUZ0QixVQUFLLEdBQUwsS0FBSyxDQUF5QjtJQUdqRCxDQUFDO0lBRVMsb0JBQW9CO1FBQzVCLE9BQU8sc0JBQWUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLHdCQUF3QixDQUM3QixLQUFnQixFQUNoQixJQUFZLEVBQ1osVUFBa0I7UUFFbEIsT0FBTyxJQUFJLG1DQUFtQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFFLENBQUM7O0FBbEJILGdEQW1CQzs7O0FBRUQ7O0dBRUc7QUFDSCxNQUFhLG1DQUFvQyxTQUFRLDZDQUFvQjtJQUMzRSxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixNQUFpRDtRQUVqRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7QUFQSCxrRkFRQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtQmFja2VuZCB9IGZyb20gXCIuLi90ZXJyYWZvcm0tYmFja2VuZFwiO1xuaW1wb3J0IHsga2V5c1RvU25ha2VDYXNlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7XG4gIFRlcnJhZm9ybVJlbW90ZVN0YXRlLFxuICBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcsXG59IGZyb20gXCIuLi90ZXJyYWZvcm0tcmVtb3RlLXN0YXRlXCI7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgQ0RLIGZvciBUZXJyYWZvcm0gbm8gbG9uZ2VyIHN1cHBvcnRzIHRoZSBhcnRpZmFjdG9yeSBiYWNrZW5kLiBUZXJyYWZvcm0gZGVwcmVjYXRlZCBhcnRpZmFjdG9yeSBpbiB2MS4yLjMgYW5kIHJlbW92ZWQgaXQgaW4gdjEuMy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFydGlmYWN0b3J5QmFja2VuZCBleHRlbmRzIFRlcnJhZm9ybUJhY2tlbmQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEFydGlmYWN0b3J5QmFja2VuZFByb3BzXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBcImJhY2tlbmRcIiwgXCJhcnRpZmFjdG9yeVwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplQXR0cmlidXRlcygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMucHJvcHMgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVtb3RlU3RhdGVEYXRhU291cmNlKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIF9mcm9tU3RhY2s6IHN0cmluZ1xuICApOiBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVBcnRpZmFjdG9yeShzY29wZSwgbmFtZSwgdGhpcy5wcm9wcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBDREsgZm9yIFRlcnJhZm9ybSBubyBsb25nZXIgc3VwcG9ydHMgdGhlIGFydGlmYWN0b3J5IGJhY2tlbmQuIFRlcnJhZm9ybSBkZXByZWNhdGVkIGFydGlmYWN0b3J5IGluIHYxLjIuMyBhbmQgcmVtb3ZlZCBpdCBpbiB2MS4zLlxuICovXG5leHBvcnQgY2xhc3MgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQXJ0aWZhY3RvcnkgZXh0ZW5kcyBUZXJyYWZvcm1SZW1vdGVTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBjb25maWc6IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUFydGlmYWN0b3J5Q29uZmlnXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgXCJhcnRpZmFjdG9yeVwiLCBjb25maWcpO1xuICB9XG59XG4vKipcbiAqIFN0b3JlcyB0aGUgc3RhdGUgYXMgYW4gYXJ0aWZhY3QgaW4gYSBnaXZlbiByZXBvc2l0b3J5IGluIEFydGlmYWN0b3J5LlxuICogR2VuZXJpYyBIVFRQIHJlcG9zaXRvcmllcyBhcmUgc3VwcG9ydGVkLCBhbmQgc3RhdGUgZnJvbSBkaWZmZXJlbnQgY29uZmlndXJhdGlvbnNcbiAqIG1heSBiZSBrZXB0IGF0IGRpZmZlcmVudCBzdWJwYXRocyB3aXRoaW4gdGhlIHJlcG9zaXRvcnkuXG4gKlxuICogTm90ZTogVGhlIFVSTCBtdXN0IGluY2x1ZGUgdGhlIHBhdGggdG8gdGhlIEFydGlmYWN0b3J5IGluc3RhbGxhdGlvbi5cbiAqIEl0IHdpbGwgbGlrZWx5IGVuZCBpbiAvYXJ0aWZhY3RvcnkuXG4gKlxuICogVGhpcyBiYWNrZW5kIGRvZXMgbm90IHN1cHBvcnQgc3RhdGUgbG9ja2luZy5cbiAqXG4gKiBSZWFkIG1vcmUgYWJvdXQgdGhpcyBiYWNrZW5kIGluIHRoZSBUZXJyYWZvcm0gZG9jczpcbiAqIGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pby9sYW5ndWFnZS9zZXR0aW5ncy9iYWNrZW5kcy9hcnRpZmFjdG9yeVxuICpcbiAqIEBkZXByZWNhdGVkIENESyBmb3IgVGVycmFmb3JtIG5vIGxvbmdlciBzdXBwb3J0cyB0aGUgYXJ0aWZhY3RvcnkgYmFja2VuZC4gVGVycmFmb3JtIGRlcHJlY2F0ZWQgYXJ0aWZhY3RvcnkgaW4gdjEuMi4zIGFuZCByZW1vdmVkIGl0IGluIHYxLjMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXJ0aWZhY3RvcnlCYWNrZW5kUHJvcHMge1xuICAvKipcbiAgICogKFJlcXVpcmVkKSAtIFRoZSB1c2VybmFtZVxuICAgKi9cbiAgcmVhZG9ubHkgdXNlcm5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgLSBUaGUgcGFzc3dvcmRcbiAgICovXG4gIHJlYWRvbmx5IHBhc3N3b3JkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIC0gVGhlIFVSTC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgaXMgdGhlIGJhc2UgdXJsIHRvIGFydGlmYWN0b3J5IG5vdCB0aGUgZnVsbCByZXBvIGFuZCBzdWJwYXRoLlxuICAgKi9cbiAgcmVhZG9ubHkgdXJsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIC0gVGhlIHJlcG9zaXRvcnkgbmFtZVxuICAgKi9cbiAgcmVhZG9ubHkgcmVwbzogc3RyaW5nO1xuICAvKipcbiAgICogKFJlcXVpcmVkKSAtIFBhdGggd2l0aGluIHRoZSByZXBvc2l0b3J5XG4gICAqL1xuICByZWFkb25seSBzdWJwYXRoOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgQ0RLIGZvciBUZXJyYWZvcm0gbm8gbG9uZ2VyIHN1cHBvcnRzIHRoZSBhcnRpZmFjdG9yeSBiYWNrZW5kLiBUZXJyYWZvcm0gZGVwcmVjYXRlZCBhcnRpZmFjdG9yeSBpbiB2MS4yLjMgYW5kIHJlbW92ZWQgaXQgaW4gdjEuMy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVBcnRpZmFjdG9yeUNvbmZpZ1xuICBleHRlbmRzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbiAgICBBcnRpZmFjdG9yeUJhY2tlbmRQcm9wcyB7fVxuIl19